{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/Media/Audio.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport DocumentTile from '../../Tile/DocumentTile';\nimport AudioAction from './AudioAction';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getAudioTitle } from '../../../Utils/Media';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport './Audio.css';\nimport InsertDriveFileIcon from './Document';\n\nclass Audio extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateMediaEnd = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          active: false,\n          playing: false,\n          currentTime: 0\n        });\n      }\n    };\n\n    this.onClientUpdateMediaPlay = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId,\n            playing = _this$props2.playing;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          playing: true\n        });\n      } else {\n        this.setState({\n          playing: false\n        });\n      }\n    };\n\n    this.onClientUpdateMediaPause = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          playing: false\n        });\n      }\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (!this.state.active) {\n          this.setState({\n            active: true,\n            currentTime: 0,\n            playing: true\n          });\n        }\n      } else if (this.state.active) {\n        this.setState({\n          active: false,\n          currentTime: 0,\n          playing: false\n        });\n      }\n    };\n\n    const _chatId = props.chatId,\n          _messageId = props.messageId;\n    const time = PlayerStore.time,\n          message = PlayerStore.message,\n          playing = PlayerStore.playing;\n    const active = message && message.chat_id === _chatId && message.id === _messageId;\n    this.state = {\n      active: active,\n      playing: active ? playing : false,\n      currentTime: active && time ? time.currentTime : 0,\n      duration: active && time ? time.duration : 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const _this$state = this.state,\n          active = _this$state.active,\n          playing = _this$state.playing,\n          currentTime = _this$state.currentTime,\n          duration = _this$state.duration;\n\n    if (nextState.active !== active) {\n      return true;\n    }\n\n    if (nextState.playing !== playing) {\n      return true;\n    }\n\n    if (nextState.currentTime !== currentTime) {\n      return true;\n    }\n\n    if (nextState.duration !== duration) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n    PlayerStore.on('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n    PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  componentWillUnmount() {\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n    PlayerStore.removeListener('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n    PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId,\n          audio = _this$props5.audio,\n          openMedia = _this$props5.openMedia;\n    const playing = this.state.playing;\n    if (!audio) return null;\n    const album_cover_thumbnail = audio.album_cover_thumbnail,\n          duration = audio.duration,\n          file = audio.audio;\n    const title = getAudioTitle(audio);\n    return React.createElement(\"div\", {\n      className: \"document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(DocumentTile, {\n      thumbnail: album_cover_thumbnail,\n      file: file,\n      openMedia: openMedia,\n      icon: React.createElement(ArrowDownwardIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }),\n      completeIcon: playing ? React.createElement(PauseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }) : React.createElement(PlayArrowIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"document-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"document-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"document-name\",\n      onClick: openMedia,\n      title: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, title)), React.createElement(AudioAction, {\n      chatId: chatId,\n      messageId: messageId,\n      duration: duration,\n      file: file,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })));\n  }\n\n}\n\nAudio.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  audio: PropTypes.object,\n  openMedia: PropTypes.func\n};\nexport default Audio;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/Media/Audio.js"],"names":["React","PropTypes","ArrowDownwardIcon","PlayArrowIcon","PauseIcon","DocumentTile","AudioAction","FileProgress","getAudioTitle","PlayerStore","InsertDriveFileIcon","Audio","Component","constructor","props","onClientUpdateMediaEnd","update","chatId","messageId","setState","active","playing","currentTime","onClientUpdateMediaPlay","onClientUpdateMediaPause","onClientUpdateMediaActive","state","time","message","chat_id","id","duration","shouldComponentUpdate","nextProps","nextState","nextContext","componentDidMount","on","componentWillUnmount","removeListener","render","audio","openMedia","album_cover_thumbnail","file","title","propTypes","number","object","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport DocumentTile from '../../Tile/DocumentTile';\nimport AudioAction from './AudioAction';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getAudioTitle } from '../../../Utils/Media';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport './Audio.css';\nimport InsertDriveFileIcon from './Document';\n\nclass Audio extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId, messageId } = props;\n\n        const { time, message, playing } = PlayerStore;\n        const active = message && message.chat_id === chatId && message.id === messageId;\n\n        this.state = {\n            active: active,\n            playing: active ? playing : false,\n            currentTime: active && time ? time.currentTime : 0,\n            duration: active && time ? time.duration : 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { active, playing, currentTime, duration } = this.state;\n\n        if (nextState.active !== active) {\n            return true;\n        }\n\n        if (nextState.playing !== playing) {\n            return true;\n        }\n\n        if (nextState.currentTime !== currentTime) {\n            return true;\n        }\n\n        if (nextState.duration !== duration) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n        PlayerStore.on('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n        PlayerStore.removeListener('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                active: false,\n                playing: false,\n                currentTime: 0\n            });\n        }\n    };\n\n    onClientUpdateMediaPlay = update => {\n        const { chatId, messageId, playing } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({ playing: true });\n        } else {\n            this.setState({ playing: false });\n        }\n    };\n\n    onClientUpdateMediaPause = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({ playing: false });\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (!this.state.active) {\n                this.setState({\n                    active: true,\n                    currentTime: 0,\n                    playing: true\n                });\n            }\n        } else if (this.state.active) {\n            this.setState({\n                active: false,\n                currentTime: 0,\n                playing: false\n            });\n        }\n    };\n\n    render() {\n        const { chatId, messageId, audio, openMedia } = this.props;\n        const { playing } = this.state;\n        if (!audio) return null;\n\n        const { album_cover_thumbnail, duration, audio: file } = audio;\n\n        const title = getAudioTitle(audio);\n\n        return (\n            <div className='document'>\n                <DocumentTile\n                    thumbnail={album_cover_thumbnail}\n                    file={file}\n                    openMedia={openMedia}\n                    icon={<ArrowDownwardIcon />}\n                    completeIcon={playing ? <PauseIcon /> : <PlayArrowIcon />}\n                />\n                <div className='document-content'>\n                    <div className='document-title'>\n                        <a className='document-name' onClick={openMedia} title={title}>\n                            {title}\n                        </a>\n                    </div>\n                    <AudioAction chatId={chatId} messageId={messageId} duration={duration} file={file} />\n                </div>\n            </div>\n        );\n    }\n}\n\nAudio.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    audio: PropTypes.object,\n    openMedia: PropTypes.func\n};\n\nexport default Audio;\n"]},"metadata":{},"sourceType":"module"}