{"ast":null,"code":"import _classCallCheck from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import{EventEmitter}from'events';import TdLibController from'../Controllers/TdLibController';var MessageStore=/*#__PURE__*/function(_EventEmitter){_inherits(MessageStore,_EventEmitter);function MessageStore(){var _this;_classCallCheck(this,MessageStore);_this=_possibleConstructorReturn(this,_getPrototypeOf(MessageStore).call(this));_this.reset=function(){_this.items=new Map();_this.selectedItems=new Map();};_this.onUpdate=function(update){switch(update['@type']){case'updateAuthorizationState':{var authorization_state=update.authorization_state;if(!authorization_state)break;switch(authorization_state['@type']){case'authorizationStateClosed':{_this.reset();break;}}break;}case'updateNewMessage':_this.set(update.message);_this.emit('updateNewMessage',update);break;case'updateDeleteMessages':_this.emit('updateDeleteMessages',update);break;case'updateMessageEdited':{var chat=_this.items.get(update.chat_id);if(chat){var message=chat.get(update.message_id);if(message){message.reply_markup=update.reply_markup;message.edit_date=update.edit_date;}}_this.emit('updateMessageEdited',update);break;}case'updateMessageViews':{var _chat=_this.items.get(update.chat_id);if(_chat){var _message=_chat.get(update.message_id);if(_message&&update.views>_message.views){_message.views=update.views;}}_this.emit('updateMessageViews',update);break;}case'updateMessageContent':{var _chat2=_this.items.get(update.chat_id);if(_chat2){var _message2=_chat2.get(update.message_id);if(_message2){update.old_content=_message2.content;_message2.content=update.new_content;}}_this.emit('updateMessageContent',update);break;}case'updateMessageContentOpened':{var chat_id=update.chat_id,message_id=update.message_id;var _message3=_this.get(chat_id,message_id);if(_message3){var content=_message3.content;switch(content['@type']){case'messageVoiceNote':{_message3.content.is_listened=true;break;}case'messageVideoNote':{_message3.content.is_viewed=true;break;}}}_this.emit('updateMessageContentOpened',update);break;}case'updateMessageSendSucceeded':{var _chat3=_this.items.get(update.message.chat_id);if(_chat3){var _message4=_chat3.get(update.old_message_id);if(_message4){_message4.sending_state=update.message.sending_state;}if(update.old_message_id!==update.message.id){_this.set(update.message);}}_this.set(update.message);_this.emit('updateMessageSendSucceeded',update);break;}case'updateMessageSendFailed':{if(update.message.sending_state){update.message.sending_state.error_code=update.error_code;update.message.sending_state.error_message=update.error_message;}var _chat4=_this.items.get(update.message.chat_id);if(_chat4){var _message5=_chat4.get(update.old_message_id);if(_message5){_message5.sending_state=update.message.sending_state;if(_message5.sending_state){_message5.sending_state.error_code=update.error_code;_message5.sending_state.error_message=update.error_message;}}if(update.old_message_id!==update.message.id){_this.set(update.message);}}_this.emit('updateMessageSendFailed',update);break;}default:break;}};_this.onClientUpdate=function(update){switch(update['@type']){case'clientUpdateChatId':{if(_this.selectedItems.size>0){_this.selectedItems.clear();_this.emit('clientUpdateClearSelection',{'@type':'clientUpdateClearSelection'});}break;}case'clientUpdateClearSelection':{_this.selectedItems.clear();_this.emit('clientUpdateClearSelection',update);break;}case'clientUpdateMessageHighlighted':{_this.emit('clientUpdateMessageHighlighted',update);break;}case'clientUpdateMessageSelected':{if(update.selected){_this.selectedItems.set(\"chatId=\".concat(update.chatId,\"_messageId=\").concat(update.messageId),{chatId:update.chatId,messageId:update.messageId});}else{_this.selectedItems.delete(\"chatId=\".concat(update.chatId,\"_messageId=\").concat(update.messageId));}_this.emit('clientUpdateMessageSelected',update);break;}case'clientUpdateMessagesInView':{_this.emit('clientUpdateMessagesInView',update);break;}case'clientUpdateOpenReply':{_this.emit('clientUpdateOpenReply',update);break;}case'clientUpdateReply':{_this.emit('clientUpdateReply',update);break;}}};_this.addTdLibListener=function(){TdLibController.addListener('update',_this.onUpdate);TdLibController.addListener('clientUpdate',_this.onClientUpdate);};_this.removeTdLibListener=function(){TdLibController.removeListener('update',_this.onUpdate);TdLibController.removeListener('clientUpdate',_this.onClientUpdate);};_this.reset();_this.addTdLibListener();_this.setMaxListeners(Infinity);return _this;}_createClass(MessageStore,[{key:\"load\",value:function load(chatId,messageId){var _this2=this;TdLibController.send({'@type':'getMessage',chat_id:chatId,message_id:messageId}).then(function(message){_this2.set(message);_this2.emit('getMessageResult',message);}).catch(function(error){var deletedMessage={'@type':'deletedMessage',chat_id:chatId,id:messageId,content:null};_this2.set(deletedMessage);_this2.emit('getMessageResult',deletedMessage);});}},{key:\"get\",value:function get(chatId,messageId){var chat=this.items.get(chatId);if(!chat){//this.load(chatId, messageId);\nreturn null;}var message=chat.get(messageId);if(!message){//this.load(chatId, messageId);\nreturn null;}return message;}},{key:\"set\",value:function set(message){var chat=this.items.get(message.chat_id);if(!chat){chat=new Map();this.items.set(message.chat_id,chat);}chat.set(message.id,message);}},{key:\"setItems\",value:function setItems(messages){for(var i=0;i<messages.length;i++){this.set(messages[i]);}}}]);return MessageStore;}(EventEmitter);var store=new MessageStore();window.message=store;export default store;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Stores/MessageStore.js"],"names":["EventEmitter","TdLibController","MessageStore","reset","items","Map","selectedItems","onUpdate","update","authorization_state","set","message","emit","chat","get","chat_id","message_id","reply_markup","edit_date","views","old_content","content","new_content","is_listened","is_viewed","old_message_id","sending_state","id","error_code","error_message","onClientUpdate","size","clear","selected","chatId","messageId","delete","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","send","then","catch","error","deletedMessage","messages","i","length","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass MessageStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.selectedItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateNewMessage':\n                this.set(update.message);\n                this.emit('updateNewMessage', update);\n                break;\n            case 'updateDeleteMessages':\n                this.emit('updateDeleteMessages', update);\n                break;\n            case 'updateMessageEdited': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message) {\n                        message.reply_markup = update.reply_markup;\n                        message.edit_date = update.edit_date;\n                    }\n                }\n                this.emit('updateMessageEdited', update);\n                break;\n            }\n            case 'updateMessageViews': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message && update.views > message.views) {\n                        message.views = update.views;\n                    }\n                }\n                this.emit('updateMessageViews', update);\n                break;\n            }\n            case 'updateMessageContent': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message) {\n                        update.old_content = message.content;\n                        message.content = update.new_content;\n                    }\n                }\n                this.emit('updateMessageContent', update);\n                break;\n            }\n            case 'updateMessageContentOpened': {\n                const { chat_id, message_id } = update;\n\n                const message = this.get(chat_id, message_id);\n                if (message) {\n                    const { content } = message;\n                    switch (content['@type']) {\n                        case 'messageVoiceNote': {\n                            message.content.is_listened = true;\n                            break;\n                        }\n                        case 'messageVideoNote': {\n                            message.content.is_viewed = true;\n                            break;\n                        }\n                    }\n                }\n\n                this.emit('updateMessageContentOpened', update);\n                break;\n            }\n            case 'updateMessageSendSucceeded': {\n                const chat = this.items.get(update.message.chat_id);\n                if (chat) {\n                    const message = chat.get(update.old_message_id);\n                    if (message) {\n                        message.sending_state = update.message.sending_state;\n                    }\n                    if (update.old_message_id !== update.message.id) {\n                        this.set(update.message);\n                    }\n                }\n\n                this.set(update.message);\n                this.emit('updateMessageSendSucceeded', update);\n                break;\n            }\n            case 'updateMessageSendFailed': {\n                if (update.message.sending_state) {\n                    update.message.sending_state.error_code = update.error_code;\n                    update.message.sending_state.error_message = update.error_message;\n                }\n\n                const chat = this.items.get(update.message.chat_id);\n                if (chat) {\n                    const message = chat.get(update.old_message_id);\n                    if (message) {\n                        message.sending_state = update.message.sending_state;\n                        if (message.sending_state) {\n                            message.sending_state.error_code = update.error_code;\n                            message.sending_state.error_message = update.error_message;\n                        }\n                    }\n                    if (update.old_message_id !== update.message.id) {\n                        this.set(update.message);\n                    }\n                }\n                this.emit('updateMessageSendFailed', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateChatId': {\n                if (this.selectedItems.size > 0) {\n                    this.selectedItems.clear();\n\n                    this.emit('clientUpdateClearSelection', { '@type': 'clientUpdateClearSelection' });\n                }\n\n                break;\n            }\n            case 'clientUpdateClearSelection': {\n                this.selectedItems.clear();\n\n                this.emit('clientUpdateClearSelection', update);\n                break;\n            }\n            case 'clientUpdateMessageHighlighted': {\n                this.emit('clientUpdateMessageHighlighted', update);\n                break;\n            }\n            case 'clientUpdateMessageSelected': {\n                if (update.selected) {\n                    this.selectedItems.set(`chatId=${update.chatId}_messageId=${update.messageId}`, {\n                        chatId: update.chatId,\n                        messageId: update.messageId\n                    });\n                } else {\n                    this.selectedItems.delete(`chatId=${update.chatId}_messageId=${update.messageId}`);\n                }\n\n                this.emit('clientUpdateMessageSelected', update);\n                break;\n            }\n            case 'clientUpdateMessagesInView': {\n                this.emit('clientUpdateMessagesInView', update);\n                break;\n            }\n            case 'clientUpdateOpenReply': {\n                this.emit('clientUpdateOpenReply', update);\n                break;\n            }\n            case 'clientUpdateReply': {\n                this.emit('clientUpdateReply', update);\n                break;\n            }\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    load(chatId, messageId) {\n        TdLibController.send({\n            '@type': 'getMessage',\n            chat_id: chatId,\n            message_id: messageId\n        })\n            .then(message => {\n                this.set(message);\n                this.emit('getMessageResult', message);\n            })\n            .catch(error => {\n                const deletedMessage = {\n                    '@type': 'deletedMessage',\n                    chat_id: chatId,\n                    id: messageId,\n                    content: null\n                };\n                this.set(deletedMessage);\n                this.emit('getMessageResult', deletedMessage);\n            });\n    }\n\n    get(chatId, messageId) {\n        let chat = this.items.get(chatId);\n        if (!chat) {\n            //this.load(chatId, messageId);\n            return null;\n        }\n\n        let message = chat.get(messageId);\n        if (!message) {\n            //this.load(chatId, messageId);\n            return null;\n        }\n\n        return message;\n    }\n\n    set(message) {\n        let chat = this.items.get(message.chat_id);\n        if (!chat) {\n            chat = new Map();\n            this.items.set(message.chat_id, chat);\n        }\n\n        chat.set(message.id, message);\n    }\n\n    setItems(messages) {\n        for (let i = 0; i < messages.length; i++) {\n            this.set(messages[i]);\n        }\n    }\n}\n\nconst store = new MessageStore();\nwindow.message = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}