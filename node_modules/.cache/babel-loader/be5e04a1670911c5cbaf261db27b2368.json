{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Popup/StickerSetDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport ShareStickerSetButton from './ShareStickerSetButton';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerPreview from '../ColumnMiddle/StickerPreview';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickerSetDialog.css';\n\nconst styles = theme => ({\n  contentRoot: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    maxHeight: 480,\n    padding: '0 12px 24px',\n    background: 'transparent'\n  },\n  paperRoot: {\n    width: 344\n  },\n  dialogTitleRoot: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  dialogRoot: {\n    color: theme.palette.text.primary\n  },\n  shareButtonRoot: {\n    margin: '-24px -12px -24px 0'\n  },\n  typographyRoot: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  }\n});\n\nclass StickerSetDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUpdateInstalledStickerSets = update => {\n      const stickerSet = StickerStore.stickerSet;\n      this.setState({\n        stickerSet\n      });\n    };\n\n    this.handleClientUpdateStickerSet = update => {\n      const stickerSet = update.stickerSet;\n      this.setState({\n        stickerSet\n      });\n\n      if (stickerSet) {\n        const store = FileStore.getStore();\n        loadStickerSetContent(store, stickerSet);\n      }\n    };\n\n    this.handleClose = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSet',\n        stickerSet: null\n      });\n    };\n\n    this.handleDone = () => {\n      const stickerSet = this.state.stickerSet;\n      if (!stickerSet) return;\n      const is_installed = stickerSet.is_installed;\n      TdLibController.send({\n        '@type': 'changeStickerSet',\n        set_id: stickerSet.id,\n        is_installed: !is_installed\n      });\n      this.handleClose();\n    };\n\n    this.loadPreviewContent = stickerId => {\n      const stickerSet = this.state.stickerSet;\n      const stickers = stickerSet.stickers;\n      const sticker = stickers.find(x => x.sticker.id === stickerId);\n      if (!sticker) return;\n      const store = FileStore.getStore();\n      loadStickerContent(store, sticker, null);\n      const preloadStickers = this.getNeighborStickers(stickerId);\n      preloadStickers.forEach(x => {\n        loadStickerContent(store, x, null);\n      });\n    };\n\n    this.getNeighborStickers = stickerId => {\n      const stickerSet = this.state.stickerSet;\n      if (!stickerSet) return [];\n      const stickers = stickerSet.stickers;\n      if (!stickers) return [];\n      const indexes = [];\n      const index = stickers.findIndex(x => x.sticker.id === stickerId);\n      if (index === -1) return [];\n      const STICKERS_PER_ROW = 4;\n      const row = Math.floor(index / STICKERS_PER_ROW);\n      const column = index % STICKERS_PER_ROW;\n      const prevRow = row - 1;\n      const nextRow = row + 1;\n      const prevColumn = column - 1;\n      const nextColumn = column + 1;\n\n      if (prevRow >= 0) {\n        if (prevColumn >= 0) {\n          indexes.push(STICKERS_PER_ROW * prevRow + prevColumn);\n        }\n\n        indexes.push(STICKERS_PER_ROW * prevRow + column);\n\n        if (nextColumn < STICKERS_PER_ROW) {\n          indexes.push(STICKERS_PER_ROW * prevRow + nextColumn);\n        }\n      }\n\n      if (prevColumn >= 0) {\n        indexes.push(STICKERS_PER_ROW * row + prevColumn);\n      }\n\n      if (nextColumn < STICKERS_PER_ROW) {\n        indexes.push(STICKERS_PER_ROW * row + nextColumn);\n      }\n\n      if (nextRow < Math.ceil(stickers.length / STICKERS_PER_ROW)) {\n        if (prevColumn >= 0) {\n          indexes.push(STICKERS_PER_ROW * nextRow + prevColumn);\n        }\n\n        indexes.push(STICKERS_PER_ROW * nextRow + column);\n\n        if (nextColumn < STICKERS_PER_ROW) {\n          indexes.push(STICKERS_PER_ROW * nextRow + nextColumn);\n        }\n      }\n\n      return indexes.map(i => stickers[i]);\n    };\n\n    this.handleMouseUp = () => {\n      const sticker = null;\n      this.setState({\n        sticker\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker\n      });\n      this.mouseDown = false;\n      document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    this.handleMouseEnter = event => {\n      const stickerId = Number(event.currentTarget.dataset.stickerId);\n      const sticker = this.getSticker(stickerId);\n      if (!sticker) return;\n      if (!this.mouseDown) return;\n      this.setState({\n        sticker\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker\n      });\n      this.loadPreviewContent(stickerId);\n    };\n\n    this.handleMouseDown = event => {\n      const stickerId = Number(event.currentTarget.dataset.stickerId);\n      const sticker = this.getSticker(stickerId);\n      if (!sticker) return;\n      this.setState({\n        sticker\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker\n      });\n      this.loadPreviewContent(stickerId);\n      this.mouseDown = true;\n      document.addEventListener('mouseup', this.handleMouseUp);\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    };\n\n    this.state = {\n      stickerSet: StickerStore.stickerSet,\n      stickerId: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const _this$state = this.state,\n          stickerSet = _this$state.stickerSet,\n          sticker = _this$state.sticker;\n    return stickerSet !== nextState.stickerSet || sticker !== nextState.sticker;\n  }\n\n  componentDidMount() {\n    StickerStore.on('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n    StickerStore.on('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n  }\n\n  componentWillUnmount() {\n    StickerStore.removeListener('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n    StickerStore.removeListener('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n  }\n\n  // handleMouseOver = event => {\n  //     const stickerId = Number(event.target.dataset.stickerId);\n  //     if (!stickerId) return;\n  //\n  //     if (!this.mouseDown) return;\n  //\n  //     this.setState({ stickerId });\n  //     this.loadPreviewContent(stickerId);\n  // };\n  // handleMouseDown = event => {\n  //     const stickerId = Number(event.target.dataset.stickerId);\n  //     if (!stickerId) return;\n  //\n  //     this.setState({ stickerId });\n  //     this.loadPreviewContent(stickerId);\n  //\n  //     this.mouseDown = true;\n  //     document.addEventListener('mouseup', this.handleMouseUp);\n  //\n  //     event.preventDefault();\n  //     event.stopPropagation();\n  //     return false;\n  // };\n  getSticker(stickerId) {\n    const stickerSet = this.state.stickerSet;\n    if (!stickerSet) return null;\n    const stickers = stickerSet.stickers;\n    const stickerIndex = stickers.findIndex(x => x.sticker.id === stickerId);\n    return stickerIndex !== -1 ? stickers[stickerIndex] : null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          t = _this$props.t,\n          classes = _this$props.classes;\n    const _this$state2 = this.state,\n          stickerSet = _this$state2.stickerSet,\n          sticker = _this$state2.sticker;\n    if (!stickerSet) return null;\n    const title = stickerSet.title,\n          stickers = stickerSet.stickers,\n          is_installed = stickerSet.is_installed;\n    const items = stickers.map(x => React.createElement(\"div\", {\n      className: \"sticker-set-dialog-item\",\n      key: x.sticker.id,\n      \"data-sticker-id\": x.sticker.id,\n      style: {\n        width: 76,\n        height: 76\n      },\n      onMouseEnter: this.handleMouseEnter,\n      onMouseDown: this.handleMouseDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(Sticker, {\n      key: x.sticker.id,\n      className: \"sticker-set-dialog-item-sticker\",\n      sticker: x,\n      autoplay: false,\n      blur: false,\n      displaySize: STICKER_SMALL_DISPLAY_SIZE,\n      preview: true,\n      source: StickerSourceEnum.STICKER_SET,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"sticker-set-dialog-item-emoji\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, x.emoji)));\n    return React.createElement(Dialog, {\n      className: classes.dialogRoot,\n      open: true,\n      transitionDuration: 0,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"sticker-set-dialog-title-text\",\n      classes: {\n        paper: classes.paperRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"sticker-set-dialog-title-text\",\n      className: classNames(classes.dialogTitleRoot, {\n        [classes.disablePointerEvents]: Boolean(sticker)\n      }),\n      disableTypography: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      className: classes.typographyRoot,\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, title), React.createElement(ShareStickerSetButton, {\n      className: classes.shareButtonRoot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })), React.createElement(DialogContent, {\n      classes: {\n        root: classes.contentRoot\n      },\n      onMouseOver: this.handleMouseOver,\n      onMouseOut: this.handleMouseOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, items), React.createElement(DialogActions, {\n      className: classNames({\n        [classes.disablePointerEvents]: Boolean(sticker)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, t('Cancel')), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleDone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, is_installed ? t('StickersRemove') : t('Add'))), React.createElement(StickerPreview, {\n      sticker: sticker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }));\n  }\n\n}\n\nStickerSetDialog.propTypes = {};\nconst enhance = compose(withStyles(styles), withTranslation());\nexport default enhance(StickerSetDialog);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Popup/StickerSetDialog.js"],"names":["React","PropTypes","classNames","compose","withStyles","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogTitle","Typography","ShareStickerSetButton","Sticker","StickerSourceEnum","StickerPreview","loadStickerContent","loadStickerSetContent","STICKER_SMALL_DISPLAY_SIZE","FileStore","StickerStore","TdLibController","styles","theme","contentRoot","display","flexWrap","maxHeight","padding","background","paperRoot","width","dialogTitleRoot","flexDirection","alignItems","dialogRoot","color","palette","text","primary","shareButtonRoot","margin","typographyRoot","flexGrow","flexShrink","disablePointerEvents","pointerEvents","StickerSetDialog","Component","constructor","props","handleUpdateInstalledStickerSets","update","stickerSet","setState","handleClientUpdateStickerSet","store","getStore","handleClose","clientUpdate","handleDone","state","is_installed","send","set_id","id","loadPreviewContent","stickerId","stickers","sticker","find","x","preloadStickers","getNeighborStickers","forEach","indexes","index","findIndex","STICKERS_PER_ROW","row","Math","floor","column","prevRow","nextRow","prevColumn","nextColumn","push","ceil","length","map","i","handleMouseUp","mouseDown","document","removeEventListener","handleMouseEnter","event","Number","currentTarget","dataset","getSticker","handleMouseDown","addEventListener","preventDefault","stopPropagation","shouldComponentUpdate","nextProps","nextState","nextContext","componentDidMount","on","componentWillUnmount","removeListener","stickerIndex","render","t","classes","title","items","height","STICKER_SET","emoji","paper","Boolean","root","handleMouseOver","handleMouseOut","propTypes","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport ShareStickerSetButton from './ShareStickerSetButton';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerPreview from '../ColumnMiddle/StickerPreview';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickerSetDialog.css';\n\nconst styles = theme => ({\n    contentRoot: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxHeight: 480,\n        padding: '0 12px 24px',\n        background: 'transparent'\n    },\n    paperRoot: {\n        width: 344\n    },\n    dialogTitleRoot: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    dialogRoot: {\n        color: theme.palette.text.primary\n    },\n    shareButtonRoot: {\n        margin: '-24px -12px -24px 0'\n    },\n    typographyRoot: {\n        flexGrow: 1,\n        flexShrink: 1\n    },\n    disablePointerEvents: {\n        pointerEvents: 'none'\n    }\n});\n\nclass StickerSetDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stickerSet: StickerStore.stickerSet,\n            stickerId: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { stickerSet, sticker } = this.state;\n\n        return stickerSet !== nextState.stickerSet || sticker !== nextState.sticker;\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n        StickerStore.on('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n    }\n\n    componentWillUnmount() {\n        StickerStore.removeListener('clientUpdateStickerSet', this.handleClientUpdateStickerSet);\n        StickerStore.removeListener('updateInstalledStickerSets', this.handleUpdateInstalledStickerSets);\n    }\n\n    handleUpdateInstalledStickerSets = update => {\n        const { stickerSet } = StickerStore;\n\n        this.setState({ stickerSet });\n    };\n\n    handleClientUpdateStickerSet = update => {\n        const { stickerSet } = update;\n\n        this.setState({ stickerSet });\n\n        if (stickerSet) {\n            const store = FileStore.getStore();\n            loadStickerSetContent(store, stickerSet);\n        }\n    };\n\n    handleClose = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSet',\n            stickerSet: null\n        });\n    };\n\n    handleDone = () => {\n        const { stickerSet } = this.state;\n        if (!stickerSet) return;\n\n        const { is_installed } = stickerSet;\n\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: stickerSet.id,\n            is_installed: !is_installed\n        });\n\n        this.handleClose();\n    };\n\n    loadPreviewContent = stickerId => {\n        const { stickerSet } = this.state;\n        const { stickers } = stickerSet;\n        const sticker = stickers.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const preloadStickers = this.getNeighborStickers(stickerId);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    getNeighborStickers = stickerId => {\n        const { stickerSet } = this.state;\n        if (!stickerSet) return [];\n\n        const { stickers } = stickerSet;\n        if (!stickers) return [];\n\n        const indexes = [];\n        const index = stickers.findIndex(x => x.sticker.id === stickerId);\n        if (index === -1) return [];\n\n        const STICKERS_PER_ROW = 4;\n        const row = Math.floor(index / STICKERS_PER_ROW);\n        const column = index % STICKERS_PER_ROW;\n\n        const prevRow = row - 1;\n        const nextRow = row + 1;\n        const prevColumn = column - 1;\n        const nextColumn = column + 1;\n\n        if (prevRow >= 0) {\n            if (prevColumn >= 0) {\n                indexes.push(STICKERS_PER_ROW * prevRow + prevColumn);\n            }\n            indexes.push(STICKERS_PER_ROW * prevRow + column);\n            if (nextColumn < STICKERS_PER_ROW) {\n                indexes.push(STICKERS_PER_ROW * prevRow + nextColumn);\n            }\n        }\n\n        if (prevColumn >= 0) {\n            indexes.push(STICKERS_PER_ROW * row + prevColumn);\n        }\n        if (nextColumn < STICKERS_PER_ROW) {\n            indexes.push(STICKERS_PER_ROW * row + nextColumn);\n        }\n\n        if (nextRow < Math.ceil(stickers.length / STICKERS_PER_ROW)) {\n            if (prevColumn >= 0) {\n                indexes.push(STICKERS_PER_ROW * nextRow + prevColumn);\n            }\n            indexes.push(STICKERS_PER_ROW * nextRow + column);\n            if (nextColumn < STICKERS_PER_ROW) {\n                indexes.push(STICKERS_PER_ROW * nextRow + nextColumn);\n            }\n        }\n\n        return indexes.map(i => stickers[i]);\n    };\n\n    // handleMouseOver = event => {\n    //     const stickerId = Number(event.target.dataset.stickerId);\n    //     if (!stickerId) return;\n    //\n    //     if (!this.mouseDown) return;\n    //\n    //     this.setState({ stickerId });\n    //     this.loadPreviewContent(stickerId);\n    // };\n\n    // handleMouseDown = event => {\n    //     const stickerId = Number(event.target.dataset.stickerId);\n    //     if (!stickerId) return;\n    //\n    //     this.setState({ stickerId });\n    //     this.loadPreviewContent(stickerId);\n    //\n    //     this.mouseDown = true;\n    //     document.addEventListener('mouseup', this.handleMouseUp);\n    //\n    //     event.preventDefault();\n    //     event.stopPropagation();\n    //     return false;\n    // };\n\n    getSticker(stickerId) {\n        const { stickerSet } = this.state;\n        if (!stickerSet) return null;\n\n        const { stickers } = stickerSet;\n\n        const stickerIndex = stickers.findIndex(x => x.sticker.id === stickerId);\n        return stickerIndex !== -1 ? stickers[stickerIndex] : null;\n    }\n\n    handleMouseUp = () => {\n        const sticker = null;\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        const sticker = this.getSticker(stickerId);\n        if (!sticker) return;\n\n        if (!this.mouseDown) return;\n\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.loadPreviewContent(stickerId);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        const sticker = this.getSticker(stickerId);\n        if (!sticker) return;\n\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    render() {\n        const { t, classes } = this.props;\n        const { stickerSet, sticker } = this.state;\n        if (!stickerSet) return null;\n\n        const { title, stickers, is_installed } = stickerSet;\n\n        const items = stickers.map(x => (\n            <div\n                className='sticker-set-dialog-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                style={{ width: 76, height: 76 }}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseDown={this.handleMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-dialog-item-sticker'\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    preview\n                    source={StickerSourceEnum.STICKER_SET}\n                />\n                <div className='sticker-set-dialog-item-emoji'>{x.emoji}</div>\n            </div>\n        ));\n\n        return (\n            <Dialog\n                className={classes.dialogRoot}\n                open\n                transitionDuration={0}\n                onClose={this.handleClose}\n                aria-labelledby='sticker-set-dialog-title-text'\n                classes={{ paper: classes.paperRoot }}>\n                <DialogTitle\n                    id='sticker-set-dialog-title-text'\n                    className={classNames(classes.dialogTitleRoot, {\n                        [classes.disablePointerEvents]: Boolean(sticker)\n                    })}\n                    disableTypography>\n                    <Typography variant='h6' className={classes.typographyRoot} noWrap>\n                        {title}\n                    </Typography>\n                    <ShareStickerSetButton className={classes.shareButtonRoot} />\n                </DialogTitle>\n                <DialogContent\n                    classes={{ root: classes.contentRoot }}\n                    onMouseOver={this.handleMouseOver}\n                    onMouseOut={this.handleMouseOut}>\n                    {items}\n                </DialogContent>\n                <DialogActions className={classNames({ [classes.disablePointerEvents]: Boolean(sticker) })}>\n                    <Button color='primary' onClick={this.handleClose}>\n                        {t('Cancel')}\n                    </Button>\n                    <Button color='primary' onClick={this.handleDone}>\n                        {is_installed ? t('StickersRemove') : t('Add')}\n                    </Button>\n                </DialogActions>\n                {<StickerPreview sticker={sticker} />}\n            </Dialog>\n        );\n    }\n}\n\nStickerSetDialog.propTypes = {};\n\nconst enhance = compose(\n    withStyles(styles),\n    withTranslation()\n);\n\nexport default enhance(StickerSetDialog);\n"]},"metadata":{},"sourceType":"module"}