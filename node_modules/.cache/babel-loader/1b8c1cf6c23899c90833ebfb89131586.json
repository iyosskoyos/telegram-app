{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Tile/UserTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getUserLetters } from '../../Utils/User';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './UserTile.css';\n\nclass UserTile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateUserBlob = update => {\n      const userId = this.props.userId;\n      if (userId !== update.userId) return;\n\n      if (this.state.loaded) {\n        this.setState({\n          loaded: false\n        });\n      } else {\n        this.forceUpdate();\n      }\n    };\n\n    this.onClientUpdateChatBlob = update => {\n      const userId = this.props.userId;\n      const chatId = update.chatId;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return;\n      if (!chat.type) return;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup':\n          {\n            return;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            if (chat.type.user_id !== userId) return;\n\n            if (this.state.loaded) {\n              this.setState({\n                loaded: false\n              });\n            } else {\n              this.forceUpdate();\n            }\n          }\n      }\n    };\n\n    this.onUpdateChatPhoto = update => {\n      const userId = this.props.userId;\n      const chat_id = update.chat_id,\n            photo = update.photo;\n      const chat = ChatStore.get(chat_id);\n      if (!chat) return;\n      if (!chat.type) return;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup':\n          {\n            return;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            if (chat.type.user_id !== userId) return;\n\n            if (this.state.loaded) {\n              this.setState({\n                loaded: false\n              });\n            } else {\n              this.forceUpdate();\n            }\n\n            if (photo) {\n              const store = FileStore.getStore();\n              loadChatContent(store, chat);\n            }\n          }\n      }\n    };\n\n    this.onUpdateChatTitle = update => {\n      const userId = this.props.userId;\n      const chat = ChatStore.get(update.chat_id);\n      if (!chat) return;\n      if (!chat.type) return;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup':\n          {\n            return;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            if (chat.type.user_id !== userId && !chat.photo) return;\n            this.forceUpdate();\n          }\n      }\n    };\n\n    this.handleSelect = event => {\n      const _this$props = this.props,\n            userId = _this$props.userId,\n            onSelect = _this$props.onSelect;\n      if (!onSelect) return;\n      event.stopPropagation();\n      onSelect(userId);\n    };\n\n    this.handleLoad = () => {\n      this.setState({\n        loaded: true\n      });\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      this.state = {\n        user: UserStore.get(this.props.userId),\n        loaded: false\n      };\n    } else {\n      this.state = {\n        loaded: false\n      };\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.userId !== this.props.userId) {\n      return true;\n    }\n\n    if (nextState.loaded !== this.state.loaded) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n    FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n    ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n    FileStore.removeListener('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    ChatStore.removeListener('updateChatPhoto', this.onUpdateChatPhoto);\n    ChatStore.removeListener('updateChatTitle', this.onUpdateChatTitle);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          userId = _this$props2.userId,\n          fistName = _this$props2.fistName,\n          lastName = _this$props2.lastName,\n          onSelect = _this$props2.onSelect;\n    const loaded = this.state.loaded;\n    const user = UserStore.get(userId);\n    if (!user && !(fistName || lastName)) return null;\n    const letters = getUserLetters(userId, fistName, lastName);\n    const src = getSrc(user && user.profile_photo ? user.profile_photo.small : null);\n    const tileLoaded = src && loaded;\n    const tileColor = \"tile_color_\".concat(Math.abs(userId) % 8 + 1);\n    const className = classNames('tile-photo', {\n      [tileColor]: !tileLoaded\n    }, {\n      pointer: onSelect\n    });\n    return React.createElement(\"div\", {\n      className: \"user-tile\",\n      onClick: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, !tileLoaded && React.createElement(\"div\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tile-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, letters)), src && React.createElement(\"img\", {\n      className: className,\n      src: src,\n      onLoad: this.handleLoad,\n      draggable: false,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }));\n  }\n\n}\n\nUserTile.propTypes = {\n  userId: PropTypes.number.isRequired,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  onSelect: PropTypes.func\n};\nexport default UserTile;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Tile/UserTile.js"],"names":["React","Component","PropTypes","classNames","getUserLetters","getSrc","loadChatContent","UserStore","ChatStore","FileStore","UserTile","constructor","props","onClientUpdateUserBlob","update","userId","state","loaded","setState","forceUpdate","onClientUpdateChatBlob","chatId","chat","get","type","user_id","onUpdateChatPhoto","chat_id","photo","store","getStore","onUpdateChatTitle","handleSelect","event","onSelect","stopPropagation","handleLoad","process","env","NODE_ENV","user","shouldComponentUpdate","nextProps","nextState","componentDidMount","on","componentWillUnmount","removeListener","render","fistName","lastName","letters","src","profile_photo","small","tileLoaded","tileColor","Math","abs","className","pointer","propTypes","number","isRequired","firstName","string","func"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getUserLetters } from '../../Utils/User';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './UserTile.css';\n\nclass UserTile extends Component {\n    constructor(props) {\n        super(props);\n\n        if (process.env.NODE_ENV !== 'production') {\n            this.state = {\n                user: UserStore.get(this.props.userId),\n                loaded: false\n            };\n        } else {\n            this.state = {\n                loaded: false\n            };\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.userId !== this.props.userId) {\n            return true;\n        }\n\n        if (nextState.loaded !== this.state.loaded) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n        FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n        ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateUserBlob', this.onClientUpdateUserBlob);\n        FileStore.removeListener('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n        ChatStore.removeListener('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.removeListener('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    onClientUpdateUserBlob = update => {\n        const { userId } = this.props;\n\n        if (userId !== update.userId) return;\n\n        if (this.state.loaded) {\n            this.setState({ loaded: false });\n        } else {\n            this.forceUpdate();\n        }\n    };\n\n    onClientUpdateChatBlob = update => {\n        const { userId } = this.props;\n        const { chatId } = update;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n            case 'chatTypeSupergroup': {\n                return;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                if (chat.type.user_id !== userId) return;\n\n                if (this.state.loaded) {\n                    this.setState({ loaded: false });\n                } else {\n                    this.forceUpdate();\n                }\n            }\n        }\n    };\n\n    onUpdateChatPhoto = update => {\n        const { userId } = this.props;\n        const { chat_id, photo } = update;\n\n        const chat = ChatStore.get(chat_id);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n            case 'chatTypeSupergroup': {\n                return;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                if (chat.type.user_id !== userId) return;\n\n                if (this.state.loaded) {\n                    this.setState({ loaded: false });\n                } else {\n                    this.forceUpdate();\n                }\n\n                if (photo) {\n                    const store = FileStore.getStore();\n                    loadChatContent(store, chat);\n                }\n            }\n        }\n    };\n\n    onUpdateChatTitle = update => {\n        const { userId } = this.props;\n\n        const chat = ChatStore.get(update.chat_id);\n        if (!chat) return;\n        if (!chat.type) return;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup':\n            case 'chatTypeSupergroup': {\n                return;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                if (chat.type.user_id !== userId && !chat.photo) return;\n\n                this.forceUpdate();\n            }\n        }\n    };\n\n    handleSelect = event => {\n        const { userId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        event.stopPropagation();\n        onSelect(userId);\n    };\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    render() {\n        const { userId, fistName, lastName, onSelect } = this.props;\n        const { loaded } = this.state;\n\n        const user = UserStore.get(userId);\n        if (!user && !(fistName || lastName)) return null;\n\n        const letters = getUserLetters(userId, fistName, lastName);\n        const src = getSrc(user && user.profile_photo ? user.profile_photo.small : null);\n        const tileLoaded = src && loaded;\n\n        const tileColor = `tile_color_${(Math.abs(userId) % 8) + 1}`;\n        const className = classNames('tile-photo', { [tileColor]: !tileLoaded }, { pointer: onSelect });\n\n        return (\n            <div className='user-tile' onClick={this.handleSelect}>\n                {!tileLoaded && (\n                    <div className={className}>\n                        <span className='tile-text'>{letters}</span>\n                    </div>\n                )}\n                {src && <img className={className} src={src} onLoad={this.handleLoad} draggable={false} alt='' />}\n            </div>\n        );\n    }\n}\n\nUserTile.propTypes = {\n    userId: PropTypes.number.isRequired,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    onSelect: PropTypes.func\n};\n\nexport default UserTile;\n"]},"metadata":{},"sourceType":"module"}