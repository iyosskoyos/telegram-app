{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Storage = function () {\n  function Storage(options) {\n    _classCallCheck(this, Storage);\n\n    this.store = options.store;\n  }\n\n  _createClass(Storage, [{\n    key: 'setItem',\n    value: function setItem(key, value) {\n      if (this.store) {\n        try {\n          this.store.setItem(key, value);\n        } catch (e) {// f.log('failed to set value for key \"' + key + '\" to localStorage.');\n        }\n      }\n    }\n  }, {\n    key: 'getItem',\n    value: function getItem(key, value) {\n      if (this.store) {\n        try {\n          return this.store.getItem(key, value);\n        } catch (e) {// f.log('failed to get value for key \"' + key + '\" from localStorage.');\n        }\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Storage;\n}();\n\nfunction getDefaults() {\n  return {\n    prefix: 'i18next_res_',\n    expirationTime: 7 * 24 * 60 * 60 * 1000,\n    versions: {},\n    store: window.localStorage\n  };\n}\n\nvar Cache = function () {\n  function Cache(services) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Cache);\n\n    this.init(services, options);\n    this.type = 'backend';\n  }\n\n  _createClass(Cache, [{\n    key: 'init',\n    value: function init(services) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.services = services;\n      this.options = _extends({}, getDefaults(), this.options, options);\n      this.storage = new Storage(this.options);\n    }\n  }, {\n    key: 'read',\n    value: function read(language, namespace, callback) {\n      var nowMS = new Date().getTime();\n\n      if (!this.storage.store) {\n        return callback(null, null);\n      }\n\n      var local = this.storage.getItem('' + this.options.prefix + language + '-' + namespace);\n\n      if (local) {\n        local = JSON.parse(local);\n\n        if ( // expiration field is mandatory, and should not be expired\n        local.i18nStamp && local.i18nStamp + this.options.expirationTime > nowMS // there should be no language version set, or if it is, it should match the one in translation\n        && this.options.versions[language] === local.i18nVersion) {\n          delete local.i18nVersion;\n          delete local.i18nStamp;\n          return callback(null, local);\n        }\n      }\n\n      return callback(null, null);\n    }\n  }, {\n    key: 'save',\n    value: function save(language, namespace, data) {\n      if (this.storage.store) {\n        data.i18nStamp = new Date().getTime(); // language version (if set)\n\n        if (this.options.versions[language]) {\n          data.i18nVersion = this.options.versions[language];\n        } // save\n\n\n        this.storage.setItem('' + this.options.prefix + language + '-' + namespace, JSON.stringify(data));\n      }\n    }\n  }]);\n\n  return Cache;\n}();\n\nCache.type = 'backend';\nexports.default = Cache;","map":null,"metadata":{},"sourceType":"script"}