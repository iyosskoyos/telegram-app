{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/ColumnRight/SharedMedia/SharedMediaBase.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SharedDocument from '../../Tile/SharedMedia/SharedDocument';\nimport SharedMediaHeader from './SharedMediaHeader';\nimport { between, insertByOrder } from '../../../Utils/Common';\nimport { loadMessageContents } from '../../../Utils/File';\nimport { messageComparatorDesc } from '../../../Utils/Message';\nimport { SHARED_MESSAGE_SLICE_LIMIT } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './SharedMediaBase.css';\n\nclass SharedMediaBase extends React.Component {\n  static getStyles(theme) {\n    return {\n      sharedMediaList: {},\n      sharedMediaSearchList: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n      }\n    };\n  }\n\n  constructor(props) {\n    if (new.target === SharedMediaBase) {\n      throw new TypeError('Cannot construct SharedMediaBase instances directly');\n    } // console.log('SharedMediaBase.ctor');\n\n\n    super(props);\n\n    this.onUpdateMessageContent = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            migratedChatId = _this$props.migratedChatId;\n      const _this$state = this.state,\n            items = _this$state.items,\n            migratedItems = _this$state.migratedItems;\n      const chat_id = update.chat_id,\n            message_id = update.message_id,\n            old_content = update.old_content,\n            new_content = update.new_content;\n      const message = MessageStore.get(chat_id, message_id); // console.log(`SharedDocuments.onUpdateMessageContent chat_id=${chat_id} message_id=${message_id}`, this.state.items);\n\n      if (chat_id === chatId) {\n        if (!items.length) return;\n        if (!between(message_id, items[0].id, items[items.length - 1].id, true)) return;\n        const index = items.findIndex(x => x.id === message_id);\n\n        if (this.isValidContent(new_content)) {\n          if (index === -1) {\n            // add new document\n            this.setState({\n              items: insertByOrder(items, message, messageComparatorDesc)\n            });\n          } else {\n            // replace document\n            this.setState({\n              items: [...items.slice(0, index), message, ...items.slice(index + 1)]\n            });\n          }\n        } else {\n          if (index === -1) {} else {\n            // remove none document\n            this.setState({\n              items: items.filter(x => x.id !== message_id)\n            });\n          }\n        }\n      } else if (chat_id === migratedChatId) {\n        if (!migratedItems.length) return;\n        if (!between(message_id, migratedItems[0].id, migratedItems[migratedItems.length - 1].id, true)) return;\n        const index = migratedItems.findIndex(x => x.id === message_id);\n\n        if (this.isValidContent(new_content)) {\n          if (index === -1) {\n            // add new document\n            this.setState({\n              migratedItems: insertByOrder(migratedItems, message, messageComparatorDesc)\n            });\n          } else {\n            // replace document\n            this.setState({\n              migratedItems: [...migratedItems.slice(0, index), message, ...migratedItems.slice(index + 1)]\n            });\n          }\n        } else {\n          if (index === -1) {} else {\n            // remove none document\n            this.setState({\n              migratedItems: migratedItems.filter(x => x.id !== message_id)\n            });\n          }\n        }\n      }\n    };\n\n    this.onUpdateNewMessage = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            migratedChatId = _this$props2.migratedChatId;\n      const _this$state2 = this.state,\n            items = _this$state2.items,\n            migratedItems = _this$state2.migratedItems;\n      const message = update.message;\n      const chat_id = message.chat_id;\n      if (chat_id !== chatId) return;\n      if (!this.isValidMessage(message)) return;\n      const store = FileStore.getStore();\n      loadMessageContents(store, [message]);\n\n      if (chat_id === chatId) {\n        this.setState({\n          items: [message].concat(items)\n        });\n      } else if (chat_id === migratedChatId) {\n        this.setState({\n          migratedItems: [message].concat(migratedItems)\n        });\n      }\n    };\n\n    this.onUpdateDeleteMessages = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            migratedChatId = _this$props3.migratedChatId;\n      const _this$state3 = this.state,\n            items = _this$state3.items,\n            migratedItems = _this$state3.migratedItems;\n      const chat_id = update.chat_id,\n            message_ids = update.message_ids;\n      const map = new Map(message_ids.map(x => [x, x]));\n\n      const callback = () => {\n        if (this.state.items.length + this.state.migratedItems.length < SHARED_MESSAGE_SLICE_LIMIT) {\n          this.onLoadNext(this.params);\n        }\n      };\n\n      if (chat_id === chatId) {\n        this.setState({\n          items: items.filter(x => !map.has(x.id))\n        }, callback);\n      } else if (chat_id === migratedChatId) {\n        this.setState({\n          migratedItems: migratedItems.filter(x => !map.has(x.id))\n        }, callback);\n      }\n    };\n\n    this.loadContent = () => {\n      this.params = {\n        loading: false,\n        completed: false,\n        migrateCompleted: false,\n        items: [],\n        migratedItems: [],\n        filter: this.getSearchFilter()\n      };\n      this.onLoadNext(this.params);\n    };\n\n    this.onLoadNext = async (params, loadIncomplete = true) => {\n      const chatId = this.props.chatId;\n      const completed = params.completed,\n            filter = params.filter,\n            items = params.items,\n            loading = params.loading; // console.log('SharedMediaBase.onLoadNext', completed, loading);\n\n      if (loading) return;\n      if (completed) return;\n      const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n      params.loading = true;\n      const result = await TdLibController.send({\n        '@type': 'searchChatMessages',\n        chat_id: chatId,\n        query: '',\n        sender_user_id: 0,\n        from_message_id: fromMessageId,\n        offset: 0,\n        limit: SHARED_MESSAGE_SLICE_LIMIT,\n        filter\n      }).finally(() => {\n        params.loading = false;\n      });\n      const messages = result.messages;\n      params.completed = messages.length === 0 || messages.total_count === 0;\n      params.items = items.concat(messages.filter(this.isValidMessage));\n      const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n      MessageStore.setItems(result.messages);\n      const store = FileStore.getStore();\n      loadMessageContents(store, result.messages);\n      this.setState({\n        items: params.items\n      });\n\n      if (params.completed) {\n        this.onLoadMigratedNext(params, true);\n      } else if (incompleteResults) {\n        this.onLoadNext(params, false);\n      }\n    };\n\n    this.onLoadMigratedNext = async (params, loadIncomplete = true) => {\n      const migratedChatId = this.props.migratedChatId;\n      const filter = params.filter,\n            loading = params.loading,\n            migrateCompleted = params.migrateCompleted,\n            items = params.migratedItems; // console.log('SharedMediaBase.onLoadMigratedNext', migratedChatId, loading, migrateCompleted);\n\n      if (!migratedChatId) return;\n      if (loading) return;\n      if (migrateCompleted) return;\n      const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n      params.loading = true;\n      const result = await TdLibController.send({\n        '@type': 'searchChatMessages',\n        chat_id: migratedChatId,\n        query: '',\n        sender_user_id: 0,\n        from_message_id: fromMessageId,\n        offset: 0,\n        limit: SHARED_MESSAGE_SLICE_LIMIT,\n        filter\n      }).finally(() => {\n        params.loading = false;\n      });\n      const messages = result.messages;\n      params.migratedItems = items.concat(messages.filter(this.isValidMessage));\n      params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n      const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n      if (params.migrateCompleted) return;\n      MessageStore.setItems(messages);\n      const store = FileStore.getStore();\n      loadMessageContents(store, messages);\n      this.setState({\n        migratedItems: params.migratedItems\n      });\n\n      if (incompleteResults) {\n        this.onLoadMigratedNext(params, false);\n      }\n    };\n\n    this.handleScroll = () => {\n      if (!this.listRef) return;\n      const list = this.listRef.current;\n      if (!list) return;\n      const params = this.params;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n        if (params && !params.completed) {\n          this.onLoadNext(params);\n        } else {\n          this.onLoadMigratedNext(params);\n        }\n      }\n    };\n\n    this.handleHeaderClick = () => {\n      const list = this.listRef.current;\n      if (!list) return;\n      list.scrollTop = 0;\n    };\n\n    this.handleSearchScroll = () => {\n      if (!this.searchListRef) return;\n      const list = this.searchListRef.current;\n      if (!list) return;\n      const searchParams = this.searchParams;\n      if (!searchParams) return;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n        if (!searchParams.completed) {\n          this.onSearchNext(searchParams);\n        } else {\n          this.onSearchMigratedNext(searchParams);\n        }\n      }\n    };\n\n    this.onSearchNext = async (params, loadIncomplete = true) => {\n      const chatId = this.props.chatId;\n      const completed = params.completed,\n            filter = params.filter,\n            items = params.items,\n            loading = params.loading,\n            query = params.query; // console.log('SharedMediaBase.onSearchNext', completed, loading);\n\n      if (completed) return;\n      if (loading) return;\n      const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n      params.loading = true;\n      const result = await TdLibController.send({\n        '@type': 'searchChatMessages',\n        chat_id: chatId,\n        query,\n        sender_user_id: 0,\n        from_message_id: fromMessageId,\n        offset: 0,\n        limit: SHARED_MESSAGE_SLICE_LIMIT,\n        filter\n      }).finally(() => {\n        params.loading = false;\n      });\n      const messages = result.messages;\n      params.items = items.concat(messages.filter(this.isValidMessage));\n      params.completed = messages.length === 0 || messages.total_count === 0;\n      const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n      if (this.searchParams !== params) return;\n      MessageStore.setItems(messages);\n      const store = FileStore.getStore();\n      loadMessageContents(store, messages);\n      this.setState({\n        searchItems: params.items,\n        searchMigratedItems: params.migratedItems\n      });\n\n      if (params.completed) {\n        this.onSearchMigratedNext(params, true);\n      } else if (incompleteResults) {\n        this.onSearchNext(params, false);\n      }\n    };\n\n    this.onSearchMigratedNext = async (params, loadIncomplete = true) => {\n      const migratedChatId = this.props.migratedChatId;\n      const filter = params.filter,\n            loading = params.loading,\n            items = params.migratedItems,\n            migrateCompleted = params.migrateCompleted,\n            query = params.query; // console.log('SharedMediaBase.onSearchMigratedNext', migratedChatId, loading, migrateCompleted);\n\n      if (!migratedChatId) return;\n      if (loading) return;\n      if (migrateCompleted) return;\n      const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n      params.loading = true;\n      const result = await TdLibController.send({\n        '@type': 'searchChatMessages',\n        chat_id: migratedChatId,\n        query,\n        sender_user_id: 0,\n        from_message_id: fromMessageId,\n        offset: 0,\n        limit: SHARED_MESSAGE_SLICE_LIMIT,\n        filter\n      }).finally(() => {\n        params.loading = false;\n      });\n      const messages = result.messages;\n      params.migratedItems = items.concat(messages.filter(this.isValidMessage));\n      params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n      const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n      if (this.searchParams !== params) return;\n      MessageStore.setItems(messages);\n      const store = FileStore.getStore();\n      loadMessageContents(store, messages);\n      this.setState({\n        searchItems: params.items,\n        searchMigratedItems: params.migratedItems\n      });\n\n      if (incompleteResults) {\n        this.onSearchMigratedNext(params, false);\n      }\n    };\n\n    this.handleSearch = async text => {\n      const query = text ? text.trim() : '';\n\n      if (!query) {\n        this.handleCloseSearch();\n        return;\n      }\n\n      this.searchParams = {\n        query,\n        completed: false,\n        migrateCompleted: false,\n        items: [],\n        migratedItems: [],\n        filter: this.getSearchFilter()\n      };\n      this.onSearchNext(this.searchParams, true);\n    };\n\n    this.handleCloseSearch = () => {\n      this.searchParams = null;\n      this.setState({\n        searchItems: [],\n        searchMigratedItems: []\n      });\n    };\n\n    this.isValidMessage = message => {\n      if (!message) return false;\n      return this.isValidContent(message.content);\n    };\n\n    this.listRef = React.createRef();\n    this.searchListRef = React.createRef();\n    this.state = {\n      items: [],\n      migratedItems: [],\n      searchItems: [],\n      searchMigratedItems: []\n    };\n  }\n\n  hasSearch() {\n    return true;\n  }\n\n  isValidContent(content) {\n    throw new Error('Virtual method isValidContent is not implemented');\n  }\n\n  getItemTemplate(message) {\n    const migratedChatId = this.props.migratedChatId;\n    const chat_id = message.chat_id,\n          id = message.id;\n    return React.createElement(SharedDocument, {\n      key: \"chat_id=\".concat(chat_id, \"_message_id=\").concat(id),\n      chatId: chat_id,\n      messageId: id,\n      showOpenMessage: chat_id !== migratedChatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }\n\n  getSearchFilter() {\n    throw new Error('Virtual method getSearchFilter is not implemented');\n  }\n\n  getHeader() {\n    throw new Error('Virtual method getHeader is not implemented');\n  }\n\n  componentDidMount() {\n    this.loadContent();\n    MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n    MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n  }\n\n  componentWillUnmount() {\n    MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n    MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n    MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          classes = _this$props4.classes,\n          minHeight = _this$props4.minHeight,\n          onClose = _this$props4.onClose,\n          popup = _this$props4.popup;\n    const _this$state4 = this.state,\n          items = _this$state4.items,\n          migratedItems = _this$state4.migratedItems,\n          searchItems = _this$state4.searchItems,\n          searchMigratedItems = _this$state4.searchMigratedItems;\n    const searchParams = this.searchParams;\n    const messages = items.concat(migratedItems).map(x => this.getItemTemplate(x));\n    const searchMessages = searchItems.concat(searchMigratedItems).map(x => this.getItemTemplate(x));\n    console.log('SharedMediaBase.render', items, messages);\n    return React.createElement(React.Fragment, null, React.createElement(SharedMediaHeader, {\n      title: this.getHeader(),\n      onClick: this.handleHeaderClick,\n      onClose: onClose,\n      onSearch: this.hasSearch() ? this.handleSearch : null,\n      onCloseSearch: this.handleCloseSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.listRef,\n      className: classNames('shared-media-list', classes.sharedMediaList),\n      onScroll: this.handleScroll,\n      style: {\n        minHeight: popup ? minHeight : null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, messages), Boolean(searchParams) && React.createElement(\"div\", {\n      ref: this.searchListRef,\n      className: classNames('shared-media-search-list', classes.sharedMediaSearchList),\n      onScroll: this.handleSearchScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, searchMessages));\n  }\n\n}\n\nSharedMediaBase.propTypes = {};\nexport default SharedMediaBase;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/ColumnRight/SharedMedia/SharedMediaBase.js"],"names":["React","PropTypes","classNames","SharedDocument","SharedMediaHeader","between","insertByOrder","loadMessageContents","messageComparatorDesc","SHARED_MESSAGE_SLICE_LIMIT","FileStore","MessageStore","TdLibController","SharedMediaBase","Component","getStyles","theme","sharedMediaList","sharedMediaSearchList","background","palette","type","default","constructor","props","new","target","TypeError","onUpdateMessageContent","update","chatId","migratedChatId","state","items","migratedItems","chat_id","message_id","old_content","new_content","message","get","length","id","index","findIndex","x","isValidContent","setState","slice","filter","onUpdateNewMessage","isValidMessage","store","getStore","concat","onUpdateDeleteMessages","message_ids","map","Map","callback","onLoadNext","params","has","loadContent","loading","completed","migrateCompleted","getSearchFilter","loadIncomplete","fromMessageId","result","send","query","sender_user_id","from_message_id","offset","limit","finally","messages","total_count","incompleteResults","setItems","onLoadMigratedNext","handleScroll","listRef","list","current","scrollTop","offsetHeight","scrollHeight","handleHeaderClick","handleSearchScroll","searchListRef","searchParams","onSearchNext","onSearchMigratedNext","searchItems","searchMigratedItems","handleSearch","text","trim","handleCloseSearch","content","createRef","hasSearch","Error","getItemTemplate","getHeader","componentDidMount","on","componentWillUnmount","removeListener","render","classes","minHeight","onClose","popup","searchMessages","console","log","Boolean","propTypes"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SharedDocument from '../../Tile/SharedMedia/SharedDocument';\nimport SharedMediaHeader from './SharedMediaHeader';\nimport { between, insertByOrder } from '../../../Utils/Common';\nimport { loadMessageContents } from '../../../Utils/File';\nimport { messageComparatorDesc } from '../../../Utils/Message';\nimport { SHARED_MESSAGE_SLICE_LIMIT } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './SharedMediaBase.css';\n\nclass SharedMediaBase extends React.Component {\n    static getStyles(theme) {\n        return {\n            sharedMediaList: {},\n            sharedMediaSearchList: {\n                background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n            }\n        };\n    }\n\n    constructor(props) {\n        if (new.target === SharedMediaBase) {\n            throw new TypeError('Cannot construct SharedMediaBase instances directly');\n        }\n\n        // console.log('SharedMediaBase.ctor');\n\n        super(props);\n\n        this.listRef = React.createRef();\n        this.searchListRef = React.createRef();\n\n        this.state = {\n            items: [],\n            migratedItems: [],\n            searchItems: [],\n            searchMigratedItems: []\n        };\n    }\n\n    hasSearch() {\n        return true;\n    }\n\n    isValidContent(content) {\n        throw new Error('Virtual method isValidContent is not implemented');\n    }\n\n    getItemTemplate(message) {\n        const { migratedChatId } = this.props;\n        const { chat_id, id } = message;\n\n        return (\n            <SharedDocument\n                key={`chat_id=${chat_id}_message_id=${id}`}\n                chatId={chat_id}\n                messageId={id}\n                showOpenMessage={chat_id !== migratedChatId}\n            />\n        );\n    }\n\n    getSearchFilter() {\n        throw new Error('Virtual method getSearchFilter is not implemented');\n    }\n\n    getHeader() {\n        throw new Error('Virtual method getHeader is not implemented');\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n    }\n\n    onUpdateMessageContent = update => {\n        const { chatId, migratedChatId } = this.props;\n        const { items, migratedItems } = this.state;\n\n        const { chat_id, message_id, old_content, new_content } = update;\n\n        const message = MessageStore.get(chat_id, message_id);\n        // console.log(`SharedDocuments.onUpdateMessageContent chat_id=${chat_id} message_id=${message_id}`, this.state.items);\n\n        if (chat_id === chatId) {\n            if (!items.length) return;\n            if (!between(message_id, items[0].id, items[items.length - 1].id, true)) return;\n\n            const index = items.findIndex(x => x.id === message_id);\n            if (this.isValidContent(new_content)) {\n                if (index === -1) {\n                    // add new document\n                    this.setState({ items: insertByOrder(items, message, messageComparatorDesc) });\n                } else {\n                    // replace document\n                    this.setState({ items: [...items.slice(0, index), message, ...items.slice(index + 1)] });\n                }\n            } else {\n                if (index === -1) {\n                } else {\n                    // remove none document\n                    this.setState({ items: items.filter(x => x.id !== message_id) });\n                }\n            }\n        } else if (chat_id === migratedChatId) {\n            if (!migratedItems.length) return;\n            if (!between(message_id, migratedItems[0].id, migratedItems[migratedItems.length - 1].id, true)) return;\n\n            const index = migratedItems.findIndex(x => x.id === message_id);\n            if (this.isValidContent(new_content)) {\n                if (index === -1) {\n                    // add new document\n                    this.setState({\n                        migratedItems: insertByOrder(migratedItems, message, messageComparatorDesc)\n                    });\n                } else {\n                    // replace document\n                    this.setState({\n                        migratedItems: [...migratedItems.slice(0, index), message, ...migratedItems.slice(index + 1)]\n                    });\n                }\n            } else {\n                if (index === -1) {\n                } else {\n                    // remove none document\n                    this.setState({ migratedItems: migratedItems.filter(x => x.id !== message_id) });\n                }\n            }\n        }\n    };\n\n    onUpdateNewMessage = update => {\n        const { chatId, migratedChatId } = this.props;\n        const { items, migratedItems } = this.state;\n\n        const { message } = update;\n        const { chat_id } = message;\n\n        if (chat_id !== chatId) return;\n        if (!this.isValidMessage(message)) return;\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n\n        if (chat_id === chatId) {\n            this.setState({ items: [message].concat(items) });\n        } else if (chat_id === migratedChatId) {\n            this.setState({ migratedItems: [message].concat(migratedItems) });\n        }\n    };\n\n    onUpdateDeleteMessages = update => {\n        const { chatId, migratedChatId } = this.props;\n        const { items, migratedItems } = this.state;\n\n        const { chat_id, message_ids } = update;\n\n        const map = new Map(message_ids.map(x => [x, x]));\n        const callback = () => {\n            if (this.state.items.length + this.state.migratedItems.length < SHARED_MESSAGE_SLICE_LIMIT) {\n                this.onLoadNext(this.params);\n            }\n        };\n\n        if (chat_id === chatId) {\n            this.setState({ items: items.filter(x => !map.has(x.id)) }, callback);\n        } else if (chat_id === migratedChatId) {\n            this.setState({ migratedItems: migratedItems.filter(x => !map.has(x.id)) }, callback);\n        }\n    };\n\n    loadContent = () => {\n        this.params = {\n            loading: false,\n            completed: false,\n            migrateCompleted: false,\n            items: [],\n            migratedItems: [],\n            filter: this.getSearchFilter()\n        };\n        this.onLoadNext(this.params);\n    };\n\n    onLoadNext = async (params, loadIncomplete = true) => {\n        const { chatId } = this.props;\n        const { completed, filter, items, loading } = params;\n\n        // console.log('SharedMediaBase.onLoadNext', completed, loading);\n\n        if (loading) return;\n        if (completed) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.completed = messages.length === 0 || messages.total_count === 0;\n        params.items = items.concat(messages.filter(this.isValidMessage));\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        MessageStore.setItems(result.messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n\n        this.setState({ items: params.items });\n\n        if (params.completed) {\n            this.onLoadMigratedNext(params, true);\n        } else if (incompleteResults) {\n            this.onLoadNext(params, false);\n        }\n    };\n\n    onLoadMigratedNext = async (params, loadIncomplete = true) => {\n        const { migratedChatId } = this.props;\n        const { filter, loading, migrateCompleted, migratedItems: items } = params;\n\n        // console.log('SharedMediaBase.onLoadMigratedNext', migratedChatId, loading, migrateCompleted);\n\n        if (!migratedChatId) return;\n        if (loading) return;\n        if (migrateCompleted) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: migratedChatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.migratedItems = items.concat(messages.filter(this.isValidMessage));\n        params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        if (params.migrateCompleted) return;\n\n        MessageStore.setItems(messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n\n        this.setState({ migratedItems: params.migratedItems });\n\n        if (incompleteResults) {\n            this.onLoadMigratedNext(params, false);\n        }\n    };\n\n    handleScroll = () => {\n        if (!this.listRef) return;\n\n        const list = this.listRef.current;\n        if (!list) return;\n\n        const { params } = this;\n\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            if (params && !params.completed) {\n                this.onLoadNext(params);\n            } else {\n                this.onLoadMigratedNext(params);\n            }\n        }\n    };\n\n    handleHeaderClick = () => {\n        const list = this.listRef.current;\n        if (!list) return;\n\n        list.scrollTop = 0;\n    };\n\n    handleSearchScroll = () => {\n        if (!this.searchListRef) return;\n\n        const list = this.searchListRef.current;\n        if (!list) return;\n\n        const { searchParams } = this;\n        if (!searchParams) return;\n\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            if (!searchParams.completed) {\n                this.onSearchNext(searchParams);\n            } else {\n                this.onSearchMigratedNext(searchParams);\n            }\n        }\n    };\n\n    onSearchNext = async (params, loadIncomplete = true) => {\n        const { chatId } = this.props;\n        const { completed, filter, items, loading, query } = params;\n\n        // console.log('SharedMediaBase.onSearchNext', completed, loading);\n\n        if (completed) return;\n        if (loading) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query,\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.items = items.concat(messages.filter(this.isValidMessage));\n        params.completed = messages.length === 0 || messages.total_count === 0;\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        if (this.searchParams !== params) return;\n\n        MessageStore.setItems(messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n\n        this.setState({ searchItems: params.items, searchMigratedItems: params.migratedItems });\n\n        if (params.completed) {\n            this.onSearchMigratedNext(params, true);\n        } else if (incompleteResults) {\n            this.onSearchNext(params, false);\n        }\n    };\n\n    onSearchMigratedNext = async (params, loadIncomplete = true) => {\n        const { migratedChatId } = this.props;\n        const { filter, loading, migratedItems: items, migrateCompleted, query } = params;\n\n        // console.log('SharedMediaBase.onSearchMigratedNext', migratedChatId, loading, migrateCompleted);\n\n        if (!migratedChatId) return;\n        if (loading) return;\n        if (migrateCompleted) return;\n\n        const fromMessageId = items.length > 0 ? items[items.length - 1].id : 0;\n        params.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: migratedChatId,\n            query,\n            sender_user_id: 0,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: SHARED_MESSAGE_SLICE_LIMIT,\n            filter\n        }).finally(() => {\n            params.loading = false;\n        });\n\n        const { messages } = result;\n        params.migratedItems = items.concat(messages.filter(this.isValidMessage));\n        params.migrateCompleted = messages.length === 0 || messages.total_count === 0;\n        const incompleteResults = loadIncomplete && messages.length > 0 && messages.length < SHARED_MESSAGE_SLICE_LIMIT;\n\n        if (this.searchParams !== params) return;\n\n        MessageStore.setItems(messages);\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n\n        this.setState({ searchItems: params.items, searchMigratedItems: params.migratedItems });\n\n        if (incompleteResults) {\n            this.onSearchMigratedNext(params, false);\n        }\n    };\n\n    handleSearch = async text => {\n        const query = text ? text.trim() : '';\n        if (!query) {\n            this.handleCloseSearch();\n            return;\n        }\n\n        this.searchParams = {\n            query,\n            completed: false,\n            migrateCompleted: false,\n            items: [],\n            migratedItems: [],\n            filter: this.getSearchFilter()\n        };\n        this.onSearchNext(this.searchParams, true);\n    };\n\n    handleCloseSearch = () => {\n        this.searchParams = null;\n        this.setState({ searchItems: [], searchMigratedItems: [] });\n    };\n\n    isValidMessage = message => {\n        if (!message) return false;\n\n        return this.isValidContent(message.content);\n    };\n\n    render() {\n        const { classes, minHeight, onClose, popup } = this.props;\n        const { items, migratedItems, searchItems, searchMigratedItems } = this.state;\n        const { searchParams } = this;\n\n        const messages = items.concat(migratedItems).map(x => this.getItemTemplate(x));\n        const searchMessages = searchItems.concat(searchMigratedItems).map(x => this.getItemTemplate(x));\n\n        console.log('SharedMediaBase.render', items, messages);\n\n        return (\n            <>\n                <SharedMediaHeader\n                    title={this.getHeader()}\n                    onClick={this.handleHeaderClick}\n                    onClose={onClose}\n                    onSearch={this.hasSearch() ? this.handleSearch : null}\n                    onCloseSearch={this.handleCloseSearch}\n                />\n                <div\n                    ref={this.listRef}\n                    className={classNames('shared-media-list', classes.sharedMediaList)}\n                    onScroll={this.handleScroll}\n                    style={{ minHeight: popup ? minHeight : null }}>\n                    {messages}\n                </div>\n                {Boolean(searchParams) && (\n                    <div\n                        ref={this.searchListRef}\n                        className={classNames('shared-media-search-list', classes.sharedMediaSearchList)}\n                        onScroll={this.handleSearchScroll}>\n                        {searchMessages}\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nSharedMediaBase.propTypes = {};\n\nexport default SharedMediaBase;\n"]},"metadata":{},"sourceType":"module"}