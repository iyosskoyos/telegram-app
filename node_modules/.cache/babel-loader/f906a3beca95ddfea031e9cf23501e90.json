{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport InputTypingManager from '../Utils/InputTypingManager';\nimport UserStore from './UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ChatStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.items = new Map();\n      this.typingManagers = new Map();\n      this.onlineMemberCount = new Map();\n      this.counters = new Map();\n      this.skippedUpdates = [];\n    };\n\n    this.loadClientData = () => {\n      const cookies = new Cookies();\n      const clientData = new Map();\n\n      try {\n        const data = cookies.get('clientData');\n        Object.keys(data).forEach(key => {\n          clientData.set(Number(key), data[key]);\n        });\n      } catch {}\n\n      this.clientData = clientData;\n    };\n\n    this.saveClientData = () => {\n      const arr = Array.from(this.clientData.entries());\n      const obj = arr.reduce((obj, [key, value]) => {\n        if (value) {\n          obj[String(key)] = value;\n        }\n\n        return obj;\n      }, {});\n      const cookies = new Cookies();\n      cookies.set('clientData', obj);\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateConnectionState':\n          {\n            if (update.state['@type'] === 'connectionStateUpdating') {\n              this.updating = true;\n              this.skippedUpdates = [];\n            } else {\n              this.updating = false;\n\n              if (this.skippedUpdates.length > 0) {\n                TdLibController.parameters.fastUpdating = false;\n                this.emitUpdate({\n                  '@type': 'clientUpdateFastUpdatingComplete',\n                  updates: this.skippedUpdates\n                });\n                this.skippedUpdates = [];\n              }\n            }\n\n            break;\n          }\n\n        case 'updateChatDefaultDisableNotification':\n          {\n            //TODO: handle updateChatDefaultDisableNotification\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatOnlineMemberCount':\n          {\n            this.setOnlineMemberCount(update.chat_id, update.online_member_count);\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatDraftMessage':\n          {\n            const chat_id = update.chat_id,\n                  order = update.order,\n                  draft_message = update.draft_message;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                order: order === '0' ? chat.order : order,\n                draft_message\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatIsMarkedAsUnread':\n          {\n            const chat_id = update.chat_id,\n                  is_marked_as_unread = update.is_marked_as_unread;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                is_marked_as_unread\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatIsPinned':\n          {\n            const chat_id = update.chat_id,\n                  order = update.order,\n                  is_pinned = update.is_pinned;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                order: order === '0' ? chat.order : order,\n                is_pinned\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatIsSponsored':\n          {\n            const chat_id = update.chat_id,\n                  order = update.order,\n                  is_sponsored = update.is_sponsored;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                order: order === '0' ? chat.order : order,\n                is_sponsored\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatLastMessage':\n          {\n            const chat_id = update.chat_id,\n                  order = update.order,\n                  last_message = update.last_message;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                order: order === '0' ? chat.order : order,\n                last_message\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatNotificationSettings':\n          {\n            const chat_id = update.chat_id,\n                  notification_settings = update.notification_settings;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                notification_settings\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatOrder':\n          {\n            const chat_id = update.chat_id,\n                  order = update.order;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                order\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatPhoto':\n          {\n            const chat_id = update.chat_id,\n                  photo = update.photo;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                photo\n              });\n\n              switch (chat.type['@type']) {\n                case 'chatTypeBasicGroup':\n                  {\n                    break;\n                  }\n\n                case 'chatTypeSupergroup':\n                  {\n                    break;\n                  }\n\n                case 'chatTypePrivate':\n                case 'chatTypeSecret':\n                  {\n                    const user = UserStore.get(chat.type.user_id);\n\n                    if (user) {\n                      UserStore.assign(user, {\n                        profile_photo: update.photo\n                      });\n                    }\n\n                    break;\n                  }\n              }\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatPinnedMessage':\n          {\n            const chat_id = update.chat_id,\n                  pinned_message_id = update.pinned_message_id;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                pinned_message_id\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatReadInbox':\n          {\n            const chat_id = update.chat_id,\n                  last_read_inbox_message_id = update.last_read_inbox_message_id,\n                  unread_count = update.unread_count;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                last_read_inbox_message_id,\n                unread_count\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatReadOutbox':\n          {\n            const chat_id = update.chat_id,\n                  last_read_outbox_message_id = update.last_read_outbox_message_id;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                last_read_outbox_message_id\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatReplyMarkup':\n          {\n            const chat_id = update.chat_id,\n                  reply_markup_message_id = update.reply_markup_message_id;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                reply_markup_message_id\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatTitle':\n          {\n            const chat_id = update.chat_id,\n                  title = update.title;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                title\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateChatUnreadMentionCount':\n          {\n            const chat_id = update.chat_id,\n                  unread_mention_count = update.unread_mention_count;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                unread_mention_count\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateNewChat':\n          {\n            this.set(update.chat);\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateSecretChat':\n          {\n            //TODO: handle updateSecretChat\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateUnreadChatCount':\n          {\n            //TODO: handle updateUnreadChatCount\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateUserChatAction':\n          {\n            let typingManager = this.getTypingManager(update.chat_id);\n\n            if (!typingManager) {\n              typingManager = new InputTypingManager(update.chat_id, update => this.emitUpdate(update));\n              this.setTypingManager(update.chat_id, typingManager);\n            }\n\n            const key = update.user_id;\n\n            if (update.action['@type'] === 'chatActionCancel') {\n              typingManager.clearAction(key);\n            } else {\n              typingManager.addAction(key, update.action);\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        case 'updateMessageMentionRead':\n          {\n            const chat_id = update.chat_id,\n                  unread_mention_count = update.unread_mention_count;\n            const chat = this.get(chat_id);\n\n            if (chat) {\n              this.assign(chat, {\n                unread_mention_count\n              });\n            }\n\n            this.emitFastUpdate(update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateClearHistory':\n          {\n            this.emitUpdate(update);\n            break;\n          }\n\n        case 'clientUpdateLeaveChat':\n          {\n            this.emitUpdate(update);\n            break;\n          }\n\n        case 'clientUpdateOpenChat':\n          {\n            this.emitUpdate(update);\n            break;\n          }\n\n        case 'clientUpdateSetChatClientData':\n          {\n            const chatId = update.chatId,\n                  clientData = update.clientData;\n            TdLibController.send({\n              '@type': 'setChatClientData',\n              chat_id: chatId,\n              client_data: JSON.stringify(clientData)\n            });\n            this.setClientData(chatId, clientData);\n            this.saveClientData();\n            this.emitUpdate(update);\n            break;\n          }\n      }\n    };\n\n    this.emitUpdate = update => {\n      this.emit(update['@type'], update);\n    };\n\n    this.emitFastUpdate = update => {\n      if (this.updating && TdLibController.parameters.fastUpdating) {\n        this.skippedUpdates.push(update);\n        return;\n      }\n\n      this.emit(update['@type'], update);\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.loadClientData();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  assign(source1, source2) {\n    //Object.assign(source1, source2);\n    this.set(Object.assign({}, source1, source2));\n  }\n\n  get(chatId) {\n    return this.items.get(chatId);\n  }\n\n  set(chat) {\n    this.items.set(chat.id, chat);\n  }\n\n  getCounters(chatId) {\n    return this.counters.get(chatId);\n  }\n\n  setCounters(chatId, counters) {\n    this.counters.set(chatId, counters);\n  }\n\n  getClientData(chatId) {\n    return this.clientData.get(chatId) || {};\n  }\n\n  setClientData(chatId, data) {\n    this.clientData.set(chatId, data);\n  }\n\n  setOnlineMemberCount(chatId, onlineMemberCount) {\n    this.onlineMemberCount.set(chatId, onlineMemberCount);\n  }\n\n  getOnlineMemberCount(chatId) {\n    return this.onlineMemberCount.get(chatId) || 0;\n  }\n\n  getTypingManager(chatId) {\n    return this.typingManagers.get(chatId);\n  }\n\n  setTypingManager(chatId, typingManager) {\n    return this.typingManagers.set(chatId, typingManager);\n  }\n\n}\n\nconst store = new ChatStore();\nwindow.chat = store;\nexport default store;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Stores/ChatStore.js"],"names":["EventEmitter","Cookies","InputTypingManager","UserStore","TdLibController","ChatStore","constructor","reset","items","Map","typingManagers","onlineMemberCount","counters","skippedUpdates","loadClientData","cookies","clientData","data","get","Object","keys","forEach","key","set","Number","saveClientData","arr","Array","from","entries","obj","reduce","value","String","onUpdate","update","authorization_state","state","updating","length","parameters","fastUpdating","emitUpdate","updates","emitFastUpdate","setOnlineMemberCount","chat_id","online_member_count","order","draft_message","chat","assign","is_marked_as_unread","is_pinned","is_sponsored","last_message","notification_settings","photo","type","user","user_id","profile_photo","pinned_message_id","last_read_inbox_message_id","unread_count","last_read_outbox_message_id","reply_markup_message_id","title","unread_mention_count","typingManager","getTypingManager","setTypingManager","action","clearAction","addAction","onClientUpdate","chatId","send","client_data","JSON","stringify","setClientData","emit","push","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","source1","source2","id","getCounters","setCounters","getClientData","getOnlineMemberCount","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport InputTypingManager from '../Utils/InputTypingManager';\nimport UserStore from './UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ChatStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n        this.loadClientData();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.typingManagers = new Map();\n        this.onlineMemberCount = new Map();\n        this.counters = new Map();\n        this.skippedUpdates = [];\n    };\n\n    loadClientData = () => {\n        const cookies = new Cookies();\n        const clientData = new Map();\n        try {\n            const data = cookies.get('clientData');\n            Object.keys(data).forEach(key => {\n                clientData.set(Number(key), data[key]);\n            });\n        } catch {}\n\n        this.clientData = clientData;\n    };\n\n    saveClientData = () => {\n        const arr = Array.from(this.clientData.entries());\n        const obj = arr.reduce((obj, [key, value]) => {\n            if (value) {\n                obj[String(key)] = value;\n            }\n            return obj;\n        }, {});\n\n        const cookies = new Cookies();\n        cookies.set('clientData', obj);\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateConnectionState': {\n                if (update.state['@type'] === 'connectionStateUpdating') {\n                    this.updating = true;\n                    this.skippedUpdates = [];\n                } else {\n                    this.updating = false;\n                    if (this.skippedUpdates.length > 0) {\n                        TdLibController.parameters.fastUpdating = false;\n                        this.emitUpdate({\n                            '@type': 'clientUpdateFastUpdatingComplete',\n                            updates: this.skippedUpdates\n                        });\n                        this.skippedUpdates = [];\n                    }\n                }\n                break;\n            }\n            case 'updateChatDefaultDisableNotification': {\n                //TODO: handle updateChatDefaultDisableNotification\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatOnlineMemberCount': {\n                this.setOnlineMemberCount(update.chat_id, update.online_member_count);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatDraftMessage': {\n                const { chat_id, order, draft_message } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        draft_message\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsMarkedAsUnread': {\n                const { chat_id, is_marked_as_unread } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { is_marked_as_unread });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsPinned': {\n                const { chat_id, order, is_pinned } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        is_pinned\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsSponsored': {\n                const { chat_id, order, is_sponsored } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        is_sponsored\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatLastMessage': {\n                const { chat_id, order, last_message } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        last_message\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatNotificationSettings': {\n                const { chat_id, notification_settings } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { notification_settings });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatOrder': {\n                const { chat_id, order } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { order });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatPhoto': {\n                const { chat_id, photo } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { photo });\n\n                    switch (chat.type['@type']) {\n                        case 'chatTypeBasicGroup': {\n                            break;\n                        }\n                        case 'chatTypeSupergroup': {\n                            break;\n                        }\n                        case 'chatTypePrivate':\n                        case 'chatTypeSecret': {\n                            const user = UserStore.get(chat.type.user_id);\n                            if (user) {\n                                UserStore.assign(user, { profile_photo: update.photo });\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatPinnedMessage': {\n                const { chat_id, pinned_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { pinned_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReadInbox': {\n                const { chat_id, last_read_inbox_message_id, unread_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { last_read_inbox_message_id, unread_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReadOutbox': {\n                const { chat_id, last_read_outbox_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { last_read_outbox_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReplyMarkup': {\n                const { chat_id, reply_markup_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { reply_markup_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatTitle': {\n                const { chat_id, title } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { title });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatUnreadMentionCount': {\n                const { chat_id, unread_mention_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { unread_mention_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateNewChat': {\n                this.set(update.chat);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateSecretChat': {\n                //TODO: handle updateSecretChat\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateUnreadChatCount': {\n                //TODO: handle updateUnreadChatCount\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateUserChatAction': {\n                let typingManager = this.getTypingManager(update.chat_id);\n                if (!typingManager) {\n                    typingManager = new InputTypingManager(update.chat_id, update => this.emitUpdate(update));\n                    this.setTypingManager(update.chat_id, typingManager);\n                }\n\n                const key = update.user_id;\n                if (update.action['@type'] === 'chatActionCancel') {\n                    typingManager.clearAction(key);\n                } else {\n                    typingManager.addAction(key, update.action);\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateMessageMentionRead': {\n                const { chat_id, unread_mention_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { unread_mention_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateClearHistory': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateLeaveChat': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateOpenChat': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateSetChatClientData': {\n                const { chatId, clientData } = update;\n\n                TdLibController.send({\n                    '@type': 'setChatClientData',\n                    chat_id: chatId,\n                    client_data: JSON.stringify(clientData)\n                });\n                this.setClientData(chatId, clientData);\n                this.saveClientData();\n\n                this.emitUpdate(update);\n                break;\n            }\n        }\n    };\n\n    emitUpdate = update => {\n        this.emit(update['@type'], update);\n    };\n\n    emitFastUpdate = update => {\n        if (this.updating && TdLibController.parameters.fastUpdating) {\n            this.skippedUpdates.push(update);\n            return;\n        }\n\n        this.emit(update['@type'], update);\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        //Object.assign(source1, source2);\n        this.set(Object.assign({}, source1, source2));\n    }\n\n    get(chatId) {\n        return this.items.get(chatId);\n    }\n\n    set(chat) {\n        this.items.set(chat.id, chat);\n    }\n\n    getCounters(chatId) {\n        return this.counters.get(chatId);\n    }\n\n    setCounters(chatId, counters) {\n        this.counters.set(chatId, counters);\n    }\n\n    getClientData(chatId) {\n        return this.clientData.get(chatId) || {};\n    }\n\n    setClientData(chatId, data) {\n        this.clientData.set(chatId, data);\n    }\n\n    setOnlineMemberCount(chatId, onlineMemberCount) {\n        this.onlineMemberCount.set(chatId, onlineMemberCount);\n    }\n\n    getOnlineMemberCount(chatId) {\n        return this.onlineMemberCount.get(chatId) || 0;\n    }\n\n    getTypingManager(chatId) {\n        return this.typingManagers.get(chatId);\n    }\n\n    setTypingManager(chatId, typingManager) {\n        return this.typingManagers.set(chatId, typingManager);\n    }\n}\n\nconst store = new ChatStore();\nwindow.chat = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}