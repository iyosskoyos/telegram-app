{"ast":null,"code":"import _slicedToArray from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Viewer/InstantViewMediaViewer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withIV } from '../InstantView/IVContext';\nimport { withTranslation } from 'react-i18next';\nimport CloseIcon from '@material-ui/icons/Close';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport InstantViewMediaViewerContent from './InstantViewMediaViewerContent';\nimport MediaViewerButton from './MediaViewerButton';\nimport MediaViewerFooterText from './MediaViewerFooterText';\nimport MediaViewerFooterButton from './MediaViewerFooterButton';\nimport MediaViewerDownloadButton from './MediaViewerDownloadButton';\nimport { getBlockCaption, getBlockMedia, getBlockUrl, getValidMediaBlocks } from '../../Utils/InstantView';\nimport { getViewerFile, saveMedia } from '../../Utils/File';\nimport { setInstantViewViewerContent } from '../../Actions/Client';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InstantViewMediaViewer.css';\nconst forwardIconStyle = {\n  padding: 20,\n  transform: 'scaleX(-1)'\n};\n\nclass InstantViewMediaViewer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      index: -1,\n      hasPreviousMedia: false,\n      hasNextMedia: false,\n      blocks: []\n    };\n\n    this.onKeyDown = event => {\n      if (event.keyCode === 39) {\n        this.handlePrevious();\n      } else if (event.keyCode === 37) {\n        this.handleNext();\n      }\n    };\n\n    this.handlePrevious = event => {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      const _this$state = this.state,\n            index = _this$state.index,\n            blocks = _this$state.blocks;\n      const nextIndex = index + 1;\n      if (!this.hasPreviousMedia(index, blocks)) return;\n      this.setState({\n        index: nextIndex,\n        hasPreviousMedia: this.hasPreviousMedia(nextIndex, blocks),\n        hasNextMedia: this.hasNextMedia(nextIndex, blocks)\n      });\n    };\n\n    this.handleNext = event => {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      const _this$state2 = this.state,\n            index = _this$state2.index,\n            blocks = _this$state2.blocks;\n      const nextIndex = index - 1;\n      if (!this.hasNextMedia(index, blocks)) return;\n      this.setState({\n        index: nextIndex,\n        hasPreviousMedia: this.hasPreviousMedia(nextIndex, blocks),\n        hasNextMedia: this.hasNextMedia(nextIndex, blocks)\n      });\n    };\n\n    this.handleClose = () => {\n      setInstantViewViewerContent(null);\n    };\n\n    this.handleForward = () => {\n      const media = this.props.media;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateForward',\n        info: {\n          media\n        }\n      });\n    };\n\n    this.handleSave = () => {\n      const media = this.props.media;\n      saveMedia(media, null);\n    };\n  }\n\n  componentDidMount() {\n    this.loadContent();\n    document.addEventListener('keydown', this.onKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown, false);\n  }\n\n  loadContent() {\n    const _this$props = this.props,\n          iv = _this$props.iv,\n          media = _this$props.media;\n    const blocks = getValidMediaBlocks(iv);\n    const index = blocks.findIndex(x => getBlockMedia(x) === media);\n    this.setState({\n      blocks,\n      index,\n      hasPreviousMedia: this.hasPreviousMedia(index, blocks),\n      hasNextMedia: this.hasNextMedia(index, blocks)\n    });\n  }\n\n  hasPreviousMedia(index, blocks) {\n    if (index === -1) return false;\n    const nextIndex = index + 1;\n    return nextIndex < blocks.length;\n  }\n\n  hasNextMedia(index, blocks) {\n    if (index === -1) return false;\n    const nextIndex = index - 1;\n    return nextIndex >= 0;\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          size = _this$props2.size,\n          t = _this$props2.t;\n    const _this$state3 = this.state,\n          index = _this$state3.index,\n          blocks = _this$state3.blocks,\n          hasNextMedia = _this$state3.hasNextMedia,\n          hasPreviousMedia = _this$state3.hasPreviousMedia;\n    if (!blocks) return null;\n    if (index === -1) return null;\n    const block = blocks[index];\n    const media = getBlockMedia(block);\n    const caption = getBlockCaption(block);\n    const url = getBlockUrl(block);\n\n    const _getViewerFile = getViewerFile(media, size),\n          _getViewerFile2 = _slicedToArray(_getViewerFile, 3),\n          width = _getViewerFile2[0],\n          height = _getViewerFile2[1],\n          file = _getViewerFile2[2];\n\n    let title = '';\n\n    if (media['@type'] === 'photo') {\n      title = t('AttachPhoto');\n    }\n\n    if (media['@type'] === 'video') {\n      title = t('AttachVideo');\n    } else if (media['@type'] === 'animation') {\n      title = t('AttachGif');\n    }\n\n    const maxCount = blocks.length;\n    return React.createElement(\"div\", {\n      className: classNames('instant-view-media-viewer', 'media-viewer-default'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"media-viewer-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"media-viewer-left-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"media-viewer-button-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(MediaViewerButton, {\n      disabled: !hasNextMedia,\n      grow: true,\n      onClick: this.handleNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(NavigateBeforeIcon, {\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"media-viewer-content-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(InstantViewMediaViewerContent, {\n      media: media,\n      size: size,\n      caption: caption,\n      url: url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"media-viewer-right-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(MediaViewerButton, {\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(MediaViewerButton, {\n      disabled: !hasPreviousMedia,\n      grow: true,\n      onClick: this.handlePrevious,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(NavigateNextIcon, {\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"media-viewer-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(MediaViewerFooterText, {\n      title: title,\n      subtitle: maxCount && index >= 0 ? \"\".concat(index + 1, \" of \").concat(maxCount) : null,\n      style: {\n        marginLeft: 128\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(MediaViewerDownloadButton, {\n      title: t('Save'),\n      fileId: file.id,\n      onClick: this.handleSave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(MediaViewerFooterButton, {\n      title: t('Forward'),\n      onClick: this.handleForward,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(ReplyIcon, {\n      style: forwardIconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nInstantViewMediaViewer.propTypes = {\n  media: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired,\n  caption: PropTypes.object.isRequired\n};\nconst enhance = compose(withTranslation(), withIV);\nexport default enhance(InstantViewMediaViewer);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Viewer/InstantViewMediaViewer.js"],"names":["React","PropTypes","classNames","compose","withIV","withTranslation","CloseIcon","NavigateNextIcon","NavigateBeforeIcon","ReplyIcon","InstantViewMediaViewerContent","MediaViewerButton","MediaViewerFooterText","MediaViewerFooterButton","MediaViewerDownloadButton","getBlockCaption","getBlockMedia","getBlockUrl","getValidMediaBlocks","getViewerFile","saveMedia","setInstantViewViewerContent","TdLibController","forwardIconStyle","padding","transform","InstantViewMediaViewer","Component","state","index","hasPreviousMedia","hasNextMedia","blocks","onKeyDown","event","keyCode","handlePrevious","handleNext","stopPropagation","nextIndex","setState","handleClose","handleForward","media","props","clientUpdate","info","handleSave","componentDidMount","loadContent","document","addEventListener","componentWillUnmount","removeEventListener","iv","findIndex","x","length","render","size","t","block","caption","url","width","height","file","title","maxCount","marginLeft","id","propTypes","object","isRequired","number","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withIV } from '../InstantView/IVContext';\nimport { withTranslation } from 'react-i18next';\nimport CloseIcon from '@material-ui/icons/Close';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport InstantViewMediaViewerContent from './InstantViewMediaViewerContent';\nimport MediaViewerButton from './MediaViewerButton';\nimport MediaViewerFooterText from './MediaViewerFooterText';\nimport MediaViewerFooterButton from './MediaViewerFooterButton';\nimport MediaViewerDownloadButton from './MediaViewerDownloadButton';\nimport { getBlockCaption, getBlockMedia, getBlockUrl, getValidMediaBlocks } from '../../Utils/InstantView';\nimport { getViewerFile, saveMedia } from '../../Utils/File';\nimport { setInstantViewViewerContent } from '../../Actions/Client';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InstantViewMediaViewer.css';\n\nconst forwardIconStyle = {\n    padding: 20,\n    transform: 'scaleX(-1)'\n};\n\nclass InstantViewMediaViewer extends React.Component {\n    state = {\n        index: -1,\n        hasPreviousMedia: false,\n        hasNextMedia: false,\n        blocks: []\n    };\n\n    componentDidMount() {\n        this.loadContent();\n\n        document.addEventListener('keydown', this.onKeyDown, false);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown, false);\n    }\n\n    onKeyDown = event => {\n        if (event.keyCode === 39) {\n            this.handlePrevious();\n        } else if (event.keyCode === 37) {\n            this.handleNext();\n        }\n    };\n\n    loadContent() {\n        const { iv, media } = this.props;\n\n        const blocks = getValidMediaBlocks(iv);\n        const index = blocks.findIndex(x => getBlockMedia(x) === media);\n\n        this.setState({\n            blocks,\n            index,\n            hasPreviousMedia: this.hasPreviousMedia(index, blocks),\n            hasNextMedia: this.hasNextMedia(index, blocks)\n        });\n    }\n\n    hasPreviousMedia(index, blocks) {\n        if (index === -1) return false;\n\n        const nextIndex = index + 1;\n        return nextIndex < blocks.length;\n    }\n\n    handlePrevious = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        const { index, blocks } = this.state;\n        const nextIndex = index + 1;\n\n        if (!this.hasPreviousMedia(index, blocks)) return;\n\n        this.setState({\n            index: nextIndex,\n            hasPreviousMedia: this.hasPreviousMedia(nextIndex, blocks),\n            hasNextMedia: this.hasNextMedia(nextIndex, blocks)\n        });\n    };\n\n    hasNextMedia(index, blocks) {\n        if (index === -1) return false;\n\n        const nextIndex = index - 1;\n        return nextIndex >= 0;\n    }\n\n    handleNext = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        const { index, blocks } = this.state;\n        const nextIndex = index - 1;\n\n        if (!this.hasNextMedia(index, blocks)) return;\n\n        this.setState({\n            index: nextIndex,\n            hasPreviousMedia: this.hasPreviousMedia(nextIndex, blocks),\n            hasNextMedia: this.hasNextMedia(nextIndex, blocks)\n        });\n    };\n\n    handleClose = () => {\n        setInstantViewViewerContent(null);\n    };\n\n    handleForward = () => {\n        const { media } = this.props;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateForward',\n            info: { media }\n        });\n    };\n\n    handleSave = () => {\n        const { media } = this.props;\n\n        saveMedia(media, null);\n    };\n\n    render() {\n        const { size, t } = this.props;\n        const { index, blocks, hasNextMedia, hasPreviousMedia } = this.state;\n        if (!blocks) return null;\n        if (index === -1) return null;\n\n        const block = blocks[index];\n        const media = getBlockMedia(block);\n        const caption = getBlockCaption(block);\n        const url = getBlockUrl(block);\n\n        const [width, height, file] = getViewerFile(media, size);\n\n        let title = '';\n        if (media['@type'] === 'photo') {\n            title = t('AttachPhoto');\n        }\n        if (media['@type'] === 'video') {\n            title = t('AttachVideo');\n        } else if (media['@type'] === 'animation') {\n            title = t('AttachGif');\n        }\n        const maxCount = blocks.length;\n\n        return (\n            <div className={classNames('instant-view-media-viewer', 'media-viewer-default')}>\n                <div className='media-viewer-wrapper'>\n                    <div className='media-viewer-left-column'>\n                        <div className='media-viewer-button-placeholder' />\n                        <MediaViewerButton disabled={!hasNextMedia} grow onClick={this.handleNext}>\n                            <NavigateBeforeIcon fontSize='large' />\n                        </MediaViewerButton>\n                    </div>\n                    <div className='media-viewer-content-column'>\n                        <InstantViewMediaViewerContent media={media} size={size} caption={caption} url={url} />\n                    </div>\n                    <div className='media-viewer-right-column'>\n                        <MediaViewerButton onClick={this.handleClose}>\n                            <CloseIcon fontSize='large' />\n                        </MediaViewerButton>\n                        <MediaViewerButton disabled={!hasPreviousMedia} grow onClick={this.handlePrevious}>\n                            <NavigateNextIcon fontSize='large' />\n                        </MediaViewerButton>\n                    </div>\n                </div>\n\n                <div className='media-viewer-footer'>\n                    <MediaViewerFooterText\n                        title={title}\n                        subtitle={maxCount && index >= 0 ? `${index + 1} of ${maxCount}` : null}\n                        style={{ marginLeft: 128 }}\n                    />\n                    <MediaViewerDownloadButton title={t('Save')} fileId={file.id} onClick={this.handleSave} />\n                    <MediaViewerFooterButton title={t('Forward')} onClick={this.handleForward}>\n                        <ReplyIcon style={forwardIconStyle} />\n                    </MediaViewerFooterButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nInstantViewMediaViewer.propTypes = {\n    media: PropTypes.object.isRequired,\n    size: PropTypes.number.isRequired,\n    caption: PropTypes.object.isRequired\n};\n\nconst enhance = compose(\n    withTranslation(),\n    withIV\n);\n\nexport default enhance(InstantViewMediaViewer);\n"]},"metadata":{},"sourceType":"module"}