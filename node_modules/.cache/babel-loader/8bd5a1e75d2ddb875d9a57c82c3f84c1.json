{"ast":null,"code":"import _defineProperty from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnMiddle/PinnedMessage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport ReplyTile from '../Tile/ReplyTile';\nimport { accentStyles, borderStyle } from '../Theme';\nimport { canPinMessages } from '../../Utils/Chat';\nimport { getContent, getReplyPhotoSize, isDeletedMessage } from '../../Utils/Message';\nimport { loadMessageContents } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PinnedMessage.css';\n\nconst styles = theme => _objectSpread({}, accentStyles(theme), {}, borderStyle(theme), {\n  iconButton: {// padding: 4\n  },\n  pinnedMessage: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n    color: theme.palette.text.primary\n  },\n  pinnedMessageContentSubtitle: {\n    color: theme.palette.text.secondary\n  }\n});\n\nclass PinnedMessage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateSetChatClientData = update => {\n      const chatId = update.chatId,\n            clientData = update.clientData;\n      if (this.props.chatId !== chatId) return;\n      this.setState({\n        clientData\n      });\n    };\n\n    this.onUpdateChatPinnedMessage = update => {\n      const chat_id = update.chat_id,\n            pinned_message_id = update.pinned_message_id;\n      const chatId = this.props.chatId;\n      if (chatId !== chat_id) return;\n      this.setState({\n        messageId: pinned_message_id\n      });\n    };\n\n    this.loadContent = () => {\n      const chatId = this.props.chatId;\n      const messageId = this.state.messageId;\n      if (!chatId) return;\n      if (!messageId) return;\n      const message = MessageStore.get(chatId, messageId);\n      if (message) return;\n      TdLibController.send({\n        '@type': 'getMessage',\n        chat_id: chatId,\n        message_id: messageId\n      }).then(result => {\n        MessageStore.set(result);\n        const store = FileStore.getStore();\n        loadMessageContents(store, [result]);\n        this.forceUpdate();\n      }).catch(error => {\n        const deletedMessage = {\n          '@type': 'deletedMessage',\n          chat_id: chatId,\n          id: messageId,\n          content: null\n        };\n        MessageStore.set(deletedMessage);\n        this.forceUpdate();\n      });\n    };\n\n    this.handleClick = event => {\n      const chatId = this.props.chatId;\n      const messageId = this.state.messageId;\n      if (!messageId) return;\n      openChat(chatId, messageId);\n    };\n\n    this.handleDelete = async event => {\n      event.preventDefault();\n      event.stopPropagation();\n      const chatId = this.props.chatId;\n      const messageId = this.state.messageId;\n      const canPin = canPinMessages(chatId);\n\n      if (canPin) {\n        this.setState({\n          confirm: true\n        });\n      } else {\n        const data = ChatStore.getClientData(chatId);\n        await TdLibController.clientUpdate({\n          '@type': 'clientUpdateSetChatClientData',\n          chatId: chatId,\n          clientData: Object.assign({}, data, {\n            unpinned_message_id: messageId\n          })\n        });\n      }\n    };\n\n    this.handleUnpin = async () => {\n      const chatId = this.props.chatId;\n      this.handleClose();\n      TdLibController.send({\n        '@type': 'unpinChatMessage',\n        chat_id: chatId\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        confirm: false\n      });\n    };\n\n    const chat = ChatStore.get(props.chatId);\n    this.state = {\n      prevPropsChatId: props.chatId,\n      clientData: ChatStore.getClientData(props.chatId),\n      messageId: chat && chat.pinned_message_id ? chat.pinned_message_id : 0,\n      confirm: false\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const prevPropsChatId = state.prevPropsChatId;\n    const chatId = props.chatId;\n\n    if (prevPropsChatId !== chatId) {\n      const chat = ChatStore.get(chatId);\n      return {\n        prevPropsChatId: chatId,\n        clientData: ChatStore.getClientData(chatId),\n        messageId: chat && chat.pinned_message_id ? chat.pinned_message_id : 0,\n        confirm: false\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const messageId = this.state.messageId;\n\n    if (messageId && prevState.messageId !== messageId) {\n      this.loadContent();\n    }\n  }\n\n  componentDidMount() {\n    this.loadContent();\n    ChatStore.on('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n    ChatStore.on('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n    ChatStore.removeListener('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const _this$props = this.props,\n          chatId = _this$props.chatId,\n          t = _this$props.t,\n          theme = _this$props.theme;\n    const _this$state = this.state,\n          clientData = _this$state.clientData,\n          confirm = _this$state.confirm,\n          messageId = _this$state.messageId;\n\n    if (nextProps.t !== t) {\n      return true;\n    }\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    if (nextProps.chatId !== chatId) {\n      return true;\n    }\n\n    if (nextState.clientData !== clientData) {\n      return true;\n    }\n\n    if (nextState.confirm !== confirm) {\n      return true;\n    }\n\n    if (nextState.messageId !== messageId) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          classes = _this$props2.classes,\n          t = _this$props2.t;\n    const _this$state2 = this.state,\n          messageId = _this$state2.messageId,\n          confirm = _this$state2.confirm;\n    if (!chatId) return null;\n\n    const _ChatStore$getClientD = ChatStore.getClientData(chatId),\n          unpinned_message_id = _ChatStore$getClientD.unpinned_message_id;\n\n    if (unpinned_message_id === messageId) return null;\n    const message = MessageStore.get(chatId, messageId);\n    if (!message) return null;\n    let content = !message ? t('Loading') : getContent(message, t);\n    const photoSize = getReplyPhotoSize(chatId, messageId);\n\n    if (isDeletedMessage(message)) {\n      content = t('DeletedMessage');\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classNames('pinned-message', classes.pinnedMessage, classes.borderColor),\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"pinned-message-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('reply-border', classes.accentBackgroundLight),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), photoSize && React.createElement(ReplyTile, {\n      chatId: chatId,\n      messageId: messageId,\n      photoSize: photoSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"pinned-message-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('pinned-message-content-title', classes.accentColorMain),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, t('PinnedMessage')), React.createElement(\"div\", {\n      className: classNames('pinned-message-content-subtitle', classes.pinnedMessageContentSubtitle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, content)), React.createElement(\"div\", {\n      className: \"pinned-message-delete-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: classes.iconButton,\n      onClick: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }))))), confirm && React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: true,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"unpin-message-confirmation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"unpin-message-confirmation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, t('AppName')), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, t('UnpinMessageAlert'))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, t('Cancel')), React.createElement(Button, {\n      onClick: this.handleUnpin,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, t('Ok')))));\n  }\n\n}\n\nPinnedMessage.propTypes = {\n  chatId: PropTypes.number.isRequired\n};\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(PinnedMessage);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnMiddle/PinnedMessage.js"],"names":["React","PropTypes","classNames","compose","withStyles","withTranslation","Button","CloseIcon","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","IconButton","ReplyTile","accentStyles","borderStyle","canPinMessages","getContent","getReplyPhotoSize","isDeletedMessage","loadMessageContents","openChat","ChatStore","FileStore","MessageStore","TdLibController","styles","theme","iconButton","pinnedMessage","background","palette","type","default","color","text","primary","pinnedMessageContentSubtitle","secondary","PinnedMessage","Component","constructor","props","onClientUpdateSetChatClientData","update","chatId","clientData","setState","onUpdateChatPinnedMessage","chat_id","pinned_message_id","messageId","loadContent","state","message","get","send","message_id","then","result","set","store","getStore","forceUpdate","catch","error","deletedMessage","id","content","handleClick","event","handleDelete","preventDefault","stopPropagation","canPin","confirm","data","getClientData","clientUpdate","Object","assign","unpinned_message_id","handleUnpin","handleClose","chat","prevPropsChatId","getDerivedStateFromProps","componentDidUpdate","prevProps","prevState","snapshot","componentDidMount","on","componentWillUnmount","removeListener","shouldComponentUpdate","nextProps","nextState","nextContext","t","render","classes","photoSize","borderColor","accentBackgroundLight","accentColorMain","propTypes","number","isRequired","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport ReplyTile from '../Tile/ReplyTile';\nimport { accentStyles, borderStyle } from '../Theme';\nimport { canPinMessages } from '../../Utils/Chat';\nimport { getContent, getReplyPhotoSize, isDeletedMessage } from '../../Utils/Message';\nimport { loadMessageContents } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PinnedMessage.css';\n\nconst styles = theme => ({\n    ...accentStyles(theme),\n    ...borderStyle(theme),\n    iconButton: {\n        // padding: 4\n    },\n    pinnedMessage: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n        color: theme.palette.text.primary\n    },\n    pinnedMessageContentSubtitle: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass PinnedMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const chat = ChatStore.get(props.chatId);\n        this.state = {\n            prevPropsChatId: props.chatId,\n            clientData: ChatStore.getClientData(props.chatId),\n            messageId: chat && chat.pinned_message_id ? chat.pinned_message_id : 0,\n            confirm: false\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { prevPropsChatId } = state;\n        const { chatId } = props;\n\n        if (prevPropsChatId !== chatId) {\n            const chat = ChatStore.get(chatId);\n            return {\n                prevPropsChatId: chatId,\n                clientData: ChatStore.getClientData(chatId),\n                messageId: chat && chat.pinned_message_id ? chat.pinned_message_id : 0,\n                confirm: false\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { messageId } = this.state;\n\n        if (messageId && prevState.messageId !== messageId) {\n            this.loadContent();\n        }\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        ChatStore.on('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n        ChatStore.on('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('updateChatPinnedMessage', this.onUpdateChatPinnedMessage);\n        ChatStore.removeListener('clientUpdateSetChatClientData', this.onClientUpdateSetChatClientData);\n    }\n\n    onClientUpdateSetChatClientData = update => {\n        const { chatId, clientData } = update;\n\n        if (this.props.chatId !== chatId) return;\n\n        this.setState({ clientData });\n    };\n\n    onUpdateChatPinnedMessage = update => {\n        const { chat_id, pinned_message_id } = update;\n        const { chatId } = this.props;\n\n        if (chatId !== chat_id) return;\n\n        this.setState({ messageId: pinned_message_id });\n    };\n\n    loadContent = () => {\n        const { chatId } = this.props;\n        const { messageId } = this.state;\n\n        if (!chatId) return;\n        if (!messageId) return;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (message) return;\n\n        TdLibController.send({\n            '@type': 'getMessage',\n            chat_id: chatId,\n            message_id: messageId\n        })\n            .then(result => {\n                MessageStore.set(result);\n\n                const store = FileStore.getStore();\n                loadMessageContents(store, [result]);\n\n                this.forceUpdate();\n            })\n            .catch(error => {\n                const deletedMessage = {\n                    '@type': 'deletedMessage',\n                    chat_id: chatId,\n                    id: messageId,\n                    content: null\n                };\n                MessageStore.set(deletedMessage);\n                this.forceUpdate();\n            });\n    };\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { chatId, t, theme } = this.props;\n        const { clientData, confirm, messageId } = this.state;\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.clientData !== clientData) {\n            return true;\n        }\n\n        if (nextState.confirm !== confirm) {\n            return true;\n        }\n\n        if (nextState.messageId !== messageId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleClick = event => {\n        const { chatId } = this.props;\n        const { messageId } = this.state;\n\n        if (!messageId) return;\n\n        openChat(chatId, messageId);\n    };\n\n    handleDelete = async event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { chatId } = this.props;\n        const { messageId } = this.state;\n\n        const canPin = canPinMessages(chatId);\n        if (canPin) {\n            this.setState({ confirm: true });\n        } else {\n            const data = ChatStore.getClientData(chatId);\n            await TdLibController.clientUpdate({\n                '@type': 'clientUpdateSetChatClientData',\n                chatId: chatId,\n                clientData: Object.assign({}, data, { unpinned_message_id: messageId })\n            });\n        }\n    };\n\n    handleUnpin = async () => {\n        const { chatId } = this.props;\n\n        this.handleClose();\n\n        TdLibController.send({\n            '@type': 'unpinChatMessage',\n            chat_id: chatId\n        });\n    };\n\n    handleClose = () => {\n        this.setState({ confirm: false });\n    };\n\n    render() {\n        const { chatId, classes, t } = this.props;\n        const { messageId, confirm } = this.state;\n\n        if (!chatId) return null;\n\n        const { unpinned_message_id } = ChatStore.getClientData(chatId);\n        if (unpinned_message_id === messageId) return null;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        let content = !message ? t('Loading') : getContent(message, t);\n        const photoSize = getReplyPhotoSize(chatId, messageId);\n\n        if (isDeletedMessage(message)) {\n            content = t('DeletedMessage');\n        }\n\n        return (\n            <>\n                <div\n                    className={classNames('pinned-message', classes.pinnedMessage, classes.borderColor)}\n                    onClick={this.handleClick}>\n                    <div className='pinned-message-wrapper'>\n                        <div className={classNames('reply-border', classes.accentBackgroundLight)} />\n                        {photoSize && <ReplyTile chatId={chatId} messageId={messageId} photoSize={photoSize} />}\n                        <div className='pinned-message-content'>\n                            <div className={classNames('pinned-message-content-title', classes.accentColorMain)}>\n                                {t('PinnedMessage')}\n                            </div>\n                            <div\n                                className={classNames(\n                                    'pinned-message-content-subtitle',\n                                    classes.pinnedMessageContentSubtitle\n                                )}>\n                                {content}\n                            </div>\n                        </div>\n                        <div className='pinned-message-delete-button'>\n                            <IconButton className={classes.iconButton} onClick={this.handleDelete}>\n                                <CloseIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                </div>\n                {confirm && (\n                    <Dialog\n                        transitionDuration={0}\n                        open\n                        onClose={this.handleClose}\n                        aria-labelledby='unpin-message-confirmation'>\n                        <DialogTitle id='unpin-message-confirmation'>{t('AppName')}</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>{t('UnpinMessageAlert')}</DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose} color='primary'>\n                                {t('Cancel')}\n                            </Button>\n                            <Button onClick={this.handleUnpin} color='primary'>\n                                {t('Ok')}\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                )}\n            </>\n        );\n    }\n}\n\nPinnedMessage.propTypes = {\n    chatId: PropTypes.number.isRequired\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(PinnedMessage);\n"]},"metadata":{},"sourceType":"module"}