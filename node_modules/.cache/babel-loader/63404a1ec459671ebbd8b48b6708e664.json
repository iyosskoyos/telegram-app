{"ast":null,"code":"import _objectWithoutProperties from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnMiddle/MainMenuButton.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withSnackbar } from 'notistack';\nimport { compose } from 'recompose';\nimport ChatTile from '../Tile/ChatTile';\nimport NotificationTimer from '../Additional/NotificationTimer';\nimport { canClearHistory, canDeleteChat, getChatShortTitle, isPrivateChat } from '../../Utils/Chat';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MainMenuButton.css';\n\nconst styles = theme => ({\n  menuIconButton: {\n    margin: '8px 12px 8px 0'\n  }\n});\n\nconst menuAnchorOrigin = {\n  vertical: 'bottom',\n  horizontal: 'right'\n};\nconst menuTransformOrigin = {\n  vertical: 'top',\n  horizontal: 'right'\n};\n\nclass LeaveChatDialog extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getDeleteDialogText = chatId => {\n      const chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      if (!chat.type) return null;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return \"Are you sure you want to leave group \".concat(chat.title, \"?\");\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            if (supergroup) {\n              return supergroup.is_channel ? \"Are you sure you want to leave channel \".concat(chat.title, \"?\") : \"Are you sure you want to leave group \".concat(chat.title, \"?\");\n            }\n\n            return null;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return \"Are you sure you want to delete chat with \".concat(getChatShortTitle(chatId), \"?\");\n          }\n      }\n\n      return null;\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          onClose = _this$props.onClose,\n          chatId = _this$props.chatId,\n          other = _objectWithoutProperties(_this$props, [\"onClose\", \"chatId\"]);\n\n    return React.createElement(Dialog, Object.assign({\n      transitionDuration: 0,\n      onClose: () => onClose(false),\n      \"aria-labelledby\": \"delete-dialog-title\"\n    }, other, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(DialogTitle, {\n      id: \"delete-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, getChatShortTitle(chatId)), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"delete-dialog-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(ChatTile, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(DialogContentText, {\n      id: \"delete-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.getDeleteDialogText(chatId)))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => onClose(false),\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: () => onClose(true),\n      color: \"primary\",\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Ok\")));\n  }\n\n}\n\nclass ClearHistoryDialog extends React.Component {\n  render() {\n    const _this$props2 = this.props,\n          onClose = _this$props2.onClose,\n          chatId = _this$props2.chatId,\n          other = _objectWithoutProperties(_this$props2, [\"onClose\", \"chatId\"]);\n\n    return React.createElement(Dialog, Object.assign({\n      transitionDuration: 0,\n      onClose: () => onClose(false),\n      \"aria-labelledby\": \"delete-dialog-title\"\n    }, other, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(DialogTitle, {\n      id: \"delete-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, getChatShortTitle(chatId)), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"delete-dialog-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(ChatTile, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(DialogContentText, {\n      id: \"delete-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Are you sure you want clear history?\"))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => onClose(false),\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: () => onClose(true),\n      color: \"primary\",\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Ok\")));\n  }\n\n}\n\nclass MainMenuButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleButtonClick = event => {\n      this.setState({\n        anchorEl: event.currentTarget\n      });\n    };\n\n    this.handleMenuClose = () => {\n      this.setState({\n        anchorEl: null\n      });\n    };\n\n    this.handleChatInfo = () => {\n      this.handleMenuClose();\n      setTimeout(() => this.props.openChatDetails(), 150);\n    };\n\n    this.handleClearHistory = () => {\n      this.handleMenuClose();\n      this.setState({\n        openClearHistory: true\n      });\n    };\n\n    this.handleClearHistoryContinue = result => {\n      this.setState({\n        openClearHistory: false\n      });\n      if (!result) return;\n      const chatId = ApplicationStore.getChatId();\n      const message = 'Messages deleted';\n      const request = {\n        '@type': 'deleteChatHistory',\n        chat_id: chatId,\n        remove_from_chat_list: false\n      };\n      this.handleScheduledAction(chatId, 'clientUpdateClearHistory', message, request);\n    };\n\n    this.handleLeave = () => {\n      this.handleMenuClose();\n      this.setState({\n        openDelete: true\n      });\n    };\n\n    this.handleLeaveContinue = result => {\n      this.setState({\n        openDelete: false\n      });\n      if (!result) return;\n      const chatId = ApplicationStore.getChatId();\n      const message = this.getLeaveChatNotification(chatId);\n      const request = isPrivateChat(chatId) ? {\n        '@type': 'deleteChatHistory',\n        chat_id: chatId,\n        remove_from_chat_list: true\n      } : {\n        '@type': 'leaveChat',\n        chat_id: chatId\n      };\n      this.handleScheduledAction(chatId, 'clientUpdateLeaveChat', message, request);\n    };\n\n    this.handleScheduledAction = (chatId, clientUpdateType, message, request) => {\n      if (!clientUpdateType) return;\n      const key = \"\".concat(clientUpdateType, \" chatId=\").concat(chatId);\n\n      const action = async () => {\n        try {\n          await TdLibController.send(request);\n        } finally {\n          TdLibController.clientUpdate({\n            '@type': clientUpdateType,\n            chatId: chatId,\n            inProgress: false\n          });\n        }\n      };\n\n      const cancel = () => {\n        TdLibController.clientUpdate({\n          '@type': clientUpdateType,\n          chatId: chatId,\n          inProgress: false\n        });\n      };\n\n      const _this$props3 = this.props,\n            enqueueSnackbar = _this$props3.enqueueSnackbar,\n            classes = _this$props3.classes;\n      if (!enqueueSnackbar) return;\n      const TRANSITION_DELAY = 150;\n\n      if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS, action, cancel)) {\n        TdLibController.clientUpdate({\n          '@type': clientUpdateType,\n          chatId: chatId,\n          inProgress: true\n        });\n        enqueueSnackbar(message, {\n          autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS - 2 * TRANSITION_DELAY,\n          action: [React.createElement(IconButton, {\n            key: \"progress\",\n            color: \"inherit\",\n            className: \"progress-button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          }, React.createElement(NotificationTimer, {\n            timeout: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 231\n            },\n            __self: this\n          })), React.createElement(Button, {\n            key: \"undo\",\n            color: \"primary\",\n            size: \"small\",\n            onClick: () => ApplicationStore.removeScheduledAction(key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, \"UNDO\")]\n        });\n      }\n    };\n\n    this.getLeaveChatTitle = chatId => {\n      const chat = ChatStore.get(chatId);\n      if (!chat) return null;\n      if (!chat.type) return null;\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return 'Delete and exit';\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            if (supergroup) {\n              return supergroup.is_channel ? 'Leave channel' : 'Leave group';\n            }\n\n            return null;\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return 'Delete conversation';\n          }\n      }\n\n      return null;\n    };\n\n    this.getLeaveChatNotification = chatId => {\n      const chat = ChatStore.get(chatId);\n      if (!chat) return 'Chat deleted';\n      if (!chat.type) return 'Chat deleted';\n\n      switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return 'Chat deleted';\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            if (supergroup) {\n              return supergroup.is_channel ? 'Left channel' : 'Left group';\n            }\n\n            return 'Chat deleted';\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return 'Chat deleted';\n          }\n      }\n\n      return 'Chat deleted';\n    };\n\n    this.state = {\n      anchorEl: null,\n      openDelete: false,\n      openClearHistory: false\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          anchorEl = _this$state.anchorEl,\n          openDelete = _this$state.openDelete,\n          openClearHistory = _this$state.openClearHistory;\n    const chatId = ApplicationStore.getChatId();\n    const clearHistory = canClearHistory(chatId);\n    const deleteChat = canDeleteChat(chatId);\n    const leaveChatTitle = this.getLeaveChatTitle(chatId);\n    return React.createElement(React.Fragment, null, React.createElement(IconButton, {\n      \"aria-owns\": anchorEl ? 'simple-menu' : null,\n      \"aria-haspopup\": \"true\",\n      className: classes.menuIconButton,\n      \"aria-label\": \"Menu\",\n      onClick: this.handleButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(MoreVertIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })), React.createElement(Menu, {\n      id: \"main-menu\",\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: this.handleMenuClose,\n      getContentAnchorEl: null,\n      disableAutoFocusItem: true,\n      disableRestoreFocus: true,\n      anchorOrigin: menuAnchorOrigin,\n      transformOrigin: menuTransformOrigin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      onClick: this.handleChatInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Chat info\"), clearHistory && React.createElement(MenuItem, {\n      onClick: this.handleClearHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"Clear history\"), deleteChat && leaveChatTitle && React.createElement(MenuItem, {\n      onClick: this.handleLeave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, leaveChatTitle)), React.createElement(LeaveChatDialog, {\n      chatId: chatId,\n      open: openDelete,\n      onClose: this.handleLeaveContinue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(ClearHistoryDialog, {\n      chatId: chatId,\n      open: openClearHistory,\n      onClose: this.handleClearHistoryContinue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst enhance = compose(withStyles(styles), withSnackbar);\nexport default enhance(MainMenuButton);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnMiddle/MainMenuButton.js"],"names":["React","IconButton","MoreVertIcon","Menu","MenuItem","Button","DialogTitle","Dialog","DialogContentText","DialogContent","DialogActions","withStyles","withSnackbar","compose","ChatTile","NotificationTimer","canClearHistory","canDeleteChat","getChatShortTitle","isPrivateChat","NOTIFICATION_AUTO_HIDE_DURATION_MS","ApplicationStore","ChatStore","SupergroupStore","TdLibController","styles","theme","menuIconButton","margin","menuAnchorOrigin","vertical","horizontal","menuTransformOrigin","LeaveChatDialog","Component","getDeleteDialogText","chatId","chat","get","type","title","supergroup","supergroup_id","is_channel","render","props","onClose","other","ClearHistoryDialog","MainMenuButton","constructor","handleButtonClick","event","setState","anchorEl","currentTarget","handleMenuClose","handleChatInfo","setTimeout","openChatDetails","handleClearHistory","openClearHistory","handleClearHistoryContinue","result","getChatId","message","request","chat_id","remove_from_chat_list","handleScheduledAction","handleLeave","openDelete","handleLeaveContinue","getLeaveChatNotification","clientUpdateType","key","action","send","clientUpdate","inProgress","cancel","enqueueSnackbar","classes","TRANSITION_DELAY","addScheduledAction","autoHideDuration","removeScheduledAction","getLeaveChatTitle","state","clearHistory","deleteChat","leaveChatTitle","Boolean","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withSnackbar } from 'notistack';\nimport { compose } from 'recompose';\nimport ChatTile from '../Tile/ChatTile';\nimport NotificationTimer from '../Additional/NotificationTimer';\nimport { canClearHistory, canDeleteChat, getChatShortTitle, isPrivateChat } from '../../Utils/Chat';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MainMenuButton.css';\n\nconst styles = theme => ({\n    menuIconButton: {\n        margin: '8px 12px 8px 0'\n    }\n});\n\nconst menuAnchorOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right'\n};\n\nconst menuTransformOrigin = {\n    vertical: 'top',\n    horizontal: 'right'\n};\n\nclass LeaveChatDialog extends React.Component {\n    getDeleteDialogText = chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n        if (!chat.type) return null;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return `Are you sure you want to leave group ${chat.title}?`;\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel\n                        ? `Are you sure you want to leave channel ${chat.title}?`\n                        : `Are you sure you want to leave group ${chat.title}?`;\n                }\n\n                return null;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return `Are you sure you want to delete chat with ${getChatShortTitle(chatId)}?`;\n            }\n        }\n\n        return null;\n    };\n\n    render() {\n        const { onClose, chatId, ...other } = this.props;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                onClose={() => onClose(false)}\n                aria-labelledby='delete-dialog-title'\n                {...other}>\n                <DialogTitle id='delete-dialog-title'>{getChatShortTitle(chatId)}</DialogTitle>\n                <DialogContent>\n                    <div className='delete-dialog-content'>\n                        <ChatTile chatId={chatId} />\n                        <DialogContentText id='delete-dialog-description'>\n                            {this.getDeleteDialogText(chatId)}\n                        </DialogContentText>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose(false)} color='primary'>\n                        Cancel\n                    </Button>\n                    <Button onClick={() => onClose(true)} color='primary' autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nclass ClearHistoryDialog extends React.Component {\n    render() {\n        const { onClose, chatId, ...other } = this.props;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                onClose={() => onClose(false)}\n                aria-labelledby='delete-dialog-title'\n                {...other}>\n                <DialogTitle id='delete-dialog-title'>{getChatShortTitle(chatId)}</DialogTitle>\n                <DialogContent>\n                    <div className='delete-dialog-content'>\n                        <ChatTile chatId={chatId} />\n                        <DialogContentText id='delete-dialog-description'>\n                            Are you sure you want clear history?\n                        </DialogContentText>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose(false)} color='primary'>\n                        Cancel\n                    </Button>\n                    <Button onClick={() => onClose(true)} color='primary' autoFocus>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nclass MainMenuButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            openDelete: false,\n            openClearHistory: false\n        };\n    }\n\n    handleButtonClick = event => {\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    handleMenuClose = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    handleChatInfo = () => {\n        this.handleMenuClose();\n        setTimeout(() => this.props.openChatDetails(), 150);\n    };\n\n    handleClearHistory = () => {\n        this.handleMenuClose();\n\n        this.setState({ openClearHistory: true });\n    };\n\n    handleClearHistoryContinue = result => {\n        this.setState({ openClearHistory: false });\n\n        if (!result) return;\n\n        const chatId = ApplicationStore.getChatId();\n        const message = 'Messages deleted';\n        const request = {\n            '@type': 'deleteChatHistory',\n            chat_id: chatId,\n            remove_from_chat_list: false\n        };\n\n        this.handleScheduledAction(chatId, 'clientUpdateClearHistory', message, request);\n    };\n\n    handleLeave = () => {\n        this.handleMenuClose();\n\n        this.setState({ openDelete: true });\n    };\n\n    handleLeaveContinue = result => {\n        this.setState({ openDelete: false });\n\n        if (!result) return;\n\n        const chatId = ApplicationStore.getChatId();\n        const message = this.getLeaveChatNotification(chatId);\n        const request = isPrivateChat(chatId)\n            ? { '@type': 'deleteChatHistory', chat_id: chatId, remove_from_chat_list: true }\n            : { '@type': 'leaveChat', chat_id: chatId };\n\n        this.handleScheduledAction(chatId, 'clientUpdateLeaveChat', message, request);\n    };\n\n    handleScheduledAction = (chatId, clientUpdateType, message, request) => {\n        if (!clientUpdateType) return;\n\n        const key = `${clientUpdateType} chatId=${chatId}`;\n        const action = async () => {\n            try {\n                await TdLibController.send(request);\n            } finally {\n                TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: false });\n            }\n        };\n        const cancel = () => {\n            TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: false });\n        };\n\n        const { enqueueSnackbar, classes } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS, action, cancel)) {\n            TdLibController.clientUpdate({ '@type': clientUpdateType, chatId: chatId, inProgress: true });\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS - 2 * TRANSITION_DELAY,\n                action: [\n                    <IconButton key='progress' color='inherit' className='progress-button'>\n                        <NotificationTimer timeout={NOTIFICATION_AUTO_HIDE_DURATION_MS} />\n                    </IconButton>,\n                    <Button\n                        key='undo'\n                        color='primary'\n                        size='small'\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        UNDO\n                    </Button>\n                ]\n            });\n        }\n    };\n\n    getLeaveChatTitle = chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n        if (!chat.type) return null;\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return 'Delete and exit';\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel ? 'Leave channel' : 'Leave group';\n                }\n\n                return null;\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return 'Delete conversation';\n            }\n        }\n\n        return null;\n    };\n\n    getLeaveChatNotification = chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return 'Chat deleted';\n        if (!chat.type) return 'Chat deleted';\n\n        switch (chat.type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return 'Chat deleted';\n            }\n            case 'chatTypeSupergroup': {\n                const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                if (supergroup) {\n                    return supergroup.is_channel ? 'Left channel' : 'Left group';\n                }\n\n                return 'Chat deleted';\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return 'Chat deleted';\n            }\n        }\n\n        return 'Chat deleted';\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { anchorEl, openDelete, openClearHistory } = this.state;\n\n        const chatId = ApplicationStore.getChatId();\n        const clearHistory = canClearHistory(chatId);\n        const deleteChat = canDeleteChat(chatId);\n        const leaveChatTitle = this.getLeaveChatTitle(chatId);\n\n        return (\n            <>\n                <IconButton\n                    aria-owns={anchorEl ? 'simple-menu' : null}\n                    aria-haspopup='true'\n                    className={classes.menuIconButton}\n                    aria-label='Menu'\n                    onClick={this.handleButtonClick}>\n                    <MoreVertIcon />\n                </IconButton>\n                <Menu\n                    id='main-menu'\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={this.handleMenuClose}\n                    getContentAnchorEl={null}\n                    disableAutoFocusItem\n                    disableRestoreFocus={true}\n                    anchorOrigin={menuAnchorOrigin}\n                    transformOrigin={menuTransformOrigin}>\n                    <MenuItem onClick={this.handleChatInfo}>Chat info</MenuItem>\n                    {clearHistory && <MenuItem onClick={this.handleClearHistory}>Clear history</MenuItem>}\n                    {deleteChat && leaveChatTitle && <MenuItem onClick={this.handleLeave}>{leaveChatTitle}</MenuItem>}\n                </Menu>\n                <LeaveChatDialog chatId={chatId} open={openDelete} onClose={this.handleLeaveContinue} />\n                <ClearHistoryDialog chatId={chatId} open={openClearHistory} onClose={this.handleClearHistoryContinue} />\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles),\n    withSnackbar\n);\n\nexport default enhance(MainMenuButton);\n"]},"metadata":{},"sourceType":"module"}