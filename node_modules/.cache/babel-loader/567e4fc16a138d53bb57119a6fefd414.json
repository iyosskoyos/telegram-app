{"ast":null,"code":"import _defineProperty from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/FoundMessage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatTile from './ChatTile';\nimport UserTile from './UserTile';\nimport DialogTitle from './DialogTitle';\nimport { getMessageDate, getMessageSenderFullName, getMessageSenderName } from '../../Utils/Chat';\nimport { getContent } from '../../Utils/Message';\nimport MessageStore from '../../Stores/MessageStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './FoundMessage.css';\n\nconst styles = theme => ({\n  listItem: {\n    padding: 0\n  },\n  foundMessageSubtitle: {\n    color: theme.palette.text.secondary\n  },\n  verifiedIcon: {\n    color: theme.palette.primary.main\n  },\n  foundMessageActive: {\n    color: '#fff',\n    backgroundColor: theme.palette.primary.main,\n    '& $verifiedIcon': {\n      color: '#fff'\n    }\n  }\n});\n\nclass FoundMessage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateChatId = update => {\n      this.setState(_objectSpread({}, update));\n    };\n\n    this.state = {\n      nextChatId: ApplicationStore.getChatId(),\n      nextMessageId: ApplicationStore.getMessageId()\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props = this.props,\n          chatId = _this$props.chatId,\n          messageId = _this$props.messageId,\n          theme = _this$props.theme;\n\n    if (nextState.nextChatId === chatId && nextState.nextMessageId === messageId) {\n      return true;\n    }\n\n    if (nextState.previousChatId === chatId && nextState.previousMessageId === messageId) {\n      return true;\n    }\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId,\n          chatSearch = _this$props2.chatSearch,\n          onClick = _this$props2.onClick,\n          classes = _this$props2.classes,\n          t = _this$props2.t;\n    const selectedChatId = this.state.nextChatId;\n    const selectedMessageId = this.state.nextMessageId;\n    const message = MessageStore.get(chatId, messageId);\n    const sender_user_id = message.sender_user_id;\n    const date = getMessageDate(message);\n    const senderName = getMessageSenderName(message);\n    const senderFullName = getMessageSenderFullName(message);\n    const content = getContent(message, t) || '\\u00A0';\n    const selected = chatId === selectedChatId && messageId === selectedMessageId;\n    const tile = sender_user_id && chatSearch ? React.createElement(UserTile, {\n      userId: sender_user_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : React.createElement(ChatTile, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    });\n    return React.createElement(ListItem, {\n      button: true,\n      className: classes.listItem,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('found-message', {\n        [classes.foundMessageActive]: selected\n      }, {\n        'accent-background': selected\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, tile, React.createElement(\"div\", {\n      className: \"dialog-inner-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-first-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, chatSearch && senderFullName ? React.createElement(\"div\", {\n      className: \"dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, senderFullName) : React.createElement(DialogTitle, {\n      chatId: chatId,\n      classes: {\n        verifiedIcon: classes.verifiedIcon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classNames('dialog-meta', classes.foundMessageSubtitle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, date)), React.createElement(\"div\", {\n      className: \"tile-second-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('dialog-content', classes.foundMessageSubtitle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, !chatSearch && senderName && React.createElement(\"span\", {\n      className: \"dialog-content-accent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, senderName, \": \"), content))))));\n  }\n\n}\n\nFoundMessage.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  chatSearch: PropTypes.bool,\n  onClick: PropTypes.func\n};\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(FoundMessage);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/FoundMessage.js"],"names":["React","PropTypes","classNames","withStyles","withTranslation","compose","ListItem","ChatTile","UserTile","DialogTitle","getMessageDate","getMessageSenderFullName","getMessageSenderName","getContent","MessageStore","ApplicationStore","styles","theme","listItem","padding","foundMessageSubtitle","color","palette","text","secondary","verifiedIcon","primary","main","foundMessageActive","backgroundColor","FoundMessage","Component","constructor","props","onClientUpdateChatId","update","setState","state","nextChatId","getChatId","nextMessageId","getMessageId","shouldComponentUpdate","nextProps","nextState","chatId","messageId","previousChatId","previousMessageId","componentDidMount","on","componentWillUnmount","removeListener","render","chatSearch","onClick","classes","t","selectedChatId","selectedMessageId","message","get","sender_user_id","date","senderName","senderFullName","content","selected","tile","propTypes","number","isRequired","bool","func","enhance","withTheme"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,wBAAzB,EAAmDC,oBAAnD,QAA+E,kBAA/E;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAO,oBAAP;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACrBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH,GADW;AAIrBC,EAAAA,oBAAoB,EAAE;AAClBC,IAAAA,KAAK,EAAEJ,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmBC;AADR,GAJD;AAOrBC,EAAAA,YAAY,EAAE;AACVJ,IAAAA,KAAK,EAAEJ,KAAK,CAACK,OAAN,CAAcI,OAAd,CAAsBC;AADnB,GAPO;AAUrBC,EAAAA,kBAAkB,EAAE;AAChBP,IAAAA,KAAK,EAAE,MADS;AAEhBQ,IAAAA,eAAe,EAAEZ,KAAK,CAACK,OAAN,CAAcI,OAAd,CAAsBC,IAFvB;AAGhB,uBAAmB;AACfN,MAAAA,KAAK,EAAE;AADQ;AAHH;AAVC,CAAL,CAApB;;AAmBA,MAAMS,YAAN,SAA2B9B,KAAK,CAAC+B,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmCnBC,oBAnCmB,GAmCIC,MAAM,IAAI;AAC7B,WAAKC,QAAL,mBACOD,MADP;AAGH,KAvCkB;;AAGf,SAAKE,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAEvB,gBAAgB,CAACwB,SAAjB,EADH;AAETC,MAAAA,aAAa,EAAEzB,gBAAgB,CAAC0B,YAAjB;AAFN,KAAb;AAIH;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAAA,wBACH,KAAKX,KADF;AAAA,UAChCY,MADgC,eAChCA,MADgC;AAAA,UACxBC,SADwB,eACxBA,SADwB;AAAA,UACb7B,KADa,eACbA,KADa;;AAGxC,QAAI2B,SAAS,CAACN,UAAV,KAAyBO,MAAzB,IAAmCD,SAAS,CAACJ,aAAV,KAA4BM,SAAnE,EAA8E;AAC1E,aAAO,IAAP;AACH;;AAED,QAAIF,SAAS,CAACG,cAAV,KAA6BF,MAA7B,IAAuCD,SAAS,CAACI,iBAAV,KAAgCF,SAA3E,EAAsF;AAClF,aAAO,IAAP;AACH;;AAED,QAAIH,SAAS,CAAC1B,KAAV,KAAoBA,KAAxB,EAA+B;AAC3B,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDgC,EAAAA,iBAAiB,GAAG;AAChBlC,IAAAA,gBAAgB,CAACmC,EAAjB,CAAoB,oBAApB,EAA0C,KAAKhB,oBAA/C;AACH;;AAEDiB,EAAAA,oBAAoB,GAAG;AACnBpC,IAAAA,gBAAgB,CAACqC,cAAjB,CAAgC,oBAAhC,EAAsD,KAAKlB,oBAA3D;AACH;;AAQDmB,EAAAA,MAAM,GAAG;AAAA,yBAC0D,KAAKpB,KAD/D;AAAA,UACGY,MADH,gBACGA,MADH;AAAA,UACWC,SADX,gBACWA,SADX;AAAA,UACsBQ,UADtB,gBACsBA,UADtB;AAAA,UACkCC,OADlC,gBACkCA,OADlC;AAAA,UAC2CC,OAD3C,gBAC2CA,OAD3C;AAAA,UACoDC,CADpD,gBACoDA,CADpD;AAEL,UAAMC,cAAc,GAAG,KAAKrB,KAAL,CAAWC,UAAlC;AACA,UAAMqB,iBAAiB,GAAG,KAAKtB,KAAL,CAAWG,aAArC;AACA,UAAMoB,OAAO,GAAG9C,YAAY,CAAC+C,GAAb,CAAiBhB,MAAjB,EAAyBC,SAAzB,CAAhB;AAJK,UAMGgB,cANH,GAMsBF,OANtB,CAMGE,cANH;AAQL,UAAMC,IAAI,GAAGrD,cAAc,CAACkD,OAAD,CAA3B;AACA,UAAMI,UAAU,GAAGpD,oBAAoB,CAACgD,OAAD,CAAvC;AACA,UAAMK,cAAc,GAAGtD,wBAAwB,CAACiD,OAAD,CAA/C;AACA,UAAMM,OAAO,GAAGrD,UAAU,CAAC+C,OAAD,EAAUH,CAAV,CAAV,IAA0B,QAA1C;AACA,UAAMU,QAAQ,GAAGtB,MAAM,KAAKa,cAAX,IAA6BZ,SAAS,KAAKa,iBAA5D;AAEA,UAAMS,IAAI,GAAGN,cAAc,IAAIR,UAAlB,GAA+B,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEQ,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,GAAsE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEjB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnF;AAEA,WACI,oBAAC,QAAD;AAAU,MAAA,MAAM,MAAhB;AAAiB,MAAA,SAAS,EAAEW,OAAO,CAACtC,QAApC;AAA8C,MAAA,OAAO,EAAEqC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,SAAS,EAAErD,UAAU,CACjB,eADiB,EAEjB;AAAE,SAACsD,OAAO,CAAC5B,kBAAT,GAA8BuC;AAAhC,OAFiB,EAGjB;AAAE,6BAAqBA;AAAvB,OAHiB,CADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMKC,IANL,EAOI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKd,UAAU,IAAIW,cAAd,GACG;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BA,cAA/B,CADH,GAGG,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAEpB,MAArB;AAA6B,MAAA,OAAO,EAAE;AAAEpB,QAAAA,YAAY,EAAE+B,OAAO,CAAC/B;AAAxB,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,EAMI;AAAK,MAAA,SAAS,EAAEvB,UAAU,CAAC,aAAD,EAAgBsD,OAAO,CAACpC,oBAAxB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0E2C,IAA1E,CANJ,CADJ,EASI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE7D,UAAU,CAAC,gBAAD,EAAmBsD,OAAO,CAACpC,oBAA3B,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,0CACK,CAACkC,UAAD,IAAeU,UAAf,IACG;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCA,UAAzC,OAFR,EAIKE,OAJL,CAFR,CADJ,CATJ,CAPJ,CADJ,CADJ;AAkCH;;AA5FsC;;AA+F3CpC,YAAY,CAACuC,SAAb,GAAyB;AACrBxB,EAAAA,MAAM,EAAE5C,SAAS,CAACqE,MAAV,CAAiBC,UADJ;AAErBzB,EAAAA,SAAS,EAAE7C,SAAS,CAACqE,MAAV,CAAiBC,UAFP;AAGrBjB,EAAAA,UAAU,EAAErD,SAAS,CAACuE,IAHD;AAIrBjB,EAAAA,OAAO,EAAEtD,SAAS,CAACwE;AAJE,CAAzB;AAOA,MAAMC,OAAO,GAAGrE,OAAO,CACnBF,UAAU,CAACa,MAAD,EAAS;AAAE2D,EAAAA,SAAS,EAAE;AAAb,CAAT,CADS,EAEnBvE,eAAe,EAFI,CAAvB;AAKA,eAAesE,OAAO,CAAC5C,YAAD,CAAtB","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatTile from './ChatTile';\nimport UserTile from './UserTile';\nimport DialogTitle from './DialogTitle';\nimport { getMessageDate, getMessageSenderFullName, getMessageSenderName } from '../../Utils/Chat';\nimport { getContent } from '../../Utils/Message';\nimport MessageStore from '../../Stores/MessageStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './FoundMessage.css';\n\nconst styles = theme => ({\n    listItem: {\n        padding: 0\n    },\n    foundMessageSubtitle: {\n        color: theme.palette.text.secondary\n    },\n    verifiedIcon: {\n        color: theme.palette.primary.main\n    },\n    foundMessageActive: {\n        color: '#fff',\n        backgroundColor: theme.palette.primary.main,\n        '& $verifiedIcon': {\n            color: '#fff'\n        }\n    }\n});\n\nclass FoundMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nextChatId: ApplicationStore.getChatId(),\n            nextMessageId: ApplicationStore.getMessageId()\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, theme } = this.props;\n\n        if (nextState.nextChatId === chatId && nextState.nextMessageId === messageId) {\n            return true;\n        }\n\n        if (nextState.previousChatId === chatId && nextState.previousMessageId === messageId) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        this.setState({\n            ...update\n        });\n    };\n\n    render() {\n        const { chatId, messageId, chatSearch, onClick, classes, t } = this.props;\n        const selectedChatId = this.state.nextChatId;\n        const selectedMessageId = this.state.nextMessageId;\n        const message = MessageStore.get(chatId, messageId);\n\n        const { sender_user_id } = message;\n\n        const date = getMessageDate(message);\n        const senderName = getMessageSenderName(message);\n        const senderFullName = getMessageSenderFullName(message);\n        const content = getContent(message, t) || '\\u00A0';\n        const selected = chatId === selectedChatId && messageId === selectedMessageId;\n\n        const tile = sender_user_id && chatSearch ? <UserTile userId={sender_user_id} /> : <ChatTile chatId={chatId} />;\n\n        return (\n            <ListItem button className={classes.listItem} onClick={onClick}>\n                <div\n                    className={classNames(\n                        'found-message',\n                        { [classes.foundMessageActive]: selected },\n                        { 'accent-background': selected }\n                    )}>\n                    {tile}\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            {chatSearch && senderFullName ? (\n                                <div className='dialog-title'>{senderFullName}</div>\n                            ) : (\n                                <DialogTitle chatId={chatId} classes={{ verifiedIcon: classes.verifiedIcon }} />\n                            )}\n                            <div className={classNames('dialog-meta', classes.foundMessageSubtitle)}>{date}</div>\n                        </div>\n                        <div className='tile-second-row'>\n                            <div className={classNames('dialog-content', classes.foundMessageSubtitle)}>\n                                {\n                                    <>\n                                        {!chatSearch && senderName && (\n                                            <span className='dialog-content-accent'>{senderName}: </span>\n                                        )}\n                                        {content}\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ListItem>\n        );\n    }\n}\n\nFoundMessage.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    chatSearch: PropTypes.bool,\n    onClick: PropTypes.func\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(FoundMessage);\n"]},"metadata":{},"sourceType":"module"}