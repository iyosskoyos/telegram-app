{"ast":null,"code":"import _toConsumableArray from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import{EventEmitter}from'events';import TdLibController from'../Controllers/TdLibController';import{isValidPoll}from'../Utils/Poll';var PollStore=/*#__PURE__*/function(_EventEmitter){_inherits(PollStore,_EventEmitter);function PollStore(){var _this;_classCallCheck(this,PollStore);_this=_possibleConstructorReturn(this,_getPrototypeOf(PollStore).call(this));_this.reset=function(){_this.poll=null;};_this.onUpdate=function(update){switch(update['@type']){case'updateAuthorizationState':{var authorization_state=update.authorization_state;if(!authorization_state)break;switch(authorization_state['@type']){case'authorizationStateClosed':{_this.reset();break;}}break;}default:break;}};_this.onClientUpdate=function(update){switch(update['@type']){case'clientUpdateNewPoll':{_this.set({id:Date.now(),question:'',options:[]});_this.emit('clientUpdateNewPoll',update);break;}case'clientUpdatePollQuestion':{var question=update.question;_this.assign(_this.poll,{question:question});_this.emit('clientUpdatePollQuestion',update);break;}case'clientUpdatePollOption':{var id=update.id,text=update.text;var options=_this.poll.options;_this.assign(_this.poll,{options:options.map(function(x){return x.id===id?_objectSpread({},x,{text:text}):_objectSpread({},x);})});_this.emit('clientUpdatePollOption',update);break;}case'clientUpdateNewPollOption':{var option=update.option;var _options=_this.poll.options;_this.assign(_this.poll,{options:[].concat(_toConsumableArray(_options),[option])});_this.emit('clientUpdateNewPollOption',update);break;}case'clientUpdateDeletePollOption':{var _id=update.id;var _options2=_this.poll.options;_this.assign(_this.poll,{options:_options2.filter(function(x){return x.id!==_id;})});_this.emit('clientUpdateDeletePollOption',update);break;}case'clientUpdateDeletePoll':{_this.set(null);_this.emit('clientUpdateDeletePoll',update);break;}default:break;}};_this.addTdLibListener=function(){TdLibController.addListener('update',_this.onUpdate);TdLibController.addListener('clientUpdate',_this.onClientUpdate);};_this.removeTdLibListener=function(){TdLibController.removeListener('update',_this.onUpdate);TdLibController.removeListener('clientUpdate',_this.onClientUpdate);};_this.reset();_this.addTdLibListener();_this.setMaxListeners(Infinity);return _this;}_createClass(PollStore,[{key:\"assign\",value:function assign(source1,source2){this.set(Object.assign({},source1,source2));}},{key:\"set\",value:function set(poll){this.poll=poll;}},{key:\"getInputMessagePoll\",value:function getInputMessagePoll(){if(!this.poll)return null;if(!isValidPoll(this.poll))return null;var _this$poll=this.poll,question=_this$poll.question,options=_this$poll.options;return{'@type':'inputMessagePoll',question:question,options:options.filter(function(x){return Boolean(x.text);}).map(function(x){return x.text;})};}}]);return PollStore;}(EventEmitter);var store=new PollStore();window.poll=store;export default store;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Stores/PollStore.js"],"names":["EventEmitter","TdLibController","isValidPoll","PollStore","reset","poll","onUpdate","update","authorization_state","onClientUpdate","set","id","Date","now","question","options","emit","assign","text","map","x","option","filter","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","source1","source2","Object","Boolean","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\nimport { isValidPoll } from '../Utils/Poll';\n\nclass PollStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.poll = null;\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateNewPoll': {\n                this.set({\n                    id: Date.now(),\n                    question: '',\n                    options: []\n                });\n\n                this.emit('clientUpdateNewPoll', update);\n                break;\n            }\n            case 'clientUpdatePollQuestion': {\n                const { question } = update;\n\n                this.assign(this.poll, { question });\n\n                this.emit('clientUpdatePollQuestion', update);\n                break;\n            }\n            case 'clientUpdatePollOption': {\n                const { id, text } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: options.map(x => (x.id === id ? { ...x, text } : { ...x })) });\n\n                this.emit('clientUpdatePollOption', update);\n                break;\n            }\n            case 'clientUpdateNewPollOption': {\n                const { option } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: [...options, option] });\n                this.emit('clientUpdateNewPollOption', update);\n                break;\n            }\n            case 'clientUpdateDeletePollOption': {\n                const { id } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: options.filter(x => x.id !== id) });\n                this.emit('clientUpdateDeletePollOption', update);\n                break;\n            }\n            case 'clientUpdateDeletePoll': {\n                this.set(null);\n\n                this.emit('clientUpdateDeletePoll', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        this.set(Object.assign({}, source1, source2));\n    }\n\n    set(poll) {\n        this.poll = poll;\n    }\n\n    getInputMessagePoll() {\n        if (!this.poll) return null;\n        if (!isValidPoll(this.poll)) return null;\n        const { question, options } = this.poll;\n\n        return {\n            '@type': 'inputMessagePoll',\n            question,\n            options: options.filter(x => Boolean(x.text)).map(x => x.text)\n        };\n    }\n}\n\nconst store = new PollStore();\nwindow.poll = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}