{"ast":null,"code":"import _slicedToArray from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import{EventEmitter}from'events';import Cookies from'universal-cookie';import InputTypingManager from'../Utils/InputTypingManager';import UserStore from'./UserStore';import TdLibController from'../Controllers/TdLibController';var ChatStore=/*#__PURE__*/function(_EventEmitter){_inherits(ChatStore,_EventEmitter);function ChatStore(){var _this;_classCallCheck(this,ChatStore);_this=_possibleConstructorReturn(this,_getPrototypeOf(ChatStore).call(this));_this.reset=function(){_this.items=new Map();_this.typingManagers=new Map();_this.onlineMemberCount=new Map();_this.counters=new Map();_this.skippedUpdates=[];};_this.loadClientData=function(){var cookies=new Cookies();var clientData=new Map();try{var data=cookies.get('clientData');Object.keys(data).forEach(function(key){clientData.set(Number(key),data[key]);});}catch(_unused){}_this.clientData=clientData;};_this.saveClientData=function(){var arr=Array.from(_this.clientData.entries());var obj=arr.reduce(function(obj,_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];if(value){obj[String(key)]=value;}return obj;},{});var cookies=new Cookies();cookies.set('clientData',obj);};_this.onUpdate=function(update){switch(update['@type']){case'updateAuthorizationState':{var authorization_state=update.authorization_state;if(!authorization_state)break;switch(authorization_state['@type']){case'authorizationStateClosed':{_this.reset();break;}}break;}case'updateConnectionState':{if(update.state['@type']==='connectionStateUpdating'){_this.updating=true;_this.skippedUpdates=[];}else{_this.updating=false;if(_this.skippedUpdates.length>0){TdLibController.parameters.fastUpdating=false;_this.emitUpdate({'@type':'clientUpdateFastUpdatingComplete',updates:_this.skippedUpdates});_this.skippedUpdates=[];}}break;}case'updateChatDefaultDisableNotification':{//TODO: handle updateChatDefaultDisableNotification\n_this.emitFastUpdate(update);break;}case'updateChatOnlineMemberCount':{_this.setOnlineMemberCount(update.chat_id,update.online_member_count);_this.emitFastUpdate(update);break;}case'updateChatDraftMessage':{var chat_id=update.chat_id,order=update.order,draft_message=update.draft_message;var chat=_this.get(chat_id);if(chat){_this.assign(chat,{order:order==='0'?chat.order:order,draft_message:draft_message});}_this.emitFastUpdate(update);break;}case'updateChatIsMarkedAsUnread':{var _chat_id=update.chat_id,is_marked_as_unread=update.is_marked_as_unread;var _chat=_this.get(_chat_id);if(_chat){_this.assign(_chat,{is_marked_as_unread:is_marked_as_unread});}_this.emitFastUpdate(update);break;}case'updateChatIsPinned':{var _chat_id2=update.chat_id,_order=update.order,is_pinned=update.is_pinned;var _chat2=_this.get(_chat_id2);if(_chat2){_this.assign(_chat2,{order:_order==='0'?_chat2.order:_order,is_pinned:is_pinned});}_this.emitFastUpdate(update);break;}case'updateChatIsSponsored':{var _chat_id3=update.chat_id,_order2=update.order,is_sponsored=update.is_sponsored;var _chat3=_this.get(_chat_id3);if(_chat3){_this.assign(_chat3,{order:_order2==='0'?_chat3.order:_order2,is_sponsored:is_sponsored});}_this.emitFastUpdate(update);break;}case'updateChatLastMessage':{var _chat_id4=update.chat_id,_order3=update.order,last_message=update.last_message;var _chat4=_this.get(_chat_id4);if(_chat4){_this.assign(_chat4,{order:_order3==='0'?_chat4.order:_order3,last_message:last_message});}_this.emitFastUpdate(update);break;}case'updateChatNotificationSettings':{var _chat_id5=update.chat_id,notification_settings=update.notification_settings;var _chat5=_this.get(_chat_id5);if(_chat5){_this.assign(_chat5,{notification_settings:notification_settings});}_this.emitFastUpdate(update);break;}case'updateChatOrder':{var _chat_id6=update.chat_id,_order4=update.order;var _chat6=_this.get(_chat_id6);if(_chat6){_this.assign(_chat6,{order:_order4});}_this.emitFastUpdate(update);break;}case'updateChatPhoto':{var _chat_id7=update.chat_id,photo=update.photo;var _chat7=_this.get(_chat_id7);if(_chat7){_this.assign(_chat7,{photo:photo});switch(_chat7.type['@type']){case'chatTypeBasicGroup':{break;}case'chatTypeSupergroup':{break;}case'chatTypePrivate':case'chatTypeSecret':{var user=UserStore.get(_chat7.type.user_id);if(user){UserStore.assign(user,{profile_photo:update.photo});}break;}}}_this.emitFastUpdate(update);break;}case'updateChatPinnedMessage':{var _chat_id8=update.chat_id,pinned_message_id=update.pinned_message_id;var _chat8=_this.get(_chat_id8);if(_chat8){_this.assign(_chat8,{pinned_message_id:pinned_message_id});}_this.emitFastUpdate(update);break;}case'updateChatReadInbox':{var _chat_id9=update.chat_id,last_read_inbox_message_id=update.last_read_inbox_message_id,unread_count=update.unread_count;var _chat9=_this.get(_chat_id9);if(_chat9){_this.assign(_chat9,{last_read_inbox_message_id:last_read_inbox_message_id,unread_count:unread_count});}_this.emitFastUpdate(update);break;}case'updateChatReadOutbox':{var _chat_id10=update.chat_id,last_read_outbox_message_id=update.last_read_outbox_message_id;var _chat10=_this.get(_chat_id10);if(_chat10){_this.assign(_chat10,{last_read_outbox_message_id:last_read_outbox_message_id});}_this.emitFastUpdate(update);break;}case'updateChatReplyMarkup':{var _chat_id11=update.chat_id,reply_markup_message_id=update.reply_markup_message_id;var _chat11=_this.get(_chat_id11);if(_chat11){_this.assign(_chat11,{reply_markup_message_id:reply_markup_message_id});}_this.emitFastUpdate(update);break;}case'updateChatTitle':{var _chat_id12=update.chat_id,title=update.title;var _chat12=_this.get(_chat_id12);if(_chat12){_this.assign(_chat12,{title:title});}_this.emitFastUpdate(update);break;}case'updateChatUnreadMentionCount':{var _chat_id13=update.chat_id,unread_mention_count=update.unread_mention_count;var _chat13=_this.get(_chat_id13);if(_chat13){_this.assign(_chat13,{unread_mention_count:unread_mention_count});}_this.emitFastUpdate(update);break;}case'updateNewChat':{_this.set(update.chat);_this.emitFastUpdate(update);break;}case'updateSecretChat':{//TODO: handle updateSecretChat\n_this.emitFastUpdate(update);break;}case'updateUnreadChatCount':{//TODO: handle updateUnreadChatCount\n_this.emitFastUpdate(update);break;}case'updateUserChatAction':{var typingManager=_this.getTypingManager(update.chat_id);if(!typingManager){typingManager=new InputTypingManager(update.chat_id,function(update){return _this.emitUpdate(update);});_this.setTypingManager(update.chat_id,typingManager);}var key=update.user_id;if(update.action['@type']==='chatActionCancel'){typingManager.clearAction(key);}else{typingManager.addAction(key,update.action);}_this.emitFastUpdate(update);break;}case'updateMessageMentionRead':{var _chat_id14=update.chat_id,_unread_mention_count=update.unread_mention_count;var _chat14=_this.get(_chat_id14);if(_chat14){_this.assign(_chat14,{unread_mention_count:_unread_mention_count});}_this.emitFastUpdate(update);break;}default:break;}};_this.onClientUpdate=function(update){switch(update['@type']){case'clientUpdateClearHistory':{_this.emitUpdate(update);break;}case'clientUpdateLeaveChat':{_this.emitUpdate(update);break;}case'clientUpdateOpenChat':{_this.emitUpdate(update);break;}case'clientUpdateSetChatClientData':{var chatId=update.chatId,clientData=update.clientData;TdLibController.send({'@type':'setChatClientData',chat_id:chatId,client_data:JSON.stringify(clientData)});_this.setClientData(chatId,clientData);_this.saveClientData();_this.emitUpdate(update);break;}}};_this.emitUpdate=function(update){_this.emit(update['@type'],update);};_this.emitFastUpdate=function(update){if(_this.updating&&TdLibController.parameters.fastUpdating){_this.skippedUpdates.push(update);return;}_this.emit(update['@type'],update);};_this.addTdLibListener=function(){TdLibController.addListener('update',_this.onUpdate);TdLibController.addListener('clientUpdate',_this.onClientUpdate);};_this.removeTdLibListener=function(){TdLibController.removeListener('update',_this.onUpdate);TdLibController.removeListener('clientUpdate',_this.onClientUpdate);};_this.reset();_this.loadClientData();_this.addTdLibListener();_this.setMaxListeners(Infinity);return _this;}_createClass(ChatStore,[{key:\"assign\",value:function assign(source1,source2){//Object.assign(source1, source2);\nthis.set(Object.assign({},source1,source2));}},{key:\"get\",value:function get(chatId){return this.items.get(chatId);}},{key:\"set\",value:function set(chat){this.items.set(chat.id,chat);}},{key:\"getCounters\",value:function getCounters(chatId){return this.counters.get(chatId);}},{key:\"setCounters\",value:function setCounters(chatId,counters){this.counters.set(chatId,counters);}},{key:\"getClientData\",value:function getClientData(chatId){return this.clientData.get(chatId)||{};}},{key:\"setClientData\",value:function setClientData(chatId,data){this.clientData.set(chatId,data);}},{key:\"setOnlineMemberCount\",value:function setOnlineMemberCount(chatId,onlineMemberCount){this.onlineMemberCount.set(chatId,onlineMemberCount);}},{key:\"getOnlineMemberCount\",value:function getOnlineMemberCount(chatId){return this.onlineMemberCount.get(chatId)||0;}},{key:\"getTypingManager\",value:function getTypingManager(chatId){return this.typingManagers.get(chatId);}},{key:\"setTypingManager\",value:function setTypingManager(chatId,typingManager){return this.typingManagers.set(chatId,typingManager);}}]);return ChatStore;}(EventEmitter);var store=new ChatStore();window.chat=store;export default store;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Stores/ChatStore.js"],"names":["EventEmitter","Cookies","InputTypingManager","UserStore","TdLibController","ChatStore","reset","items","Map","typingManagers","onlineMemberCount","counters","skippedUpdates","loadClientData","cookies","clientData","data","get","Object","keys","forEach","key","set","Number","saveClientData","arr","Array","from","entries","obj","reduce","value","String","onUpdate","update","authorization_state","state","updating","length","parameters","fastUpdating","emitUpdate","updates","emitFastUpdate","setOnlineMemberCount","chat_id","online_member_count","order","draft_message","chat","assign","is_marked_as_unread","is_pinned","is_sponsored","last_message","notification_settings","photo","type","user","user_id","profile_photo","pinned_message_id","last_read_inbox_message_id","unread_count","last_read_outbox_message_id","reply_markup_message_id","title","unread_mention_count","typingManager","getTypingManager","setTypingManager","action","clearAction","addAction","onClientUpdate","chatId","send","client_data","JSON","stringify","setClientData","emit","push","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","source1","source2","id","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport InputTypingManager from '../Utils/InputTypingManager';\nimport UserStore from './UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ChatStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n        this.loadClientData();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.typingManagers = new Map();\n        this.onlineMemberCount = new Map();\n        this.counters = new Map();\n        this.skippedUpdates = [];\n    };\n\n    loadClientData = () => {\n        const cookies = new Cookies();\n        const clientData = new Map();\n        try {\n            const data = cookies.get('clientData');\n            Object.keys(data).forEach(key => {\n                clientData.set(Number(key), data[key]);\n            });\n        } catch {}\n\n        this.clientData = clientData;\n    };\n\n    saveClientData = () => {\n        const arr = Array.from(this.clientData.entries());\n        const obj = arr.reduce((obj, [key, value]) => {\n            if (value) {\n                obj[String(key)] = value;\n            }\n            return obj;\n        }, {});\n\n        const cookies = new Cookies();\n        cookies.set('clientData', obj);\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateConnectionState': {\n                if (update.state['@type'] === 'connectionStateUpdating') {\n                    this.updating = true;\n                    this.skippedUpdates = [];\n                } else {\n                    this.updating = false;\n                    if (this.skippedUpdates.length > 0) {\n                        TdLibController.parameters.fastUpdating = false;\n                        this.emitUpdate({\n                            '@type': 'clientUpdateFastUpdatingComplete',\n                            updates: this.skippedUpdates\n                        });\n                        this.skippedUpdates = [];\n                    }\n                }\n                break;\n            }\n            case 'updateChatDefaultDisableNotification': {\n                //TODO: handle updateChatDefaultDisableNotification\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatOnlineMemberCount': {\n                this.setOnlineMemberCount(update.chat_id, update.online_member_count);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatDraftMessage': {\n                const { chat_id, order, draft_message } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        draft_message\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsMarkedAsUnread': {\n                const { chat_id, is_marked_as_unread } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { is_marked_as_unread });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsPinned': {\n                const { chat_id, order, is_pinned } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        is_pinned\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatIsSponsored': {\n                const { chat_id, order, is_sponsored } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        is_sponsored\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatLastMessage': {\n                const { chat_id, order, last_message } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, {\n                        order: order === '0' ? chat.order : order,\n                        last_message\n                    });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatNotificationSettings': {\n                const { chat_id, notification_settings } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { notification_settings });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatOrder': {\n                const { chat_id, order } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { order });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatPhoto': {\n                const { chat_id, photo } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { photo });\n\n                    switch (chat.type['@type']) {\n                        case 'chatTypeBasicGroup': {\n                            break;\n                        }\n                        case 'chatTypeSupergroup': {\n                            break;\n                        }\n                        case 'chatTypePrivate':\n                        case 'chatTypeSecret': {\n                            const user = UserStore.get(chat.type.user_id);\n                            if (user) {\n                                UserStore.assign(user, { profile_photo: update.photo });\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatPinnedMessage': {\n                const { chat_id, pinned_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { pinned_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReadInbox': {\n                const { chat_id, last_read_inbox_message_id, unread_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { last_read_inbox_message_id, unread_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReadOutbox': {\n                const { chat_id, last_read_outbox_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { last_read_outbox_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatReplyMarkup': {\n                const { chat_id, reply_markup_message_id } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { reply_markup_message_id });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatTitle': {\n                const { chat_id, title } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { title });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateChatUnreadMentionCount': {\n                const { chat_id, unread_mention_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { unread_mention_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateNewChat': {\n                this.set(update.chat);\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateSecretChat': {\n                //TODO: handle updateSecretChat\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateUnreadChatCount': {\n                //TODO: handle updateUnreadChatCount\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateUserChatAction': {\n                let typingManager = this.getTypingManager(update.chat_id);\n                if (!typingManager) {\n                    typingManager = new InputTypingManager(update.chat_id, update => this.emitUpdate(update));\n                    this.setTypingManager(update.chat_id, typingManager);\n                }\n\n                const key = update.user_id;\n                if (update.action['@type'] === 'chatActionCancel') {\n                    typingManager.clearAction(key);\n                } else {\n                    typingManager.addAction(key, update.action);\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            case 'updateMessageMentionRead': {\n                const { chat_id, unread_mention_count } = update;\n\n                const chat = this.get(chat_id);\n                if (chat) {\n                    this.assign(chat, { unread_mention_count });\n                }\n\n                this.emitFastUpdate(update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateClearHistory': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateLeaveChat': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateOpenChat': {\n                this.emitUpdate(update);\n                break;\n            }\n            case 'clientUpdateSetChatClientData': {\n                const { chatId, clientData } = update;\n\n                TdLibController.send({\n                    '@type': 'setChatClientData',\n                    chat_id: chatId,\n                    client_data: JSON.stringify(clientData)\n                });\n                this.setClientData(chatId, clientData);\n                this.saveClientData();\n\n                this.emitUpdate(update);\n                break;\n            }\n        }\n    };\n\n    emitUpdate = update => {\n        this.emit(update['@type'], update);\n    };\n\n    emitFastUpdate = update => {\n        if (this.updating && TdLibController.parameters.fastUpdating) {\n            this.skippedUpdates.push(update);\n            return;\n        }\n\n        this.emit(update['@type'], update);\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        //Object.assign(source1, source2);\n        this.set(Object.assign({}, source1, source2));\n    }\n\n    get(chatId) {\n        return this.items.get(chatId);\n    }\n\n    set(chat) {\n        this.items.set(chat.id, chat);\n    }\n\n    getCounters(chatId) {\n        return this.counters.get(chatId);\n    }\n\n    setCounters(chatId, counters) {\n        this.counters.set(chatId, counters);\n    }\n\n    getClientData(chatId) {\n        return this.clientData.get(chatId) || {};\n    }\n\n    setClientData(chatId, data) {\n        this.clientData.set(chatId, data);\n    }\n\n    setOnlineMemberCount(chatId, onlineMemberCount) {\n        this.onlineMemberCount.set(chatId, onlineMemberCount);\n    }\n\n    getOnlineMemberCount(chatId) {\n        return this.onlineMemberCount.get(chatId) || 0;\n    }\n\n    getTypingManager(chatId) {\n        return this.typingManagers.get(chatId);\n    }\n\n    setTypingManager(chatId, typingManager) {\n        return this.typingManagers.set(chatId, typingManager);\n    }\n}\n\nconst store = new ChatStore();\nwindow.chat = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}