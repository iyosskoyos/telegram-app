{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isContentOpened } from '../../../Utils/Message';\nimport MessageStore from '../../../Stores/MessageStore';\n\nclass MediaStatus extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdateMessageContentOpened = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n\n      if (chatId === update.chat_id && messageId === update.message_id) {\n        this.setState({\n          isOpened: isContentOpened(chatId, messageId)\n        });\n      }\n    };\n\n    const _this$props2 = this.props,\n          _chatId = _this$props2.chatId,\n          _messageId = _this$props2.messageId;\n    this.state = {\n      isOpened: isContentOpened(_chatId, _messageId)\n    };\n  }\n\n  componentDidMount() {\n    MessageStore.on('updateMessageContentOpened', this.onUpdateMessageContentOpened);\n  }\n\n  componentWillUnmount() {\n    MessageStore.removeListener('updateMessageContentOpened', this.onUpdateMessageContentOpened);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          icon = _this$props3.icon,\n          openedIcon = _this$props3.openedIcon;\n    const isOpened = this.state.isOpened;\n    return isOpened ? openedIcon : icon;\n  }\n\n}\n\nMediaStatus.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  icon: PropTypes.node,\n  openedIcon: PropTypes.node\n};\nMediaStatus.defaultProps = {\n  icon: null,\n  openedIcon: null\n};\nexport default MediaStatus;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Message/Media/MediaStatus.js"],"names":["React","PropTypes","isContentOpened","MessageStore","MediaStatus","Component","constructor","props","onUpdateMessageContentOpened","update","chatId","messageId","chat_id","message_id","setState","isOpened","state","componentDidMount","on","componentWillUnmount","removeListener","render","icon","openedIcon","propTypes","number","isRequired","node","defaultProps"],"mappings":"AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkBnBC,4BAlBmB,GAkBYC,MAAM,IAAI;AAAA,0BACP,KAAKF,KADE;AAAA,YAC7BG,MAD6B,eAC7BA,MAD6B;AAAA,YACrBC,SADqB,eACrBA,SADqB;;AAGrC,UAAID,MAAM,KAAKD,MAAM,CAACG,OAAlB,IAA6BD,SAAS,KAAKF,MAAM,CAACI,UAAtD,EAAkE;AAC9D,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAEb,eAAe,CAACQ,MAAD,EAASC,SAAT;AAA3B,SAAd;AACH;AACJ,KAxBkB;;AAAA,yBAGe,KAAKJ,KAHpB;AAAA,UAGPG,OAHO,gBAGPA,MAHO;AAAA,UAGCC,UAHD,gBAGCA,SAHD;AAKf,SAAKK,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAEb,eAAe,CAACQ,OAAD,EAASC,UAAT;AADhB,KAAb;AAGH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChBd,IAAAA,YAAY,CAACe,EAAb,CAAgB,4BAAhB,EAA8C,KAAKV,4BAAnD;AACH;;AAEDW,EAAAA,oBAAoB,GAAG;AACnBhB,IAAAA,YAAY,CAACiB,cAAb,CAA4B,4BAA5B,EAA0D,KAAKZ,4BAA/D;AACH;;AAUDa,EAAAA,MAAM,GAAG;AAAA,yBACwB,KAAKd,KAD7B;AAAA,UACGe,IADH,gBACGA,IADH;AAAA,UACSC,UADT,gBACSA,UADT;AAAA,UAEGR,QAFH,GAEgB,KAAKC,KAFrB,CAEGD,QAFH;AAIL,WAAOA,QAAQ,GAAGQ,UAAH,GAAgBD,IAA/B;AACH;;AAhCqC;;AAmC1ClB,WAAW,CAACoB,SAAZ,GAAwB;AACpBd,EAAAA,MAAM,EAAET,SAAS,CAACwB,MAAV,CAAiBC,UADL;AAEpBf,EAAAA,SAAS,EAAEV,SAAS,CAACwB,MAAV,CAAiBC,UAFR;AAGpBJ,EAAAA,IAAI,EAAErB,SAAS,CAAC0B,IAHI;AAIpBJ,EAAAA,UAAU,EAAEtB,SAAS,CAAC0B;AAJF,CAAxB;AAOAvB,WAAW,CAACwB,YAAZ,GAA2B;AACvBN,EAAAA,IAAI,EAAE,IADiB;AAEvBC,EAAAA,UAAU,EAAE;AAFW,CAA3B;AAKA,eAAenB,WAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isContentOpened } from '../../../Utils/Message';\nimport MessageStore from '../../../Stores/MessageStore';\n\nclass MediaStatus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId, messageId } = this.props;\n\n        this.state = {\n            isOpened: isContentOpened(chatId, messageId)\n        };\n    }\n\n    componentDidMount() {\n        MessageStore.on('updateMessageContentOpened', this.onUpdateMessageContentOpened);\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeListener('updateMessageContentOpened', this.onUpdateMessageContentOpened);\n    }\n\n    onUpdateMessageContentOpened = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chat_id && messageId === update.message_id) {\n            this.setState({ isOpened: isContentOpened(chatId, messageId) });\n        }\n    };\n\n    render() {\n        const { icon, openedIcon } = this.props;\n        const { isOpened } = this.state;\n\n        return isOpened ? openedIcon : icon;\n    }\n}\n\nMediaStatus.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    icon: PropTypes.node,\n    openedIcon: PropTypes.node\n};\n\nMediaStatus.defaultProps = {\n    icon: null,\n    openedIcon: null\n};\n\nexport default MediaStatus;\n"]},"metadata":{},"sourceType":"module"}