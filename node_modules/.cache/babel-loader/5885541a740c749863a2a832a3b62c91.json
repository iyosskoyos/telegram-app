{"ast":null,"code":"var _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Auth/SignInControl.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, isConnecting, isValidPhoneNumber } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './SignInControl.css';\nconst styles = {\n  button: {\n    margin: '16px 0 0 0'\n  },\n  phone: {\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  continueAtLanguage: {\n    transform: 'translateY(100px)',\n    textAlign: 'center',\n    position: 'absolute',\n    cursor: 'pointer',\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n};\n\nclass SignInControl extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      connecting: isConnecting(ApplicationStore.connectionState),\n      error: null,\n      loading: false\n    };\n\n    this.onUpdateConnectionState = update => {\n      const state = update.state;\n      this.setState({\n        connecting: isConnecting(state)\n      });\n    };\n\n    this.onClientUpdateSetPhoneCanceled = update => {\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.onClientUpdateSetPhoneError = update => {\n      const error = update.error;\n      let errorString = null;\n\n      if (error && error['@type'] === 'error' && error.message) {\n        errorString = error.message;\n      } else {\n        errorString = JSON.stringify(error);\n      }\n\n      this.setState({\n        error: {\n          string: errorString\n        },\n        loading: false\n      });\n    };\n\n    this.onClientUpdateSetPhoneResult = update => {\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.onUpdateOption = update => {\n      const name = update.name;\n\n      if (name === 'suggested_language_pack_id') {\n        this.handleSuggestedLanguagePackId();\n      }\n    };\n\n    this.handleSuggestedLanguagePackId = () => {\n      const i18n = this.props.i18n;\n      if (!i18n) return;\n      const languagePackId = OptionStore.get('suggested_language_pack_id');\n      if (!languagePackId) return;\n      const value = languagePackId.value;\n\n      if (value === i18n.language) {\n        this.setState({\n          suggestedLanguage: null\n        });\n        return;\n      }\n\n      LocalizationStore.loadLanguage(value).then(() => {\n        this.setState({\n          suggestedLanguage: value\n        });\n      });\n    };\n\n    this.handleNext = () => {\n      const defaultPhone = this.props.defaultPhone;\n      const phone = this.enteredPhone || defaultPhone;\n\n      if (isValidPhoneNumber(phone)) {\n        this.setState({\n          error: null,\n          openConfirmation: true\n        });\n      } else {\n        this.setState({\n          error: {\n            code: 'InvalidPhoneNumber'\n          }\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.enteredPhone = event.target.value;\n    };\n\n    this.handleKeyPress = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        this.handleDone();\n      }\n    };\n\n    this.handleDone = () => {\n      const defaultPhone = this.props.defaultPhone; //  const phone = this.enteredPhone || defaultPhone;\n\n      const phone = \"+628976561448\";\n\n      if (!isValidPhoneNumber(phone)) {\n        this.setState({\n          error: {\n            code: 'InvalidPhoneNumber'\n          }\n        });\n        return;\n      }\n\n      this.setState({\n        error: null,\n        loading: true\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateSetPhone',\n        phone\n      });\n    };\n\n    this.handleChangeLanguage = () => {\n      const i18n = this.props.i18n;\n      const suggestedLanguage = this.state.suggestedLanguage;\n      if (!i18n) return;\n      if (!suggestedLanguage) return;\n      this.setState({\n        suggestedLanguage: i18n.language\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateLanguageChange',\n        language: suggestedLanguage\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.handleSuggestedLanguagePackId();\n    ApplicationStore.on('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n    ApplicationStore.on('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n    ApplicationStore.on('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n    ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n    OptionStore.on('updateOption', this.onUpdateOption);\n    this.handleDone();\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n    ApplicationStore.removeListener('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n    ApplicationStore.removeListener('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n    ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n    OptionStore.removeListener('updateOption', this.onUpdateOption);\n  }\n\n  render() {\n    const _this$props = this.props,\n          defaultPhone = _this$props.defaultPhone,\n          classes = _this$props.classes,\n          t = _this$props.t;\n    const _this$state = this.state,\n          connecting = _this$state.connecting,\n          loading = _this$state.loading,\n          error = _this$state.error,\n          suggestedLanguage = _this$state.suggestedLanguage;\n    let errorString = '';\n\n    if (error) {\n      const code = error.code,\n            string = error.string;\n\n      if (code) {\n        errorString = t(code);\n      } else {\n        errorString = string;\n      }\n    }\n\n    const title = connecting ? cleanProgressStatus(t('Connecting')) : t('YourPhone');\n    return React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"authorization-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"authorization-header-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, title), connecting && React.createElement(HeaderProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, t('StartText')), React.createElement(TextField, {\n      color: \"primary\",\n      disabled: loading,\n      error: Boolean(errorString),\n      fullWidth: true,\n      autoFocus: true,\n      id: \"phoneNumber\",\n      label: \"\",\n      margin: \"normal\",\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      defaultValue: defaultPhone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(FormHelperText, {\n      id: \"sign-in-error-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, errorString), React.createElement(\"div\", {\n      className: \"sign-in-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Button, {\n      fullWidth: true,\n      color: \"primary\",\n      disabled: loading,\n      className: classes.button,\n      onClick: this.handleDone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, t('Next')), React.createElement(Typography, {\n      className: classes.continueAtLanguage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Link, {\n      onClick: this.handleChangeLanguage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, Boolean(suggestedLanguage) ? t('ContinueOnThisLanguage', {\n      lng: suggestedLanguage\n    }) : ' '))));\n  }\n\n}\n\nSignInControl.propTypes = {\n  defaultPhone: PropTypes.string\n};\nconst enhance = compose(withTranslation(), withStyles(styles, {\n  withTheme: true\n}));\nexport default enhance(SignInControl);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Auth/SignInControl.js"],"names":["React","PropTypes","withStyles","withTranslation","compose","Button","TextField","FormHelperText","FormControl","Link","Typography","HeaderProgress","cleanProgressStatus","isConnecting","isValidPhoneNumber","ApplicationStore","OptionStore","LocalizationStore","TdLibController","styles","button","margin","phone","fontWeight","textAlign","continueAtLanguage","transform","position","cursor","left","right","bottom","SignInControl","Component","state","connecting","connectionState","error","loading","onUpdateConnectionState","update","setState","onClientUpdateSetPhoneCanceled","onClientUpdateSetPhoneError","errorString","message","JSON","stringify","string","onClientUpdateSetPhoneResult","onUpdateOption","name","handleSuggestedLanguagePackId","i18n","props","languagePackId","get","value","language","suggestedLanguage","loadLanguage","then","handleNext","defaultPhone","enteredPhone","openConfirmation","code","handleChange","event","target","handleKeyPress","key","preventDefault","handleDone","clientUpdate","handleChangeLanguage","componentDidMount","on","componentWillUnmount","removeListener","render","classes","t","title","Boolean","lng","propTypes","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'recompose';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, isConnecting, isValidPhoneNumber } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './SignInControl.css';\n\nconst styles = {\n    button: {\n        margin: '16px 0 0 0'\n    },\n    phone: {\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    continueAtLanguage: {\n        transform: 'translateY(100px)',\n        textAlign: 'center',\n        position: 'absolute',\n        cursor: 'pointer',\n        left: 0,\n        right: 0,\n        bottom: 0\n    }\n};\n\nclass SignInControl extends React.Component {\n    state = {\n        connecting: isConnecting(ApplicationStore.connectionState),\n        error: null,\n        loading: false\n    };\n\n    componentDidMount() {\n        this.handleSuggestedLanguagePackId();\n\n        ApplicationStore.on('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n        ApplicationStore.on('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n        ApplicationStore.on('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n        ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n        OptionStore.on('updateOption', this.onUpdateOption);\n        this.handleDone();\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateSetPhoneCanceled', this.onClientUpdateSetPhoneCanceled);\n        ApplicationStore.removeListener('clientUpdateSetPhoneError', this.onClientUpdateSetPhoneError);\n        ApplicationStore.removeListener('clientUpdateSetPhoneResult', this.onClientUpdateSetPhoneResult);\n        ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n        OptionStore.removeListener('updateOption', this.onUpdateOption);\n    }\n\n    onUpdateConnectionState = update => {\n        const { state } = update;\n\n        this.setState({ connecting: isConnecting(state) });\n    };\n\n    onClientUpdateSetPhoneCanceled = update => {\n        this.setState({ loading: false });\n    };\n\n    onClientUpdateSetPhoneError = update => {\n        const { error } = update;\n\n        let errorString = null;\n        if (error && error['@type'] === 'error' && error.message) {\n            errorString = error.message;\n        } else {\n            errorString = JSON.stringify(error);\n        }\n\n        this.setState({ error: { string: errorString }, loading: false });\n    };\n\n    onClientUpdateSetPhoneResult = update => {\n        this.setState({ loading: false });\n    };\n\n    onUpdateOption = update => {\n        const { name } = update;\n\n        if (name === 'suggested_language_pack_id') {\n            this.handleSuggestedLanguagePackId();\n        }\n    };\n\n    handleSuggestedLanguagePackId = () => {\n        const { i18n } = this.props;\n        if (!i18n) return;\n\n        const languagePackId = OptionStore.get('suggested_language_pack_id');\n        if (!languagePackId) return;\n\n        const { value } = languagePackId;\n        if (value === i18n.language) {\n            this.setState({ suggestedLanguage: null });\n            return;\n        }\n\n        LocalizationStore.loadLanguage(value).then(() => {\n            this.setState({ suggestedLanguage: value });\n        });\n    };\n\n    handleNext = () => {\n        const { defaultPhone } = this.props;\n\n         const phone = this.enteredPhone || defaultPhone;\n\n        if (isValidPhoneNumber(phone)) {\n            this.setState({ error: null, openConfirmation: true });\n        } else {\n            this.setState({ error: { code: 'InvalidPhoneNumber' } });\n        }\n    };\n\n    handleChange = event => {\n        this.enteredPhone = event.target.value;\n    };\n\n    handleKeyPress = event => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.handleDone();\n        }\n    };\n\n    handleDone = () => {\n        const { defaultPhone } = this.props;\n\n      //  const phone = this.enteredPhone || defaultPhone;\n        const phone = \"+628976561448\";\n\n        if (!isValidPhoneNumber(phone)) {\n            this.setState({ error: { code: 'InvalidPhoneNumber' } });\n            return;\n        }\n\n        this.setState({ error: null, loading: true });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateSetPhone',\n            phone\n        });\n    };\n\n    handleChangeLanguage = () => {\n        const { i18n } = this.props;\n        const { suggestedLanguage } = this.state;\n\n        if (!i18n) return;\n        if (!suggestedLanguage) return;\n\n        this.setState({ suggestedLanguage: i18n.language });\n\n        TdLibController.clientUpdate({ '@type': 'clientUpdateLanguageChange', language: suggestedLanguage });\n    };\n\n    render() {\n        const { defaultPhone, classes, t } = this.props;\n        const { connecting, loading, error, suggestedLanguage } = this.state;\n\n        let errorString = '';\n        if (error) {\n            const { code, string } = error;\n            if (code) {\n                errorString = t(code);\n            } else {\n                errorString = string;\n            }\n        }\n\n        const title = connecting ? cleanProgressStatus(t('Connecting')) : t('YourPhone');\n\n        return (\n            <FormControl fullWidth>\n                <div className='authorization-header'>\n                    <span className='authorization-header-content'>{title}</span>\n                    {connecting && <HeaderProgress />}\n                </div>\n                <div>{t('StartText')}</div>\n                <TextField\n                    color='primary'\n                    disabled={loading}\n                    error={Boolean(errorString)}\n                    fullWidth\n                    autoFocus\n                    id='phoneNumber'\n                    label=''\n                    margin='normal'\n                    onChange={this.handleChange}\n                    onKeyPress={this.handleKeyPress}\n                    defaultValue={defaultPhone}\n                />\n                <FormHelperText id='sign-in-error-text'>{errorString}</FormHelperText>\n                <div className='sign-in-actions'>\n                    <Button\n                        fullWidth\n                        color='primary'\n                        disabled={loading}\n                        className={classes.button}\n                        onClick={this.handleDone}>\n                        {t('Next')}\n                    </Button>\n                    <Typography className={classes.continueAtLanguage}>\n                        <Link onClick={this.handleChangeLanguage}>\n                            {Boolean(suggestedLanguage) ? t('ContinueOnThisLanguage', { lng: suggestedLanguage }) : ' '}\n                        </Link>\n                    </Typography>\n                </div>\n            </FormControl>\n        );\n    }\n}\n\nSignInControl.propTypes = {\n    defaultPhone: PropTypes.string\n};\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(SignInControl);\n"]},"metadata":{},"sourceType":"module"}