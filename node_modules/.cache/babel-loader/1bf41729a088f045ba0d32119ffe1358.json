{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nclass Animator {\n  constructor(_duration, _options = []) {\n    this.start = () => {\n      this.stopped = false;\n      this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    this.startAnim = timeStamp => {\n      const start = this.start,\n            duration = this.duration;\n      this.start = timeStamp;\n      this.end = start + duration;\n      this.draw(timeStamp);\n    };\n\n    this.draw = now => {\n      const stopped = this.stopped,\n            duration = this.duration,\n            start = this.start,\n            options = this.options;\n      if (stopped) return;\n      if (now - start >= duration) this.stopped = true;\n      const p = (now - start) / duration;\n      const val = Animator.outSine(p);\n      options.forEach(x => {\n        const from = x.from,\n              to = x.to,\n              func = x.func;\n        func(from + (to - from) * val);\n      });\n      this.id = requestAnimationFrame(this.draw);\n    };\n\n    this.stop = () => {\n      this.stopped = true;\n      cancelAnimationFrame(this.id);\n    };\n\n    this.options = _options;\n    this.duration = _duration;\n  }\n\n  static outSine(n) {\n    return Math.sin(n * Math.PI / 2);\n  }\n\n}\n\nexport default Animator;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Utils/Animatior.js"],"names":["Animator","constructor","duration","options","start","stopped","id","requestAnimationFrame","startAnim","timeStamp","end","draw","now","p","val","outSine","forEach","x","from","to","func","stop","cancelAnimationFrame","n","Math","sin","PI"],"mappings":"AAAA;;;;;;AAOA,MAAMA,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,SAAD,EAAWC,QAAO,GAAG,EAArB,EAAyB;AAAA,SASpCC,KAToC,GAS5B,MAAM;AACV,WAAKC,OAAL,GAAe,KAAf;AACA,WAAKC,EAAL,GAAUC,qBAAqB,CAAC,KAAKC,SAAN,CAA/B;AACH,KAZmC;;AAAA,SAcpCA,SAdoC,GAcxBC,SAAS,IAAI;AAAA,YACbL,KADa,GACO,IADP,CACbA,KADa;AAAA,YACNF,QADM,GACO,IADP,CACNA,QADM;AAGrB,WAAKE,KAAL,GAAaK,SAAb;AACA,WAAKC,GAAL,GAAWN,KAAK,GAAGF,QAAnB;AACA,WAAKS,IAAL,CAAUF,SAAV;AACH,KApBmC;;AAAA,SAsBpCE,IAtBoC,GAsB7BC,GAAG,IAAI;AAAA,YACFP,OADE,GACoC,IADpC,CACFA,OADE;AAAA,YACOH,QADP,GACoC,IADpC,CACOA,QADP;AAAA,YACiBE,KADjB,GACoC,IADpC,CACiBA,KADjB;AAAA,YACwBD,OADxB,GACoC,IADpC,CACwBA,OADxB;AAGV,UAAIE,OAAJ,EAAa;AACb,UAAIO,GAAG,GAAGR,KAAN,IAAeF,QAAnB,EAA6B,KAAKG,OAAL,GAAe,IAAf;AAE7B,YAAMQ,CAAC,GAAG,CAACD,GAAG,GAAGR,KAAP,IAAgBF,QAA1B;AACA,YAAMY,GAAG,GAAGd,QAAQ,CAACe,OAAT,CAAiBF,CAAjB,CAAZ;AAEAV,MAAAA,OAAO,CAACa,OAAR,CAAgBC,CAAC,IAAI;AAAA,cACTC,IADS,GACUD,CADV,CACTC,IADS;AAAA,cACHC,EADG,GACUF,CADV,CACHE,EADG;AAAA,cACCC,IADD,GACUH,CADV,CACCG,IADD;AAEjBA,QAAAA,IAAI,CAACF,IAAI,GAAG,CAACC,EAAE,GAAGD,IAAN,IAAcJ,GAAtB,CAAJ;AACH,OAHD;AAKA,WAAKR,EAAL,GAAUC,qBAAqB,CAAC,KAAKI,IAAN,CAA/B;AACH,KArCmC;;AAAA,SAuCpCU,IAvCoC,GAuC7B,MAAM;AACT,WAAKhB,OAAL,GAAe,IAAf;AACAiB,MAAAA,oBAAoB,CAAC,KAAKhB,EAAN,CAApB;AACH,KA1CmC;;AAChC,SAAKH,OAAL,GAAeA,QAAf;AACA,SAAKD,QAAL,GAAgBA,SAAhB;AACH;;AAED,SAAOa,OAAP,CAAeQ,CAAf,EAAkB;AACd,WAAOC,IAAI,CAACC,GAAL,CAAUF,CAAC,GAAGC,IAAI,CAACE,EAAV,GAAgB,CAAzB,CAAP;AACH;;AARU;;AA8Cf,eAAe1B,QAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (stopped) return;\n        if (now - start >= duration) this.stopped = true;\n\n        const p = (now - start) / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            func(from + (to - from) * val);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n"]},"metadata":{},"sourceType":"module"}