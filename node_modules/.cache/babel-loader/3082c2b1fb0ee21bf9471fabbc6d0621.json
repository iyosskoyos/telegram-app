{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { arrayBufferToBase64 } from './Utils/Common';\nimport Cookies from 'universal-cookie';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ApplicationStore from './Stores/ApplicationStore';\nimport TdLibController from './Controllers/TdLibController'; // In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = //false;\nBoolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default async function register() {\n  console.log('[SW] Register');\n\n  if (OPTIMIZATIONS_FIRST_START) {\n    const cookies = new Cookies();\n    cookies.set('register', true);\n  }\n\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    const serviceWorkerName = process.env.NODE_ENV === 'production' ? 'service-worker.js' : 'custom-service-worker.js';\n    const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/\").concat(serviceWorkerName);\n    console.log(\"[SW] Service worker url: \".concat(swUrl));\n\n    if (!isLocalhost) {\n      // Is not local host. Just register service worker\n      await registerValidSW(swUrl);\n    } else {\n      // This is running on localhost. Lets check if a service worker still exists or not.\n      await checkValidServiceWorker(swUrl);\n    }\n  }\n}\n\nasync function registerValidSW(swUrl) {\n  console.log('[SW] RegisterValidSW');\n\n  try {\n    const registration = await navigator.serviceWorker.register(swUrl);\n\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('[SW] New content is available; please refresh.');\n            ApplicationStore.emit('clientUpdateNewContentAvailable');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('[SW] Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  } catch (error) {\n    console.error('[SW] Error during service worker registration: ', error);\n  }\n}\n\nexport async function subscribeNotifications() {\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    let pushSubscription = await registration.pushManager.getSubscription();\n    if (pushSubscription) await pushSubscription.unsubscribe();\n    pushSubscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true\n    });\n    console.log('[SW] Received push subscription: ', JSON.stringify(pushSubscription));\n    const _pushSubscription = pushSubscription,\n          endpoint = _pushSubscription.endpoint;\n    const p256dh_base64url = arrayBufferToBase64(pushSubscription.getKey('p256dh'));\n    const auth_base64url = arrayBufferToBase64(pushSubscription.getKey('auth'));\n\n    if (endpoint && p256dh_base64url && auth_base64url) {\n      const authorizationState = ApplicationStore.authorizationState;\n\n      if (authorizationState && authorizationState['@type'] === 'authorizationStateReady') {\n        await TdLibController.send({\n          '@type': 'registerDevice',\n          device_token: {\n            '@type': 'deviceTokenWebPush',\n            endpoint: endpoint,\n            p256dh_base64url: p256dh_base64url,\n            auth_base64url: auth_base64url\n          },\n          other_user_ids: []\n        });\n      }\n    }\n  } catch (error) {\n    console.error('[SW] Error during service worker push subscription: ', error);\n  }\n}\n\nasync function checkValidServiceWorker(swUrl) {\n  console.log('[SW] CheckValidServiceWorker'); // Check if the service worker can be found. If it can't reload the page.\n\n  try {\n    const response = await fetch(swUrl); // Ensure service worker exists, and that we really are getting a JS file.\n\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      const registration = await navigator.serviceWorker.ready;\n      await registration.unregister();\n      window.location.reload();\n    } else {\n      // Service worker found. Proceed as normal.\n      await registerValidSW(swUrl);\n    }\n  } catch (error) {\n    console.log('[SW] No internet connection found. App is running in offline mode.');\n  }\n}\n\nexport async function unregister() {\n  if ('serviceWorker' in navigator) {\n    const registration = await navigator.serviceWorker.ready;\n    await registration.unregister();\n  }\n}\nexport async function update() {\n  if ('serviceWorker' in navigator) {\n    const registration = await navigator.serviceWorker.ready;\n    await registration.update();\n  }\n}","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/registerServiceWorker.js"],"names":["arrayBufferToBase64","Cookies","OPTIMIZATIONS_FIRST_START","ApplicationStore","TdLibController","isLocalhost","Boolean","window","location","hostname","match","register","console","log","cookies","set","navigator","publicUrl","URL","process","env","PUBLIC_URL","origin","serviceWorkerName","NODE_ENV","swUrl","registerValidSW","checkValidServiceWorker","registration","serviceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","emit","error","subscribeNotifications","ready","pushSubscription","pushManager","getSubscription","unsubscribe","subscribe","userVisibleOnly","JSON","stringify","endpoint","p256dh_base64url","getKey","auth_base64url","authorizationState","send","device_token","other_user_ids","response","fetch","status","headers","get","indexOf","unregister","reload","update"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { arrayBufferToBase64 } from './Utils/Common';\nimport Cookies from 'universal-cookie';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ApplicationStore from './Stores/ApplicationStore';\nimport TdLibController from './Controllers/TdLibController';\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost =\n    //false;\n    Boolean(\n        window.location.hostname === 'localhost' ||\n            // [::1] is the IPv6 localhost address.\n            window.location.hostname === '[::1]' ||\n            // 127.0.0.1/8 is considered localhost for IPv4.\n            window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    );\n\nexport default async function register() {\n    console.log('[SW] Register');\n\n    if (OPTIMIZATIONS_FIRST_START) {\n        const cookies = new Cookies();\n        cookies.set('register', true);\n    }\n\n    if ('serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        const serviceWorkerName =\n            process.env.NODE_ENV === 'production' ? 'service-worker.js' : 'custom-service-worker.js';\n        const swUrl = `${process.env.PUBLIC_URL}/${serviceWorkerName}`;\n        console.log(`[SW] Service worker url: ${swUrl}`);\n\n        if (!isLocalhost) {\n            // Is not local host. Just register service worker\n            await registerValidSW(swUrl);\n        } else {\n            // This is running on localhost. Lets check if a service worker still exists or not.\n            await checkValidServiceWorker(swUrl);\n        }\n    }\n}\n\nasync function registerValidSW(swUrl) {\n    console.log('[SW] RegisterValidSW');\n    try {\n        const registration = await navigator.serviceWorker.register(swUrl);\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the old content will have been purged and\n                        // the fresh content will have been added to the cache.\n                        // It's the perfect time to display a \"New content is\n                        // available; please refresh.\" message in your web app.\n                        console.log('[SW] New content is available; please refresh.');\n\n                        ApplicationStore.emit('clientUpdateNewContentAvailable');\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('[SW] Content is cached for offline use.');\n                    }\n                }\n            };\n        };\n    } catch (error) {\n        console.error('[SW] Error during service worker registration: ', error);\n    }\n}\n\nexport async function subscribeNotifications() {\n    try {\n        const registration = await navigator.serviceWorker.ready;\n\n        let pushSubscription = await registration.pushManager.getSubscription();\n        if (pushSubscription) await pushSubscription.unsubscribe();\n\n        pushSubscription = await registration.pushManager.subscribe({ userVisibleOnly: true });\n        console.log('[SW] Received push subscription: ', JSON.stringify(pushSubscription));\n\n        const { endpoint } = pushSubscription;\n        const p256dh_base64url = arrayBufferToBase64(pushSubscription.getKey('p256dh'));\n        const auth_base64url = arrayBufferToBase64(pushSubscription.getKey('auth'));\n\n        if (endpoint && p256dh_base64url && auth_base64url) {\n            const { authorizationState } = ApplicationStore;\n            if (authorizationState && authorizationState['@type'] === 'authorizationStateReady') {\n                await TdLibController.send({\n                    '@type': 'registerDevice',\n                    device_token: {\n                        '@type': 'deviceTokenWebPush',\n                        endpoint: endpoint,\n                        p256dh_base64url: p256dh_base64url,\n                        auth_base64url: auth_base64url\n                    },\n                    other_user_ids: []\n                });\n            }\n        }\n    } catch (error) {\n        console.error('[SW] Error during service worker push subscription: ', error);\n    }\n}\n\nasync function checkValidServiceWorker(swUrl) {\n    console.log('[SW] CheckValidServiceWorker');\n    // Check if the service worker can be found. If it can't reload the page.\n    try {\n        const response = await fetch(swUrl);\n\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n            // No service worker found. Probably a different app. Reload the page.\n            const registration = await navigator.serviceWorker.ready;\n            await registration.unregister();\n\n            window.location.reload();\n        } else {\n            // Service worker found. Proceed as normal.\n            await registerValidSW(swUrl);\n        }\n    } catch (error) {\n        console.log('[SW] No internet connection found. App is running in offline mode.');\n    }\n}\n\nexport async function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registration = await navigator.serviceWorker.ready;\n\n        await registration.unregister();\n    }\n}\n\nexport async function update() {\n    if ('serviceWorker' in navigator) {\n        const registration = await navigator.serviceWorker.ready;\n\n        await registration.update();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}