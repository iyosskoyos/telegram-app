{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { isChatMuted } from '../../Utils/Chat';\nimport { debounce } from '../../Utils/Common';\nimport { toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { NOTIFICATION_DEBOUNCE_DELAY_MS } from '../../Constants';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\n\nclass NotificationsControl extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdateChatNotificationSettings = update => {\n      const chat_id = update.chat_id;\n      const chatId = this.props.chatId;\n      if (!chat_id) return;\n      if (chat_id !== chatId) return;\n      this.setState({\n        isMuted: isChatMuted(chatId)\n      });\n    };\n\n    this.onUpdateScopeNotificationSettings = update => {\n      const chatId = this.props.chatId;\n      const chat = ChatStore.get(chatId);\n\n      switch (update.scope['@type']) {\n        case 'notificationSettingsScopeGroupChats':\n          {\n            if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n              this.setState({\n                isMuted: isChatMuted(chatId)\n              });\n            }\n\n            break;\n          }\n\n        case 'notificationSettingsScopePrivateChats':\n          {\n            if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n              this.setState({\n                isMuted: isChatMuted(chatId)\n              });\n            }\n\n            break;\n          }\n      }\n    };\n\n    this.handleSetChatNotifications = () => {\n      this.setState({\n        isMuted: !this.state.isMuted\n      });\n      this.debouncedSetChatNotificationSettings();\n    };\n\n    this.setChatNotificationSettings = () => {\n      const chatId = this.props.chatId;\n      const isMuted = this.state.isMuted;\n      toggleChatNotificationSettings(chatId, isMuted);\n    };\n\n    const _chatId = props.chatId;\n    this.state = {\n      prevChatId: _chatId,\n      isMuted: isChatMuted(_chatId)\n    };\n    this.debouncedSetChatNotificationSettings = debounce(this.setChatNotificationSettings, NOTIFICATION_DEBOUNCE_DELAY_MS);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.chatId !== state.prevChatId) {\n      const chatId = props.chatId;\n      return {\n        prevChatId: chatId,\n        isMuted: isChatMuted(chatId)\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    ChatStore.on('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n    NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n    NotificationStore.removeListener('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n  }\n\n}\n\nexport default NotificationsControl;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/ColumnMiddle/NotificationsControl.js"],"names":["React","isChatMuted","debounce","toggleChatNotificationSettings","NOTIFICATION_DEBOUNCE_DELAY_MS","ChatStore","NotificationStore","NotificationsControl","Component","constructor","props","onUpdateChatNotificationSettings","update","chat_id","chatId","setState","isMuted","onUpdateScopeNotificationSettings","chat","get","scope","type","handleSetChatNotifications","state","debouncedSetChatNotificationSettings","setChatNotificationSettings","prevChatId","getDerivedStateFromProps","componentDidMount","on","componentWillUnmount","removeListener"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { isChatMuted } from '../../Utils/Chat';\nimport { debounce } from '../../Utils/Common';\nimport { toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { NOTIFICATION_DEBOUNCE_DELAY_MS } from '../../Constants';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\n\nclass NotificationsControl extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId } = props;\n\n        this.state = {\n            prevChatId: chatId,\n            isMuted: isChatMuted(chatId)\n        };\n\n        this.debouncedSetChatNotificationSettings = debounce(\n            this.setChatNotificationSettings,\n            NOTIFICATION_DEBOUNCE_DELAY_MS\n        );\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId) {\n            const { chatId } = props;\n\n            return {\n                prevChatId: chatId,\n                isMuted: isChatMuted(chatId)\n            };\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        ChatStore.on('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n        NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('updateChatNotificationSettings', this.onUpdateChatNotificationSettings);\n        NotificationStore.removeListener('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    onUpdateChatNotificationSettings = update => {\n        const { chat_id } = update;\n        const { chatId } = this.props;\n\n        if (!chat_id) return;\n        if (chat_id !== chatId) return;\n\n        this.setState({ isMuted: isChatMuted(chatId) });\n    };\n\n    onUpdateScopeNotificationSettings = update => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n\n        switch (update.scope['@type']) {\n            case 'notificationSettingsScopeGroupChats': {\n                if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n                    this.setState({ isMuted: isChatMuted(chatId) });\n                }\n                break;\n            }\n            case 'notificationSettingsScopePrivateChats': {\n                if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n                    this.setState({ isMuted: isChatMuted(chatId) });\n                }\n                break;\n            }\n        }\n    };\n\n    handleSetChatNotifications = () => {\n        this.setState({ isMuted: !this.state.isMuted });\n        this.debouncedSetChatNotificationSettings();\n    };\n\n    setChatNotificationSettings = () => {\n        const { chatId } = this.props;\n        const { isMuted } = this.state;\n\n        toggleChatNotificationSettings(chatId, isMuted);\n    };\n}\n\nexport default NotificationsControl;\n"]},"metadata":{},"sourceType":"module"}