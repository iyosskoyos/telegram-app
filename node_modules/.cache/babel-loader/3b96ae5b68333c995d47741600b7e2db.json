{"ast":null,"code":"var _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/SharedMedia/SharedVideo.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox/';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Popover from '@material-ui/core/Popover';\nimport { PHOTO_SIZE, PHOTO_THUMBNAIL_SIZE, THUMBNAIL_BLURRED_SIZE_90 } from '../../../Constants';\nimport { forwardMessages, openChat } from '../../../Actions/Client';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { getDurationString, getSize } from '../../../Utils/Common';\nimport { getChatShortTitle, isPrivateChat } from '../../../Utils/Chat';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './SharedVideo.css';\n\nconst styles = theme => ({\n  sharedPhotoContent: {// backgroundColor: theme.palette.type === 'dark' ? theme.palette.background.paper : theme.palette.background.default\n  }\n});\n\nclass SharedVideo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateVideoThumbnailBlob = update => {\n      const thumbnail = this.props.video.thumbnail;\n      const fileId = update.fileId;\n      if (!thumbnail) return;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.handleOpenMessage = event => {\n      this.handleCloseContextMenu(event);\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      openChat(chatId, messageId);\n    };\n\n    this.handleForward = event => {\n      this.handleCloseContextMenu(event);\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n      forwardMessages(chatId, [messageId]);\n    };\n\n    this.handleDelete = event => {\n      this.handleCloseContextMenu(event);\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n      const message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      const can_be_deleted_for_all_users = message.can_be_deleted_for_all_users;\n      this.setState({\n        openDeleteDialog: true,\n        canBeDeletedForAllUsers: can_be_deleted_for_all_users,\n        revoke: can_be_deleted_for_all_users\n      });\n    };\n\n    this.handleContextMenu = async event => {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      const contextMenu = this.state.contextMenu;\n\n      if (contextMenu) {\n        this.setState({\n          contextMenu: false\n        });\n      } else {\n        const left = event.clientX;\n        const top = event.clientY;\n        this.setState({\n          contextMenu: true,\n          left,\n          top\n        });\n      }\n    };\n\n    this.handleCloseContextMenu = event => {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      this.setState({\n        contextMenu: false\n      });\n    };\n\n    this.handleRevokeChange = () => {\n      this.setState({\n        revoke: !this.state.revoke\n      });\n    };\n\n    this.handleCloseDelete = () => {\n      this.setState({\n        openDeleteDialog: false\n      });\n    };\n\n    this.handleDeleteContinue = () => {\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n      const revoke = this.state.revoke;\n      this.handleCloseDelete();\n      TdLibController.send({\n        '@type': 'deleteMessages',\n        chat_id: chatId,\n        message_ids: [messageId],\n        revoke: revoke\n      });\n    };\n\n    this.state = {\n      contextMenu: false,\n      left: 0,\n      top: 0,\n      openDeleteDialog: false,\n      revoke: false\n    };\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId,\n          classes = _this$props5.classes,\n          openMedia = _this$props5.openMedia,\n          style = _this$props5.style,\n          showOpenMessage = _this$props5.showOpenMessage,\n          t = _this$props5.t;\n    const _this$props$video = this.props.video,\n          thumbnail = _this$props$video.thumbnail,\n          video = _this$props$video.video,\n          width = _this$props$video.width,\n          height = _this$props$video.height,\n          duration = _this$props$video.duration;\n    const _this$state = this.state,\n          contextMenu = _this$state.contextMenu,\n          left = _this$state.left,\n          top = _this$state.top,\n          openDeleteDialog = _this$state.openDeleteDialog,\n          revoke = _this$state.revoke;\n    const message = MessageStore.get(chatId, messageId);\n    if (!message) return null;\n    const can_be_forwarded = message.can_be_forwarded,\n          can_be_deleted_only_for_self = message.can_be_deleted_only_for_self,\n          can_be_deleted_for_all_users = message.can_be_deleted_for_all_users;\n    const count = 1;\n    const thumbSrc = getSrc(thumbnail ? thumbnail.photo : null);\n    const isBlurred = isBlurredThumbnail(thumbnail, THUMBNAIL_BLURRED_SIZE_90);\n    return React.createElement(\"div\", {\n      className: \"shared-photo\",\n      style: style,\n      onClick: openMedia,\n      onContextMenu: this.handleContextMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"shared-video-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('shared-video-content', {\n        'media-blurred': isBlurred\n      }),\n      style: {\n        backgroundImage: \"url(\".concat(thumbSrc, \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"shared-video-meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, getDurationString(duration))), React.createElement(Popover, {\n      open: contextMenu,\n      onClose: this.handleCloseContextMenu,\n      anchorReference: \"anchorPosition\",\n      anchorPosition: {\n        top,\n        left\n      },\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n      },\n      onMouseDown: e => e.stopPropagation(),\n      onClick: e => e.stopPropagation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(MenuList, {\n      classes: {\n        root: classes.menuListRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, showOpenMessage && React.createElement(MenuItem, {\n      onClick: this.handleOpenMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, t('GoToMessage')), can_be_forwarded && React.createElement(MenuItem, {\n      onClick: this.handleForward,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, t('Forward')), (can_be_deleted_only_for_self || can_be_deleted_for_all_users) && React.createElement(MenuItem, {\n      onClick: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, t('Delete')))), React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: openDeleteDialog,\n      onClose: this.handleCloseDelete,\n      \"aria-labelledby\": \"delete-dialog-title\",\n      onClick: e => e.stopPropagation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"delete-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Confirm\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, count === 1 ? 'Are you sure you want to delete 1 message?' : \"Are you sure you want to delete \".concat(count, \" messages?\")), can_be_deleted_for_all_users && React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        checked: revoke,\n        onChange: this.handleRevokeChange,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }),\n      label: isPrivateChat(chatId) ? \"Delete for \".concat(getChatShortTitle(chatId)) : 'Delete for all',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleCloseDelete,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleDeleteContinue,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Ok\"))));\n  }\n\n}\n\nSharedVideo.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  video: PropTypes.object.isRequired,\n  showOpenMessage: PropTypes.bool.isRequired,\n  openMedia: PropTypes.func,\n  size: PropTypes.number,\n  thumbnailSize: PropTypes.number,\n  style: PropTypes.object\n};\nSharedVideo.defaultProps = {\n  size: PHOTO_SIZE,\n  thumbnailSize: PHOTO_THUMBNAIL_SIZE\n};\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(SharedVideo);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/SharedMedia/SharedVideo.js"],"names":["React","PropTypes","classNames","compose","withStyles","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControlLabel","Checkbox","MenuItem","MenuList","Popover","PHOTO_SIZE","PHOTO_THUMBNAIL_SIZE","THUMBNAIL_BLURRED_SIZE_90","forwardMessages","openChat","getFileSize","getSrc","getDurationString","getSize","getChatShortTitle","isPrivateChat","isBlurredThumbnail","FileStore","MessageStore","TdLibController","styles","theme","sharedPhotoContent","SharedVideo","Component","constructor","props","onClientUpdateVideoThumbnailBlob","update","thumbnail","video","fileId","photo","id","forceUpdate","handleOpenMessage","event","handleCloseContextMenu","chatId","messageId","handleForward","handleDelete","message","get","can_be_deleted_for_all_users","setState","openDeleteDialog","canBeDeletedForAllUsers","revoke","handleContextMenu","preventDefault","stopPropagation","contextMenu","state","left","clientX","top","clientY","handleRevokeChange","handleCloseDelete","handleDeleteContinue","send","chat_id","message_ids","componentDidMount","on","componentWillUnmount","removeListener","render","classes","openMedia","style","showOpenMessage","t","width","height","duration","can_be_forwarded","can_be_deleted_only_for_self","count","thumbSrc","isBlurred","backgroundImage","vertical","horizontal","e","root","menuListRoot","propTypes","number","isRequired","object","bool","func","size","thumbnailSize","defaultProps","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox/';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Popover from '@material-ui/core/Popover';\nimport { PHOTO_SIZE, PHOTO_THUMBNAIL_SIZE, THUMBNAIL_BLURRED_SIZE_90 } from '../../../Constants';\nimport { forwardMessages, openChat } from '../../../Actions/Client';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { getDurationString, getSize } from '../../../Utils/Common';\nimport { getChatShortTitle, isPrivateChat } from '../../../Utils/Chat';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './SharedVideo.css';\n\nconst styles = theme => ({\n    sharedPhotoContent: {\n        // backgroundColor: theme.palette.type === 'dark' ? theme.palette.background.paper : theme.palette.background.default\n    }\n});\n\nclass SharedVideo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            contextMenu: false,\n            left: 0,\n            top: 0,\n            openDeleteDialog: false,\n            revoke: false\n        };\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    onClientUpdateVideoThumbnailBlob = update => {\n        const { thumbnail } = this.props.video;\n        const { fileId } = update;\n\n        if (!thumbnail) return;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    handleOpenMessage = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId, messageId } = this.props;\n\n        openChat(chatId, messageId);\n    };\n\n    handleForward = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId, messageId } = this.props;\n\n        forwardMessages(chatId, [messageId]);\n    };\n\n    handleDelete = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId, messageId } = this.props;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const { can_be_deleted_for_all_users } = message;\n\n        this.setState({\n            openDeleteDialog: true,\n            canBeDeletedForAllUsers: can_be_deleted_for_all_users,\n            revoke: can_be_deleted_for_all_users\n        });\n    };\n\n    handleContextMenu = async event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        const { contextMenu } = this.state;\n\n        if (contextMenu) {\n            this.setState({ contextMenu: false });\n        } else {\n            const left = event.clientX;\n            const top = event.clientY;\n\n            this.setState({\n                contextMenu: true,\n                left,\n                top\n            });\n        }\n    };\n\n    handleCloseContextMenu = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        this.setState({ contextMenu: false });\n    };\n\n    handleRevokeChange = () => {\n        this.setState({ revoke: !this.state.revoke });\n    };\n\n    handleCloseDelete = () => {\n        this.setState({ openDeleteDialog: false });\n    };\n\n    handleDeleteContinue = () => {\n        const { chatId, messageId } = this.props;\n        const { revoke } = this.state;\n\n        this.handleCloseDelete();\n\n        TdLibController.send({\n            '@type': 'deleteMessages',\n            chat_id: chatId,\n            message_ids: [messageId],\n            revoke: revoke\n        });\n    };\n\n    render() {\n        const { chatId, messageId, classes, openMedia, style, showOpenMessage, t } = this.props;\n        const { thumbnail, video, width, height, duration } = this.props.video;\n        const { contextMenu, left, top, openDeleteDialog, revoke } = this.state;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const { can_be_forwarded, can_be_deleted_only_for_self, can_be_deleted_for_all_users } = message;\n        const count = 1;\n\n        const thumbSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const isBlurred = isBlurredThumbnail(thumbnail, THUMBNAIL_BLURRED_SIZE_90);\n\n        return (\n            <div className='shared-photo' style={style} onClick={openMedia} onContextMenu={this.handleContextMenu}>\n                <div className='shared-video-wrapper'>\n                    <div\n                        className={classNames('shared-video-content', { 'media-blurred': isBlurred })}\n                        style={{ backgroundImage: `url(${thumbSrc})` }}\n                    />\n                    <div className='shared-video-meta'>{getDurationString(duration)}</div>\n                </div>\n                <Popover\n                    open={contextMenu}\n                    onClose={this.handleCloseContextMenu}\n                    anchorReference='anchorPosition'\n                    anchorPosition={{ top, left }}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                    onMouseDown={e => e.stopPropagation()}\n                    onClick={e => e.stopPropagation()}>\n                    <MenuList classes={{ root: classes.menuListRoot }}>\n                        {showOpenMessage && <MenuItem onClick={this.handleOpenMessage}>{t('GoToMessage')}</MenuItem>}\n                        {can_be_forwarded && <MenuItem onClick={this.handleForward}>{t('Forward')}</MenuItem>}\n                        {(can_be_deleted_only_for_self || can_be_deleted_for_all_users) && (\n                            <MenuItem onClick={this.handleDelete}>{t('Delete')}</MenuItem>\n                        )}\n                    </MenuList>\n                </Popover>\n                <Dialog\n                    transitionDuration={0}\n                    open={openDeleteDialog}\n                    onClose={this.handleCloseDelete}\n                    aria-labelledby='delete-dialog-title'\n                    onClick={e => e.stopPropagation()}>\n                    <DialogTitle id='delete-dialog-title'>Confirm</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {count === 1\n                                ? 'Are you sure you want to delete 1 message?'\n                                : `Are you sure you want to delete ${count} messages?`}\n                        </DialogContentText>\n                        {can_be_deleted_for_all_users && (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox checked={revoke} onChange={this.handleRevokeChange} color='primary' />\n                                }\n                                label={\n                                    isPrivateChat(chatId) ? `Delete for ${getChatShortTitle(chatId)}` : 'Delete for all'\n                                }\n                            />\n                        )}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleCloseDelete} color='primary'>\n                            Cancel\n                        </Button>\n                        <Button onClick={this.handleDeleteContinue} color='primary'>\n                            Ok\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nSharedVideo.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    video: PropTypes.object.isRequired,\n    showOpenMessage: PropTypes.bool.isRequired,\n    openMedia: PropTypes.func,\n\n    size: PropTypes.number,\n    thumbnailSize: PropTypes.number,\n    style: PropTypes.object\n};\n\nSharedVideo.defaultProps = {\n    size: PHOTO_SIZE,\n    thumbnailSize: PHOTO_THUMBNAIL_SIZE\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(SharedVideo);\n"]},"metadata":{},"sourceType":"module"}