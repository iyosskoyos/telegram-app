{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport dateFormat from 'dateformat';\nimport { getUserFullName, getUserShortName, getUserStatus, isUserOnline } from './User';\nimport { getSupergroupStatus } from './Supergroup';\nimport { getBasicGroupStatus } from './BasicGroup';\nimport { getLetters } from './Common';\nimport { getContent } from './Message';\nimport { isServiceMessage } from './ServiceMessage';\nimport BasicGroupStore from '../Stores/BasicGroupStore';\nimport ChatStore from '../Stores/ChatStore';\nimport NotificationStore from '../Stores/NotificationStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\nimport UserStore from '../Stores/UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nfunction getGroupChatTypingString(inputTypingManager) {\n  if (!inputTypingManager) return null;\n  let size = inputTypingManager.actions.size;\n\n  if (size > 2) {\n    return \"\".concat(size, \" people are typing\");\n  } else if (size > 1) {\n    let firstUser;\n    let secondUser;\n\n    for (let userId of inputTypingManager.actions.keys()) {\n      if (!firstUser) {\n        firstUser = UserStore.get(userId);\n      } else if (!secondUser) {\n        secondUser = UserStore.get(userId);\n        break;\n      }\n    }\n\n    if (!firstUser || !secondUser) {\n      return \"\".concat(size, \" people are typing\");\n    }\n\n    firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n    secondUser = secondUser.first_name ? secondUser.first_name : secondUser.second_name;\n\n    if (!firstUser || !secondUser) {\n      return \"\".concat(size, \" people are typing\");\n    }\n\n    return \"\".concat(firstUser, \" and \").concat(secondUser, \" are typing\");\n  } else {\n    let firstUser;\n\n    if (inputTypingManager.actions.size >= 1) {\n      for (let userId of inputTypingManager.actions.keys()) {\n        if (!firstUser) {\n          firstUser = UserStore.get(userId);\n          break;\n        }\n      }\n\n      if (!firstUser) {\n        return \"1 person is typing\";\n      }\n\n      firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n\n      if (!firstUser) {\n        return \"1 person is typing\";\n      }\n\n      let action = inputTypingManager.actions.values().next().value.action;\n\n      switch (action['@type']) {\n        case 'chatActionRecordingVideo':\n          return \"\".concat(firstUser, \" is recording a video\");\n\n        case 'chatActionRecordingVideoNote':\n          return \"\".concat(firstUser, \" is recording a video message\");\n\n        case 'chatActionRecordingVoiceNote':\n          return \"\".concat(firstUser, \" is recording a voice message\");\n\n        case 'chatActionStartPlayingGame':\n          return \"\".concat(firstUser, \" is playing a game\");\n\n        case 'chatActionUploadingDocument':\n          return \"\".concat(firstUser, \" is sending a file\");\n\n        case 'chatActionUploadingPhoto':\n          return \"\".concat(firstUser, \" is sending a photo\");\n\n        case 'chatActionUploadingVideo':\n          return \"\".concat(firstUser, \" is sending a video\");\n\n        case 'chatActionUploadingVideoNote':\n          return \"\".concat(firstUser, \" is sending a video message\");\n\n        case 'chatActionUploadingVoiceNote':\n          return \"\".concat(firstUser, \" is sending a voice message\");\n\n        case 'chatActionChoosingContact':\n        case 'chatActionChoosingLocation':\n        case 'chatActionTyping':\n        default:\n          return \"\".concat(firstUser, \" is typing\");\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getPrivateChatTypingString(inputTypingManager) {\n  if (!inputTypingManager) return null;\n\n  if (inputTypingManager.actions.size >= 1) {\n    let action = inputTypingManager.actions.values().next().value.action;\n\n    switch (action['@type']) {\n      case 'chatActionRecordingVideo':\n        return 'recording a video';\n\n      case 'chatActionRecordingVideoNote':\n        return 'recording a video message';\n\n      case 'chatActionRecordingVoiceNote':\n        return 'recording a voice message';\n\n      case 'chatActionStartPlayingGame':\n        return 'playing a game';\n\n      case 'chatActionUploadingDocument':\n        return 'sending a file';\n\n      case 'chatActionUploadingPhoto':\n        return 'sending a photo';\n\n      case 'chatActionUploadingVideo':\n        return 'sending a video';\n\n      case 'chatActionUploadingVideoNote':\n        return 'sending a video message';\n\n      case 'chatActionUploadingVoiceNote':\n        return 'sending a voice message';\n\n      case 'chatActionChoosingContact':\n      case 'chatActionChoosingLocation':\n      case 'chatActionTyping':\n      default:\n        return 'typing';\n    }\n  }\n\n  return null;\n}\n\nfunction getChatTypingString(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n  let typingManager = ChatStore.getTypingManager(chat.id);\n  if (!typingManager) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const typingString = getPrivateChatTypingString(typingManager);\n        return typingString ? typingString + '...' : null;\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        const typingString = getGroupChatTypingString(typingManager);\n        return typingString ? typingString + '...' : null;\n      }\n  }\n\n  return null;\n}\n\nfunction getMessageSenderFullName(message) {\n  if (!message) return null;\n  if (isServiceMessage(message)) return null;\n  if (!message.sender_user_id) return null;\n  const user = UserStore.get(message.sender_user_id);\n  if (!user) return null;\n  return getUserFullName(user);\n}\n\nfunction getMessageSenderName(message) {\n  if (!message) return null;\n  if (isServiceMessage(message)) return null;\n  const chat = ChatStore.get(message.chat_id);\n\n  if (chat && chat.type['@type'] !== 'chatTypeBasicGroup' && chat.type['@type'] !== 'chatTypeSupergroup') {\n    return null;\n  }\n\n  return getUserShortName(message.sender_user_id);\n}\n\nfunction getLastMessageSenderName(chat) {\n  if (!chat) return null;\n  return getMessageSenderName(chat.last_message);\n}\n\nfunction getLastMessageContent(chat, t = key => key) {\n  if (!chat) return null;\n  const last_message = chat.last_message;\n  if (!last_message) return null;\n  return getContent(last_message, t);\n}\n\nfunction showChatUnreadMessageIcon(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const is_marked_as_unread = chat.is_marked_as_unread,\n        last_message = chat.last_message,\n        last_read_outbox_message_id = chat.last_read_outbox_message_id;\n  if (!last_message) return false;\n  const is_outgoing = last_message.is_outgoing;\n  return is_outgoing && last_message.id > last_read_outbox_message_id && !is_marked_as_unread && !showChatDraft(chatId);\n}\n\nfunction showChatUnreadMentionCount(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const unread_mention_count = chat.unread_mention_count;\n  return unread_mention_count > 0;\n}\n\nfunction showChatUnreadCount(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const is_marked_as_unread = chat.is_marked_as_unread,\n        unread_count = chat.unread_count,\n        unread_mention_count = chat.unread_mention_count;\n  return unread_count > 1 || unread_count === 1 && unread_mention_count === 0 || is_marked_as_unread && unread_count === 0 && unread_mention_count === 0;\n}\n\nfunction isChatUnread(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const is_marked_as_unread = chat.is_marked_as_unread,\n        unread_count = chat.unread_count,\n        unread_mention_count = chat.unread_mention_count;\n  return is_marked_as_unread || unread_count > 0;\n}\n\nfunction isChatMuted(chatId) {\n  return getChatMuteFor(chatId) > 0;\n}\n\nfunction getChatMuteFor(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return 0;\n  const notification_settings = chat.notification_settings;\n  if (!notification_settings) return 0;\n  const use_default_mute_for = notification_settings.use_default_mute_for,\n        mute_for = notification_settings.mute_for;\n\n  if (use_default_mute_for) {\n    const settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.mute_for : false;\n  }\n\n  return mute_for;\n}\n\nexport function getChatDisablePinnedMessageNotifications(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const notification_settings = chat.notification_settings;\n  if (!chat) return false;\n  const use_default_disable_pinned_message_notifications = notification_settings.use_default_disable_pinned_message_notifications,\n        disable_pinned_message_notifications = notification_settings.disable_pinned_message_notifications;\n\n  if (use_default_disable_pinned_message_notifications) {\n    const settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.disable_pinned_message_notifications : false;\n  }\n\n  return disable_pinned_message_notifications;\n}\nexport function getChatDisableMentionNotifications(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const notification_settings = chat.notification_settings;\n  if (!notification_settings) return false;\n  const use_default_disable_mention_notifications = notification_settings.use_default_disable_mention_notifications,\n        disable_mention_notifications = notification_settings.disable_mention_notifications;\n\n  if (use_default_disable_mention_notifications) {\n    const settings = getScopeNotificationSettings(chatId);\n    return settings ? settings.disable_mention_notifications : false;\n  }\n\n  return disable_mention_notifications;\n}\nexport function getScopeNotificationSettings(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return NotificationStore.settings.get('notificationSettingsScopePrivateChats');\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        let settings = null;\n\n        if (isChannelChat(chatId)) {\n          settings = NotificationStore.settings.get('notificationSettingsScopeChannelChats');\n        } else {\n          settings = NotificationStore.settings.get('notificationSettingsScopeGroupChats');\n        }\n\n        return settings;\n      }\n  }\n\n  return null;\n}\n\nfunction getMessageDate(message) {\n  const date = new Date(message.date * 1000);\n  const dayStart = new Date();\n  dayStart.setHours(0, 0, 0, 0);\n\n  if (date > dayStart) {\n    return dateFormat(date, 'H:MM');\n  }\n\n  const now = new Date();\n  const day = now.getDay();\n  const weekStart = now.getDate() - day + (day === 0 ? -6 : 1);\n  const monday = new Date(now.setDate(weekStart));\n\n  if (date > monday) {\n    return dateFormat(date, 'ddd');\n  }\n\n  return dateFormat(date, 'd.mm.yyyy');\n}\n\nfunction getLastMessageDate(chat) {\n  if (!chat) return null;\n  if (!chat.last_message) return null;\n  if (!chat.last_message.date) return null;\n  if (showChatDraft(chat.id)) return null;\n  return getMessageDate(chat.last_message);\n}\n\nfunction getChatSubtitleWithoutTyping(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  const type = chat.type;\n  if (!type) return null;\n\n  switch (type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        const basicGroup = BasicGroupStore.get(type.basic_group_id);\n\n        if (basicGroup) {\n          return getBasicGroupStatus(basicGroup, chatId);\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const user = UserStore.get(type.user_id);\n\n        if (user) {\n          return getUserStatus(user);\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup) {\n          return getSupergroupStatus(supergroup, chatId);\n        }\n\n        break;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatSubtitle(chatId, showSavedMessages = false) {\n  if (isMeChat(chatId) && showSavedMessages) {\n    return null;\n  }\n\n  const chatTypingString = getChatTypingString(chatId);\n\n  if (chatTypingString) {\n    return chatTypingString;\n  }\n\n  return getChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatLetters(chat) {\n  if (!chat) return null;\n  let title = chat.title || 'Deleted account';\n  if (title.length === 0) return null;\n  let letters = getLetters(title);\n\n  if (letters && letters.length > 0) {\n    return letters;\n  }\n\n  return chat.title.charAt(0);\n}\n\nfunction isAccentChatSubtitleWithoutTyping(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const user = UserStore.get(chat.type.user_id);\n\n        if (user) {\n          return isUserOnline(user);\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isAccentChatSubtitle(chatId) {\n  const typingString = getChatTypingString(chatId);\n  if (typingString) return false;\n  return isAccentChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatUsername(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return null;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const user = UserStore.get(chat.type.user_id);\n\n        if (user) {\n          return user.username;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup) {\n          return supergroup.username;\n        }\n\n        break;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatPhoneNumber(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return null;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const user = UserStore.get(chat.type.user_id);\n\n        if (user) {\n          return user.phone_number;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return null;\n      }\n  }\n\n  return null;\n}\n\nfunction getChatBio(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return null;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const fullInfo = UserStore.getFullInfo(chat.type.user_id);\n\n        if (fullInfo) {\n          return fullInfo.bio;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const fullInfo = SupergroupStore.getFullInfo(chat.type.supergroup_id);\n\n        if (fullInfo) {\n          return fullInfo.description;\n        }\n\n        break;\n      }\n  }\n\n  return null;\n}\n\nfunction isPrivateChat(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nfunction isGroupChat(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return true;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isChannelChat(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n        return supergroup && supergroup.is_channel;\n      }\n\n    case 'chatTypeBasicGroup':\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nfunction isChatMember(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup && supergroup.status) {\n          switch (supergroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                return supergroup.status.is_member;\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypeBasicGroup':\n      {\n        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n\n        if (basicGroup && basicGroup.status) {\n          switch (basicGroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                return basicGroup.status.is_member;\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nfunction getChatTitle(chatId, showSavedMessages = false, t = key => key) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  if (isMeChat(chatId) && showSavedMessages) {\n    return t('SavedMessages');\n  }\n\n  return chat.title || t('HiddenName');\n}\n\nfunction isMeChat(chatId) {\n  const fallbackValue = false;\n  const chat = ChatStore.get(chatId);\n  if (!chat) return fallbackValue;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n\n    case 'chatTypeSecret':\n    case 'chatTypePrivate':\n      {\n        return UserStore.getMyId() === chat.type.user_id;\n      }\n  }\n\n  return fallbackValue;\n}\n\nfunction getGroupChatMembers(chatId) {\n  const fallbackValue = [];\n  const chat = ChatStore.get(chatId);\n  if (!chat) return fallbackValue;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        const fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n\n        if (fullInfo) {\n          return fullInfo.members || fallbackValue;\n        }\n\n        break;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        break;\n      }\n\n    case 'chatTypeSecret':\n    case 'chatTypePrivate':\n      {\n        break;\n      }\n  }\n\n  return fallbackValue;\n}\n\nasync function getChatFullInfo(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  const type = chat.type;\n  if (!type) return null;\n\n  switch (type['@type']) {\n    case 'chatTypePrivate':\n      {\n        return await TdLibController.send({\n          '@type': 'getUserFullInfo',\n          user_id: type.user_id\n        });\n      }\n\n    case 'chatTypeSecret':\n      {\n        return await TdLibController.send({\n          '@type': 'getUserFullInfo',\n          user_id: type.user_id\n        });\n      }\n\n    case 'chatTypeBasicGroup':\n      {\n        return await TdLibController.send({\n          '@type': 'getBasicGroupFullInfo',\n          basic_group_id: type.basic_group_id\n        });\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return await TdLibController.send({\n          '@type': 'getSupergroupFullInfo',\n          supergroup_id: type.supergroup_id\n        });\n      }\n  }\n\n  return null;\n}\n\nfunction hasBasicGroupId(chatId, basicGroupId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  return type && type['@type'] === 'chatTypeBasicGroup' && type.basic_group_id === basicGroupId;\n}\n\nfunction isSupergroup(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  return type && type['@type'] === 'chatTypeSupergroup';\n}\n\nfunction getSupergroupId(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n\n  if (type && type['@type'] === 'chatTypeSupergroup') {\n    return type.supergroup_id;\n  }\n\n  return 0;\n}\n\nfunction hasSupergroupId(chatId, supergroupId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  return isSupergroup(chatId) && type.supergroup_id === supergroupId;\n}\n\nfunction hasUserId(chatId, userId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  return type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') && type.user_id === userId;\n}\n\nfunction getChatUserId(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return 0;\n  const type = chat.type;\n  return type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') ? type.user_id : 0;\n}\n\nfunction getPhotoFromChat(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n\n  if (isPrivateChat(chatId)) {\n    const user = UserStore.get(getChatUserId(chatId));\n\n    if (user) {\n      return user.profile_photo;\n    }\n  }\n\n  return chat.photo;\n}\n\nfunction canSendFiles(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n\n        if (basicGroup && basicGroup.status) {\n          switch (basicGroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                if (basicGroup.status.can_send_media_messages) {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return true;\n      }\n\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup && supergroup.status) {\n          switch (supergroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                if (supergroup.is_channel) {\n                  return false;\n                } else {\n                  return true;\n                }\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                if (supergroup.status.can_send_media_messages) {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n          }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction getChatShortTitle(chatId, showSavedMessages = false) {\n  if (isMeChat(chatId) && showSavedMessages) {\n    return 'Saved Messages';\n  }\n\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return chat.title;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return chat.title;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return getUserShortName(chat.type.user_id);\n      }\n  }\n\n  return null;\n}\n\nfunction getGroupChatMembersCount(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return null;\n  if (!chat.type) return null;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n\n        if (basicGroup) {\n          return basicGroup.member_count;\n        }\n\n        return 0;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup) {\n          return supergroup.member_count;\n        }\n\n        return 0;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return 0;\n      }\n  }\n\n  return 0;\n}\n\nfunction canClearHistory(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  if (!chat.type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n        if (supergroup) {\n          return !Boolean(supergroup.username);\n        }\n\n        return true;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nfunction canDeleteChat(chatId) {\n  return !isMeChat(chatId);\n}\n\nfunction canSendPhotos(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return true;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return true;\n      }\n\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup) {\n          const status = supergroup.status;\n\n          if (status) {\n            switch (supergroup.status['@type']) {\n              case 'chatMemberStatusAdministrator':\n                {\n                  return true;\n                }\n\n              case 'chatMemberStatusBanned':\n                {\n                  return false;\n                }\n\n              case 'chatMemberStatusCreator':\n                {\n                  return true;\n                }\n\n              case 'chatMemberStatusLeft':\n                {\n                  return false;\n                }\n\n              case 'chatMemberStatusMember':\n                {\n                  return !supergroup.is_channel;\n                }\n\n              case 'chatMemberStatusRestricted':\n                {\n                  return status.can_send_media_messages;\n                }\n            }\n          }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction canSendDocuments(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return true;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return true;\n      }\n\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup) {\n          const status = supergroup.status;\n\n          if (status) {\n            switch (supergroup.status['@type']) {\n              case 'chatMemberStatusAdministrator':\n                {\n                  return true;\n                }\n\n              case 'chatMemberStatusBanned':\n                {\n                  return false;\n                }\n\n              case 'chatMemberStatusCreator':\n                {\n                  return true;\n                }\n\n              case 'chatMemberStatusLeft':\n                {\n                  return false;\n                }\n\n              case 'chatMemberStatusMember':\n                {\n                  return !supergroup.is_channel;\n                }\n\n              case 'chatMemberStatusRestricted':\n                {\n                  return status.can_send_media_messages;\n                }\n            }\n          }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction canSendPolls(chatId) {\n  return true;\n}\n\nfunction canSendMessages(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        const basicGroup = BasicGroupStore.get(type.basic_group_id);\n\n        if (basicGroup && basicGroup.status) {\n          switch (basicGroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                if (basicGroup.status.can_send_messages) {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return true;\n      }\n\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup && supergroup.status) {\n          switch (supergroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                if (supergroup.is_channel) {\n                  return false;\n                } else {\n                  return true;\n                }\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                if (supergroup.status.can_send_messages) {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n          }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction showChatDraft(chatId) {\n  const chat = ChatStore.get(chatId);\n  const draft = getChatDraft(chatId);\n  return draft && chat.unread_count === 0 && chat.unread_mention_count === 0;\n}\n\nfunction getChatDraft(chatId) {\n  const chat = ChatStore.get(chatId);\n\n  if (chat) {\n    const draft_message = chat.draft_message;\n\n    if (draft_message) {\n      const input_message_text = draft_message.input_message_text;\n\n      if (input_message_text) {\n        return input_message_text.text;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getChatDraftReplyToMessageId(chatId) {\n  let replyToMessageId = 0;\n  const chat = ChatStore.get(chatId);\n\n  if (chat) {\n    const draft_message = chat.draft_message;\n\n    if (draft_message) {\n      replyToMessageId = draft_message.reply_to_message_id;\n    }\n  }\n\n  console.log('getChatDraft', replyToMessageId);\n  return replyToMessageId;\n}\n\nfunction canPinMessages(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        const basicGroup = BasicGroupStore.get(type.basic_group_id);\n\n        if (basicGroup && basicGroup.status) {\n          switch (basicGroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return basicGroup.status.can_pin_messages;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                return false;\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return isMeChat(chatId);\n      }\n\n    case 'chatTypeSecret':\n      {\n        return false;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(type.supergroup_id);\n\n        if (supergroup && supergroup.status) {\n          switch (supergroup.status['@type']) {\n            case 'chatMemberStatusAdministrator':\n              {\n                return supergroup.status.can_pin_messages;\n              }\n\n            case 'chatMemberStatusBanned':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusCreator':\n              {\n                return true;\n              }\n\n            case 'chatMemberStatusLeft':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusMember':\n              {\n                return false;\n              }\n\n            case 'chatMemberStatusRestricted':\n              {\n                return false;\n              }\n          }\n        }\n      }\n  }\n\n  return false;\n}\n\nfunction isChatVerified(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n    case 'chatTypeSecret':\n      {\n        const user = UserStore.get(type.user_id);\n        return user && user.is_verified;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        const supergroup = SupergroupStore.get(type.supergroup_id);\n        return supergroup && supergroup.is_verified;\n      }\n  }\n\n  return false;\n}\n\nfunction isChatSecret(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return false;\n  const type = chat.type;\n  if (!type) return false;\n\n  switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n      {\n        return false;\n      }\n\n    case 'chatTypePrivate':\n      {\n        return false;\n      }\n\n    case 'chatTypeSecret':\n      {\n        return true;\n      }\n\n    case 'chatTypeSupergroup':\n      {\n        return false;\n      }\n  }\n\n  return false;\n}\n\nexport { showChatDraft, getChatDraft, getChatDraftReplyToMessageId, getChatTypingString, showChatUnreadMessageIcon, showChatUnreadMentionCount, showChatUnreadCount, getChatMuteFor, getChatSubtitle, getChatSubtitleWithoutTyping, getLastMessageSenderName, getMessageSenderName, getMessageSenderFullName, getLastMessageContent, getLastMessageDate, getMessageDate, getChatLetters, isAccentChatSubtitle, isAccentChatSubtitleWithoutTyping, isChatMuted, getChatUsername, getChatPhoneNumber, getChatBio, isPrivateChat, isGroupChat, isChannelChat, isChatUnread, isChatMember, isChatVerified, isChatSecret, getChatTitle, getGroupChatMembers, getChatFullInfo, hasBasicGroupId, hasSupergroupId, isSupergroup, getSupergroupId, hasUserId, getChatUserId, getPhotoFromChat, getChatShortTitle, getGroupChatMembersCount, isMeChat, canClearHistory, canDeleteChat, canPinMessages, canSendFiles, canSendMessages, canSendPhotos, canSendDocuments, canSendPolls };","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Utils/Chat.js"],"names":["React","dateFormat","getUserFullName","getUserShortName","getUserStatus","isUserOnline","getSupergroupStatus","getBasicGroupStatus","getLetters","getContent","isServiceMessage","BasicGroupStore","ChatStore","NotificationStore","SupergroupStore","UserStore","TdLibController","getGroupChatTypingString","inputTypingManager","size","actions","firstUser","secondUser","userId","keys","get","first_name","second_name","action","values","next","value","getPrivateChatTypingString","getChatTypingString","chatId","chat","type","typingManager","getTypingManager","id","typingString","getMessageSenderFullName","message","sender_user_id","user","getMessageSenderName","chat_id","getLastMessageSenderName","last_message","getLastMessageContent","t","key","showChatUnreadMessageIcon","is_marked_as_unread","last_read_outbox_message_id","is_outgoing","showChatDraft","showChatUnreadMentionCount","unread_mention_count","showChatUnreadCount","unread_count","isChatUnread","isChatMuted","getChatMuteFor","notification_settings","use_default_mute_for","mute_for","settings","getScopeNotificationSettings","getChatDisablePinnedMessageNotifications","use_default_disable_pinned_message_notifications","disable_pinned_message_notifications","getChatDisableMentionNotifications","use_default_disable_mention_notifications","disable_mention_notifications","isChannelChat","getMessageDate","date","Date","dayStart","setHours","now","day","getDay","weekStart","getDate","monday","setDate","getLastMessageDate","getChatSubtitleWithoutTyping","basicGroup","basic_group_id","user_id","supergroup","supergroup_id","getChatSubtitle","showSavedMessages","isMeChat","chatTypingString","getChatLetters","title","length","letters","charAt","isAccentChatSubtitleWithoutTyping","isAccentChatSubtitle","getChatUsername","username","getChatPhoneNumber","phone_number","getChatBio","fullInfo","getFullInfo","bio","description","isPrivateChat","isGroupChat","is_channel","isChatMember","status","is_member","getChatTitle","fallbackValue","getMyId","getGroupChatMembers","members","getChatFullInfo","send","hasBasicGroupId","basicGroupId","isSupergroup","getSupergroupId","hasSupergroupId","supergroupId","hasUserId","getChatUserId","getPhotoFromChat","profile_photo","photo","canSendFiles","can_send_media_messages","getChatShortTitle","getGroupChatMembersCount","member_count","canClearHistory","Boolean","canDeleteChat","canSendPhotos","canSendDocuments","canSendPolls","canSendMessages","can_send_messages","draft","getChatDraft","draft_message","input_message_text","text","getChatDraftReplyToMessageId","replyToMessageId","reply_to_message_id","console","log","canPinMessages","can_pin_messages","isChatVerified","is_verified","isChatSecret"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport dateFormat from 'dateformat';\nimport { getUserFullName, getUserShortName, getUserStatus, isUserOnline } from './User';\nimport { getSupergroupStatus } from './Supergroup';\nimport { getBasicGroupStatus } from './BasicGroup';\nimport { getLetters } from './Common';\nimport { getContent } from './Message';\nimport { isServiceMessage } from './ServiceMessage';\nimport BasicGroupStore from '../Stores/BasicGroupStore';\nimport ChatStore from '../Stores/ChatStore';\nimport NotificationStore from '../Stores/NotificationStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\nimport UserStore from '../Stores/UserStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nfunction getGroupChatTypingString(inputTypingManager) {\n    if (!inputTypingManager) return null;\n\n    let size = inputTypingManager.actions.size;\n    if (size > 2) {\n        return `${size} people are typing`;\n    } else if (size > 1) {\n        let firstUser;\n        let secondUser;\n        for (let userId of inputTypingManager.actions.keys()) {\n            if (!firstUser) {\n                firstUser = UserStore.get(userId);\n            } else if (!secondUser) {\n                secondUser = UserStore.get(userId);\n                break;\n            }\n        }\n\n        if (!firstUser || !secondUser) {\n            return `${size} people are typing`;\n        }\n\n        firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n        secondUser = secondUser.first_name ? secondUser.first_name : secondUser.second_name;\n\n        if (!firstUser || !secondUser) {\n            return `${size} people are typing`;\n        }\n\n        return `${firstUser} and ${secondUser} are typing`;\n    } else {\n        let firstUser;\n        if (inputTypingManager.actions.size >= 1) {\n            for (let userId of inputTypingManager.actions.keys()) {\n                if (!firstUser) {\n                    firstUser = UserStore.get(userId);\n                    break;\n                }\n            }\n\n            if (!firstUser) {\n                return `1 person is typing`;\n            }\n\n            firstUser = firstUser.first_name ? firstUser.first_name : firstUser.second_name;\n\n            if (!firstUser) {\n                return `1 person is typing`;\n            }\n\n            let action = inputTypingManager.actions.values().next().value.action;\n            switch (action['@type']) {\n                case 'chatActionRecordingVideo':\n                    return `${firstUser} is recording a video`;\n                case 'chatActionRecordingVideoNote':\n                    return `${firstUser} is recording a video message`;\n                case 'chatActionRecordingVoiceNote':\n                    return `${firstUser} is recording a voice message`;\n                case 'chatActionStartPlayingGame':\n                    return `${firstUser} is playing a game`;\n                case 'chatActionUploadingDocument':\n                    return `${firstUser} is sending a file`;\n                case 'chatActionUploadingPhoto':\n                    return `${firstUser} is sending a photo`;\n                case 'chatActionUploadingVideo':\n                    return `${firstUser} is sending a video`;\n                case 'chatActionUploadingVideoNote':\n                    return `${firstUser} is sending a video message`;\n                case 'chatActionUploadingVoiceNote':\n                    return `${firstUser} is sending a voice message`;\n                case 'chatActionChoosingContact':\n                case 'chatActionChoosingLocation':\n                case 'chatActionTyping':\n                default:\n                    return `${firstUser} is typing`;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction getPrivateChatTypingString(inputTypingManager) {\n    if (!inputTypingManager) return null;\n\n    if (inputTypingManager.actions.size >= 1) {\n        let action = inputTypingManager.actions.values().next().value.action;\n        switch (action['@type']) {\n            case 'chatActionRecordingVideo':\n                return 'recording a video';\n            case 'chatActionRecordingVideoNote':\n                return 'recording a video message';\n            case 'chatActionRecordingVoiceNote':\n                return 'recording a voice message';\n            case 'chatActionStartPlayingGame':\n                return 'playing a game';\n            case 'chatActionUploadingDocument':\n                return 'sending a file';\n            case 'chatActionUploadingPhoto':\n                return 'sending a photo';\n            case 'chatActionUploadingVideo':\n                return 'sending a video';\n            case 'chatActionUploadingVideoNote':\n                return 'sending a video message';\n            case 'chatActionUploadingVoiceNote':\n                return 'sending a voice message';\n            case 'chatActionChoosingContact':\n            case 'chatActionChoosingLocation':\n            case 'chatActionTyping':\n            default:\n                return 'typing';\n        }\n    }\n\n    return null;\n}\n\nfunction getChatTypingString(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    let typingManager = ChatStore.getTypingManager(chat.id);\n    if (!typingManager) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const typingString = getPrivateChatTypingString(typingManager);\n            return typingString ? typingString + '...' : null;\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            const typingString = getGroupChatTypingString(typingManager);\n            return typingString ? typingString + '...' : null;\n        }\n    }\n\n    return null;\n}\n\nfunction getMessageSenderFullName(message) {\n    if (!message) return null;\n    if (isServiceMessage(message)) return null;\n    if (!message.sender_user_id) return null;\n\n    const user = UserStore.get(message.sender_user_id);\n    if (!user) return null;\n\n    return getUserFullName(user);\n}\n\nfunction getMessageSenderName(message) {\n    if (!message) return null;\n    if (isServiceMessage(message)) return null;\n\n    const chat = ChatStore.get(message.chat_id);\n    if (chat && chat.type['@type'] !== 'chatTypeBasicGroup' && chat.type['@type'] !== 'chatTypeSupergroup') {\n        return null;\n    }\n\n    return getUserShortName(message.sender_user_id);\n}\n\nfunction getLastMessageSenderName(chat) {\n    if (!chat) return null;\n\n    return getMessageSenderName(chat.last_message);\n}\n\nfunction getLastMessageContent(chat, t = key => key) {\n    if (!chat) return null;\n\n    const { last_message } = chat;\n    if (!last_message) return null;\n\n    return getContent(last_message, t);\n}\n\nfunction showChatUnreadMessageIcon(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_marked_as_unread, last_message, last_read_outbox_message_id } = chat;\n    if (!last_message) return false;\n\n    const { is_outgoing } = last_message;\n\n    return (\n        is_outgoing && last_message.id > last_read_outbox_message_id && !is_marked_as_unread && !showChatDraft(chatId)\n    );\n}\n\nfunction showChatUnreadMentionCount(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { unread_mention_count } = chat;\n\n    return unread_mention_count > 0;\n}\n\nfunction showChatUnreadCount(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_marked_as_unread, unread_count, unread_mention_count } = chat;\n\n    return (\n        unread_count > 1 ||\n        (unread_count === 1 && unread_mention_count === 0) ||\n        (is_marked_as_unread && unread_count === 0 && unread_mention_count === 0)\n    );\n}\n\nfunction isChatUnread(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { is_marked_as_unread, unread_count, unread_mention_count } = chat;\n\n    return is_marked_as_unread || unread_count > 0;\n}\n\nfunction isChatMuted(chatId) {\n    return getChatMuteFor(chatId) > 0;\n}\n\nfunction getChatMuteFor(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return 0;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return 0;\n\n    const { use_default_mute_for, mute_for } = notification_settings;\n\n    if (use_default_mute_for) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.mute_for : false;\n    }\n\n    return mute_for;\n}\n\nexport function getChatDisablePinnedMessageNotifications(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { notification_settings } = chat;\n    if (!chat) return false;\n\n    const {\n        use_default_disable_pinned_message_notifications,\n        disable_pinned_message_notifications\n    } = notification_settings;\n    if (use_default_disable_pinned_message_notifications) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.disable_pinned_message_notifications : false;\n    }\n\n    return disable_pinned_message_notifications;\n}\n\nexport function getChatDisableMentionNotifications(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return false;\n\n    const { use_default_disable_mention_notifications, disable_mention_notifications } = notification_settings;\n    if (use_default_disable_mention_notifications) {\n        const settings = getScopeNotificationSettings(chatId);\n\n        return settings ? settings.disable_mention_notifications : false;\n    }\n\n    return disable_mention_notifications;\n}\n\nexport function getScopeNotificationSettings(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return NotificationStore.settings.get('notificationSettingsScopePrivateChats');\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            let settings = null;\n            if (isChannelChat(chatId)) {\n                settings = NotificationStore.settings.get('notificationSettingsScopeChannelChats');\n            } else {\n                settings = NotificationStore.settings.get('notificationSettingsScopeGroupChats');\n            }\n            return settings;\n        }\n    }\n\n    return null;\n}\n\nfunction getMessageDate(message) {\n    const date = new Date(message.date * 1000);\n\n    const dayStart = new Date();\n    dayStart.setHours(0, 0, 0, 0);\n    if (date > dayStart) {\n        return dateFormat(date, 'H:MM');\n    }\n\n    const now = new Date();\n    const day = now.getDay();\n    const weekStart = now.getDate() - day + (day === 0 ? -6 : 1);\n    const monday = new Date(now.setDate(weekStart));\n    if (date > monday) {\n        return dateFormat(date, 'ddd');\n    }\n\n    return dateFormat(date, 'd.mm.yyyy');\n}\n\nfunction getLastMessageDate(chat) {\n    if (!chat) return null;\n    if (!chat.last_message) return null;\n    if (!chat.last_message.date) return null;\n    if (showChatDraft(chat.id)) return null;\n\n    return getMessageDate(chat.last_message);\n}\n\nfunction getChatSubtitleWithoutTyping(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    const { type } = chat;\n    if (!type) return null;\n\n    switch (type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (basicGroup) {\n                return getBasicGroupStatus(basicGroup, chatId);\n            }\n\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(type.user_id);\n            if (user) {\n                return getUserStatus(user);\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup) {\n                return getSupergroupStatus(supergroup, chatId);\n            }\n\n            break;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatSubtitle(chatId, showSavedMessages = false) {\n    if (isMeChat(chatId) && showSavedMessages) {\n        return null;\n    }\n\n    const chatTypingString = getChatTypingString(chatId);\n    if (chatTypingString) {\n        return chatTypingString;\n    }\n\n    return getChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatLetters(chat) {\n    if (!chat) return null;\n\n    let title = chat.title || 'Deleted account';\n    if (title.length === 0) return null;\n\n    let letters = getLetters(title);\n    if (letters && letters.length > 0) {\n        return letters;\n    }\n\n    return chat.title.charAt(0);\n}\n\nfunction isAccentChatSubtitleWithoutTyping(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return false;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(chat.type.user_id);\n            if (user) {\n                return isUserOnline(user);\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isAccentChatSubtitle(chatId) {\n    const typingString = getChatTypingString(chatId);\n    if (typingString) return false;\n\n    return isAccentChatSubtitleWithoutTyping(chatId);\n}\n\nfunction getChatUsername(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return null;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(chat.type.user_id);\n            if (user) {\n                return user.username;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup) {\n                return supergroup.username;\n            }\n            break;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatPhoneNumber(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return null;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(chat.type.user_id);\n            if (user) {\n                return user.phone_number;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            return null;\n        }\n    }\n\n    return null;\n}\n\nfunction getChatBio(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return null;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const fullInfo = UserStore.getFullInfo(chat.type.user_id);\n            if (fullInfo) {\n                return fullInfo.bio;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            const fullInfo = SupergroupStore.getFullInfo(chat.type.supergroup_id);\n            if (fullInfo) {\n                return fullInfo.description;\n            }\n\n            break;\n        }\n    }\n\n    return null;\n}\n\nfunction isPrivateChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isGroupChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return true;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isChannelChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n\n            return supergroup && supergroup.is_channel;\n        }\n        case 'chatTypeBasicGroup':\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction isChatMember(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup && supergroup.status) {\n                switch (supergroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return true;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        return supergroup.status.is_member;\n                    }\n                }\n            }\n            break;\n        }\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n            if (basicGroup && basicGroup.status) {\n                switch (basicGroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return true;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        return basicGroup.status.is_member;\n                    }\n                }\n            }\n            break;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction getChatTitle(chatId, showSavedMessages = false, t = key => key) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    if (isMeChat(chatId) && showSavedMessages) {\n        return t('SavedMessages');\n    }\n\n    return chat.title || t('HiddenName');\n}\n\nfunction isMeChat(chatId) {\n    const fallbackValue = false;\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return fallbackValue;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n        case 'chatTypeSecret':\n        case 'chatTypePrivate': {\n            return UserStore.getMyId() === chat.type.user_id;\n        }\n    }\n\n    return fallbackValue;\n}\n\nfunction getGroupChatMembers(chatId) {\n    const fallbackValue = [];\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return fallbackValue;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const fullInfo = BasicGroupStore.getFullInfo(chat.type.basic_group_id);\n            if (fullInfo) {\n                return fullInfo.members || fallbackValue;\n            }\n\n            break;\n        }\n        case 'chatTypeSupergroup': {\n            break;\n        }\n        case 'chatTypeSecret':\n        case 'chatTypePrivate': {\n            break;\n        }\n    }\n\n    return fallbackValue;\n}\n\nasync function getChatFullInfo(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    const { type } = chat;\n    if (!type) return null;\n\n    switch (type['@type']) {\n        case 'chatTypePrivate': {\n            return await TdLibController.send({\n                '@type': 'getUserFullInfo',\n                user_id: type.user_id\n            });\n        }\n        case 'chatTypeSecret': {\n            return await TdLibController.send({\n                '@type': 'getUserFullInfo',\n                user_id: type.user_id\n            });\n        }\n        case 'chatTypeBasicGroup': {\n            return await TdLibController.send({\n                '@type': 'getBasicGroupFullInfo',\n                basic_group_id: type.basic_group_id\n            });\n        }\n        case 'chatTypeSupergroup': {\n            return await TdLibController.send({\n                '@type': 'getSupergroupFullInfo',\n                supergroup_id: type.supergroup_id\n            });\n        }\n    }\n\n    return null;\n}\n\nfunction hasBasicGroupId(chatId, basicGroupId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return type && type['@type'] === 'chatTypeBasicGroup' && type.basic_group_id === basicGroupId;\n}\n\nfunction isSupergroup(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return type && type['@type'] === 'chatTypeSupergroup';\n}\n\nfunction getSupergroupId(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    if (type && type['@type'] === 'chatTypeSupergroup') {\n        return type.supergroup_id;\n    }\n\n    return 0;\n}\n\nfunction hasSupergroupId(chatId, supergroupId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return isSupergroup(chatId) && type.supergroup_id === supergroupId;\n}\n\nfunction hasUserId(chatId, userId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n\n    return (\n        type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') && type.user_id === userId\n    );\n}\n\nfunction getChatUserId(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return 0;\n\n    const { type } = chat;\n\n    return type && (type['@type'] === 'chatTypePrivate' || type['@type'] === 'chatTypeSecret') ? type.user_id : 0;\n}\n\nfunction getPhotoFromChat(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n\n    if (isPrivateChat(chatId)) {\n        const user = UserStore.get(getChatUserId(chatId));\n        if (user) {\n            return user.profile_photo;\n        }\n    }\n\n    return chat.photo;\n}\n\nfunction canSendFiles(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n            if (basicGroup && basicGroup.status) {\n                switch (basicGroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return true;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        if (basicGroup.status.can_send_media_messages) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate': {\n            return true;\n        }\n        case 'chatTypeSecret': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup && supergroup.status) {\n                switch (supergroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        if (supergroup.is_channel) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        if (supergroup.status.can_send_media_messages) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction getChatShortTitle(chatId, showSavedMessages = false) {\n    if (isMeChat(chatId) && showSavedMessages) {\n        return 'Saved Messages';\n    }\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return chat.title;\n        }\n        case 'chatTypeSupergroup': {\n            return chat.title;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return getUserShortName(chat.type.user_id);\n        }\n    }\n\n    return null;\n}\n\nfunction getGroupChatMembersCount(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    if (!chat.type) return null;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n            if (basicGroup) {\n                return basicGroup.member_count;\n            }\n\n            return 0;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup) {\n                return supergroup.member_count;\n            }\n\n            return 0;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return 0;\n        }\n    }\n\n    return 0;\n}\n\nfunction canClearHistory(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n    if (!chat.type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n            if (supergroup) {\n                return !Boolean(supergroup.username);\n            }\n\n            return true;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction canDeleteChat(chatId) {\n    return !isMeChat(chatId);\n}\n\nfunction canSendPhotos(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return true;\n        }\n        case 'chatTypePrivate': {\n            return true;\n        }\n        case 'chatTypeSecret': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup) {\n                const { status } = supergroup;\n                if (status) {\n                    switch (supergroup.status['@type']) {\n                        case 'chatMemberStatusAdministrator': {\n                            return true;\n                        }\n                        case 'chatMemberStatusBanned': {\n                            return false;\n                        }\n                        case 'chatMemberStatusCreator': {\n                            return true;\n                        }\n                        case 'chatMemberStatusLeft': {\n                            return false;\n                        }\n                        case 'chatMemberStatusMember': {\n                            return !supergroup.is_channel;\n                        }\n                        case 'chatMemberStatusRestricted': {\n                            return status.can_send_media_messages;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction canSendDocuments(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return true;\n        }\n        case 'chatTypePrivate': {\n            return true;\n        }\n        case 'chatTypeSecret': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup) {\n                const { status } = supergroup;\n                if (status) {\n                    switch (supergroup.status['@type']) {\n                        case 'chatMemberStatusAdministrator': {\n                            return true;\n                        }\n                        case 'chatMemberStatusBanned': {\n                            return false;\n                        }\n                        case 'chatMemberStatusCreator': {\n                            return true;\n                        }\n                        case 'chatMemberStatusLeft': {\n                            return false;\n                        }\n                        case 'chatMemberStatusMember': {\n                            return !supergroup.is_channel;\n                        }\n                        case 'chatMemberStatusRestricted': {\n                            return status.can_send_media_messages;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction canSendPolls(chatId) {\n    return true;\n}\n\nfunction canSendMessages(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (basicGroup && basicGroup.status) {\n                switch (basicGroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return true;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        if (basicGroup.status.can_send_messages) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate': {\n            return true;\n        }\n        case 'chatTypeSecret': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup && supergroup.status) {\n                switch (supergroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        if (supergroup.is_channel) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        if (supergroup.status.can_send_messages) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction showChatDraft(chatId) {\n    const chat = ChatStore.get(chatId);\n    const draft = getChatDraft(chatId);\n\n    return draft && chat.unread_count === 0 && chat.unread_mention_count === 0;\n}\n\nfunction getChatDraft(chatId) {\n    const chat = ChatStore.get(chatId);\n\n    if (chat) {\n        const { draft_message } = chat;\n        if (draft_message) {\n            const { input_message_text } = draft_message;\n            if (input_message_text) {\n                return input_message_text.text;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction getChatDraftReplyToMessageId(chatId) {\n    let replyToMessageId = 0;\n    const chat = ChatStore.get(chatId);\n    if (chat) {\n        const { draft_message } = chat;\n        if (draft_message) {\n            replyToMessageId = draft_message.reply_to_message_id;\n        }\n    }\n\n    console.log('getChatDraft', replyToMessageId);\n    return replyToMessageId;\n}\n\nfunction canPinMessages(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            const basicGroup = BasicGroupStore.get(type.basic_group_id);\n            if (basicGroup && basicGroup.status) {\n                switch (basicGroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return basicGroup.status.can_pin_messages;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return false;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        return false;\n                    }\n                }\n            }\n\n            break;\n        }\n        case 'chatTypePrivate': {\n            return isMeChat(chatId);\n        }\n        case 'chatTypeSecret': {\n            return false;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n            if (supergroup && supergroup.status) {\n                switch (supergroup.status['@type']) {\n                    case 'chatMemberStatusAdministrator': {\n                        return supergroup.status.can_pin_messages;\n                    }\n                    case 'chatMemberStatusBanned': {\n                        return false;\n                    }\n                    case 'chatMemberStatusCreator': {\n                        return true;\n                    }\n                    case 'chatMemberStatusLeft': {\n                        return false;\n                    }\n                    case 'chatMemberStatusMember': {\n                        return false;\n                    }\n                    case 'chatMemberStatusRestricted': {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction isChatVerified(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return false;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            const user = UserStore.get(type.user_id);\n\n            return user && user.is_verified;\n        }\n        case 'chatTypeSupergroup': {\n            const supergroup = SupergroupStore.get(type.supergroup_id);\n\n            return supergroup && supergroup.is_verified;\n        }\n    }\n\n    return false;\n}\n\nfunction isChatSecret(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return false;\n\n    const { type } = chat;\n    if (!type) return false;\n\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': {\n            return false;\n        }\n        case 'chatTypePrivate': {\n            return false;\n        }\n        case 'chatTypeSecret': {\n            return true;\n        }\n        case 'chatTypeSupergroup': {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nexport {\n    showChatDraft,\n    getChatDraft,\n    getChatDraftReplyToMessageId,\n    getChatTypingString,\n    showChatUnreadMessageIcon,\n    showChatUnreadMentionCount,\n    showChatUnreadCount,\n    getChatMuteFor,\n    getChatSubtitle,\n    getChatSubtitleWithoutTyping,\n    getLastMessageSenderName,\n    getMessageSenderName,\n    getMessageSenderFullName,\n    getLastMessageContent,\n    getLastMessageDate,\n    getMessageDate,\n    getChatLetters,\n    isAccentChatSubtitle,\n    isAccentChatSubtitleWithoutTyping,\n    isChatMuted,\n    getChatUsername,\n    getChatPhoneNumber,\n    getChatBio,\n    isPrivateChat,\n    isGroupChat,\n    isChannelChat,\n    isChatUnread,\n    isChatMember,\n    isChatVerified,\n    isChatSecret,\n    getChatTitle,\n    getGroupChatMembers,\n    getChatFullInfo,\n    hasBasicGroupId,\n    hasSupergroupId,\n    isSupergroup,\n    getSupergroupId,\n    hasUserId,\n    getChatUserId,\n    getPhotoFromChat,\n    getChatShortTitle,\n    getGroupChatMembersCount,\n    isMeChat,\n    canClearHistory,\n    canDeleteChat,\n    canPinMessages,\n    canSendFiles,\n    canSendMessages,\n    canSendPhotos,\n    canSendDocuments,\n    canSendPolls\n};\n"]},"metadata":{},"sourceType":"module"}