{"ast":null,"code":"import _defineProperty from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import classNames from'classnames';import withStyles from'@material-ui/core/styles/withStyles';import{isChatMuted,showChatUnreadCount,showChatUnreadMentionCount,showChatUnreadMessageIcon}from'../../Utils/Chat';import ChatStore from'../../Stores/ChatStore';import NotificationStore from'../../Stores/NotificationStore';import'./DialogBadge.css';var styles=function styles(theme){return{dialogBadge:{background:theme.palette.primary.main},dialogBadgeMuted:{background:theme.palette.type==='dark'?theme.palette.text.disabled:'#d8d8d8'},unreadIcon:{}};};var DialogBadge=/*#__PURE__*/function(_React$Component){_inherits(DialogBadge,_React$Component);function DialogBadge(){var _getPrototypeOf2;var _this;_classCallCheck(this,DialogBadge);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DialogBadge)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.onClientUpdateClearHistory=function(update){var chatId=_this.props.chatId;if(chatId===update.chatId){_this.clearHistory=update.inProgress;_this.forceUpdate();}};_this.onFastUpdatingComplete=function(update){_this.forceUpdate();};_this.onUpdate=function(update){var chatId=_this.props.chatId;if(update.chat_id!==chatId)return;_this.forceUpdate();};_this.onUpdateScopeNotificationSettings=function(update){var chatId=_this.props.chatId;var chat=ChatStore.get(chatId);if(!chat)return;switch(update.scope['@type']){case'notificationSettingsScopeGroupChats':{if(chat.type['@type']==='chatTypeBasicGroup'||chat.type['@type']==='chatTypeSupergroup'){_this.forceUpdate();}break;}case'notificationSettingsScopePrivateChats':{if(chat.type['@type']==='chatTypePrivate'||chat.type['@type']==='chatTypeSecret'){_this.forceUpdate();}break;}}};return _this;}_createClass(DialogBadge,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){var _this$props=this.props,chatId=_this$props.chatId,theme=_this$props.theme;if(nextProps.chatId!==chatId){return true;}if(nextProps.theme!==theme){return true;}return false;}},{key:\"componentDidMount\",value:function componentDidMount(){ChatStore.on('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.on('clientUpdateClearHistory',this.onClientUpdateClearHistory);ChatStore.on('updateChatDraftMessage',this.onUpdate);ChatStore.on('updateChatIsMarkedAsUnread',this.onUpdate);ChatStore.on('updateChatIsPinned',this.onUpdate);ChatStore.on('updateChatNotificationSettings',this.onUpdate);ChatStore.on('updateChatReadInbox',this.onUpdate);ChatStore.on('updateChatLastMessage',this.onUpdate);ChatStore.on('updateChatReadOutbox',this.onUpdate);ChatStore.on('updateChatUnreadMentionCount',this.onUpdate);ChatStore.on('updateMessageMentionRead',this.onUpdate);NotificationStore.on('updateScopeNotificationSettings',this.onUpdateScopeNotificationSettings);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){ChatStore.removeListener('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.removeListener('clientUpdateClearHistory',this.onClientUpdateClearHistory);ChatStore.removeListener('updateChatDraftMessage',this.onUpdate);ChatStore.removeListener('updateChatIsMarkedAsUnread',this.onUpdate);ChatStore.removeListener('updateChatIsPinned',this.onUpdate);ChatStore.removeListener('updateChatNotificationSettings',this.onUpdate);ChatStore.removeListener('updateChatReadInbox',this.onUpdate);ChatStore.removeListener('updateChatLastMessage',this.onUpdate);ChatStore.removeListener('updateChatReadOutbox',this.onUpdate);ChatStore.removeListener('updateChatUnreadMentionCount',this.onUpdate);ChatStore.removeListener('updateMessageMentionRead',this.onUpdate);NotificationStore.removeListener('updateScopeNotificationSettings',this.onUpdateScopeNotificationSettings);}},{key:\"render\",value:function render(){if(this.clearHistory)return null;var _this$props2=this.props,chatId=_this$props2.chatId,classes=_this$props2.classes;var chat=ChatStore.get(chatId);if(!chat)return null;var is_pinned=chat.is_pinned,unread_count=chat.unread_count;var showUnreadMessageIcon=showChatUnreadMessageIcon(chatId);var showUnreadMentionCount=showChatUnreadMentionCount(chatId);var showUnreadCount=showChatUnreadCount(chatId);var isMuted=isChatMuted(chatId);return React.createElement(React.Fragment,null,showUnreadMessageIcon&&React.createElement(\"i\",{className:classNames('dialog-badge-unread',classes.unreadIcon)}),showUnreadMentionCount&&React.createElement(\"div\",{className:classNames('dialog-badge',classes.dialogBadge)},React.createElement(\"div\",{className:\"dialog-badge-mention\"},\"@\")),showUnreadCount&&React.createElement(\"div\",{className:classNames(_defineProperty({},classes.dialogBadgeMuted,isMuted),'dialog-badge',classes.dialogBadge)},React.createElement(\"span\",{className:\"dialog-badge-text\"},unread_count>0?unread_count:'')),is_pinned&&!showUnreadMessageIcon&&!showUnreadCount&&!showUnreadMentionCount&&React.createElement(\"i\",{className:\"dialog-badge-pinned\"}));}}]);return DialogBadge;}(React.Component);export default withStyles(styles,{withTheme:true})(DialogBadge);","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Tile/DialogBadge.js"],"names":["React","classNames","withStyles","isChatMuted","showChatUnreadCount","showChatUnreadMentionCount","showChatUnreadMessageIcon","ChatStore","NotificationStore","styles","theme","dialogBadge","background","palette","primary","main","dialogBadgeMuted","type","text","disabled","unreadIcon","DialogBadge","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","onUpdateScopeNotificationSettings","chat","get","scope","nextProps","nextState","on","removeListener","classes","is_pinned","unread_count","showUnreadMessageIcon","showUnreadMentionCount","showUnreadCount","isMuted","Component","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    isChatMuted,\n    showChatUnreadCount,\n    showChatUnreadMentionCount,\n    showChatUnreadMessageIcon\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\nimport './DialogBadge.css';\n\nconst styles = theme => ({\n    dialogBadge: {\n        background: theme.palette.primary.main\n    },\n    dialogBadgeMuted: {\n        background: theme.palette.type === 'dark' ? theme.palette.text.disabled : '#d8d8d8'\n    },\n    unreadIcon: {}\n});\n\nclass DialogBadge extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, theme } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.on('updateChatIsPinned', this.onUpdate);\n        ChatStore.on('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadOutbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n        NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.removeListener('updateChatIsPinned', this.onUpdate);\n        ChatStore.removeListener('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadOutbox', this.onUpdate);\n        ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n        NotificationStore.removeListener('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    onUpdateScopeNotificationSettings = update => {\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        switch (update.scope['@type']) {\n            case 'notificationSettingsScopeGroupChats': {\n                if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n            case 'notificationSettingsScopePrivateChats': {\n                if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n        }\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId, classes } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { is_pinned, unread_count } = chat;\n\n        const showUnreadMessageIcon = showChatUnreadMessageIcon(chatId);\n        const showUnreadMentionCount = showChatUnreadMentionCount(chatId);\n        const showUnreadCount = showChatUnreadCount(chatId);\n        const isMuted = isChatMuted(chatId);\n\n        return (\n            <>\n                {showUnreadMessageIcon && <i className={classNames('dialog-badge-unread', classes.unreadIcon)} />}\n                {showUnreadMentionCount && (\n                    <div className={classNames('dialog-badge', classes.dialogBadge)}>\n                        <div className='dialog-badge-mention'>@</div>\n                    </div>\n                )}\n                {showUnreadCount && (\n                    <div\n                        className={classNames(\n                            { [classes.dialogBadgeMuted]: isMuted },\n                            'dialog-badge',\n                            classes.dialogBadge\n                        )}>\n                        <span className='dialog-badge-text'>{unread_count > 0 ? unread_count : ''}</span>\n                    </div>\n                )}\n                {is_pinned && !showUnreadMessageIcon && !showUnreadCount && !showUnreadMentionCount && (\n                    <i className='dialog-badge-pinned' />\n                )}\n            </>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogBadge);\n"]},"metadata":{},"sourceType":"module"}