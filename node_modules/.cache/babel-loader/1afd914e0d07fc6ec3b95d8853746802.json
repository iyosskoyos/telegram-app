{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/Message/Media/Photo.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getSize, getFitSize } from '../../../Utils/Common';\nimport { getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_SIZE, PHOTO_DISPLAY_SIZE, PHOTO_THUMBNAIL_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Photo.css';\n\nclass Photo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdatePhotoBlob = update => {\n      const _this$state = this.state,\n            photoSize = _this$state.photoSize,\n            thumbSize = _this$state.thumbSize;\n      const fileId = update.fileId;\n\n      if (photoSize && photoSize.photo && photoSize.photo.id === fileId) {\n        this.forceUpdate();\n      } else if (thumbSize && thumbSize.photo && thumbSize.photo.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.state = {};\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const photo = props.photo,\n          size = props.size,\n          thumbnailSize = props.thumbnailSize;\n\n    if (photo !== state.prevPhoto) {\n      return {\n        prevPhoto: photo,\n        photoSize: getSize(photo.sizes, size),\n        thumbSize: getSize(photo.sizes, thumbnailSize)\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n  }\n\n  render() {\n    const _this$props = this.props,\n          displaySize = _this$props.displaySize,\n          openMedia = _this$props.openMedia,\n          showProgress = _this$props.showProgress,\n          style = _this$props.style;\n    const _this$state2 = this.state,\n          thumbSize = _this$state2.thumbSize,\n          photoSize = _this$state2.photoSize;\n    if (!photoSize) return null;\n    const src = getSrc(photoSize.photo);\n    const thumbSrc = getSrc(thumbSize ? thumbSize.photo : null);\n    const isBlurred = isBlurredThumbnail(thumbSize);\n    const fitPhotoSize = getFitSize(photoSize, displaySize, false);\n    if (!fitPhotoSize) return null;\n\n    const photoStyle = _objectSpread({\n      width: fitPhotoSize.width,\n      height: fitPhotoSize.height\n    }, style);\n\n    return React.createElement(\"div\", {\n      className: \"photo\",\n      style: photoStyle,\n      onClick: openMedia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, src ? React.createElement(\"img\", {\n      className: \"photo-image\",\n      draggable: false,\n      src: src,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }) : React.createElement(\"img\", {\n      className: classNames('photo-image', {\n        'media-blurred': isBlurred\n      }),\n      draggable: false,\n      src: thumbSrc,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), showProgress && React.createElement(FileProgress, {\n      file: photoSize.photo,\n      download: true,\n      upload: true,\n      cancelButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPhoto.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  photo: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  showProgress: PropTypes.bool,\n  size: PropTypes.number,\n  thumbnailSize: PropTypes.number,\n  displaySize: PropTypes.number,\n  style: PropTypes.object\n};\nPhoto.defaultProps = {\n  size: PHOTO_SIZE,\n  thumbnailSize: PHOTO_THUMBNAIL_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE,\n  showProgress: true\n};\nexport default Photo;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Message/Media/Photo.js"],"names":["React","PropTypes","classNames","FileProgress","getSize","getFitSize","getSrc","isBlurredThumbnail","PHOTO_SIZE","PHOTO_DISPLAY_SIZE","PHOTO_THUMBNAIL_SIZE","FileStore","Photo","Component","constructor","props","onClientUpdatePhotoBlob","update","state","photoSize","thumbSize","fileId","photo","id","forceUpdate","getDerivedStateFromProps","size","thumbnailSize","prevPhoto","sizes","componentDidMount","on","componentWillUnmount","removeListener","render","displaySize","openMedia","showProgress","style","src","thumbSrc","isBlurred","fitPhotoSize","photoStyle","width","height","propTypes","chatId","number","messageId","object","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getSize, getFitSize } from '../../../Utils/Common';\nimport { getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_SIZE, PHOTO_DISPLAY_SIZE, PHOTO_THUMBNAIL_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Photo.css';\n\nclass Photo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { photo, size, thumbnailSize } = props;\n        if (photo !== state.prevPhoto) {\n            return {\n                prevPhoto: photo,\n                photoSize: getSize(photo.sizes, size),\n                thumbSize: getSize(photo.sizes, thumbnailSize)\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    }\n\n    onClientUpdatePhotoBlob = update => {\n        const { photoSize, thumbSize } = this.state;\n        const { fileId } = update;\n\n        if (photoSize && photoSize.photo && photoSize.photo.id === fileId) {\n            this.forceUpdate();\n        } else if (thumbSize && thumbSize.photo && thumbSize.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { displaySize, openMedia, showProgress, style } = this.props;\n        const { thumbSize, photoSize } = this.state;\n\n        if (!photoSize) return null;\n\n        const src = getSrc(photoSize.photo);\n        const thumbSrc = getSrc(thumbSize ? thumbSize.photo : null);\n        const isBlurred = isBlurredThumbnail(thumbSize);\n\n        const fitPhotoSize = getFitSize(photoSize, displaySize, false);\n        if (!fitPhotoSize) return null;\n\n        const photoStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        return (\n            <div className='photo' style={photoStyle} onClick={openMedia}>\n                {src ? (\n                    <img className='photo-image' draggable={false} src={src} alt='' />\n                ) : (\n                    <img\n                        className={classNames('photo-image', { 'media-blurred': isBlurred })}\n                        draggable={false}\n                        src={thumbSrc}\n                        alt=''\n                    />\n                )}\n                {showProgress && <FileProgress file={photoSize.photo} download upload cancelButton />}\n            </div>\n        );\n    }\n}\n\nPhoto.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    photo: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n    showProgress: PropTypes.bool,\n\n    size: PropTypes.number,\n    thumbnailSize: PropTypes.number,\n    displaySize: PropTypes.number,\n    style: PropTypes.object\n};\n\nPhoto.defaultProps = {\n    size: PHOTO_SIZE,\n    thumbnailSize: PHOTO_THUMBNAIL_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE,\n    showProgress: true\n};\n\nexport default Photo;\n"]},"metadata":{},"sourceType":"module"}