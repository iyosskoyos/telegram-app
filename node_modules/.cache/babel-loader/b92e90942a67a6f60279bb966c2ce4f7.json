{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/ColumnMiddle/StickersPicker.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scrollTop = () => {\n      this.scrollRef.current.scrollTop = 0;\n    };\n\n    this.loadContent = async (stickerSets, sets) => {\n      if (this.state.stickerSets) return;\n\n      if (!sets) {\n        const result = await TdLibController.send({\n          '@type': 'getInstalledStickerSets',\n          is_masks: false\n        });\n        const promises = [];\n        result.sets.forEach(x => {\n          promises.push(TdLibController.send({\n            '@type': 'getStickerSet',\n            set_id: x.id\n          }));\n        });\n        sets = await Promise.all(promises);\n      }\n\n      const slicedSets = sets.slice(0, 5);\n      const headerStickers = sets.reduce((preview, set) => {\n        if (set.stickers.length > 0) {\n          preview.push(set.stickers[0]);\n        }\n\n        return preview;\n      }, []);\n      this.setState({\n        stickerSets,\n        sets: slicedSets,\n        headerStickers\n      });\n      this.setsLength = slicedSets.length;\n    };\n\n    this.loadInViewContentOnScroll = () => {\n      this.loadInViewContent();\n    };\n\n    this.loadInViewContentOnScrollEnd = () => {\n      this.loadInViewContent(400);\n    };\n\n    this.loadInViewContent = (padding = 0) => {\n      const scroll = this.scrollRef.current;\n      const sets = this.state.sets;\n      const inViewItems = [];\n      sets.forEach(x => {\n        const item = this.itemsMap.get(x.id);\n        const node = ReactDOM.findDOMNode(item);\n\n        if (node) {\n          const topBorder = scroll.scrollTop - padding;\n          const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n          const nodeTop = node.offsetTop;\n          const nodeBottom = node.offsetTop + node.clientHeight;\n\n          if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n            inViewItems.push(x);\n          } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n            inViewItems.push(x);\n          } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n            inViewItems.push(x);\n          }\n        }\n      });\n      inViewItems.forEach(x => {\n        const store = FileStore.getStore();\n\n        if (!this.loadedSets.has(x.id)) {\n          this.loadedSets.set(x.id, x.id);\n          loadStickerSetContent(store, x);\n        }\n      });\n    };\n\n    this.updatePosition = () => {\n      const scroll = this.scrollRef.current;\n      const sets = this.state.sets;\n      let minDiff = scroll.scrollHeight;\n      let position = 0;\n      let firstOffsetTop = 0;\n      sets.forEach((x, pos) => {\n        const element = this.itemsMap.get(x.id);\n\n        if (element) {\n          const node = ReactDOM.findDOMNode(element);\n\n          if (node) {\n            firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n            const offsetTop = node.offsetTop - firstOffsetTop;\n\n            if (node && offsetTop <= scroll.scrollTop) {\n              const diff = Math.abs(scroll.scrollTop - offsetTop);\n\n              if (diff <= minDiff) {\n                minDiff = diff;\n                position = pos;\n              }\n            }\n          }\n        }\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSetPosition',\n        position\n      });\n    };\n\n    this.handleScroll = async () => {\n      //this.loadInViewContentOnScroll();\n      this.loadInViewContentOnScrollEnd();\n      this.updatePosition();\n      const scroll = this.scrollRef.current;\n      if (this.loadingChunk) return;\n      let loadChunk = false;\n\n      if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n        loadChunk = true;\n      }\n\n      if (!loadChunk) {\n        return false;\n      }\n\n      const _this$state = this.state,\n            sets = _this$state.sets,\n            stickerSets = _this$state.stickerSets;\n      if (stickerSets.sets.length === sets.length) return;\n      this.loadingChunk = true;\n      const promises = [];\n      stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n        promises.push(TdLibController.send({\n          '@type': 'getStickerSet',\n          set_id: x.id\n        }));\n      });\n      const result = await Promise.all(promises).finally(() => this.loadingChunk = false);\n      this.setsLength += result.length;\n      let concatSets = sets.concat(result);\n      this.setState({\n        sets: concatSets\n      });\n    };\n\n    this.loadPreviewContent = stickerId => {\n      const sets = this.state.sets;\n      const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n      if (!sticker) return;\n      const store = FileStore.getStore();\n      loadStickerContent(store, sticker, null);\n      const stickersPerRow = 5;\n      const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n      preloadStickers.forEach(x => {\n        loadStickerContent(store, x, null);\n      });\n    };\n\n    this.handleMouseEnter = event => {\n      const stickerId = Number(event.currentTarget.dataset.stickerId);\n      if (!stickerId) return;\n      if (!this.mouseDown) return;\n\n      if (this.mouseDownStickerId !== stickerId) {\n        this.mouseDownStickerId = null;\n      }\n\n      this.setState({\n        previewStickerId: stickerId\n      });\n      this.loadPreviewContent(stickerId);\n      const onPreview = this.props.onPreview;\n      const sets = this.state.sets;\n      const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n      onPreview(sticker);\n    };\n\n    this.handleMouseDown = event => {\n      const stickerId = Number(event.currentTarget.dataset.stickerId);\n      if (!stickerId) return;\n      this.mouseDownStickerId = stickerId;\n      const now = Date.now();\n      this.setState({\n        previewStickerId: stickerId,\n        timestamp: now,\n        showPreview: false,\n        cancelSend: false\n      });\n      setTimeout(() => {\n        const timestamp = this.state.timestamp;\n\n        if (timestamp === now) {\n          this.setState({\n            showPreview: true,\n            cancelSend: true\n          }, () => {\n            const onPreview = this.props.onPreview;\n            const sets = this.state.sets;\n            const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n            onPreview(sticker);\n          });\n        }\n      }, 500);\n      this.loadPreviewContent(stickerId);\n      this.mouseDown = true;\n      document.addEventListener('mouseup', this.handleMouseUp);\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    };\n\n    this.handleMouseUp = () => {\n      this.setState({\n        previewStickerId: 0,\n        timestamp: 0,\n        showPreview: false\n      });\n      const onPreview = this.props.onPreview;\n      onPreview(null);\n      this.mouseDown = false;\n      document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    this.handleStickerSelect = sticker => {\n      const onSelect = this.props.onSelect;\n      const cancelSend = this.state.cancelSend;\n      if (cancelSend) return;\n      onSelect(sticker);\n    };\n\n    this.handleSelectSet = async position => {\n      const _this$state2 = this.state,\n            sets = _this$state2.sets,\n            stickerSets = _this$state2.stickerSets;\n      const scrollRef = this.scrollRef;\n\n      if (position < sets.length) {\n        const element = this.itemsMap.get(sets[position].id);\n\n        if (element) {\n          const node = ReactDOM.findDOMNode(element);\n\n          if (node) {\n            const scroll = scrollRef.current;\n            scroll.scrollTop = node.offsetTop;\n          }\n        }\n      } else if (position < stickerSets.sets.length) {\n        if (this.loadingChunk) return;\n        if (stickerSets.sets.length === sets.length) return;\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n          promises.push(TdLibController.send({\n            '@type': 'getStickerSet',\n            set_id: x.id\n          }));\n        });\n        const result = await Promise.all(promises).finally(() => this.loadingChunk = false);\n        this.setsLength += result.length;\n        let concatSets = sets.concat(result);\n        this.setState({\n          sets: concatSets\n        }, () => {\n          if (position < concatSets.length) {\n            this.handleSelectSet(position);\n          }\n        });\n      }\n    };\n\n    this.scrollRef = React.createRef();\n    this.itemsMap = new Map();\n    this.loadedSets = new Map();\n    this.state = {\n      stickerSets: null,\n      sets: [],\n      headerStickers: [],\n      position: 0\n    };\n    this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n    this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n    this.updatePosition = throttle(this.updatePosition, 250);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const _this$state3 = this.state,\n          position = _this$state3.position,\n          stickerSets = _this$state3.stickerSets,\n          sets = _this$state3.sets,\n          showPreview = _this$state3.showPreview;\n\n    if (nextState.stickerSets !== stickerSets) {\n      return true;\n    }\n\n    if (nextState.sets !== sets) {\n      return true;\n    }\n\n    if (nextState.showPreview !== showPreview) {\n      return true;\n    }\n\n    if (nextState.position !== position) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const _this$state4 = this.state,\n          stickerSets = _this$state4.stickerSets,\n          sets = _this$state4.sets,\n          headerStickers = _this$state4.headerStickers;\n    if (!stickerSets) return null;\n    if (!sets) return null;\n    if (!sets.length) return null;\n    this.itemsMap.clear();\n    const items = sets.map(x => React.createElement(StickerSet, {\n      key: x.id,\n      ref: el => this.itemsMap.set(x.id, el),\n      info: x,\n      onSelect: this.handleStickerSelect,\n      onMouseDown: this.handleMouseDown,\n      onMouseEnter: this.handleMouseEnter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"stickers-picker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(StickersPickerHeader, {\n      onSelect: this.handleSelectSet,\n      stickers: headerStickers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.scrollRef,\n      className: \"stickers-picker-scroll\",\n      onScroll: this.handleScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, items));\n  }\n\n}\n\nStickersPicker.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  onPreview: PropTypes.func.isRequired\n};\nexport default StickersPicker;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/ColumnMiddle/StickersPicker.js"],"names":["React","ReactDOM","PropTypes","StickerSet","StickersPickerHeader","debounce","throttle","loadStickerContent","loadStickerSetContent","getNeighborStickersFromSets","getStickers","FileStore","TdLibController","StickersPicker","Component","constructor","props","scrollTop","scrollRef","current","loadContent","stickerSets","sets","state","result","send","is_masks","promises","forEach","x","push","set_id","id","Promise","all","slicedSets","slice","headerStickers","reduce","preview","set","stickers","length","setState","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","scroll","inViewItems","item","itemsMap","get","node","findDOMNode","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","getStore","loadedSets","has","updatePosition","minDiff","scrollHeight","position","firstOffsetTop","pos","element","diff","Math","abs","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concatSets","concat","loadPreviewContent","stickerId","sticker","find","stickersPerRow","preloadStickers","handleMouseEnter","event","Number","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","now","Date","timestamp","showPreview","cancelSend","setTimeout","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","onSelect","handleSelectSet","createRef","Map","shouldComponentUpdate","nextProps","nextState","nextContext","render","clear","items","map","el","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (stickerSets, sets) => {\n        if (this.state.stickerSets) return;\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n        this.setState({\n            stickerSets,\n            sets: slicedSets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n        this.setsLength += result.length;\n        let concatSets = sets.concat(result);\n        this.setState({ sets: concatSets });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { sets } = this.state;\n\n        const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { sets } = this.state;\n\n        const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { sets } = this.state;\n\n                    const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    render() {\n        const { stickerSets, sets, headerStickers } = this.state;\n        if (!stickerSets) return null;\n\n        if (!sets) return null;\n        if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker'>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nexport default StickersPicker;\n"]},"metadata":{},"sourceType":"module"}