{"ast":null,"code":"var _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Auth/ConfirmCodeControl.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, formatPhoneNumber, isConnecting } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ConfirmCodeControl.css';\nconst styles = {\n  buttonLeft: {\n    marginRight: '8px',\n    marginTop: '16px'\n  },\n  buttonRight: {\n    marginLeft: '8px',\n    marginTop: '16px'\n  }\n};\n\nclass ConfirmCodeControl extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      connecting: isConnecting(ApplicationStore.connectionState),\n      error: '',\n      loading: false\n    };\n\n    this.onUpdateConnectionState = update => {\n      const state = update.state;\n      this.setState({\n        connecting: isConnecting(state)\n      });\n    };\n\n    this.handleNext = () => {\n      if (true) {\n        this.setState({\n          error: ''\n        });\n        this.handleDone();\n      } else {\n        this.setState({\n          error: 'Invalid code. Please try again.'\n        });\n      }\n    };\n\n    this.handleDone = () => {\n      const code = this.code;\n      this.setState({\n        loading: true\n      });\n      TdLibController.send({\n        '@type': 'checkAuthenticationCode',\n        code: code,\n        first_name: 'A',\n        last_name: 'B'\n      }).then(result => {}) // .catch(error => {\n      //     let errorString = null;\n      //     if (error && error['@type'] === 'error' && error.message) {\n      //         errorString = error.message;\n      //     } else {\n      //         errorString = JSON.stringify(error);\n      //     }\n      //     this.setState({ error: errorString });\n      // })\n      .finally(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.handleBack = () => {\n      this.props.onChangePhone();\n    };\n\n    this.handleChange = e => {\n      this.code = e.target.value;\n\n      if (this.code && this.codeLength > 0 && this.code.length === this.codeLength) {\n        this.handleNext();\n      }\n    };\n\n    this.handleKeyPress = e => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.handleNext();\n      }\n    };\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n  }\n\n  isValid(code) {\n    let isBad = !code.match(/^[\\d\\-+\\s]+$/);\n\n    if (!isBad) {\n      code = code.replace(/\\D/g, '');\n\n      if (code.length !== 5) {\n        isBad = true;\n      }\n    }\n\n    return true;\n  }\n\n  getPhoneNumber(codeInfo) {\n    if (!codeInfo) return null;\n    return codeInfo.phone_number;\n  }\n\n  getCodeLength(codeInfo) {\n    if (!codeInfo) return 0;\n    if (!codeInfo.type) return 0;\n\n    switch (codeInfo.type['@type']) {\n      case 'authenticationCodeTypeCall':\n        {\n          return codeInfo.type.length;\n        }\n\n      case 'authenticationCodeTypeFlashCall':\n        {\n          return 0;\n        }\n\n      case 'authenticationCodeTypeSms':\n        {\n          return codeInfo.type.length;\n        }\n\n      case 'authenticationCodeTypeTelegramMessage':\n        {\n          return codeInfo.type.length;\n        }\n    }\n\n    return 0;\n  }\n\n  getSubtitle(codeInfo) {\n    if (!codeInfo) return 'Subtitle';\n    if (!codeInfo.type) return 'Subtitle';\n\n    switch (codeInfo.type['@type']) {\n      case 'authenticationCodeTypeCall':\n        {\n          return 'Telegram dialed your number';\n        }\n\n      case 'authenticationCodeTypeFlashCall':\n        {\n          return 'Telegram dialed your number';\n        }\n\n      case 'authenticationCodeTypeSms':\n        {\n          return 'We have sent you a message with activation code to your phone. Please enter it below.';\n        }\n\n      case 'authenticationCodeTypeTelegramMessage':\n        {\n          return \"Please enter the code you've just received in your previous Telegram app.\";\n        }\n    }\n\n    return 'Subtitle';\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          codeInfo = _this$props.codeInfo,\n          t = _this$props.t;\n    const _this$state = this.state,\n          connecting = _this$state.connecting,\n          loading = _this$state.loading,\n          error = _this$state.error;\n    this.phoneNumber = this.getPhoneNumber(codeInfo);\n    this.codeLength = this.getCodeLength(codeInfo);\n    const subtitle = this.getSubtitle(codeInfo);\n    let title = t('YourCode');\n\n    if (connecting) {\n      title = cleanProgressStatus(t('Connecting'));\n    } else if (this.phoneNumber) {\n      title = formatPhoneNumber(this.phoneNumber);\n    }\n\n    return React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"authorization-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"authorization-header-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, title), connecting && React.createElement(HeaderProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, subtitle), React.createElement(TextField, {\n      color: \"primary\",\n      disabled: loading,\n      error: Boolean(error),\n      fullWidth: true,\n      autoFocus: true,\n      label: \"\",\n      margin: \"normal\",\n      maxLength: this.codeLength > 0 ? this.codeLength : 256,\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(FormHelperText, {\n      id: \"confirm-code-error-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, error), React.createElement(\"div\", {\n      className: \"authorization-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Button, {\n      fullWidth: true,\n      className: classes.buttonLeft,\n      onClick: this.handleBack,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, t('Back')), React.createElement(Button, {\n      fullWidth: true,\n      color: \"primary\",\n      className: classes.buttonRight,\n      onClick: this.handleNext,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, t('Next'))));\n  }\n\n}\n\nconst enhance = compose(withTranslation(), withStyles(styles, {\n  withTheme: true\n}));\nexport default enhance(ConfirmCodeControl);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Auth/ConfirmCodeControl.js"],"names":["React","compose","withTranslation","withStyles","Button","FormControl","FormHelperText","TextField","HeaderProgress","cleanProgressStatus","formatPhoneNumber","isConnecting","ApplicationStore","TdLibController","styles","buttonLeft","marginRight","marginTop","buttonRight","marginLeft","ConfirmCodeControl","Component","state","connecting","connectionState","error","loading","onUpdateConnectionState","update","setState","handleNext","handleDone","code","send","first_name","last_name","then","result","finally","handleBack","props","onChangePhone","handleChange","e","target","value","codeLength","length","handleKeyPress","key","preventDefault","componentDidMount","on","componentWillUnmount","removeListener","isValid","isBad","match","replace","getPhoneNumber","codeInfo","phone_number","getCodeLength","type","getSubtitle","render","classes","t","phoneNumber","subtitle","title","Boolean","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, formatPhoneNumber, isConnecting } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ConfirmCodeControl.css';\n\nconst styles = {\n    buttonLeft: {\n        marginRight: '8px',\n        marginTop: '16px'\n    },\n    buttonRight: {\n        marginLeft: '8px',\n        marginTop: '16px'\n    }\n};\n\nclass ConfirmCodeControl extends React.Component {\n    state = {\n        connecting: isConnecting(ApplicationStore.connectionState),\n        error: '',\n        loading: false\n    };\n\n    componentDidMount() {\n        ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    onUpdateConnectionState = update => {\n        const { state } = update;\n\n        this.setState({ connecting: isConnecting(state) });\n    };\n\n    handleNext = () => {\n        if (true) {\n            this.setState({ error: '' });\n            this.handleDone();\n        } else {\n            this.setState({ error: 'Invalid code. Please try again.' });\n        }\n    };\n\n    handleDone = () => {\n        const code = this.code;\n\n        this.setState({ loading: true });\n        TdLibController.send({\n            '@type': 'checkAuthenticationCode',\n            code: code,\n            first_name: 'A',\n            last_name: 'B'\n        })\n            .then(result => {})\n            // .catch(error => {\n            //     let errorString = null;\n            //     if (error && error['@type'] === 'error' && error.message) {\n            //         errorString = error.message;\n            //     } else {\n            //         errorString = JSON.stringify(error);\n            //     }\n\n            //     this.setState({ error: errorString });\n            // })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    handleBack = () => {\n        this.props.onChangePhone();\n    };\n\n    isValid(code) {\n        let isBad = !code.match(/^[\\d\\-+\\s]+$/);\n        if (!isBad) {\n            code = code.replace(/\\D/g, '');\n            if (code.length !== 5) {\n                isBad = true;\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = e => {\n        this.code = e.target.value;\n\n        if (this.code && this.codeLength > 0 && this.code.length === this.codeLength) {\n            this.handleNext();\n        }\n    };\n\n    handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            this.handleNext();\n        }\n    };\n\n    getPhoneNumber(codeInfo) {\n        if (!codeInfo) return null;\n        return codeInfo.phone_number;\n    }\n\n    getCodeLength(codeInfo) {\n        if (!codeInfo) return 0;\n        if (!codeInfo.type) return 0;\n\n        switch (codeInfo.type['@type']) {\n            case 'authenticationCodeTypeCall': {\n                return codeInfo.type.length;\n            }\n            case 'authenticationCodeTypeFlashCall': {\n                return 0;\n            }\n            case 'authenticationCodeTypeSms': {\n                return codeInfo.type.length;\n            }\n            case 'authenticationCodeTypeTelegramMessage': {\n                return codeInfo.type.length;\n            }\n        }\n\n        return 0;\n    }\n\n    getSubtitle(codeInfo) {\n        if (!codeInfo) return 'Subtitle';\n        if (!codeInfo.type) return 'Subtitle';\n\n        switch (codeInfo.type['@type']) {\n            case 'authenticationCodeTypeCall': {\n                return 'Telegram dialed your number';\n            }\n            case 'authenticationCodeTypeFlashCall': {\n                return 'Telegram dialed your number';\n            }\n            case 'authenticationCodeTypeSms': {\n                return 'We have sent you a message with activation code to your phone. Please enter it below.';\n            }\n            case 'authenticationCodeTypeTelegramMessage': {\n                return \"Please enter the code you've just received in your previous Telegram app.\";\n            }\n        }\n\n        return 'Subtitle';\n    }\n\n    render() {\n        const { classes, codeInfo, t } = this.props;\n        const { connecting, loading, error } = this.state;\n\n        this.phoneNumber = this.getPhoneNumber(codeInfo);\n        this.codeLength = this.getCodeLength(codeInfo);\n        const subtitle = this.getSubtitle(codeInfo);\n\n        let title = t('YourCode');\n        if (connecting) {\n            title = cleanProgressStatus(t('Connecting'));\n        } else if (this.phoneNumber) {\n            title = formatPhoneNumber(this.phoneNumber);\n        }\n\n        return (\n            <FormControl fullWidth>\n                <div className='authorization-header'>\n                    <span className='authorization-header-content'>{title}</span>\n                    {connecting && <HeaderProgress />}\n                </div>\n                <div>{subtitle}</div>\n                <TextField\n                    color='primary'\n                    disabled={loading}\n                    error={Boolean(error)}\n                    fullWidth\n                    autoFocus\n                    label=''\n                    margin='normal'\n                    maxLength={this.codeLength > 0 ? this.codeLength : 256}\n                    onChange={this.handleChange}\n                    onKeyPress={this.handleKeyPress}\n                />\n                <FormHelperText id='confirm-code-error-text'>{error}</FormHelperText>\n                <div className='authorization-actions'>\n                    <Button fullWidth className={classes.buttonLeft} onClick={this.handleBack} disabled={loading}>\n                        {t('Back')}\n                    </Button>\n                    <Button\n                        fullWidth\n                        color='primary'\n                        className={classes.buttonRight}\n                        onClick={this.handleNext}\n                        disabled={loading}>\n                        {t('Next')}\n                    </Button>\n                </div>\n            </FormControl>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(ConfirmCodeControl);\n"]},"metadata":{},"sourceType":"module"}