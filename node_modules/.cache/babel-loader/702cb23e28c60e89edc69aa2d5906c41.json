{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Player/Playlist.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport { getMedia, openMedia } from '../../Utils/Message';\nimport { borderStyle } from '../Theme';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Playlist.css';\n\nconst styles = theme => _objectSpread({\n  root: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n  }\n}, borderStyle(theme));\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scrollToActive = () => {\n      const list = this.listRef.current;\n      if (!list) return;\n      const messageId = this.messageId;\n      if (!messageId) return;\n      const item = this.itemRefMap.get(messageId);\n      if (!item) return;\n      const node = ReactDOM.findDOMNode(item);\n      if (!node) return;\n      list.scrollTop = node.offsetTop - 15;\n    };\n\n    this.onClientUpdateMediaTitleMouseOver = update => {\n      const over = update.over;\n\n      if (over) {\n        this.setState({\n          playlistMouseOver: over\n        }, () => {\n          this.tryOpen();\n        });\n      } else {\n        this.setState({\n          playlistMouseOver: over\n        }, () => {\n          this.tryClose();\n        });\n      }\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const chatId = update.chatId,\n            messageId = update.messageId;\n      this.chatId = chatId;\n      this.messageId = messageId;\n    };\n\n    this.onClientUpdateMediaPlaylistLoading = update => {\n      const chatId = this.chatId,\n            messageId = this.messageId;\n\n      if (update.chatId === chatId && update.messageId === messageId) {\n        this.setState({\n          playlist: null\n        });\n      }\n    };\n\n    this.onClientUpdateMediaPlaylist = update => {\n      const chatId = this.chatId,\n            messageId = this.messageId;\n      const playlist = update.playlist;\n\n      if (chatId === playlist.chatId && messageId === playlist.messageId) {\n        this.setState({\n          playlist: playlist\n        });\n      }\n    };\n\n    this.tryOpen = () => {\n      clearTimeout(this.openTimeout);\n      this.openTimeout = setTimeout(() => {\n        const _this$state = this.state,\n              titleMouseOver = _this$state.titleMouseOver,\n              playlistMouseOver = _this$state.playlistMouseOver;\n        this.setState({\n          open: titleMouseOver || playlistMouseOver\n        });\n      }, 250);\n    };\n\n    this.tryClose = () => {\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(() => {\n        const _this$state2 = this.state,\n              titleMouseOver = _this$state2.titleMouseOver,\n              playlistMouseOver = _this$state2.playlistMouseOver;\n        this.setState({\n          open: titleMouseOver || playlistMouseOver\n        });\n      }, 250);\n    };\n\n    this.handleMouseEnter = () => {\n      this.setState({\n        playlistMouseOver: true,\n        open: true\n      });\n    };\n\n    this.handleMouseLeave = () => {\n      this.setState({\n        playlistMouseOver: false\n      }, () => {\n        this.tryClose();\n      });\n    };\n\n    this.handleScroll = () => {\n      const list = this.listRef.current;\n      if (!list) return;\n\n      if (list.scrollTop === 0) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaPlaylistNext'\n        });\n      } else if (list.scrollHeight === list.scrollTop + list.offsetHeight) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaPlaylistPrev'\n        });\n      }\n    };\n\n    this.listRef = React.createRef();\n    this.itemRefMap = new Map();\n    const message = PlayerStore.message,\n          _playlist = PlayerStore.playlist;\n    this.chatId = message ? message.chat_id : 0;\n    this.messageId = message ? message.id : 0;\n    this.state = {\n      open: false,\n      titleMouseOver: false,\n      playlistMouseOver: false,\n      playlist: _playlist\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const open = this.state.open;\n\n    if (!prevState.open && open) {\n      this.scrollToActive();\n    }\n  }\n\n  componentDidMount() {\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n    PlayerStore.on('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n    PlayerStore.on('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n  }\n\n  componentWillUnmount() {\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n    PlayerStore.removeListener('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n    PlayerStore.removeListener('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state3 = this.state,\n          open = _this$state3.open,\n          playlist = _this$state3.playlist;\n    if (!open) return null;\n    if (!playlist) return null;\n    const messages = playlist.messages;\n    if (!messages) return null;\n    if (messages.length <= 1) return null;\n    this.itemRefMap.clear();\n    return React.createElement(\"div\", {\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('playlist-wrapper', classes.root, classes.borderColor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.listRef,\n      className: \"playlist-items\",\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave,\n      onScroll: this.handleScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, playlist.messages.slice(0).reverse().map(x => React.createElement(\"div\", {\n      key: x.id,\n      ref: el => this.itemRefMap.set(x.id, el),\n      className: \"playlist-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, getMedia(x, () => openMedia(x.chat_id, x.id)))))));\n  }\n\n}\n\nexport default withStyles(styles)(Playlist);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Player/Playlist.js"],"names":["React","ReactDOM","classNames","getMedia","openMedia","borderStyle","withStyles","PlayerStore","TdLibController","styles","theme","root","background","palette","type","default","Playlist","Component","constructor","props","scrollToActive","list","listRef","current","messageId","item","itemRefMap","get","node","findDOMNode","scrollTop","offsetTop","onClientUpdateMediaTitleMouseOver","update","over","setState","playlistMouseOver","tryOpen","tryClose","onClientUpdateMediaActive","chatId","onClientUpdateMediaPlaylistLoading","playlist","onClientUpdateMediaPlaylist","clearTimeout","openTimeout","setTimeout","state","titleMouseOver","open","timeout","handleMouseEnter","handleMouseLeave","handleScroll","clientUpdate","scrollHeight","offsetHeight","createRef","Map","message","chat_id","id","componentDidUpdate","prevProps","prevState","snapshot","componentDidMount","on","componentWillUnmount","removeListener","render","classes","messages","length","clear","borderColor","slice","reverse","map","x","el","set"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport { getMedia, openMedia } from '../../Utils/Message';\nimport { borderStyle } from '../Theme';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Playlist.css';\n\nconst styles = theme => ({\n    root: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n    },\n    ...borderStyle(theme)\n});\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.listRef = React.createRef();\n        this.itemRefMap = new Map();\n\n        const { message, playlist } = PlayerStore;\n\n        this.chatId = message ? message.chat_id : 0;\n        this.messageId = message ? message.id : 0;\n\n        this.state = {\n            open: false,\n            titleMouseOver: false,\n            playlistMouseOver: false,\n            playlist: playlist\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { open } = this.state;\n\n        if (!prevState.open && open) {\n            this.scrollToActive();\n        }\n    }\n\n    scrollToActive = () => {\n        const list = this.listRef.current;\n        if (!list) return;\n\n        const { messageId } = this;\n        if (!messageId) return;\n\n        const item = this.itemRefMap.get(messageId);\n        if (!item) return;\n\n        const node = ReactDOM.findDOMNode(item);\n        if (!node) return;\n\n        list.scrollTop = node.offsetTop - 15;\n    };\n\n    componentDidMount() {\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.on('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n        PlayerStore.on('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n    }\n\n    componentWillUnmount() {\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.removeListener('clientUpdateMediaPlaylistLoading', this.onClientUpdateMediaPlaylistLoading);\n        PlayerStore.removeListener('clientUpdateMediaTitleMouseOver', this.onClientUpdateMediaTitleMouseOver);\n    }\n\n    onClientUpdateMediaTitleMouseOver = update => {\n        const { over } = update;\n\n        if (over) {\n            this.setState(\n                {\n                    playlistMouseOver: over\n                },\n                () => {\n                    this.tryOpen();\n                }\n            );\n        } else {\n            this.setState(\n                {\n                    playlistMouseOver: over\n                },\n                () => {\n                    this.tryClose();\n                }\n            );\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = update;\n\n        this.chatId = chatId;\n        this.messageId = messageId;\n    };\n\n    onClientUpdateMediaPlaylistLoading = update => {\n        const { chatId, messageId } = this;\n\n        if (update.chatId === chatId && update.messageId === messageId) {\n            this.setState({\n                playlist: null\n            });\n        }\n    };\n\n    onClientUpdateMediaPlaylist = update => {\n        const { chatId, messageId } = this;\n        const { playlist } = update;\n\n        if (chatId === playlist.chatId && messageId === playlist.messageId) {\n            this.setState({\n                playlist: playlist\n            });\n        }\n    };\n\n    tryOpen = () => {\n        clearTimeout(this.openTimeout);\n\n        this.openTimeout = setTimeout(() => {\n            const { titleMouseOver, playlistMouseOver } = this.state;\n            this.setState({\n                open: titleMouseOver || playlistMouseOver\n            });\n        }, 250);\n    };\n\n    tryClose = () => {\n        clearTimeout(this.timeout);\n\n        this.timeout = setTimeout(() => {\n            const { titleMouseOver, playlistMouseOver } = this.state;\n            this.setState({\n                open: titleMouseOver || playlistMouseOver\n            });\n        }, 250);\n    };\n\n    handleMouseEnter = () => {\n        this.setState({\n            playlistMouseOver: true,\n            open: true\n        });\n    };\n\n    handleMouseLeave = () => {\n        this.setState(\n            {\n                playlistMouseOver: false\n            },\n            () => {\n                this.tryClose();\n            }\n        );\n    };\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n        if (!list) return;\n\n        if (list.scrollTop === 0) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaPlaylistNext'\n            });\n        } else if (list.scrollHeight === list.scrollTop + list.offsetHeight) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaPlaylistPrev'\n            });\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        const { open, playlist } = this.state;\n        if (!open) return null;\n        if (!playlist) return null;\n\n        const { messages } = playlist;\n        if (!messages) return null;\n        if (messages.length <= 1) return null;\n\n        this.itemRefMap.clear();\n\n        return (\n            <div className='playlist'>\n                <div className={classNames('playlist-wrapper', classes.root, classes.borderColor)}>\n                    <div\n                        ref={this.listRef}\n                        className='playlist-items'\n                        onMouseEnter={this.handleMouseEnter}\n                        onMouseLeave={this.handleMouseLeave}\n                        onScroll={this.handleScroll}>\n                        {playlist.messages\n                            .slice(0)\n                            .reverse()\n                            .map(x => (\n                                <div key={x.id} ref={el => this.itemRefMap.set(x.id, el)} className='playlist-item'>\n                                    {getMedia(x, () => openMedia(x.chat_id, x.id))}\n                                </div>\n                            ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(Playlist);\n"]},"metadata":{},"sourceType":"module"}