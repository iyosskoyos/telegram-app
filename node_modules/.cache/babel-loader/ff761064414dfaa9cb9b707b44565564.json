{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/ColumnMiddle/StickersHint.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerPreview from './StickerPreview';\nimport { borderStyle } from '../Theme';\nimport { loadStickerContent, loadStickersContent } from '../../Utils/File';\nimport { STICKER_HINT_DISPLAY_SIZE, STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersHint.css';\n\nconst styles = theme => _objectSpread({\n  root: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n  }\n}, borderStyle(theme));\n\nclass StickersHint extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateRemoteStickersHint = update => {\n      const hint = update.hint;\n      const currentHint = this.state.hint;\n      if (currentHint && hint.timestamp !== currentHint.timestamp) return;\n      this.setState({\n        hint: StickerStore.hint,\n        items: this.getItems(StickerStore.hint)\n      });\n      const store = FileStore.getStore();\n      const stickers = hint.stickers;\n      loadStickersContent(store, stickers.stickers);\n    };\n\n    this.onClientUpdateLocalStickersHint = update => {\n      const hint = update.hint;\n      this.setState({\n        hint,\n        items: this.getItems(hint),\n        previewStickerId: 0,\n        showPreview: false,\n        cancelSend: false\n      });\n      if (!hint) return;\n      const store = FileStore.getStore();\n      const stickers = hint.stickers;\n      loadStickersContent(store, stickers.stickers);\n    };\n\n    this.handleSend = sticker => {\n      const cancelSend = this.state.cancelSend;\n      if (cancelSend) return;\n      if (!sticker) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSend',\n        sticker\n      });\n    };\n\n    this.loadPreviewContent = stickerId => {\n      const items = this.state.items;\n      const sticker = items.find(x => x.sticker.id === stickerId);\n      if (!sticker) return;\n      const store = FileStore.getStore();\n      loadStickerContent(store, sticker, null);\n      let stickersPerRow = 8;\n\n      if (this.hintsRef && this.hintsRef.current) {\n        stickersPerRow = Math.floor(this.hintsRef.current.clientWidth / STICKER_HINT_DISPLAY_SIZE);\n      }\n\n      const preloadStickers = this.getNeighborStickers(stickerId, items, stickersPerRow);\n      preloadStickers.forEach(x => {\n        loadStickerContent(store, x, null);\n      });\n    };\n\n    this.getNeighborStickers = (stickerId, stickers, stickersPerRow) => {\n      if (!stickers) return [];\n      const indexes = [];\n      const index = stickers.findIndex(x => x.sticker.id === stickerId);\n      if (index === -1) return [];\n      const row = Math.floor(index / stickersPerRow);\n      const column = index % stickersPerRow;\n      const prevRow = row - 1;\n      const nextRow = row + 1;\n      const prevColumn = column - 1;\n      const nextColumn = column + 1;\n\n      if (prevRow >= 0) {\n        if (prevColumn >= 0) {\n          indexes.push(stickersPerRow * prevRow + prevColumn);\n        }\n\n        indexes.push(stickersPerRow * prevRow + column);\n\n        if (nextColumn < stickersPerRow) {\n          indexes.push(stickersPerRow * prevRow + nextColumn);\n        }\n      }\n\n      if (prevColumn >= 0) {\n        indexes.push(stickersPerRow * row + prevColumn);\n      }\n\n      if (nextColumn < stickersPerRow) {\n        indexes.push(stickersPerRow * row + nextColumn);\n      }\n\n      if (nextRow < Math.ceil(stickers.length / stickersPerRow)) {\n        if (prevColumn >= 0) {\n          indexes.push(stickersPerRow * nextRow + prevColumn);\n        }\n\n        indexes.push(stickersPerRow * nextRow + column);\n\n        if (nextColumn < stickersPerRow) {\n          indexes.push(stickersPerRow * nextRow + nextColumn);\n        }\n      }\n\n      return indexes.map(i => stickers[i]);\n    };\n\n    this.handleMouseEnter = event => {\n      const stickerId = Number(event.currentTarget.dataset.stickerId);\n      const sticker = this.getSticker(stickerId);\n      if (!sticker) return;\n      if (!this.mouseDown) return;\n\n      if (this.mouseDownStickerId !== stickerId) {\n        this.mouseDownStickerId = null;\n      }\n\n      this.setState({\n        sticker\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker\n      });\n      this.loadPreviewContent(stickerId);\n    };\n\n    this.handleMouseDown = event => {\n      const stickerId = Number(event.currentTarget.dataset.stickerId);\n      const sticker = this.getSticker(stickerId);\n      if (!sticker) return;\n      this.mouseDownStickerId = stickerId;\n      const now = Date.now();\n      this.setState({\n        sticker,\n        timestamp: now,\n        showPreview: false,\n        cancelSend: false\n      });\n      setTimeout(() => {\n        const timestamp = this.state.timestamp;\n\n        if (timestamp === now) {\n          this.setState({\n            showPreview: true,\n            cancelSend: true\n          });\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n          });\n        }\n      }, 500);\n      this.loadPreviewContent(stickerId);\n      this.mouseDown = true;\n      document.addEventListener('mouseup', this.handleMouseUp);\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    };\n\n    this.handleMouseUp = () => {\n      const sticker = null;\n      this.setState({\n        sticker,\n        timestamp: 0,\n        showPreview: false\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker\n      });\n      this.mouseDown = false;\n      document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    this.getItems = hint => {\n      const items = [];\n      if (!hint) return items;\n      const dict = new Map();\n      const stickers = hint.stickers,\n            foundStickers = hint.foundStickers;\n\n      if (stickers) {\n        stickers.stickers.forEach(x => {\n          items.push(x);\n          dict.set(x.sticker.id, x.sticker.id);\n        });\n      }\n\n      if (foundStickers) {\n        foundStickers.stickers.forEach(x => {\n          if (!dict.has(x.sticker.id)) {\n            items.push(x);\n            dict.set(x.sticker.id, x.sticker.id);\n          }\n        });\n      }\n\n      return items;\n    };\n\n    this.hintsRef = React.createRef();\n    this.state = {\n      hint: null,\n      items: [],\n      previewStickerId: 0,\n      showPreview: false,\n      cancelSend: false\n    };\n  }\n\n  componentDidMount() {\n    StickerStore.on('clientUpdateLocalStickersHint', this.onClientUpdateLocalStickersHint);\n    StickerStore.on('clientUpdateRemoteStickersHint', this.onClientUpdateRemoteStickersHint);\n  }\n\n  componentWillUnmount() {\n    StickerStore.removeListener('clientUpdateLocalStickersHint', this.onClientUpdateLocalStickersHint);\n    StickerStore.removeListener('clientUpdateRemoteStickersHint', this.onClientUpdateRemoteStickersHint);\n  }\n\n  getSticker(stickerId) {\n    const items = this.state.items;\n    const stickerIndex = items.findIndex(x => x.sticker.id === stickerId);\n    return stickerIndex !== -1 ? items[stickerIndex] : null;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          hint = _this$state.hint,\n          items = _this$state.items,\n          sticker = _this$state.sticker,\n          showPreview = _this$state.showPreview;\n    if (!hint) return null;\n    if (!items) return null;\n    if (!items.length) return null;\n    const controls = items.map(x => React.createElement(\"div\", {\n      className: \"sticker-set-dialog-item\",\n      key: x.sticker.id,\n      \"data-sticker-id\": x.sticker.id,\n      style: {\n        width: STICKER_HINT_DISPLAY_SIZE,\n        height: STICKER_HINT_DISPLAY_SIZE\n      },\n      onClick: () => this.handleSend(x),\n      onMouseEnter: this.handleMouseEnter,\n      onMouseDown: this.handleMouseDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(Sticker, {\n      key: x.sticker.id,\n      className: \"sticker-set-dialog-item-sticker\",\n      sticker: x,\n      autoplay: false,\n      blur: false,\n      displaySize: STICKER_SMALL_DISPLAY_SIZE,\n      preview: true,\n      source: StickerSourceEnum.HINTS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      ref: this.hintsRef,\n      className: classNames('stickers-hint', classes.borderColor, classes.root),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, controls, Boolean(sticker) && showPreview && React.createElement(StickerPreview, {\n      sticker: sticker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(styles)(StickersHint);","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/ColumnMiddle/StickersHint.js"],"names":["React","PropTypes","classNames","withStyles","Sticker","StickerSourceEnum","StickerPreview","borderStyle","loadStickerContent","loadStickersContent","STICKER_HINT_DISPLAY_SIZE","STICKER_SMALL_DISPLAY_SIZE","FileStore","StickerStore","TdLibController","styles","theme","root","background","palette","type","default","StickersHint","Component","constructor","props","onClientUpdateRemoteStickersHint","update","hint","currentHint","state","timestamp","setState","items","getItems","store","getStore","stickers","onClientUpdateLocalStickersHint","previewStickerId","showPreview","cancelSend","handleSend","sticker","clientUpdate","loadPreviewContent","stickerId","find","x","id","stickersPerRow","hintsRef","current","Math","floor","clientWidth","preloadStickers","getNeighborStickers","forEach","indexes","index","findIndex","row","column","prevRow","nextRow","prevColumn","nextColumn","push","ceil","length","map","i","handleMouseEnter","event","Number","currentTarget","dataset","getSticker","mouseDown","mouseDownStickerId","handleMouseDown","now","Date","setTimeout","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","dict","Map","foundStickers","set","has","createRef","componentDidMount","on","componentWillUnmount","removeListener","stickerIndex","render","classes","controls","width","height","HINTS","borderColor","Boolean"],"mappings":";;;;;;;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,OAAP,IAAkBC,iBAAlB,QAA2C,0BAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,kBAAxD;AACA,SAASC,yBAAT,EAAoCC,0BAApC,QAAsE,iBAAtE;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAO,oBAAP;;AAEA,MAAMC,MAAM,GAAGC,KAAK;AAChBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,KAAuB,MAAvB,GAAgCJ,KAAK,CAACG,OAAN,CAAcD,UAAd,CAAyBG,OAAzD,GAAmE;AAD7E;AADU,GAIbd,WAAW,CAACS,KAAD,CAJE,CAApB;;AAOA,MAAMM,YAAN,SAA2BtB,KAAK,CAACuB,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAwBnBC,gCAxBmB,GAwBgBC,MAAM,IAAI;AAAA,YACjCC,IADiC,GACxBD,MADwB,CACjCC,IADiC;AAAA,YAE3BC,WAF2B,GAEX,KAAKC,KAFM,CAEjCF,IAFiC;AAIzC,UAAIC,WAAW,IAAID,IAAI,CAACG,SAAL,KAAmBF,WAAW,CAACE,SAAlD,EAA6D;AAE7D,WAAKC,QAAL,CAAc;AACVJ,QAAAA,IAAI,EAAEf,YAAY,CAACe,IADT;AAEVK,QAAAA,KAAK,EAAE,KAAKC,QAAL,CAAcrB,YAAY,CAACe,IAA3B;AAFG,OAAd;AAKA,YAAMO,KAAK,GAAGvB,SAAS,CAACwB,QAAV,EAAd;AAXyC,YAYjCC,QAZiC,GAYpBT,IAZoB,CAYjCS,QAZiC;AAazC5B,MAAAA,mBAAmB,CAAC0B,KAAD,EAAQE,QAAQ,CAACA,QAAjB,CAAnB;AACH,KAtCkB;;AAAA,SAwCnBC,+BAxCmB,GAwCeX,MAAM,IAAI;AAAA,YAChCC,IADgC,GACvBD,MADuB,CAChCC,IADgC;AAGxC,WAAKI,QAAL,CAAc;AACVJ,QAAAA,IADU;AAEVK,QAAAA,KAAK,EAAE,KAAKC,QAAL,CAAcN,IAAd,CAFG;AAGVW,QAAAA,gBAAgB,EAAE,CAHR;AAIVC,QAAAA,WAAW,EAAE,KAJH;AAKVC,QAAAA,UAAU,EAAE;AALF,OAAd;AAQA,UAAI,CAACb,IAAL,EAAW;AAEX,YAAMO,KAAK,GAAGvB,SAAS,CAACwB,QAAV,EAAd;AAbwC,YAchCC,QAdgC,GAcnBT,IAdmB,CAchCS,QAdgC;AAexC5B,MAAAA,mBAAmB,CAAC0B,KAAD,EAAQE,QAAQ,CAACA,QAAjB,CAAnB;AACH,KAxDkB;;AAAA,SA0DnBK,UA1DmB,GA0DNC,OAAO,IAAI;AAAA,YACZF,UADY,GACG,KAAKX,KADR,CACZW,UADY;AAEpB,UAAIA,UAAJ,EAAgB;AAChB,UAAI,CAACE,OAAL,EAAc;AAEd7B,MAAAA,eAAe,CAAC8B,YAAhB,CAA6B;AACzB,iBAAS,yBADgB;AAEzBD,QAAAA;AAFyB,OAA7B;AAIH,KAnEkB;;AAAA,SAqEnBE,kBArEmB,GAqEEC,SAAS,IAAI;AAAA,YACtBb,KADsB,GACZ,KAAKH,KADO,CACtBG,KADsB;AAG9B,YAAMU,OAAO,GAAGV,KAAK,CAACc,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACL,OAAF,CAAUM,EAAV,KAAiBH,SAAjC,CAAhB;AACA,UAAI,CAACH,OAAL,EAAc;AAEd,YAAMR,KAAK,GAAGvB,SAAS,CAACwB,QAAV,EAAd;AACA5B,MAAAA,kBAAkB,CAAC2B,KAAD,EAAQQ,OAAR,EAAiB,IAAjB,CAAlB;AAEA,UAAIO,cAAc,GAAG,CAArB;;AACA,UAAI,KAAKC,QAAL,IAAiB,KAAKA,QAAL,CAAcC,OAAnC,EAA4C;AACxCF,QAAAA,cAAc,GAAGG,IAAI,CAACC,KAAL,CAAW,KAAKH,QAAL,CAAcC,OAAd,CAAsBG,WAAtB,GAAoC7C,yBAA/C,CAAjB;AACH;;AAED,YAAM8C,eAAe,GAAG,KAAKC,mBAAL,CAAyBX,SAAzB,EAAoCb,KAApC,EAA2CiB,cAA3C,CAAxB;AACAM,MAAAA,eAAe,CAACE,OAAhB,CAAwBV,CAAC,IAAI;AACzBxC,QAAAA,kBAAkB,CAAC2B,KAAD,EAAQa,CAAR,EAAW,IAAX,CAAlB;AACH,OAFD;AAGH,KAvFkB;;AAAA,SAyFnBS,mBAzFmB,GAyFG,CAACX,SAAD,EAAYT,QAAZ,EAAsBa,cAAtB,KAAyC;AAC3D,UAAI,CAACb,QAAL,EAAe,OAAO,EAAP;AAEf,YAAMsB,OAAO,GAAG,EAAhB;AACA,YAAMC,KAAK,GAAGvB,QAAQ,CAACwB,SAAT,CAAmBb,CAAC,IAAIA,CAAC,CAACL,OAAF,CAAUM,EAAV,KAAiBH,SAAzC,CAAd;AACA,UAAIc,KAAK,KAAK,CAAC,CAAf,EAAkB,OAAO,EAAP;AAElB,YAAME,GAAG,GAAGT,IAAI,CAACC,KAAL,CAAWM,KAAK,GAAGV,cAAnB,CAAZ;AACA,YAAMa,MAAM,GAAGH,KAAK,GAAGV,cAAvB;AAEA,YAAMc,OAAO,GAAGF,GAAG,GAAG,CAAtB;AACA,YAAMG,OAAO,GAAGH,GAAG,GAAG,CAAtB;AACA,YAAMI,UAAU,GAAGH,MAAM,GAAG,CAA5B;AACA,YAAMI,UAAU,GAAGJ,MAAM,GAAG,CAA5B;;AAEA,UAAIC,OAAO,IAAI,CAAf,EAAkB;AACd,YAAIE,UAAU,IAAI,CAAlB,EAAqB;AACjBP,UAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGc,OAAjB,GAA2BE,UAAxC;AACH;;AACDP,QAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGc,OAAjB,GAA2BD,MAAxC;;AACA,YAAII,UAAU,GAAGjB,cAAjB,EAAiC;AAC7BS,UAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGc,OAAjB,GAA2BG,UAAxC;AACH;AACJ;;AAED,UAAID,UAAU,IAAI,CAAlB,EAAqB;AACjBP,QAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGY,GAAjB,GAAuBI,UAApC;AACH;;AACD,UAAIC,UAAU,GAAGjB,cAAjB,EAAiC;AAC7BS,QAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGY,GAAjB,GAAuBK,UAApC;AACH;;AAED,UAAIF,OAAO,GAAGZ,IAAI,CAACgB,IAAL,CAAUhC,QAAQ,CAACiC,MAAT,GAAkBpB,cAA5B,CAAd,EAA2D;AACvD,YAAIgB,UAAU,IAAI,CAAlB,EAAqB;AACjBP,UAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGe,OAAjB,GAA2BC,UAAxC;AACH;;AACDP,QAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGe,OAAjB,GAA2BF,MAAxC;;AACA,YAAII,UAAU,GAAGjB,cAAjB,EAAiC;AAC7BS,UAAAA,OAAO,CAACS,IAAR,CAAalB,cAAc,GAAGe,OAAjB,GAA2BE,UAAxC;AACH;AACJ;;AAED,aAAOR,OAAO,CAACY,GAAR,CAAYC,CAAC,IAAInC,QAAQ,CAACmC,CAAD,CAAzB,CAAP;AACH,KApIkB;;AAAA,SAsInBC,gBAtImB,GAsIAC,KAAK,IAAI;AACxB,YAAM5B,SAAS,GAAG6B,MAAM,CAACD,KAAK,CAACE,aAAN,CAAoBC,OAApB,CAA4B/B,SAA7B,CAAxB;AACA,YAAMH,OAAO,GAAG,KAAKmC,UAAL,CAAgBhC,SAAhB,CAAhB;AACA,UAAI,CAACH,OAAL,EAAc;AAEd,UAAI,CAAC,KAAKoC,SAAV,EAAqB;;AAErB,UAAI,KAAKC,kBAAL,KAA4BlC,SAAhC,EAA2C;AACvC,aAAKkC,kBAAL,GAA0B,IAA1B;AACH;;AACD,WAAKhD,QAAL,CAAc;AAAEW,QAAAA;AAAF,OAAd;AACA7B,MAAAA,eAAe,CAAC8B,YAAhB,CAA6B;AACzB,iBAAS,4BADgB;AAEzBD,QAAAA;AAFyB,OAA7B;AAIA,WAAKE,kBAAL,CAAwBC,SAAxB;AACH,KAtJkB;;AAAA,SAwJnBmC,eAxJmB,GAwJDP,KAAK,IAAI;AACvB,YAAM5B,SAAS,GAAG6B,MAAM,CAACD,KAAK,CAACE,aAAN,CAAoBC,OAApB,CAA4B/B,SAA7B,CAAxB;AACA,YAAMH,OAAO,GAAG,KAAKmC,UAAL,CAAgBhC,SAAhB,CAAhB;AACA,UAAI,CAACH,OAAL,EAAc;AAEd,WAAKqC,kBAAL,GAA0BlC,SAA1B;AACA,YAAMoC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,WAAKlD,QAAL,CAAc;AAAEW,QAAAA,OAAF;AAAWZ,QAAAA,SAAS,EAAEmD,GAAtB;AAA2B1C,QAAAA,WAAW,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAAd;AACA2C,MAAAA,UAAU,CAAC,MAAM;AAAA,cACLrD,SADK,GACS,KAAKD,KADd,CACLC,SADK;;AAEb,YAAIA,SAAS,KAAKmD,GAAlB,EAAuB;AACnB,eAAKlD,QAAL,CAAc;AAAEQ,YAAAA,WAAW,EAAE,IAAf;AAAqBC,YAAAA,UAAU,EAAE;AAAjC,WAAd;AACA3B,UAAAA,eAAe,CAAC8B,YAAhB,CAA6B;AACzB,qBAAS,4BADgB;AAEzBD,YAAAA;AAFyB,WAA7B;AAIH;AACJ,OATS,EASP,GATO,CAAV;AAWA,WAAKE,kBAAL,CAAwBC,SAAxB;AAEA,WAAKiC,SAAL,GAAiB,IAAjB;AACAM,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,aAA1C;AAEAb,MAAAA,KAAK,CAACc,cAAN;AACAd,MAAAA,KAAK,CAACe,eAAN;AACA,aAAO,KAAP;AACH,KApLkB;;AAAA,SAsLnBF,aAtLmB,GAsLH,MAAM;AAClB,YAAM5C,OAAO,GAAG,IAAhB;AACA,WAAKX,QAAL,CAAc;AAAEW,QAAAA,OAAF;AAAWZ,QAAAA,SAAS,EAAE,CAAtB;AAAyBS,QAAAA,WAAW,EAAE;AAAtC,OAAd;AACA1B,MAAAA,eAAe,CAAC8B,YAAhB,CAA6B;AACzB,iBAAS,4BADgB;AAEzBD,QAAAA;AAFyB,OAA7B;AAIA,WAAKoC,SAAL,GAAiB,KAAjB;AACAM,MAAAA,QAAQ,CAACK,mBAAT,CAA6B,SAA7B,EAAwC,KAAKH,aAA7C;AACH,KA/LkB;;AAAA,SAiMnBrD,QAjMmB,GAiMRN,IAAI,IAAI;AACf,YAAMK,KAAK,GAAG,EAAd;AACA,UAAI,CAACL,IAAL,EAAW,OAAOK,KAAP;AAEX,YAAM0D,IAAI,GAAG,IAAIC,GAAJ,EAAb;AAJe,YAKPvD,QALO,GAKqBT,IALrB,CAKPS,QALO;AAAA,YAKGwD,aALH,GAKqBjE,IALrB,CAKGiE,aALH;;AAMf,UAAIxD,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACA,QAAT,CAAkBqB,OAAlB,CAA0BV,CAAC,IAAI;AAC3Bf,UAAAA,KAAK,CAACmC,IAAN,CAAWpB,CAAX;AACA2C,UAAAA,IAAI,CAACG,GAAL,CAAS9C,CAAC,CAACL,OAAF,CAAUM,EAAnB,EAAuBD,CAAC,CAACL,OAAF,CAAUM,EAAjC;AACH,SAHD;AAIH;;AACD,UAAI4C,aAAJ,EAAmB;AACfA,QAAAA,aAAa,CAACxD,QAAd,CAAuBqB,OAAvB,CAA+BV,CAAC,IAAI;AAChC,cAAI,CAAC2C,IAAI,CAACI,GAAL,CAAS/C,CAAC,CAACL,OAAF,CAAUM,EAAnB,CAAL,EAA6B;AACzBhB,YAAAA,KAAK,CAACmC,IAAN,CAAWpB,CAAX;AACA2C,YAAAA,IAAI,CAACG,GAAL,CAAS9C,CAAC,CAACL,OAAF,CAAUM,EAAnB,EAAuBD,CAAC,CAACL,OAAF,CAAUM,EAAjC;AACH;AACJ,SALD;AAMH;;AAED,aAAOhB,KAAP;AACH,KAvNkB;;AAGf,SAAKkB,QAAL,GAAgBnD,KAAK,CAACgG,SAAN,EAAhB;AAEA,SAAKlE,KAAL,GAAa;AACTF,MAAAA,IAAI,EAAE,IADG;AAETK,MAAAA,KAAK,EAAE,EAFE;AAGTM,MAAAA,gBAAgB,EAAE,CAHT;AAITC,MAAAA,WAAW,EAAE,KAJJ;AAKTC,MAAAA,UAAU,EAAE;AALH,KAAb;AAOH;;AAEDwD,EAAAA,iBAAiB,GAAG;AAChBpF,IAAAA,YAAY,CAACqF,EAAb,CAAgB,+BAAhB,EAAiD,KAAK5D,+BAAtD;AACAzB,IAAAA,YAAY,CAACqF,EAAb,CAAgB,gCAAhB,EAAkD,KAAKxE,gCAAvD;AACH;;AAEDyE,EAAAA,oBAAoB,GAAG;AACnBtF,IAAAA,YAAY,CAACuF,cAAb,CAA4B,+BAA5B,EAA6D,KAAK9D,+BAAlE;AACAzB,IAAAA,YAAY,CAACuF,cAAb,CAA4B,gCAA5B,EAA8D,KAAK1E,gCAAnE;AACH;;AAmMDoD,EAAAA,UAAU,CAAChC,SAAD,EAAY;AAAA,UACVb,KADU,GACA,KAAKH,KADL,CACVG,KADU;AAGlB,UAAMoE,YAAY,GAAGpE,KAAK,CAAC4B,SAAN,CAAgBb,CAAC,IAAIA,CAAC,CAACL,OAAF,CAAUM,EAAV,KAAiBH,SAAtC,CAArB;AACA,WAAOuD,YAAY,KAAK,CAAC,CAAlB,GAAsBpE,KAAK,CAACoE,YAAD,CAA3B,GAA4C,IAAnD;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UACGC,OADH,GACe,KAAK9E,KADpB,CACG8E,OADH;AAAA,wBAEyC,KAAKzE,KAF9C;AAAA,UAEGF,IAFH,eAEGA,IAFH;AAAA,UAESK,KAFT,eAESA,KAFT;AAAA,UAEgBU,OAFhB,eAEgBA,OAFhB;AAAA,UAEyBH,WAFzB,eAEyBA,WAFzB;AAGL,QAAI,CAACZ,IAAL,EAAW,OAAO,IAAP;AACX,QAAI,CAACK,KAAL,EAAY,OAAO,IAAP;AACZ,QAAI,CAACA,KAAK,CAACqC,MAAX,EAAmB,OAAO,IAAP;AAEnB,UAAMkC,QAAQ,GAAGvE,KAAK,CAACsC,GAAN,CAAUvB,CAAC,IACxB;AACI,MAAA,SAAS,EAAC,yBADd;AAEI,MAAA,GAAG,EAAEA,CAAC,CAACL,OAAF,CAAUM,EAFnB;AAGI,yBAAiBD,CAAC,CAACL,OAAF,CAAUM,EAH/B;AAII,MAAA,KAAK,EAAE;AAAEwD,QAAAA,KAAK,EAAE/F,yBAAT;AAAoCgG,QAAAA,MAAM,EAAEhG;AAA5C,OAJX;AAKI,MAAA,OAAO,EAAE,MAAM,KAAKgC,UAAL,CAAgBM,CAAhB,CALnB;AAMI,MAAA,YAAY,EAAE,KAAKyB,gBANvB;AAOI,MAAA,WAAW,EAAE,KAAKQ,eAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQI,oBAAC,OAAD;AACI,MAAA,GAAG,EAAEjC,CAAC,CAACL,OAAF,CAAUM,EADnB;AAEI,MAAA,SAAS,EAAC,iCAFd;AAGI,MAAA,OAAO,EAAED,CAHb;AAII,MAAA,QAAQ,EAAE,KAJd;AAKI,MAAA,IAAI,EAAE,KALV;AAMI,MAAA,WAAW,EAAErC,0BANjB;AAOI,MAAA,OAAO,MAPX;AAQI,MAAA,MAAM,EAAEN,iBAAiB,CAACsG,KAR9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADa,CAAjB;AAsBA,WACI;AAAK,MAAA,GAAG,EAAE,KAAKxD,QAAf;AAAyB,MAAA,SAAS,EAAEjD,UAAU,CAAC,eAAD,EAAkBqG,OAAO,CAACK,WAA1B,EAAuCL,OAAO,CAACtF,IAA/C,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKuF,QADL,EAEKK,OAAO,CAAClE,OAAD,CAAP,IAAoBH,WAApB,IAAmC,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAEG,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFxC,CADJ;AAMH;;AApQsC;;AAuQ3C,eAAexC,UAAU,CAACY,MAAD,CAAV,CAAmBO,YAAnB,CAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerPreview from './StickerPreview';\nimport { borderStyle } from '../Theme';\nimport { loadStickerContent, loadStickersContent } from '../../Utils/File';\nimport { STICKER_HINT_DISPLAY_SIZE, STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersHint.css';\n\nconst styles = theme => ({\n    root: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n    },\n    ...borderStyle(theme)\n});\n\nclass StickersHint extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.hintsRef = React.createRef();\n\n        this.state = {\n            hint: null,\n            items: [],\n            previewStickerId: 0,\n            showPreview: false,\n            cancelSend: false\n        };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateLocalStickersHint', this.onClientUpdateLocalStickersHint);\n        StickerStore.on('clientUpdateRemoteStickersHint', this.onClientUpdateRemoteStickersHint);\n    }\n\n    componentWillUnmount() {\n        StickerStore.removeListener('clientUpdateLocalStickersHint', this.onClientUpdateLocalStickersHint);\n        StickerStore.removeListener('clientUpdateRemoteStickersHint', this.onClientUpdateRemoteStickersHint);\n    }\n\n    onClientUpdateRemoteStickersHint = update => {\n        const { hint } = update;\n        const { hint: currentHint } = this.state;\n\n        if (currentHint && hint.timestamp !== currentHint.timestamp) return;\n\n        this.setState({\n            hint: StickerStore.hint,\n            items: this.getItems(StickerStore.hint)\n        });\n\n        const store = FileStore.getStore();\n        const { stickers } = hint;\n        loadStickersContent(store, stickers.stickers);\n    };\n\n    onClientUpdateLocalStickersHint = update => {\n        const { hint } = update;\n\n        this.setState({\n            hint,\n            items: this.getItems(hint),\n            previewStickerId: 0,\n            showPreview: false,\n            cancelSend: false\n        });\n\n        if (!hint) return;\n\n        const store = FileStore.getStore();\n        const { stickers } = hint;\n        loadStickersContent(store, stickers.stickers);\n    };\n\n    handleSend = sticker => {\n        const { cancelSend } = this.state;\n        if (cancelSend) return;\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { items } = this.state;\n\n        const sticker = items.find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        let stickersPerRow = 8;\n        if (this.hintsRef && this.hintsRef.current) {\n            stickersPerRow = Math.floor(this.hintsRef.current.clientWidth / STICKER_HINT_DISPLAY_SIZE);\n        }\n\n        const preloadStickers = this.getNeighborStickers(stickerId, items, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    getNeighborStickers = (stickerId, stickers, stickersPerRow) => {\n        if (!stickers) return [];\n\n        const indexes = [];\n        const index = stickers.findIndex(x => x.sticker.id === stickerId);\n        if (index === -1) return [];\n\n        const row = Math.floor(index / stickersPerRow);\n        const column = index % stickersPerRow;\n\n        const prevRow = row - 1;\n        const nextRow = row + 1;\n        const prevColumn = column - 1;\n        const nextColumn = column + 1;\n\n        if (prevRow >= 0) {\n            if (prevColumn >= 0) {\n                indexes.push(stickersPerRow * prevRow + prevColumn);\n            }\n            indexes.push(stickersPerRow * prevRow + column);\n            if (nextColumn < stickersPerRow) {\n                indexes.push(stickersPerRow * prevRow + nextColumn);\n            }\n        }\n\n        if (prevColumn >= 0) {\n            indexes.push(stickersPerRow * row + prevColumn);\n        }\n        if (nextColumn < stickersPerRow) {\n            indexes.push(stickersPerRow * row + nextColumn);\n        }\n\n        if (nextRow < Math.ceil(stickers.length / stickersPerRow)) {\n            if (prevColumn >= 0) {\n                indexes.push(stickersPerRow * nextRow + prevColumn);\n            }\n            indexes.push(stickersPerRow * nextRow + column);\n            if (nextColumn < stickersPerRow) {\n                indexes.push(stickersPerRow * nextRow + nextColumn);\n            }\n        }\n\n        return indexes.map(i => stickers[i]);\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        const sticker = this.getSticker(stickerId);\n        if (!sticker) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.loadPreviewContent(stickerId);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        const sticker = this.getSticker(stickerId);\n        if (!sticker) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ sticker, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true });\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateStickerPreview',\n                    sticker\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        const sticker = null;\n        this.setState({ sticker, timestamp: 0, showPreview: false });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    getItems = hint => {\n        const items = [];\n        if (!hint) return items;\n\n        const dict = new Map();\n        const { stickers, foundStickers } = hint;\n        if (stickers) {\n            stickers.stickers.forEach(x => {\n                items.push(x);\n                dict.set(x.sticker.id, x.sticker.id);\n            });\n        }\n        if (foundStickers) {\n            foundStickers.stickers.forEach(x => {\n                if (!dict.has(x.sticker.id)) {\n                    items.push(x);\n                    dict.set(x.sticker.id, x.sticker.id);\n                }\n            });\n        }\n\n        return items;\n    };\n\n    getSticker(stickerId) {\n        const { items } = this.state;\n\n        const stickerIndex = items.findIndex(x => x.sticker.id === stickerId);\n        return stickerIndex !== -1 ? items[stickerIndex] : null;\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { hint, items, sticker, showPreview } = this.state;\n        if (!hint) return null;\n        if (!items) return null;\n        if (!items.length) return null;\n\n        const controls = items.map(x => (\n            <div\n                className='sticker-set-dialog-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                style={{ width: STICKER_HINT_DISPLAY_SIZE, height: STICKER_HINT_DISPLAY_SIZE }}\n                onClick={() => this.handleSend(x)}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseDown={this.handleMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    className='sticker-set-dialog-item-sticker'\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    preview\n                    source={StickerSourceEnum.HINTS}\n                />\n            </div>\n        ));\n\n        return (\n            <div ref={this.hintsRef} className={classNames('stickers-hint', classes.borderColor, classes.root)}>\n                {controls}\n                {Boolean(sticker) && showPreview && <StickerPreview sticker={sticker} />}\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(StickersHint);\n"]},"metadata":{},"sourceType":"module"}