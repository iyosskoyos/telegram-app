{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/Media/PollPercentage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { ANIMATION_DURATION_200MS } from './../../../Constants';\nimport './PollPercentage.css';\n\nconst styles = theme => ({\n  pollPercentageSubtitle: {\n    color: theme.palette.text.secondary\n  }\n});\n\nclass PollPercentage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateAnimation = () => {\n      console.log('PollPercentage.updateAnimation');\n      this.stopAnimation();\n      this.handle = requestAnimationFrame(this.onAnimationFrame);\n    };\n\n    this.stopAnimation = () => {\n      if (!this.handle) return;\n      cancelAnimationFrame(this.handle);\n      this.handle = null;\n    };\n\n    this.onAnimationFrame = () => {\n      const _this$state = this.state,\n            startTime = _this$state.startTime,\n            from = _this$state.from,\n            to = _this$state.to;\n      console.log('PollPercentage.onAnimationFrame');\n      const timePassed = Date.now() - startTime;\n\n      if (timePassed >= ANIMATION_DURATION_200MS) {\n        this.setState({\n          animated: to\n        });\n        this.stopAnimation();\n      } else {\n        const animated = from + Math.floor((to - from) * timePassed / ANIMATION_DURATION_200MS);\n        this.setState({\n          animated\n        });\n        this.handle = requestAnimationFrame(this.onAnimationFrame);\n      }\n    };\n\n    this.handle = null;\n    const value = props.value;\n    this.state = {\n      from: value,\n      to: value,\n      animated: value,\n      prevPropsValue: value\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const _this$props = this.props,\n          closed = _this$props.closed,\n          theme = _this$props.theme,\n          value = _this$props.value;\n    const animated = this.state.animated;\n    console.log('PollPercentage.shouldComponentUpdate start');\n\n    if (closed !== nextProps.closed) {\n      return true;\n    }\n\n    if (theme !== nextProps.theme) {\n      return true;\n    }\n\n    if (value !== nextProps.value) {\n      return true;\n    }\n\n    if (animated !== nextState.animated) {\n      return true;\n    }\n\n    console.log('PollPercentage.shouldComponentUpdate end with false');\n    return false;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.value !== state.prevPropsValue) {\n      return {\n        startTime: Date.now(),\n        from: state.animated,\n        to: props.value,\n        prevPropsValue: props.value\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.value !== this.props.value) {\n      this.updateAnimation();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopAnimation();\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          chosen = _this$props2.chosen,\n          classes = _this$props2.classes,\n          closed = _this$props2.closed,\n          onClick = _this$props2.onClick;\n    const animated = this.state.animated;\n    return React.createElement(\"div\", {\n      className: classNames('poll-percentage', {\n        [classes.pollPercentageSubtitle]: !chosen\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, !closed && chosen ? React.createElement(\"a\", {\n      className: \"poll-percentage-action\",\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, animated + '%') : React.createElement(React.Fragment, null, animated + '%'));\n  }\n\n}\n\nPollPercentage.propTypes = {\n  value: PropTypes.number.isRequired,\n  chosen: PropTypes.bool,\n  closed: PropTypes.bool,\n  onClick: PropTypes.func\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(PollPercentage);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/Media/PollPercentage.js"],"names":["React","PropTypes","classNames","withStyles","ANIMATION_DURATION_200MS","styles","theme","pollPercentageSubtitle","color","palette","text","secondary","PollPercentage","Component","constructor","props","updateAnimation","console","log","stopAnimation","handle","requestAnimationFrame","onAnimationFrame","cancelAnimationFrame","state","startTime","from","to","timePassed","Date","now","setState","animated","Math","floor","value","prevPropsValue","shouldComponentUpdate","nextProps","nextState","nextContext","closed","getDerivedStateFromProps","componentDidUpdate","prevProps","prevState","snapshot","componentWillUnmount","render","chosen","classes","onClick","propTypes","number","isRequired","bool","func","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { ANIMATION_DURATION_200MS } from './../../../Constants';\nimport './PollPercentage.css';\n\nconst styles = theme => ({\n    pollPercentageSubtitle: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass PollPercentage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handle = null;\n\n        const { value } = props;\n\n        this.state = {\n            from: value,\n            to: value,\n            animated: value,\n\n            prevPropsValue: value\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { closed, theme, value } = this.props;\n        const { animated } = this.state;\n\n        console.log('PollPercentage.shouldComponentUpdate start');\n\n        if (closed !== nextProps.closed) {\n            return true;\n        }\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (value !== nextProps.value) {\n            return true;\n        }\n\n        if (animated !== nextState.animated) {\n            return true;\n        }\n\n        console.log('PollPercentage.shouldComponentUpdate end with false');\n        return false;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.value !== state.prevPropsValue) {\n            return {\n                startTime: Date.now(),\n                from: state.animated,\n                to: props.value,\n\n                prevPropsValue: props.value\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.value !== this.props.value) {\n            this.updateAnimation();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopAnimation();\n    }\n\n    updateAnimation = () => {\n        console.log('PollPercentage.updateAnimation');\n        this.stopAnimation();\n\n        this.handle = requestAnimationFrame(this.onAnimationFrame);\n    };\n\n    stopAnimation = () => {\n        if (!this.handle) return;\n\n        cancelAnimationFrame(this.handle);\n        this.handle = null;\n    };\n\n    onAnimationFrame = () => {\n        const { startTime, from, to } = this.state;\n        console.log('PollPercentage.onAnimationFrame');\n\n        const timePassed = Date.now() - startTime;\n\n        if (timePassed >= ANIMATION_DURATION_200MS) {\n            this.setState({ animated: to });\n            this.stopAnimation();\n        } else {\n            const animated = from + Math.floor(((to - from) * timePassed) / ANIMATION_DURATION_200MS);\n            this.setState({ animated });\n            this.handle = requestAnimationFrame(this.onAnimationFrame);\n        }\n    };\n\n    render() {\n        const { chosen, classes, closed, onClick } = this.props;\n        const { animated } = this.state;\n\n        return (\n            <div className={classNames('poll-percentage', { [classes.pollPercentageSubtitle]: !chosen })}>\n                {!closed && chosen ? (\n                    <a className='poll-percentage-action' onClick={onClick}>\n                        {animated + '%'}\n                    </a>\n                ) : (\n                    <>{animated + '%'}</>\n                )}\n            </div>\n        );\n    }\n}\n\nPollPercentage.propTypes = {\n    value: PropTypes.number.isRequired,\n    chosen: PropTypes.bool,\n    closed: PropTypes.bool,\n    onClick: PropTypes.func\n};\n\nexport default withStyles(styles, { withTheme: true })(PollPercentage);\n"]},"metadata":{},"sourceType":"module"}