{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/ColumnMiddle/EmojiPickerButton.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = theme => ({\n  iconButton: {\n    margin: '8px 0px'\n  },\n  headerButton: {\n    borderRadius: 0,\n    flex: '50%'\n  },\n  pickerRoot: {\n    zIndex: theme.zIndex.modal,\n    width: 338,\n    overflowX: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n    color: theme.palette.text.primary,\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: theme.shadows[8],\n    position: 'absolute',\n    bottom: 80,\n    display: 'none'\n  },\n  pickerRootOpened: {\n    display: 'block'\n  }\n});\n\nclass EmojiPickerButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateChange = update => {\n      this.picker = null;\n    };\n\n    this.handleButtonMouseEnter = event => {\n      this.buttonEnter = true;\n      setTimeout(() => {\n        if (!this.buttonEnter) return;\n        this.updatePicker(true);\n        this.loadStickerSets();\n      }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    this.loadStickerSets = async () => {\n      if (this.sets) return;\n      this.stickerSets = await TdLibController.send({\n        '@type': 'getInstalledStickerSets',\n        is_masks: false\n      });\n      const promises = [];\n      this.stickerSets.sets.forEach(x => {\n        promises.push(TdLibController.send({\n          '@type': 'getStickerSet',\n          set_id: x.id\n        }));\n      });\n      this.sets = await Promise.all(promises);\n      const node = this.stickersPickerRef.current;\n      const store = FileStore.getStore();\n      const previewSets = this.sets.slice(0, 5).reverse();\n      previewSets.forEach(x => {\n        loadStickerSetContent(store, x);\n        node.loadedSets.set(x.id, x.id);\n      });\n      const previewStickers = this.sets.reduce((stickers, set) => {\n        if (set.stickers.length > 0) {\n          stickers.push(set.stickers[0]);\n        }\n\n        return stickers;\n      }, []);\n      previewStickers.forEach(x => {\n        loadStickerThumbnailContent(store, x);\n      });\n    };\n\n    this.handleButtonMouseLeave = () => {\n      this.buttonEnter = false;\n      setTimeout(() => {\n        this.tryClosePicker();\n      }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    this.tryClosePicker = () => {\n      const sticker = this.state.sticker;\n      if (this.paperEnter || this.buttonEnter || sticker) return;\n      this.updatePicker(false);\n    };\n\n    this.handlePaperMouseEnter = () => {\n      this.paperEnter = true;\n    };\n\n    this.handlePaperMouseLeave = () => {\n      this.paperEnter = false;\n      setTimeout(() => {\n        this.tryClosePicker();\n      }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    this.updatePicker = open => {\n      this.setState({\n        open\n      });\n    };\n\n    this.handleEmojiClick = () => {\n      this.setState({\n        tab: 0\n      });\n    };\n\n    this.handleStickersClick = () => {\n      const stickersPicker = this.stickersPickerRef.current;\n      const tab = this.state.tab;\n      stickersPicker.loadContent(this.stickerSets, this.sets);\n      this.setState({\n        tab: 1\n      });\n\n      if (tab === 1) {\n        stickersPicker.scrollTop();\n      }\n    };\n\n    this.handleStickerSend = sticker => {\n      if (!sticker) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerSend',\n        sticker\n      });\n      this.updatePicker(false);\n    };\n\n    this.handleStickerPreview = sticker => {\n      this.setState({\n        sticker\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateStickerPreview',\n        sticker\n      });\n\n      if (!sticker) {\n        this.tryClosePicker();\n      }\n    };\n\n    this.state = {\n      open: false,\n      tab: 0\n    };\n    this.emojiPickerRef = React.createRef();\n    this.stickersPickerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n    LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n    LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          theme = _this$props.theme,\n          t = _this$props.t;\n    const _this$state = this.state,\n          open = _this$state.open,\n          tab = _this$state.tab,\n          sticker = _this$state.sticker;\n\n    if (open && !this.picker) {\n      const i18n = {\n        search: t('Search'),\n        notfound: t('NotEmojiFound'),\n        skintext: t('ChooseDefaultSkinTone'),\n        categories: {\n          search: t('SearchResults'),\n          recent: t('Recent'),\n          people: t('SmileysPeople'),\n          nature: t('AnimalsNature'),\n          foods: t('FoodDrink'),\n          activity: t('Activity'),\n          places: t('TravelPlaces'),\n          objects: t('Objects'),\n          symbols: t('Symbols'),\n          flags: t('Flags'),\n          custom: t('Custom')\n        }\n      };\n      this.picker = React.createElement(EmojiPicker, {\n        ref: this.emojiPickerRef,\n        set: \"apple\",\n        showPreview: false,\n        showSkinTones: false,\n        onSelect: this.props.onSelect,\n        color: theme.palette.primary.dark,\n        i18n: i18n,\n        native: isAppleDevice(),\n        style: {\n          width: 338,\n          overflowX: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      });\n      this.stickersPicker = React.createElement(StickersPicker, {\n        ref: this.stickersPickerRef,\n        onSelect: this.handleStickerSend,\n        onPreview: this.handleStickerPreview,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      href: theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      className: classes.iconButton,\n      \"aria-label\": \"Emoticon\",\n      onMouseEnter: this.handleButtonMouseEnter,\n      onMouseLeave: this.handleButtonMouseLeave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(InsertEmoticonIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classNames(classes.pickerRoot, {\n        [classes.pickerRootOpened]: open\n      }),\n      onMouseEnter: this.handlePaperMouseEnter,\n      onMouseLeave: this.handlePaperMouseLeave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"emoji-picker-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: tab === 0 ? 'primary' : 'default',\n      className: classes.headerButton,\n      onClick: this.handleEmojiClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, t('Emoji')), React.createElement(Button, {\n      color: tab === 1 ? 'primary' : 'default',\n      className: classes.headerButton,\n      onClick: this.handleStickersClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, t('Stickers'))), React.createElement(\"div\", {\n      className: classNames('emoji-picker-content', {\n        'emoji-picker-content-stickers': tab === 1\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, this.picker, this.stickersPicker), Boolean(sticker) && React.createElement(StickerPreview, {\n      sticker: sticker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(EmojiPickerButton);","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/ColumnMiddle/EmojiPickerButton.js"],"names":["React","classNames","compose","withStyles","withTranslation","Button","IconButton","InsertEmoticonIcon","Picker","EmojiPicker","StickerPreview","StickersPicker","isAppleDevice","loadStickerThumbnailContent","loadStickerSetContent","EMOJI_PICKER_TIMEOUT_MS","ApplicationStore","FileStore","LocalizationStore","TdLibController","styles","theme","iconButton","margin","headerButton","borderRadius","flex","pickerRoot","zIndex","modal","width","overflowX","backgroundColor","palette","background","paper","color","text","primary","shape","boxShadow","shadows","position","bottom","display","pickerRootOpened","EmojiPickerButton","Component","constructor","props","onClientUpdateChange","update","picker","handleButtonMouseEnter","event","buttonEnter","setTimeout","updatePicker","loadStickerSets","sets","stickerSets","send","is_masks","promises","forEach","x","push","set_id","id","Promise","all","node","stickersPickerRef","current","store","getStore","previewSets","slice","reverse","loadedSets","set","previewStickers","reduce","stickers","length","handleButtonMouseLeave","tryClosePicker","sticker","state","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","setState","handleEmojiClick","tab","handleStickersClick","stickersPicker","loadContent","scrollTop","handleStickerSend","clientUpdate","handleStickerPreview","emojiPickerRef","createRef","componentDidMount","on","componentWillUnmount","removeListener","render","classes","t","i18n","search","notfound","skintext","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","onSelect","dark","type","Boolean","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    },\n    pickerRoot: {\n        zIndex: theme.zIndex.modal,\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 80,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"]},"metadata":{},"sourceType":"module"}