{"ast":null,"code":"import _defineProperty from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Message/Media/Sticker.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Lottie from '../../Viewer/Lottie';\nimport { isBlurredThumbnail, isValidAnimatedSticker } from '../../../Utils/Media';\nimport { getFitSize } from '../../../Utils/Common';\nimport { getBlob, getSrc } from '../../../Utils/File';\nimport { inflateBlob } from '../../../Workers/BlobInflator';\nimport { STICKER_DISPLAY_SIZE } from '../../../Constants';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport StickerStore from '../../../Stores/StickerStore';\nimport './Sticker.css';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nexport const StickerSourceEnum = Object.freeze({\n  HINTS: 'HINTS',\n  MESSAGE: 'MESSAGE',\n  PICKER_HEADER: 'PICKER_HEADER',\n  PICKER: 'PICKER',\n  PREVIEW: 'PREVIEW',\n  STICKER_SET: 'STICKER_SET',\n  UNKNOWN: 'UNKNOWN'\n});\n\nclass Sticker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateInstantViewContent = update => {\n      this.openIV = Boolean(InstantViewStore.getCurrent());\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateDialogChatId = update => {\n      this.dialogChatId = ApplicationStore.dialogChatId;\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateMediaViewerContent = update => {\n      this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateProfileMediaViewerContent = update => {\n      this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateStickerPreview = update => {\n      this.stickerPreview = update.sticker;\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateMessagesInView = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const key = \"\".concat(chatId, \"_\").concat(messageId);\n      this.inView = update.messages.has(key);\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateStickerSet = update => {\n      const stickerSet = update.stickerSet;\n      this.openedStickerSet = stickerSet;\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateFocusWindow = update => {\n      const focused = update.focused;\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId,\n            sticker = _this$props2.sticker;\n      const isAnimated = isValidAnimatedSticker(sticker, chatId, messageId);\n      if (!isAnimated) return;\n      this.windowFocused = focused;\n      this.startStopAnimation();\n    };\n\n    this.onClientUpdateStickerBlob = update => {\n      const _this$props$sticker = this.props.sticker,\n            sticker = _this$props$sticker.sticker,\n            is_animated = _this$props$sticker.is_animated;\n      const fileId = update.fileId;\n      if (!sticker) return;\n\n      if (sticker.id === fileId) {\n        if (is_animated) {\n          this.loadContent();\n        } else {\n          this.forceUpdate();\n        }\n      }\n    };\n\n    this.onClientUpdateStickerThumbnailBlob = update => {\n      const thumbnail = this.props.sticker.thumbnail;\n      if (!thumbnail) return;\n      const fileId = update.fileId;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.loadContent = async () => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId,\n            source = _this$props3.sticker,\n            autoplay = _this$props3.autoplay;\n      const is_animated = source.is_animated,\n            sticker = source.sticker;\n      const isAnimated = isValidAnimatedSticker(source, chatId, messageId);\n      if (!is_animated) return;\n      if (!isAnimated) return;\n      const blob = getBlob(sticker);\n      if (!blob) return;\n      let animationData = null;\n\n      try {\n        // animationData = StickerStore.getAnimationData(blob);\n        // if (animationData) {\n        //     this.setState({ animationData });\n        //     return;\n        // }\n        const result = await inflateBlob(blob);\n        if (!result) return;\n        animationData = JSON.parse(result); // StickerStore.setAnimationData(blob, animationData);\n      } catch (err) {\n        console.log('[Sticker] loadContent error', err);\n      }\n\n      if (!animationData) return;\n\n      if (autoplay) {\n        this.setState({\n          animationData\n        });\n      } else {\n        this.animationData = animationData;\n      }\n    };\n\n    this.handleMouseEnter = event => {\n      const animationData = this.animationData;\n      console.log('[Sticker] handleMouseEnter', animationData);\n\n      if (animationData) {\n        this.setState({\n          animationData\n        }, () => {\n          this.handleAnimationMouseEnter();\n        });\n      }\n    };\n\n    this.handleAnimationMouseEnter = () => {\n      console.log('[Sticker] handleAnimationMouseEnter 1');\n      if (this.props.autoplay) return;\n      this.entered = true;\n      const player = this.lottieRef.current;\n      if (!player) return;\n      console.log('[Sticker] handleAnimationMouseEnter 2');\n      this.loopCount = 0;\n      this.startStopAnimation();\n    };\n\n    this.handleAnimationLoopComplete = () => {\n      if (this.props.autoplay) return;\n      const player = this.lottieRef.current;\n      if (!player) return;\n      if (!this.entered) this.loopCount += 1;\n\n      if (this.loopCount > 2) {\n        const animationData = this.state.animationData;\n\n        if (animationData) {\n          this.setState({\n            animationData: null\n          });\n        }\n      }\n    };\n\n    this.handleAnimationMouseOut = () => {\n      this.entered = false;\n    };\n\n    this.lottieRef = React.createRef();\n    this.windowFocused = window.hasFocus;\n    this.inView = false;\n    this.stickerPreview = StickerStore.stickerPreview;\n    this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n    this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n    this.openIV = Boolean(InstantViewStore.getCurrent());\n    this.dialogChatId = ApplicationStore.dialogChatId;\n    this.state = {\n      animationDate: null,\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('[Sticker] render error', error, errorInfo);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const _this$props4 = this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId,\n          sticker = _this$props4.sticker,\n          blur = _this$props4.blur,\n          displaySize = _this$props4.displaySize;\n    const animationData = this.state.animationData;\n\n    if (animationData !== nextState.animationData) {\n      return true;\n    }\n\n    if (chatId !== nextProps.chatId) {\n      return true;\n    }\n\n    if (messageId !== nextProps.messageId) {\n      return true;\n    }\n\n    if (sticker !== nextProps.sticker) {\n      return true;\n    }\n\n    if (blur !== nextProps.blur) {\n      return true;\n    }\n\n    if (displaySize !== nextProps.displaySize) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.sticker !== this.props.sticker) {\n      this.loadContent();\n    }\n  }\n\n  componentDidMount() {\n    this.loadContent();\n    ApplicationStore.on('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n    ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    FileStore.on('clientUpdateStickerThumbnailBlob', this.onClientUpdateStickerThumbnailBlob);\n    FileStore.on('clientUpdateStickerBlob', this.onClientUpdateStickerBlob);\n    MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n    StickerStore.on('clientUpdateStickerPreview', this.onClientUpdateStickerPreview);\n    StickerStore.on('clientUpdateStickerSet', this.onClientUpdateStickerSet);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n    ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    ApplicationStore.removeListener('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    FileStore.removeListener('clientUpdateStickerThumbnailBlob', this.onClientUpdateStickerThumbnailBlob);\n    FileStore.removeListener('clientUpdateStickerBlob', this.onClientUpdateStickerBlob);\n    MessageStore.removeListener('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n    StickerStore.removeListener('clientUpdateStickerPreview', this.onClientUpdateStickerPreview);\n    StickerStore.removeListener('clientUpdateStickerSet', this.onClientUpdateStickerSet);\n  }\n\n  startStopAnimation() {\n    const autoplay = this.props.autoplay;\n    const player = this.lottieRef.current;\n    if (!player) return;\n\n    if (this.windowFocused && !this.stickerPreview && !this.openMediaViewer && !this.openProfileMediaViewer && !this.openIV && !this.dialogChatId) {\n      if (this.entered) {\n        console.log('[Sticker] play 1');\n        player.play();\n        this.pause = false;\n        return;\n      }\n\n      console.log('[Sticker] startStopAnimation', this.openedStickerSet);\n\n      if (!this.openedStickerSet) {\n        if (this.paused) {\n          console.log('[Sticker] play 2');\n          player.play();\n          this.paused = false;\n          return;\n        }\n\n        if (autoplay && this.inView) {\n          console.log('[Sticker] play 3');\n          player.play();\n          this.paused = false;\n          return;\n        }\n      }\n    }\n\n    console.log('[Sticker] pause');\n    this.paused = player.pause();\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId,\n          autoplay = _this$props5.autoplay,\n          className = _this$props5.className,\n          displaySize = _this$props5.displaySize,\n          blur = _this$props5.blur,\n          source = _this$props5.sticker,\n          style = _this$props5.style,\n          openMedia = _this$props5.openMedia,\n          preview = _this$props5.preview;\n    const thumbnail = source.thumbnail,\n          sticker = source.sticker,\n          width = source.width,\n          height = source.height;\n    const _this$state = this.state,\n          animationData = _this$state.animationData,\n          hasError = _this$state.hasError;\n    const isAnimated = isValidAnimatedSticker(source, chatId, messageId);\n    const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n    const src = getSrc(sticker);\n    const isBlurred = isBlurredThumbnail(thumbnail);\n\n    if (hasError) {\n      const style = {\n        width: displaySize,\n        height: displaySize\n      };\n\n      if (process.env.NODE_ENV !== 'production') {\n        style.background = '#ff000066';\n      }\n\n      return React.createElement(\"div\", {\n        className: classNames('sticker', className),\n        style: style,\n        onClick: openMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: classNames('sticker-image', {\n          'media-blurred': isBlurred && blur\n        }),\n        draggable: false,\n        src: thumbnailSrc,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }));\n    }\n\n    const fitSize = getFitSize({\n      width: width,\n      height: height\n    }, displaySize);\n    if (!fitSize) return null;\n\n    const stickerStyle = _objectSpread({\n      width: fitSize.width,\n      height: fitSize.height\n    }, style);\n\n    const content = isAnimated ? React.createElement(React.Fragment, null, animationData ? React.createElement(Lottie, {\n      ref: this.lottieRef,\n      options: {\n        autoplay: autoplay,\n        loop: true,\n        animationData,\n        renderer: 'svg',\n        rendererSettings: {\n          preserveAspectRatio: 'xMinYMin slice',\n          // Supports the same options as the svg element's preserveAspectRatio property\n          clearCanvas: false,\n          progressiveLoad: true,\n          // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.\n          hideOnTransparent: true,\n          //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)\n          className: 'lottie-svg'\n        }\n      },\n      eventListeners: [{\n        eventName: 'loopComplete',\n        callback: this.handleAnimationLoopComplete\n      }],\n      onMouseOut: this.handleAnimationMouseOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }) : React.createElement(\"img\", {\n      className: classNames('sticker-image', {\n        'media-blurred': isBlurred && blur\n      }),\n      draggable: false,\n      src: thumbnailSrc,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, null, src && !preview ? React.createElement(\"img\", {\n      className: \"sticker-image\",\n      draggable: false,\n      src: src,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }) : React.createElement(\"img\", {\n      className: classNames('sticker-image', {\n        'media-blurred': isBlurred && blur\n      }),\n      draggable: false,\n      src: thumbnailSrc,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: classNames('sticker', className),\n      style: stickerStyle,\n      onClick: openMedia,\n      onMouseEnter: this.handleMouseEnter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nSticker.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  sticker: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  autoplay: PropTypes.bool,\n  blur: PropTypes.bool,\n  displaySize: PropTypes.number,\n  preview: PropTypes.bool,\n  source: PropTypes.string\n};\nSticker.defaultProps = {\n  chatId: 0,\n  messageId: 0,\n  openMedia: () => {},\n  autoplay: true,\n  blur: true,\n  displaySize: STICKER_DISPLAY_SIZE,\n  preview: false,\n  source: StickerSourceEnum.UNKNOWN\n};\nexport default Sticker;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Message/Media/Sticker.js"],"names":["React","PropTypes","classNames","Lottie","isBlurredThumbnail","isValidAnimatedSticker","getFitSize","getBlob","getSrc","inflateBlob","STICKER_DISPLAY_SIZE","ApplicationStore","FileStore","MessageStore","StickerStore","InstantViewStore","StickerSourceEnum","Object","freeze","HINTS","MESSAGE","PICKER_HEADER","PICKER","PREVIEW","STICKER_SET","UNKNOWN","Sticker","Component","constructor","props","onClientUpdateInstantViewContent","update","openIV","Boolean","getCurrent","startStopAnimation","onClientUpdateDialogChatId","dialogChatId","onClientUpdateMediaViewerContent","openMediaViewer","mediaViewerContent","onClientUpdateProfileMediaViewerContent","openProfileMediaViewer","profileMediaViewerContent","onClientUpdateStickerPreview","stickerPreview","sticker","onClientUpdateMessagesInView","chatId","messageId","key","inView","messages","has","onClientUpdateStickerSet","stickerSet","openedStickerSet","onClientUpdateFocusWindow","focused","isAnimated","windowFocused","onClientUpdateStickerBlob","is_animated","fileId","id","loadContent","forceUpdate","onClientUpdateStickerThumbnailBlob","thumbnail","photo","source","autoplay","blob","animationData","result","JSON","parse","err","console","log","setState","handleMouseEnter","event","handleAnimationMouseEnter","entered","player","lottieRef","current","loopCount","handleAnimationLoopComplete","state","handleAnimationMouseOut","createRef","window","hasFocus","animationDate","hasError","getDerivedStateFromError","error","componentDidCatch","errorInfo","shouldComponentUpdate","nextProps","nextState","nextContext","blur","displaySize","componentDidUpdate","prevProps","prevState","snapshot","componentDidMount","on","componentWillUnmount","removeListener","play","pause","paused","render","className","style","openMedia","preview","width","height","thumbnailSrc","src","isBlurred","process","env","NODE_ENV","background","fitSize","stickerStyle","content","loop","renderer","rendererSettings","preserveAspectRatio","clearCanvas","progressiveLoad","hideOnTransparent","eventName","callback","propTypes","number","object","isRequired","func","bool","string","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Lottie from '../../Viewer/Lottie';\nimport { isBlurredThumbnail, isValidAnimatedSticker } from '../../../Utils/Media';\nimport { getFitSize } from '../../../Utils/Common';\nimport { getBlob, getSrc } from '../../../Utils/File';\nimport { inflateBlob } from '../../../Workers/BlobInflator';\nimport { STICKER_DISPLAY_SIZE } from '../../../Constants';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport StickerStore from '../../../Stores/StickerStore';\nimport './Sticker.css';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\n\nexport const StickerSourceEnum = Object.freeze({\n    HINTS: 'HINTS',\n    MESSAGE: 'MESSAGE',\n    PICKER_HEADER: 'PICKER_HEADER',\n    PICKER: 'PICKER',\n    PREVIEW: 'PREVIEW',\n    STICKER_SET: 'STICKER_SET',\n    UNKNOWN: 'UNKNOWN'\n});\n\nclass Sticker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.lottieRef = React.createRef();\n        this.windowFocused = window.hasFocus;\n        this.inView = false;\n        this.stickerPreview = StickerStore.stickerPreview;\n        this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n        this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n        this.dialogChatId = ApplicationStore.dialogChatId;\n\n        this.state = {\n            animationDate: null,\n            hasError: false\n        };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log('[Sticker] render error', error, errorInfo);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { chatId, messageId, sticker, blur, displaySize } = this.props;\n        const { animationData } = this.state;\n\n        if (animationData !== nextState.animationData) {\n            return true;\n        }\n\n        if (chatId !== nextProps.chatId) {\n            return true;\n        }\n\n        if (messageId !== nextProps.messageId) {\n            return true;\n        }\n\n        if (sticker !== nextProps.sticker) {\n            return true;\n        }\n\n        if (blur !== nextProps.blur) {\n            return true;\n        }\n\n        if (displaySize !== nextProps.displaySize) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.sticker !== this.props.sticker) {\n            this.loadContent();\n        }\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        ApplicationStore.on('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n        ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n        FileStore.on('clientUpdateStickerThumbnailBlob', this.onClientUpdateStickerThumbnailBlob);\n        FileStore.on('clientUpdateStickerBlob', this.onClientUpdateStickerBlob);\n        MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n        StickerStore.on('clientUpdateStickerPreview', this.onClientUpdateStickerPreview);\n        StickerStore.on('clientUpdateStickerSet', this.onClientUpdateStickerSet);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateDialogChatId', this.onClientUpdateDialogChatId);\n        ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.removeListener(\n            'clientUpdateProfileMediaViewerContent',\n            this.onClientUpdateProfileMediaViewerContent\n        );\n        InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n        FileStore.removeListener('clientUpdateStickerThumbnailBlob', this.onClientUpdateStickerThumbnailBlob);\n        FileStore.removeListener('clientUpdateStickerBlob', this.onClientUpdateStickerBlob);\n        MessageStore.removeListener('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n        StickerStore.removeListener('clientUpdateStickerPreview', this.onClientUpdateStickerPreview);\n        StickerStore.removeListener('clientUpdateStickerSet', this.onClientUpdateStickerSet);\n    }\n\n    onClientUpdateInstantViewContent = update => {\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateDialogChatId = update => {\n        this.dialogChatId = ApplicationStore.dialogChatId;\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateProfileMediaViewerContent = update => {\n        this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateStickerPreview = update => {\n        this.stickerPreview = update.sticker;\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateMessagesInView = update => {\n        const { chatId, messageId } = this.props;\n        const key = `${chatId}_${messageId}`;\n\n        this.inView = update.messages.has(key);\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateStickerSet = update => {\n        const { stickerSet } = update;\n\n        this.openedStickerSet = stickerSet;\n\n        this.startStopAnimation();\n    };\n\n    onClientUpdateFocusWindow = update => {\n        const { focused } = update;\n        const { chatId, messageId, sticker } = this.props;\n\n        const isAnimated = isValidAnimatedSticker(sticker, chatId, messageId);\n        if (!isAnimated) return;\n\n        this.windowFocused = focused;\n        this.startStopAnimation();\n    };\n\n    startStopAnimation() {\n        const { autoplay } = this.props;\n\n        const player = this.lottieRef.current;\n        if (!player) return;\n\n        if (\n            this.windowFocused &&\n            !this.stickerPreview &&\n            !this.openMediaViewer &&\n            !this.openProfileMediaViewer &&\n            !this.openIV &&\n            !this.dialogChatId\n        ) {\n            if (this.entered) {\n                console.log('[Sticker] play 1');\n                player.play();\n                this.pause = false;\n                return;\n            }\n\n            console.log('[Sticker] startStopAnimation', this.openedStickerSet);\n            if (!this.openedStickerSet) {\n                if (this.paused) {\n                    console.log('[Sticker] play 2');\n                    player.play();\n                    this.paused = false;\n                    return;\n                }\n\n                if (autoplay && this.inView) {\n                    console.log('[Sticker] play 3');\n                    player.play();\n                    this.paused = false;\n                    return;\n                }\n            }\n        }\n\n        console.log('[Sticker] pause');\n        this.paused = player.pause();\n    }\n\n    onClientUpdateStickerBlob = update => {\n        const { sticker, is_animated } = this.props.sticker;\n        const { fileId } = update;\n\n        if (!sticker) return;\n\n        if (sticker.id === fileId) {\n            if (is_animated) {\n                this.loadContent();\n            } else {\n                this.forceUpdate();\n            }\n        }\n    };\n\n    onClientUpdateStickerThumbnailBlob = update => {\n        const { thumbnail } = this.props.sticker;\n        if (!thumbnail) return;\n\n        const { fileId } = update;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    loadContent = async () => {\n        const { chatId, messageId, sticker: source, autoplay } = this.props;\n        const { is_animated, sticker } = source;\n        const isAnimated = isValidAnimatedSticker(source, chatId, messageId);\n\n        if (!is_animated) return;\n        if (!isAnimated) return;\n\n        const blob = getBlob(sticker);\n        if (!blob) return;\n\n        let animationData = null;\n        try {\n            // animationData = StickerStore.getAnimationData(blob);\n            // if (animationData) {\n            //     this.setState({ animationData });\n            //     return;\n            // }\n            const result = await inflateBlob(blob);\n            if (!result) return;\n\n            animationData = JSON.parse(result);\n            // StickerStore.setAnimationData(blob, animationData);\n        } catch (err) {\n            console.log('[Sticker] loadContent error', err);\n        }\n        if (!animationData) return;\n\n        if (autoplay) {\n            this.setState({ animationData });\n        } else {\n            this.animationData = animationData;\n        }\n    };\n\n    handleMouseEnter = event => {\n        const { animationData } = this;\n        console.log('[Sticker] handleMouseEnter', animationData);\n        if (animationData) {\n            this.setState({ animationData }, () => {\n                this.handleAnimationMouseEnter();\n            });\n        }\n    };\n\n    handleAnimationMouseEnter = () => {\n        console.log('[Sticker] handleAnimationMouseEnter 1');\n        if (this.props.autoplay) return;\n\n        this.entered = true;\n\n        const player = this.lottieRef.current;\n        if (!player) return;\n\n        console.log('[Sticker] handleAnimationMouseEnter 2');\n        this.loopCount = 0;\n        this.startStopAnimation();\n    };\n\n    handleAnimationLoopComplete = () => {\n        if (this.props.autoplay) return;\n\n        const player = this.lottieRef.current;\n        if (!player) return;\n\n        if (!this.entered) this.loopCount += 1;\n        if (this.loopCount > 2) {\n            const { animationData } = this.state;\n            if (animationData) {\n                this.setState({ animationData: null });\n            }\n        }\n    };\n\n    handleAnimationMouseOut = () => {\n        this.entered = false;\n    };\n\n    render() {\n        const {\n            chatId,\n            messageId,\n            autoplay,\n            className,\n            displaySize,\n            blur,\n            sticker: source,\n            style,\n            openMedia,\n            preview\n        } = this.props;\n        const { thumbnail, sticker, width, height } = source;\n        const { animationData, hasError } = this.state;\n\n        const isAnimated = isValidAnimatedSticker(source, chatId, messageId);\n\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const src = getSrc(sticker);\n        const isBlurred = isBlurredThumbnail(thumbnail);\n\n        if (hasError) {\n            const style = {\n                width: displaySize,\n                height: displaySize\n            };\n\n            if (process.env.NODE_ENV !== 'production') {\n                style.background = '#ff000066';\n            }\n\n            return (\n                <div className={classNames('sticker', className)} style={style} onClick={openMedia}>\n                    <img\n                        className={classNames('sticker-image', { 'media-blurred': isBlurred && blur })}\n                        draggable={false}\n                        src={thumbnailSrc}\n                        alt=''\n                    />\n                </div>\n            );\n        }\n\n        const fitSize = getFitSize({ width: width, height: height }, displaySize);\n        if (!fitSize) return null;\n\n        const stickerStyle = {\n            width: fitSize.width,\n            height: fitSize.height,\n            ...style\n        };\n\n        const content = isAnimated ? (\n            <>\n                {animationData ? (\n                    <Lottie\n                        ref={this.lottieRef}\n                        options={{\n                            autoplay: autoplay,\n                            loop: true,\n                            animationData,\n                            renderer: 'svg',\n                            rendererSettings: {\n                                preserveAspectRatio: 'xMinYMin slice', // Supports the same options as the svg element's preserveAspectRatio property\n                                clearCanvas: false,\n                                progressiveLoad: true, // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.\n                                hideOnTransparent: true, //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)\n                                className: 'lottie-svg'\n                            }\n                        }}\n                        eventListeners={[\n                            {\n                                eventName: 'loopComplete',\n                                callback: this.handleAnimationLoopComplete\n                            }\n                        ]}\n                        onMouseOut={this.handleAnimationMouseOut}\n                    />\n                ) : (\n                    <img\n                        className={classNames('sticker-image', { 'media-blurred': isBlurred && blur })}\n                        draggable={false}\n                        src={thumbnailSrc}\n                        alt=''\n                    />\n                )}\n            </>\n        ) : (\n            <>\n                {src && !preview ? (\n                    <img className='sticker-image' draggable={false} src={src} alt='' />\n                ) : (\n                    <img\n                        className={classNames('sticker-image', { 'media-blurred': isBlurred && blur })}\n                        draggable={false}\n                        src={thumbnailSrc}\n                        alt=''\n                    />\n                )}\n            </>\n        );\n\n        return (\n            <div\n                className={classNames('sticker', className)}\n                style={stickerStyle}\n                onClick={openMedia}\n                onMouseEnter={this.handleMouseEnter}>\n                {content}\n            </div>\n        );\n    }\n}\n\nSticker.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    sticker: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n\n    autoplay: PropTypes.bool,\n    blur: PropTypes.bool,\n    displaySize: PropTypes.number,\n    preview: PropTypes.bool,\n    source: PropTypes.string\n};\n\nSticker.defaultProps = {\n    chatId: 0,\n    messageId: 0,\n    openMedia: () => {},\n\n    autoplay: true,\n    blur: true,\n    displaySize: STICKER_DISPLAY_SIZE,\n    preview: false,\n    source: StickerSourceEnum.UNKNOWN\n};\n\nexport default Sticker;\n"]},"metadata":{},"sourceType":"module"}