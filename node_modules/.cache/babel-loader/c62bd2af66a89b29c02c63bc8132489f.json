{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/TM_Telegram.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport Cookies from 'universal-cookie';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport packageJson from '../package.json';\nimport withLanguage from './Language';\nimport withTheme from './Theme';\nimport AuthFormControl from './Components/Auth/AuthFormControl';\nimport InactivePage from './Components/InactivePage';\nimport StubPage from './Components/StubPage';\nimport registerServiceWorker from './registerServiceWorker';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ChatStore from './Stores/ChatStore';\nimport UserStore from './Stores/UserStore';\nimport ApplicationStore from './Stores/ApplicationStore';\nimport TdLibController from './Controllers/TdLibController';\nimport './TelegramApp.css';\nconst MainPage = React.lazy(() => import('./Components/MainPage'));\n\nconst styles = theme => ({\n  '@global': {\n    a: {\n      color: theme.palette.primary.main\n    },\n    code: {\n      color: theme.palette.primary.dark\n    }\n  }\n});\n\nclass TelegramApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateDatabaseExists = update => {\n      const exists = update.exists;\n\n      if (!exists) {\n        this.setState({\n          authorizationState: {\n            '@type': 'authorizationStateWaitTdlib'\n          },\n          databaseExists: exists\n        });\n      }\n    };\n\n    this.onUpdate = update => {\n      if (OPTIMIZATIONS_FIRST_START) {\n        if (!this.checkServiceWorker) {\n          this.checkServiceWorker = true;\n          const cookieEnabled = navigator.cookieEnabled;\n\n          if (cookieEnabled) {\n            const cookies = new Cookies();\n            const register = cookies.get('register');\n\n            if (!register) {\n              registerServiceWorker();\n            }\n          }\n        }\n      }\n    };\n\n    this.onUpdateFatalError = update => {\n      this.setState({\n        fatalError: true\n      });\n    };\n\n    this.onUpdateAuthorizationState = update => {\n      const authorizationState = update.authorization_state;\n      this.setState({\n        authorizationState\n      });\n      if (!window.hasFocus) return;\n      if (!authorizationState) return;\n      TdLibController.send({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n          '@type': 'optionValueBoolean',\n          value: true\n        }\n      });\n    };\n\n    this.onClientUpdateAppInactive = update => {\n      this.setState({\n        inactive: true\n      });\n    };\n\n    this.handleChangePhone = () => {\n      this.setState({\n        authorizationState: {\n          '@type': 'authorizationStateWaitPhoneNumber'\n        }\n      });\n    };\n\n    this.handleDragOver = event => {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    this.handleDrop = event => {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    this.handleRefresh = () => {\n      this.setState({\n        fatalError: false\n      });\n      window.location.reload();\n    };\n\n    this.handleDestroy = () => {\n      this.setState({\n        fatalError: false\n      });\n      TdLibController.send({\n        '@type': 'destroy'\n      });\n    };\n\n    this.handleKeyDown = event => {//console.log('KeyDown', event);\n    };\n\n    console.log(\"Start Telegram Web \".concat(packageJson.version));\n    this.state = {\n      authorizationState: null,\n      databaseExists: true,\n      inactive: false,\n      fatalError: false\n    };\n  }\n\n  componentWillMount() {\n    const location = this.props.location;\n    TdLibController.init(location);\n  }\n\n  componentDidMount() {\n    TdLibController.addListener('update', this.onUpdate);\n    ApplicationStore.on('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n    ApplicationStore.on('clientUpdateDatabaseExists', this.onClientUpdateDatabaseExists);\n    ApplicationStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n    ApplicationStore.on('updateFatalError', this.onUpdateFatalError);\n  }\n\n  componentWillUnmount() {\n    TdLibController.removeListener('update', this.onUpdate);\n    ApplicationStore.removeListener('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n    ApplicationStore.removeListener('clientUpdateDatabaseExists', this.onClientUpdateDatabaseExists);\n    ApplicationStore.removeListener('updateAuthorizationState', this.onUpdateAuthorizationState);\n    ApplicationStore.removeListener('updateFatalError', this.onUpdateFatalError);\n  }\n\n  render() {\n    const t = this.props.t;\n    const _this$state = this.state,\n          inactive = _this$state.inactive,\n          authorizationState = _this$state.authorizationState,\n          databaseExists = _this$state.databaseExists,\n          fatalError = _this$state.fatalError;\n    const loading = t('Loading').replace('...', ''); //let page = <StubPage title={loading} />;\n\n    let page = React.createElement(React.Suspense, {\n      fallback: React.createElement(StubPage, {\n        title: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(MainPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }));\n\n    if (inactive) {\n      page = React.createElement(InactivePage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      });\n    } else if (authorizationState) {\n      switch (authorizationState['@type']) {\n        case 'authorizationStateClosed':\n        case 'authorizationStateClosing':\n        case 'authorizationStateLoggingOut':\n        case 'authorizationStateReady':\n          {\n            page = React.createElement(React.Suspense, {\n              fallback: React.createElement(StubPage, {\n                title: \"\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 188\n                },\n                __self: this\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188\n              },\n              __self: this\n            }, React.createElement(MainPage, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189\n              },\n              __self: this\n            }));\n            break;\n          }\n\n        case 'authorizationStateWaitCode':\n        case 'authorizationStateWaitPassword':\n        case 'authorizationStateWaitPhoneNumber':\n        case 'authorizationStateWaitTdlib':\n          page = React.createElement(AuthFormControl, {\n            authorizationState: authorizationState,\n            onChangePhone: this.handleChangePhone,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199\n            },\n            __self: this\n          });\n          break;\n\n        case 'authorizationStateWaitEncryptionKey':\n        case 'authorizationStateWaitTdlibParameters':\n          {\n            if (!databaseExists) {\n              page = React.createElement(AuthFormControl, {\n                authorizationState: authorizationState,\n                onChangePhone: this.handleChangePhone,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 209\n                },\n                __self: this\n              });\n            }\n\n            break;\n          }\n      }\n    }\n\n    return React.createElement(\"div\", {\n      id: \"app\",\n      onDragOver: this.handleDragOver,\n      onDrop: this.handleDrop,\n      onKeyDown: this.handleKeyDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, page, React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: fatalError,\n      onClose: this.handleRefresh,\n      \"aria-labelledby\": \"fatal-error-dialog-title\",\n      \"aria-describedby\": \"fatal-error-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"fatal-error-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Telegram\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      id: \"fatal-error-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Oops! Something went wrong. We need to refresh this page.\")), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleDestroy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Log out\"), React.createElement(Button, {\n      onClick: this.handleRefresh,\n      color: \"primary\",\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Refresh\"))));\n  }\n\n}\n\nconst keyMap = new Map();\nwindow.keyMap = keyMap;\n\nasync function openPinnedChat(index) {\n  const chats = await TdLibController.send({\n    '@type': 'getChats',\n    offset_order: '9223372036854775807',\n    offset_chat_id: 0,\n    limit: 10\n  });\n\n  if (chats) {\n    let pinnedIndex = -1;\n\n    for (let i = 0; i < chats.chat_ids.length; i++) {\n      const chat = ChatStore.get(chats.chat_ids[i]);\n\n      if (chat && chat.is_pinned) {\n        pinnedIndex++;\n      }\n\n      if (pinnedIndex === index) {\n        TdLibController.setChatId(chat.id);\n        return;\n      }\n    }\n  }\n}\n\ndocument.addEventListener('keyup', event => {\n  keyMap.delete(event.key); //console.log('keyup key=' + event.key, keyMap);\n});\ndocument.addEventListener('keydown', async event => {\n  keyMap.set(event.key, event.key); //console.log('keydown key=' + event.key, event.altKey, event.ctrlKey, event, keyMap);\n\n  const authorizationState = ApplicationStore.authorizationState;\n  if (!authorizationState) return;\n  if (authorizationState['@type'] !== 'authorizationStateReady') return;\n  if (keyMap.size > 3) return;\n\n  if (event.altKey && event.ctrlKey) {\n    switch (event.key) {\n      case '0':\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          const chat = await TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: UserStore.getMyId(),\n            force: true\n          });\n\n          if (chat) {\n            TdLibController.setChatId(chat.id);\n          }\n\n          break;\n        }\n\n      case '1':\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          openPinnedChat(0);\n          break;\n        }\n\n      case '2':\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          openPinnedChat(1);\n          break;\n        }\n\n      case '3':\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          openPinnedChat(2);\n          break;\n        }\n\n      case '4':\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          openPinnedChat(3);\n          break;\n        }\n\n      case '5':\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          openPinnedChat(4);\n          break;\n        }\n    }\n  }\n});\nwindow.hasFocus = true; // set offline on page lost focus\n// console.log('[ns] window.onblur attach');\n\nwindow.onblur = function () {\n  keyMap.clear();\n  window.hasFocus = false;\n  TdLibController.clientUpdate({\n    '@type': 'clientUpdateFocusWindow',\n    focused: false\n  });\n}; // set online on page get focus\n// console.log('[ns] window.onfocus attach');\n\n\nwindow.onfocus = function () {\n  keyMap.clear();\n  window.hasFocus = true;\n  TdLibController.clientUpdate({\n    '@type': 'clientUpdateFocusWindow',\n    focused: true\n  });\n}; // disable back navigation\n\n\nwindow.history.pushState(null, null, window.location.href);\n\nwindow.onpopstate = function () {\n  window.history.go(1);\n};\n\nconst enhance = compose(withLanguage, withTranslation(), withTheme, withStyles(styles));\nexport default enhance(TelegramApp);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/TM_Telegram.js"],"names":["React","Component","Cookies","compose","withStyles","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","packageJson","withLanguage","withTheme","AuthFormControl","InactivePage","StubPage","registerServiceWorker","OPTIMIZATIONS_FIRST_START","ChatStore","UserStore","ApplicationStore","TdLibController","MainPage","lazy","styles","theme","a","color","palette","primary","main","code","dark","TelegramApp","constructor","props","onClientUpdateDatabaseExists","update","exists","setState","authorizationState","databaseExists","onUpdate","checkServiceWorker","cookieEnabled","navigator","cookies","register","get","onUpdateFatalError","fatalError","onUpdateAuthorizationState","authorization_state","window","hasFocus","send","name","value","onClientUpdateAppInactive","inactive","handleChangePhone","handleDragOver","event","preventDefault","stopPropagation","handleDrop","handleRefresh","location","reload","handleDestroy","handleKeyDown","console","log","version","state","componentWillMount","init","componentDidMount","addListener","on","componentWillUnmount","removeListener","render","t","loading","replace","page","keyMap","Map","openPinnedChat","index","chats","offset_order","offset_chat_id","limit","pinnedIndex","i","chat_ids","length","chat","is_pinned","setChatId","id","document","addEventListener","delete","key","set","size","altKey","ctrlKey","user_id","getMyId","force","onblur","clear","clientUpdate","focused","onfocus","history","pushState","href","onpopstate","go","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport Cookies from 'universal-cookie';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport packageJson from '../package.json';\nimport withLanguage from './Language';\nimport withTheme from './Theme';\nimport AuthFormControl from './Components/Auth/AuthFormControl';\nimport InactivePage from './Components/InactivePage';\nimport StubPage from './Components/StubPage';\nimport registerServiceWorker from './registerServiceWorker';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ChatStore from './Stores/ChatStore';\nimport UserStore from './Stores/UserStore';\nimport ApplicationStore from './Stores/ApplicationStore';\nimport TdLibController from './Controllers/TdLibController';\nimport './TelegramApp.css';\n\nconst MainPage = React.lazy(() => import('./Components/MainPage'));\n\nconst styles = theme => ({\n    '@global': {\n        a: {\n            color: theme.palette.primary.main\n        },\n        code: {\n            color: theme.palette.primary.dark\n        }\n    }\n});\n\nclass TelegramApp extends Component {\n    constructor(props) {\n        super(props);\n\n        console.log(`Start Telegram Web ${packageJson.version}`);\n\n        this.state = {\n            authorizationState: null,\n            databaseExists: true,\n            inactive: false,\n            fatalError: false\n        };\n    }\n\n    componentWillMount() {\n        const { location } = this.props;\n\n        TdLibController.init(location);\n    }\n\n    componentDidMount() {\n        TdLibController.addListener('update', this.onUpdate);\n\n        ApplicationStore.on('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n        ApplicationStore.on('clientUpdateDatabaseExists', this.onClientUpdateDatabaseExists);\n        ApplicationStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n        ApplicationStore.on('updateFatalError', this.onUpdateFatalError);\n    }\n\n    componentWillUnmount() {\n        TdLibController.removeListener('update', this.onUpdate);\n\n        ApplicationStore.removeListener('clientUpdateAppInactive', this.onClientUpdateAppInactive);\n        ApplicationStore.removeListener('clientUpdateDatabaseExists', this.onClientUpdateDatabaseExists);\n        ApplicationStore.removeListener('updateAuthorizationState', this.onUpdateAuthorizationState);\n        ApplicationStore.removeListener('updateFatalError', this.onUpdateFatalError);\n    }\n\n    onClientUpdateDatabaseExists = update => {\n        const { exists } = update;\n\n        if (!exists) {\n            this.setState({\n                authorizationState: {\n                    '@type': 'authorizationStateWaitTdlib'\n                },\n                databaseExists: exists\n            });\n        }\n    };\n\n    onUpdate = update => {\n        if (OPTIMIZATIONS_FIRST_START) {\n            if (!this.checkServiceWorker) {\n                this.checkServiceWorker = true;\n\n                const cookieEnabled = navigator.cookieEnabled;\n                if (cookieEnabled) {\n                    const cookies = new Cookies();\n                    const register = cookies.get('register');\n                    if (!register) {\n                        registerServiceWorker();\n                    }\n                }\n            }\n        }\n    };\n\n    onUpdateFatalError = update => {\n        this.setState({ fatalError: true });\n    };\n\n    onUpdateAuthorizationState = update => {\n        const { authorization_state: authorizationState } = update;\n\n        this.setState({ authorizationState });\n\n        if (!window.hasFocus) return;\n        if (!authorizationState) return;\n\n        TdLibController.send({\n            '@type': 'setOption',\n            name: 'online',\n            value: { '@type': 'optionValueBoolean', value: true }\n        });\n    };\n\n    onClientUpdateAppInactive = update => {\n        this.setState({ inactive: true });\n    };\n\n    handleChangePhone = () => {\n        this.setState({\n            authorizationState: { '@type': 'authorizationStateWaitPhoneNumber' }\n        });\n    };\n\n    handleDragOver = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleDrop = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleRefresh = () => {\n        this.setState({ fatalError: false });\n        window.location.reload();\n    };\n\n    handleDestroy = () => {\n        this.setState({ fatalError: false });\n        TdLibController.send({ '@type': 'destroy' });\n    };\n\n    handleKeyDown = event => {\n        //console.log('KeyDown', event);\n    };\n\n    render() {\n        const { t } = this.props;\n        const { inactive, authorizationState, databaseExists, fatalError } = this.state;\n\n        const loading = t('Loading').replace('...', '');\n        //let page = <StubPage title={loading} />;\n        let page = (\n            <React.Suspense fallback={<StubPage title='' />}>\n                <MainPage />\n            </React.Suspense>\n        );\n\n        if (inactive) {\n            page = <InactivePage />;\n        } else if (authorizationState) {\n            switch (authorizationState['@type']) {\n                case 'authorizationStateClosed':\n                case 'authorizationStateClosing':\n                case 'authorizationStateLoggingOut':\n                case 'authorizationStateReady': {\n                    page = (\n                        <React.Suspense fallback={<StubPage title='' />}>\n                            <MainPage />\n                        </React.Suspense>\n                    );\n                    break;\n                }\n                case 'authorizationStateWaitCode':\n                case 'authorizationStateWaitPassword':\n                case 'authorizationStateWaitPhoneNumber':\n                case 'authorizationStateWaitTdlib':\n                    page = (\n                        <AuthFormControl\n                            authorizationState={authorizationState}\n                            onChangePhone={this.handleChangePhone}\n                        />\n                    );\n                    break;\n                case 'authorizationStateWaitEncryptionKey':\n                case 'authorizationStateWaitTdlibParameters': {\n                    if (!databaseExists) {\n                        page = (\n                            <AuthFormControl\n                                authorizationState={authorizationState}\n                                onChangePhone={this.handleChangePhone}\n                            />\n                        );\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        return (\n            <div id='app' onDragOver={this.handleDragOver} onDrop={this.handleDrop} onKeyDown={this.handleKeyDown}>\n                {page}\n                <Dialog\n                    transitionDuration={0}\n                    open={fatalError}\n                    onClose={this.handleRefresh}\n                    aria-labelledby='fatal-error-dialog-title'\n                    aria-describedby='fatal-error-dialog-description'>\n                    <DialogTitle id='fatal-error-dialog-title'>Telegram</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='fatal-error-dialog-description'>\n                            Oops! Something went wrong. We need to refresh this page.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleDestroy} color='primary'>\n                            Log out\n                        </Button>\n                        <Button onClick={this.handleRefresh} color='primary' autoFocus>\n                            Refresh\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nconst keyMap = new Map();\nwindow.keyMap = keyMap;\n\nasync function openPinnedChat(index) {\n    const chats = await TdLibController.send({\n        '@type': 'getChats',\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 10\n    });\n\n    if (chats) {\n        let pinnedIndex = -1;\n        for (let i = 0; i < chats.chat_ids.length; i++) {\n            const chat = ChatStore.get(chats.chat_ids[i]);\n            if (chat && chat.is_pinned) {\n                pinnedIndex++;\n            }\n\n            if (pinnedIndex === index) {\n                TdLibController.setChatId(chat.id);\n                return;\n            }\n        }\n    }\n}\n\ndocument.addEventListener('keyup', event => {\n    keyMap.delete(event.key);\n    //console.log('keyup key=' + event.key, keyMap);\n});\n\ndocument.addEventListener('keydown', async event => {\n    keyMap.set(event.key, event.key);\n    //console.log('keydown key=' + event.key, event.altKey, event.ctrlKey, event, keyMap);\n\n    const { authorizationState } = ApplicationStore;\n    if (!authorizationState) return;\n    if (authorizationState['@type'] !== 'authorizationStateReady') return;\n    if (keyMap.size > 3) return;\n\n    if (event.altKey && event.ctrlKey) {\n        switch (event.key) {\n            case '0': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const chat = await TdLibController.send({\n                    '@type': 'createPrivateChat',\n                    user_id: UserStore.getMyId(),\n                    force: true\n                });\n\n                if (chat) {\n                    TdLibController.setChatId(chat.id);\n                }\n                break;\n            }\n            case '1': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(0);\n                break;\n            }\n            case '2': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(1);\n                break;\n            }\n            case '3': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(2);\n                break;\n            }\n            case '4': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(3);\n                break;\n            }\n            case '5': {\n                event.preventDefault();\n                event.stopPropagation();\n\n                openPinnedChat(4);\n                break;\n            }\n        }\n    }\n});\n\nwindow.hasFocus = true;\n\n// set offline on page lost focus\n// console.log('[ns] window.onblur attach');\nwindow.onblur = function() {\n    keyMap.clear();\n\n    window.hasFocus = false;\n\n    TdLibController.clientUpdate({\n        '@type': 'clientUpdateFocusWindow',\n        focused: false\n    });\n};\n\n// set online on page get focus\n// console.log('[ns] window.onfocus attach');\nwindow.onfocus = function() {\n    keyMap.clear();\n\n    window.hasFocus = true;\n\n    TdLibController.clientUpdate({\n        '@type': 'clientUpdateFocusWindow',\n        focused: true\n    });\n};\n\n// disable back navigation\nwindow.history.pushState(null, null, window.location.href);\nwindow.onpopstate = function() {\n    window.history.go(1);\n};\n\nconst enhance = compose(\n    withLanguage,\n    withTranslation(),\n    withTheme,\n    withStyles(styles)\n);\n\nexport default enhance(TelegramApp);\n"]},"metadata":{},"sourceType":"module"}