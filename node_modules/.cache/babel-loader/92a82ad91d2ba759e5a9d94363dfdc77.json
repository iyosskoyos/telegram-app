{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass InstantViewStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.items = [];\n    };\n\n    this.onUpdate = update => {};\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateBlocksInView':\n          {\n            this.emit('clientUpdateBlocksInView', update);\n            break;\n          }\n\n        case 'clientUpdateInstantViewContent':\n          {\n            const content = update.content;\n\n            if (content) {\n              this.items.push(content.instantView);\n            } else {\n              this.items = [];\n            }\n\n            this.emit('clientUpdateInstantViewContent', update);\n            break;\n          }\n\n        case 'clientUpdateInstantViewUrl':\n          {\n            this.emit('clientUpdateInstantViewUrl', update);\n            break;\n          }\n\n        case 'clientUpdateInstantViewViewerContent':\n          {\n            const content = update.content;\n            this.viewerContent = content;\n            this.emit('clientUpdateInstantViewViewerContent', update);\n            break;\n          }\n\n        case 'clientUpdatePrevInstantView':\n          {\n            if (this.items.length <= 1) return;\n            this.items.pop();\n            const prevInstantView = this.items.pop();\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateInstantViewContent',\n              content: {\n                instantView: prevInstantView\n              }\n            });\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  hasPrev() {\n    return this.items.length > 1;\n  }\n\n  getCurrent() {\n    return this.items.length > 0 ? this.items[this.items.length - 1] : null;\n  }\n\n}\n\nconst store = new InstantViewStore();\nwindow.instantView = store;\nexport default store;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Stores/InstantViewStore.js"],"names":["EventEmitter","TdLibController","InstantViewStore","constructor","reset","items","onUpdate","update","onClientUpdate","emit","content","push","instantView","viewerContent","length","pop","prevInstantView","clientUpdate","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","hasPrev","getCurrent","store","window"],"mappings":"AAAA;;;;;;AAOA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAEA,MAAMC,gBAAN,SAA+BF,YAA/B,CAA4C;AACxCG,EAAAA,WAAW,GAAG;AACV;;AADU,SASdC,KATc,GASN,MAAM;AACV,WAAKC,KAAL,GAAa,EAAb;AACH,KAXa;;AAAA,SAadC,QAbc,GAaHC,MAAM,IAAI,CAAE,CAbT;;AAAA,SAedC,cAfc,GAeGD,MAAM,IAAI;AACvB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAC7B,iBAAKE,IAAL,CAAU,0BAAV,EAAsCF,MAAtC;AACA;AACH;;AACD,aAAK,gCAAL;AAAuC;AAAA,kBAC3BG,OAD2B,GACfH,MADe,CAC3BG,OAD2B;;AAGnC,gBAAIA,OAAJ,EAAa;AACT,mBAAKL,KAAL,CAAWM,IAAX,CAAgBD,OAAO,CAACE,WAAxB;AACH,aAFD,MAEO;AACH,mBAAKP,KAAL,GAAa,EAAb;AACH;;AAED,iBAAKI,IAAL,CAAU,gCAAV,EAA4CF,MAA5C;AAEA;AACH;;AACD,aAAK,4BAAL;AAAmC;AAC/B,iBAAKE,IAAL,CAAU,4BAAV,EAAwCF,MAAxC;AACA;AACH;;AACD,aAAK,sCAAL;AAA6C;AAAA,kBACjCG,OADiC,GACrBH,MADqB,CACjCG,OADiC;AAGzC,iBAAKG,aAAL,GAAqBH,OAArB;AAEA,iBAAKD,IAAL,CAAU,sCAAV,EAAkDF,MAAlD;AACA;AACH;;AACD,aAAK,6BAAL;AAAoC;AAChC,gBAAI,KAAKF,KAAL,CAAWS,MAAX,IAAqB,CAAzB,EAA4B;AAE5B,iBAAKT,KAAL,CAAWU,GAAX;AACA,kBAAMC,eAAe,GAAG,KAAKX,KAAL,CAAWU,GAAX,EAAxB;AAEAd,YAAAA,eAAe,CAACgB,YAAhB,CAA6B;AACzB,uBAAS,gCADgB;AAEzBP,cAAAA,OAAO,EAAE;AACLE,gBAAAA,WAAW,EAAEI;AADR;AAFgB,aAA7B;AAOA;AACH;;AACD;AACI;AA9CR;AAgDH,KAhEa;;AAAA,SAkEdE,gBAlEc,GAkEK,MAAM;AACrBjB,MAAAA,eAAe,CAACkB,WAAhB,CAA4B,QAA5B,EAAsC,KAAKb,QAA3C;AACAL,MAAAA,eAAe,CAACkB,WAAhB,CAA4B,cAA5B,EAA4C,KAAKX,cAAjD;AACH,KArEa;;AAAA,SAuEdY,mBAvEc,GAuEQ,MAAM;AACxBnB,MAAAA,eAAe,CAACoB,cAAhB,CAA+B,QAA/B,EAAyC,KAAKf,QAA9C;AACAL,MAAAA,eAAe,CAACoB,cAAhB,CAA+B,cAA/B,EAA+C,KAAKb,cAApD;AACH,KA1Ea;;AAGV,SAAKJ,KAAL;AAEA,SAAKc,gBAAL;AACA,SAAKI,eAAL,CAAqBC,QAArB;AACH;;AAqEDC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKnB,KAAL,CAAWS,MAAX,GAAoB,CAA3B;AACH;;AAEDW,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKpB,KAAL,CAAWS,MAAX,GAAoB,CAApB,GAAwB,KAAKT,KAAL,CAAW,KAAKA,KAAL,CAAWS,MAAX,GAAoB,CAA/B,CAAxB,GAA4D,IAAnE;AACH;;AAnFuC;;AAsF5C,MAAMY,KAAK,GAAG,IAAIxB,gBAAJ,EAAd;AACAyB,MAAM,CAACf,WAAP,GAAqBc,KAArB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass InstantViewStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = [];\n    };\n\n    onUpdate = update => {};\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateBlocksInView': {\n                this.emit('clientUpdateBlocksInView', update);\n                break;\n            }\n            case 'clientUpdateInstantViewContent': {\n                const { content } = update;\n\n                if (content) {\n                    this.items.push(content.instantView);\n                } else {\n                    this.items = [];\n                }\n\n                this.emit('clientUpdateInstantViewContent', update);\n\n                break;\n            }\n            case 'clientUpdateInstantViewUrl': {\n                this.emit('clientUpdateInstantViewUrl', update);\n                break;\n            }\n            case 'clientUpdateInstantViewViewerContent': {\n                const { content } = update;\n\n                this.viewerContent = content;\n\n                this.emit('clientUpdateInstantViewViewerContent', update);\n                break;\n            }\n            case 'clientUpdatePrevInstantView': {\n                if (this.items.length <= 1) return;\n\n                this.items.pop();\n                const prevInstantView = this.items.pop();\n\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateInstantViewContent',\n                    content: {\n                        instantView: prevInstantView\n                    }\n                });\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    hasPrev() {\n        return this.items.length > 1;\n    }\n\n    getCurrent() {\n        return this.items.length > 0 ? this.items[this.items.length - 1] : null;\n    }\n}\n\nconst store = new InstantViewStore();\nwindow.instantView = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}