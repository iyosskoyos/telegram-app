{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass OptionStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.items = new Map();\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateOption':\n          this.items.set(update.name, update.value);\n          this.emit('updateOption', update);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {};\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  get(name) {\n    return this.items.get(name);\n  }\n\n}\n\nconst store = new OptionStore();\nwindow.option = store;\nexport default store;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Stores/OptionStore.js"],"names":["EventEmitter","TdLibController","OptionStore","constructor","reset","items","Map","onUpdate","update","authorization_state","set","name","value","emit","onClientUpdate","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","get","store","window","option"],"mappings":"AAAA;;;;;;AAOA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAEA,MAAMC,WAAN,SAA0BF,YAA1B,CAAuC;AACnCG,EAAAA,WAAW,GAAG;AACV;;AADU,SASdC,KATc,GASN,MAAM;AACV,WAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACH,KAXa;;AAAA,SAadC,QAbc,GAaHC,MAAM,IAAI;AACjB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAAA,kBACrBC,mBADqB,GACGD,MADH,CACrBC,mBADqB;AAE7B,gBAAI,CAACA,mBAAL,EAA0B;;AAE1B,oBAAQA,mBAAmB,CAAC,OAAD,CAA3B;AACI,mBAAK,0BAAL;AAAiC;AAC7B,uBAAKL,KAAL;AACA;AACH;AAJL;;AAOA;AACH;;AACD,aAAK,cAAL;AACI,eAAKC,KAAL,CAAWK,GAAX,CAAeF,MAAM,CAACG,IAAtB,EAA4BH,MAAM,CAACI,KAAnC;AAEA,eAAKC,IAAL,CAAU,cAAV,EAA0BL,MAA1B;AACA;;AACJ;AACI;AApBR;AAsBH,KApCa;;AAAA,SAsCdM,cAtCc,GAsCGN,MAAM,IAAI,CAAE,CAtCf;;AAAA,SAwCdO,gBAxCc,GAwCK,MAAM;AACrBd,MAAAA,eAAe,CAACe,WAAhB,CAA4B,QAA5B,EAAsC,KAAKT,QAA3C;AACAN,MAAAA,eAAe,CAACe,WAAhB,CAA4B,cAA5B,EAA4C,KAAKF,cAAjD;AACH,KA3Ca;;AAAA,SA6CdG,mBA7Cc,GA6CQ,MAAM;AACxBhB,MAAAA,eAAe,CAACiB,cAAhB,CAA+B,QAA/B,EAAyC,KAAKX,QAA9C;AACAN,MAAAA,eAAe,CAACiB,cAAhB,CAA+B,cAA/B,EAA+C,KAAKJ,cAApD;AACH,KAhDa;;AAGV,SAAKV,KAAL;AAEA,SAAKW,gBAAL;AACA,SAAKI,eAAL,CAAqBC,QAArB;AACH;;AA2CDC,EAAAA,GAAG,CAACV,IAAD,EAAO;AACN,WAAO,KAAKN,KAAL,CAAWgB,GAAX,CAAeV,IAAf,CAAP;AACH;;AArDkC;;AAwDvC,MAAMW,KAAK,GAAG,IAAIpB,WAAJ,EAAd;AACAqB,MAAM,CAACC,MAAP,GAAgBF,KAAhB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass OptionStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateOption':\n                this.items.set(update.name, update.value);\n\n                this.emit('updateOption', update);\n                break;\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {};\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    get(name) {\n        return this.items.get(name);\n    }\n}\n\nconst store = new OptionStore();\nwindow.option = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}