{"ast":null,"code":"import _slicedToArray from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Viewer/InstantViewMediaViewerContent.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getViewerFile, getViewerThumbnail } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport Caption from '../InstantView/Blocks/Caption';\nimport { isEmptyText } from '../../Utils/InstantView';\nimport SafeLink from '../Additional/SafeLink';\n\nclass InstantViewMediaViewerContent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateMediaBlob = update => {\n      const fileId = update.fileId;\n      const file = this.state.file;\n\n      if (file && file.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.onClientUpdateMediaThumbnailBlob = update => {\n      const fileId = update.fileId;\n      const file = this.state.thumbnail;\n\n      if (file && file.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.videoRef = React.createRef();\n    this.state = {};\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const media = props.media,\n          size = props.size,\n          caption = props.caption,\n          url = props.url;\n\n    if (media !== state.prevMedia) {\n      let _getViewerFile = getViewerFile(media, size),\n          _getViewerFile2 = _slicedToArray(_getViewerFile, 3),\n          width = _getViewerFile2[0],\n          height = _getViewerFile2[1],\n          file = _getViewerFile2[2];\n\n      file = FileStore.get(file.id) || file;\n\n      let _getViewerThumbnail = getViewerThumbnail(media),\n          _getViewerThumbnail2 = _slicedToArray(_getViewerThumbnail, 3),\n          thumbnailWidth = _getViewerThumbnail2[0],\n          thumbnailHeight = _getViewerThumbnail2[1],\n          thumbnail = _getViewerThumbnail2[2];\n\n      thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n      return {\n        prevMedia: media,\n        speed: 1,\n        isPlaying: false,\n        width,\n        height,\n        file,\n        thumbnailWidth,\n        thumbnailHeight,\n        thumbnail\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n  }\n\n  render() {\n    const _this$props = this.props,\n          media = _this$props.media,\n          caption = _this$props.caption,\n          url = _this$props.url;\n    if (!media) return null;\n    const _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height,\n          file = _this$state.file,\n          thumbnailWidth = _this$state.thumbnailWidth,\n          thumbnailHeight = _this$state.thumbnailHeight,\n          thumbnail = _this$state.thumbnail,\n          isPlaying = _this$state.isPlaying;\n    if (!file) return null;\n    const blob = FileStore.getBlob(file.id) || file.blob;\n    const src = FileStore.getBlobUrl(blob) || '';\n    const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n    const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n    const isBlurred = isBlurredThumbnail({\n      width: thumbnailWidth,\n      height: thumbnailHeight\n    });\n    let videoWidth = width;\n    let videoHeight = height;\n\n    if (Math.max(videoWidth, videoHeight) > 640) {\n      const scale = 640 / Math.max(videoWidth, videoHeight);\n      videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n      videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n    }\n\n    let content = null;\n\n    switch (media['@type']) {\n      case 'video':\n        {\n          content = React.createElement(\"div\", {\n            className: \"media-viewer-content-wrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }, React.createElement(\"video\", {\n            ref: this.videoRef,\n            className: \"media-viewer-content-video-player\",\n            src: src,\n            onClick: this.handleContentClick,\n            controls: true,\n            autoPlay: true,\n            width: videoWidth,\n            height: videoHeight,\n            onPlay: () => {\n              this.setState({\n                isPlaying: true\n              });\n              TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaViewerPlay'\n              });\n            },\n            onCanPlay: () => {\n              const player = this.videoRef.current;\n\n              if (player) {\n                player.volume = PlayerStore.volume;\n              }\n            },\n            onPause: () => {\n              TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaViewerPause'\n              });\n            },\n            onEnded: () => {\n              TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaViewerEnded'\n              });\n            },\n            onVolumeChange: () => {\n              const player = this.videoRef.current;\n\n              if (player) {\n                TdLibController.clientUpdate({\n                  '@type': 'clientUpdateMediaVolume',\n                  volume: player.volume\n                });\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n            className: classNames('media-viewer-content-video-thumbnail', {\n              'media-blurred': isBlurred\n            }),\n            src: thumbnailSrc,\n            alt: \"\",\n            width: videoWidth,\n            height: videoHeight,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }) : React.createElement(\"div\", {\n            className: \"media-viewer-content-video-thumbnail\",\n            style: {\n              width: videoWidth,\n              height: videoHeight\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          })));\n          break;\n        }\n\n      case 'animation':\n        {\n          content = React.createElement(\"div\", {\n            className: \"media-viewer-content-wrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          }, React.createElement(\"video\", {\n            className: \"media-viewer-content-video-player\",\n            src: src,\n            onClick: this.handleContentClick,\n            loop: true,\n            autoPlay: true,\n            width: videoWidth,\n            height: videoHeight,\n            onPlay: () => {\n              this.setState({\n                isPlaying: true\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187\n            },\n            __self: this\n          }), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n            className: classNames('media-viewer-content-video-thumbnail', {\n              'media-blurred': isBlurred\n            }),\n            src: thumbnailSrc,\n            alt: \"\",\n            width: videoWidth,\n            height: videoHeight,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201\n            },\n            __self: this\n          }) : React.createElement(\"div\", {\n            className: \"media-viewer-content-video-thumbnail\",\n            style: {\n              width: videoWidth,\n              height: videoHeight\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            },\n            __self: this\n          })));\n          break;\n        }\n\n      default:\n        {\n          content = React.createElement(\"img\", {\n            className: \"media-viewer-content-image\",\n            src: src,\n            alt: \"\",\n            onClick: this.handleContentClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          });\n        }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"media-viewer-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, content, React.createElement(FileProgress, {\n      file: file,\n      zIndex: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), caption && (!isEmptyText(caption.text) || !isEmptyText(caption.credit) || url) && React.createElement(MediaCaption, {\n      text: React.createElement(React.Fragment, null, React.createElement(Caption, {\n        text: caption.text,\n        credit: caption.credit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }), React.createElement(SafeLink, {\n        url: url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }));\n  }\n\n}\n\nInstantViewMediaViewerContent.propTypes = {\n  media: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired,\n  caption: PropTypes.object,\n  url: PropTypes.string\n};\nexport default InstantViewMediaViewerContent;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Viewer/InstantViewMediaViewerContent.js"],"names":["React","PropTypes","classNames","FileProgress","MediaCaption","getViewerFile","getViewerThumbnail","isBlurredThumbnail","FileStore","PlayerStore","TdLibController","Caption","isEmptyText","SafeLink","InstantViewMediaViewerContent","Component","constructor","props","onClientUpdateMediaBlob","update","fileId","file","state","id","forceUpdate","onClientUpdateMediaThumbnailBlob","thumbnail","videoRef","createRef","getDerivedStateFromProps","media","size","caption","url","prevMedia","width","height","get","thumbnailWidth","thumbnailHeight","speed","isPlaying","componentDidMount","on","componentWillUnmount","removeListener","render","blob","getBlob","src","getBlobUrl","thumbnailBlob","thumbnailSrc","isBlurred","videoWidth","videoHeight","Math","max","scale","floor","content","handleContentClick","setState","clientUpdate","player","current","volume","text","credit","propTypes","object","isRequired","number","string"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getViewerFile, getViewerThumbnail } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport Caption from '../InstantView/Blocks/Caption';\nimport { isEmptyText } from '../../Utils/InstantView';\nimport SafeLink from '../Additional/SafeLink';\n\nclass InstantViewMediaViewerContent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { media, size, caption, url } = props;\n\n        if (media !== state.prevMedia) {\n            let [width, height, file] = getViewerFile(media, size);\n            file = FileStore.get(file.id) || file;\n\n            let [thumbnailWidth, thumbnailHeight, thumbnail] = getViewerThumbnail(media);\n            thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n\n            return {\n                prevMedia: media,\n\n                speed: 1,\n                isPlaying: false,\n                width,\n                height,\n                file,\n                thumbnailWidth,\n                thumbnailHeight,\n                thumbnail\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n\n    onClientUpdateMediaBlob = update => {\n        const { fileId } = update;\n        const { file } = this.state;\n\n        if (file && file.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    onClientUpdateMediaThumbnailBlob = update => {\n        const { fileId } = update;\n        const { thumbnail: file } = this.state;\n\n        if (file && file.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { media, caption, url } = this.props;\n        if (!media) return null;\n\n        const { width, height, file, thumbnailWidth, thumbnailHeight, thumbnail, isPlaying } = this.state;\n        if (!file) return null;\n\n        const blob = FileStore.getBlob(file.id) || file.blob;\n        const src = FileStore.getBlobUrl(blob) || '';\n\n        const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n        const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n        const isBlurred = isBlurredThumbnail({ width: thumbnailWidth, height: thumbnailHeight });\n\n        let videoWidth = width;\n        let videoHeight = height;\n        if (Math.max(videoWidth, videoHeight) > 640) {\n            const scale = 640 / Math.max(videoWidth, videoHeight);\n            videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n            videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n        }\n\n        let content = null;\n        switch (media['@type']) {\n            case 'video': {\n                content = (\n                    <div className='media-viewer-content-wrapper'>\n                        <video\n                            ref={this.videoRef}\n                            className='media-viewer-content-video-player'\n                            src={src}\n                            onClick={this.handleContentClick}\n                            controls\n                            autoPlay\n                            width={videoWidth}\n                            height={videoHeight}\n                            onPlay={() => {\n                                this.setState({ isPlaying: true });\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerPlay'\n                                });\n                            }}\n                            onCanPlay={() => {\n                                const player = this.videoRef.current;\n                                if (player) {\n                                    player.volume = PlayerStore.volume;\n                                }\n                            }}\n                            onPause={() => {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerPause'\n                                });\n                            }}\n                            onEnded={() => {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerEnded'\n                                });\n                            }}\n                            onVolumeChange={() => {\n                                const player = this.videoRef.current;\n                                if (player) {\n                                    TdLibController.clientUpdate({\n                                        '@type': 'clientUpdateMediaVolume',\n                                        volume: player.volume\n                                    });\n                                }\n                            }}\n                        />\n                        {!isPlaying &&\n                            (!src && thumbnailSrc ? (\n                                <img\n                                    className={classNames('media-viewer-content-video-thumbnail', {\n                                        'media-blurred': isBlurred\n                                    })}\n                                    src={thumbnailSrc}\n                                    alt=''\n                                    width={videoWidth}\n                                    height={videoHeight}\n                                />\n                            ) : (\n                                <div\n                                    className='media-viewer-content-video-thumbnail'\n                                    style={{\n                                        width: videoWidth,\n                                        height: videoHeight\n                                    }}\n                                />\n                            ))}\n                    </div>\n                );\n                break;\n            }\n            case 'animation': {\n                content = (\n                    <div className='media-viewer-content-wrapper'>\n                        <video\n                            className='media-viewer-content-video-player'\n                            src={src}\n                            onClick={this.handleContentClick}\n                            loop\n                            autoPlay\n                            width={videoWidth}\n                            height={videoHeight}\n                            onPlay={() => {\n                                this.setState({ isPlaying: true });\n                            }}\n                        />\n                        {!isPlaying &&\n                            (!src && thumbnailSrc ? (\n                                <img\n                                    className={classNames('media-viewer-content-video-thumbnail', {\n                                        'media-blurred': isBlurred\n                                    })}\n                                    src={thumbnailSrc}\n                                    alt=''\n                                    width={videoWidth}\n                                    height={videoHeight}\n                                />\n                            ) : (\n                                <div\n                                    className='media-viewer-content-video-thumbnail'\n                                    style={{\n                                        width: videoWidth,\n                                        height: videoHeight\n                                    }}\n                                />\n                            ))}\n                    </div>\n                );\n                break;\n            }\n            default: {\n                content = (\n                    <img className='media-viewer-content-image' src={src} alt='' onClick={this.handleContentClick} />\n                );\n            }\n        }\n\n        return (\n            <div className='media-viewer-content'>\n                {content}\n                <FileProgress file={file} zIndex={2} />\n                {caption && (!isEmptyText(caption.text) || !isEmptyText(caption.credit) || url) && (\n                    <MediaCaption\n                        text={\n                            <>\n                                <Caption text={caption.text} credit={caption.credit} />\n                                <SafeLink url={url} />\n                            </>\n                        }\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nInstantViewMediaViewerContent.propTypes = {\n    media: PropTypes.object.isRequired,\n    size: PropTypes.number.isRequired,\n    caption: PropTypes.object,\n    url: PropTypes.string\n};\n\nexport default InstantViewMediaViewerContent;\n"]},"metadata":{},"sourceType":"module"}