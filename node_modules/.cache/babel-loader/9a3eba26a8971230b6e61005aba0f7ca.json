{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Message/Media/VoiceNoteSlider.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Slider from '@material-ui/lab/Slider';\nimport { PLAYER_PROGRESS_TIMEOUT_MS } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport './VoiceNoteSlider.css';\nconst styles = {\n  slider: {\n    maxWidth: 216\n  },\n  track: {\n    transition: 'width 0ms linear 0ms, height 0ms linear 0ms, transform 0ms linear 0ms'\n  },\n  thumbWrapper: {\n    transition: 'transform 0ms linear 0ms'\n  },\n  thumb: {\n    transition: 'transform 0ms linear 0ms, box-shadow 0ms linear 0ms'\n  }\n};\n\nclass VoiceNoteSlider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reset = () => {\n      const duration = this.props.duration;\n      const value = this.state.value;\n\n      if (value === 1) {\n        this.setState({\n          active: false,\n          currentTime: 0\n        });\n        setTimeout(() => {\n          const currentTime = this.state.currentTime;\n\n          if (!currentTime) {\n            this.setState({\n              value: this.getValue(0, duration, false)\n            });\n          }\n        }, PLAYER_PROGRESS_TIMEOUT_MS);\n      } else {\n        this.setState({\n          active: false,\n          currentTime: 0,\n          value: this.getValue(0, duration, false)\n        });\n      }\n    };\n\n    this.onClientUpdateMediaEnd = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.reset();\n      }\n    };\n\n    this.onClientUpdateMediaTime = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId,\n            duration = _this$props2.duration;\n      const active = this.state.active;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          currentTime: update.currentTime,\n          duration: update.duration || duration,\n          value: this.getValue(update.currentTime, update.duration || duration, active)\n        });\n      }\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId,\n            duration = _this$props3.duration;\n      const _this$state = this.state,\n            active = _this$state.active,\n            currentTime = _this$state.currentTime;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          active: true,\n          currentTime: active ? currentTime : 0,\n          value: this.getValue(active ? currentTime : 0, duration, true)\n        });\n      } else if (active) {\n        this.reset();\n      }\n    };\n\n    this.getValue = (currentTime, duration, active) => {\n      return active ? currentTime / duration : 0;\n    };\n\n    const message = PlayerStore.message,\n          time = PlayerStore.time;\n    const _this$props4 = this.props,\n          _chatId = _this$props4.chatId,\n          _messageId = _this$props4.messageId,\n          _duration = _this$props4.duration;\n\n    const _active = message && message.chat_id === _chatId && message.id === _messageId;\n\n    const _currentTime = _active && time ? time.currentTime : 0;\n\n    const audioDuration = _active && time && time.duration ? time.duration : _duration;\n    this.state = {\n      active: _active,\n      currentTime: _currentTime,\n      duration: audioDuration,\n      value: this.getValue(_currentTime, audioDuration, _active)\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$state2 = this.state,\n          active = _this$state2.active,\n          value = _this$state2.value;\n\n    if (nextState.value !== value) {\n      return true;\n    }\n\n    if (nextState.active !== active) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n    PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  componentWillUnmount() {\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n    PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const value = this.state.value;\n    return React.createElement(\"div\", {\n      className: \"voice-note-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      className: classes.slider,\n      classes: {\n        track: classes.track,\n        thumbWrapper: classes.thumbWrapper,\n        thumb: classes.thumb\n      },\n      min: 0,\n      max: 1,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }));\n  }\n\n}\n\nVoiceNoteSlider.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  duration: PropTypes.number.isRequired\n};\nexport default withStyles(styles)(VoiceNoteSlider);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Message/Media/VoiceNoteSlider.js"],"names":["React","PropTypes","withStyles","Slider","PLAYER_PROGRESS_TIMEOUT_MS","PlayerStore","styles","slider","maxWidth","track","transition","thumbWrapper","thumb","VoiceNoteSlider","Component","constructor","props","reset","duration","value","state","setState","active","currentTime","setTimeout","getValue","onClientUpdateMediaEnd","update","chatId","messageId","onClientUpdateMediaTime","onClientUpdateMediaActive","message","time","chat_id","id","audioDuration","shouldComponentUpdate","nextProps","nextState","componentDidMount","on","componentWillUnmount","removeListener","render","classes","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Slider from '@material-ui/lab/Slider';\nimport { PLAYER_PROGRESS_TIMEOUT_MS } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport './VoiceNoteSlider.css';\n\nconst styles = {\n    slider: {\n        maxWidth: 216\n    },\n    track: {\n        transition: 'width 0ms linear 0ms, height 0ms linear 0ms, transform 0ms linear 0ms'\n    },\n    thumbWrapper: {\n        transition: 'transform 0ms linear 0ms'\n    },\n    thumb: {\n        transition: 'transform 0ms linear 0ms, box-shadow 0ms linear 0ms'\n    }\n};\n\nclass VoiceNoteSlider extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { message, time } = PlayerStore;\n        const { chatId, messageId, duration } = this.props;\n\n        const active = message && message.chat_id === chatId && message.id === messageId;\n        const currentTime = active && time ? time.currentTime : 0;\n        const audioDuration = active && time && time.duration ? time.duration : duration;\n\n        this.state = {\n            active: active,\n            currentTime: currentTime,\n            duration: audioDuration,\n            value: this.getValue(currentTime, audioDuration, active)\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { active, value } = this.state;\n\n        if (nextState.value !== value) {\n            return true;\n        }\n\n        if (nextState.active !== active) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    reset = () => {\n        const { duration } = this.props;\n        const { value } = this.state;\n\n        if (value === 1) {\n            this.setState({\n                active: false,\n                currentTime: 0\n            });\n\n            setTimeout(() => {\n                const { currentTime } = this.state;\n                if (!currentTime) {\n                    this.setState({\n                        value: this.getValue(0, duration, false)\n                    });\n                }\n            }, PLAYER_PROGRESS_TIMEOUT_MS);\n        } else {\n            this.setState({\n                active: false,\n                currentTime: 0,\n                value: this.getValue(0, duration, false)\n            });\n        }\n    };\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.reset();\n        }\n    };\n\n    onClientUpdateMediaTime = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active } = this.state;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                currentTime: update.currentTime,\n                duration: update.duration || duration,\n                value: this.getValue(update.currentTime, update.duration || duration, active)\n            });\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active, currentTime } = this.state;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                active: true,\n                currentTime: active ? currentTime : 0,\n                value: this.getValue(active ? currentTime : 0, duration, true)\n            });\n        } else if (active) {\n            this.reset();\n        }\n    };\n\n    getValue = (currentTime, duration, active) => {\n        return active ? currentTime / duration : 0;\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { value } = this.state;\n\n        return (\n            <div className='voice-note-slider'>\n                <Slider\n                    className={classes.slider}\n                    classes={{\n                        track: classes.track,\n                        thumbWrapper: classes.thumbWrapper,\n                        thumb: classes.thumb\n                    }}\n                    min={0}\n                    max={1}\n                    value={value}\n                />\n            </div>\n        );\n    }\n}\n\nVoiceNoteSlider.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    duration: PropTypes.number.isRequired\n};\n\nexport default withStyles(styles)(VoiceNoteSlider);\n"]},"metadata":{},"sourceType":"module"}