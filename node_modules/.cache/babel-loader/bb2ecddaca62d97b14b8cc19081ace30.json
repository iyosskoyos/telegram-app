{"ast":null,"code":"import _defineProperty from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/Media/Video.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport { getFitSize, getDurationString } from '../../../Utils/Common';\nimport { getFileSize } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Video.css';\n\nclass Video extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClientUpdateVideoThumbnailBlob = update => {\n      const thumbnail = this.props.video.thumbnail;\n      const fileId = update.fileId;\n      if (!thumbnail) return;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n  }\n\n  render() {\n    const _this$props = this.props,\n          displaySize = _this$props.displaySize,\n          openMedia = _this$props.openMedia,\n          style = _this$props.style;\n    const _this$props$video = this.props.video,\n          thumbnail = _this$props$video.thumbnail,\n          video = _this$props$video.video,\n          width = _this$props$video.width,\n          height = _this$props$video.height,\n          duration = _this$props$video.duration;\n    const fitPhotoSize = getFitSize(thumbnail || {\n      width: width,\n      height: height\n    }, displaySize);\n    if (!fitPhotoSize) return null;\n\n    const videoStyle = _objectSpread({\n      width: fitPhotoSize.width,\n      height: fitPhotoSize.height\n    }, style);\n\n    const file = thumbnail ? thumbnail.photo : null;\n    const blob = file ? FileStore.getBlob(file.id) || file.blob : null;\n    const src = FileStore.getBlobUrl(blob);\n    const isBlurred = isBlurredThumbnail(thumbnail);\n    return React.createElement(\"div\", {\n      className: \"video\",\n      style: videoStyle,\n      onClick: openMedia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: classNames('video-preview', {\n        'media-blurred': isBlurred\n      }),\n      src: src,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"video-play\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(PlayArrowIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"video-meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, getDurationString(duration) + ' ' + getFileSize(video)));\n  }\n\n}\n\nVideo.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  video: PropTypes.object.isRequired,\n  openMedia: PropTypes.func.isRequired,\n  size: PropTypes.number,\n  displaySize: PropTypes.number\n};\nVideo.defaultProps = {\n  size: PHOTO_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE\n};\nexport default Video;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/Media/Video.js"],"names":["React","PropTypes","classNames","PlayArrowIcon","getFitSize","getDurationString","getFileSize","isBlurredThumbnail","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","FileStore","Video","Component","onClientUpdateVideoThumbnailBlob","update","thumbnail","props","video","fileId","photo","id","forceUpdate","componentDidMount","on","componentWillUnmount","removeListener","render","displaySize","openMedia","style","width","height","duration","fitPhotoSize","videoStyle","file","blob","getBlob","src","getBlobUrl","isBlurred","propTypes","chatId","number","messageId","object","isRequired","func","size","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport { getFitSize, getDurationString } from '../../../Utils/Common';\nimport { getFileSize } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Video.css';\n\nclass Video extends React.Component {\n    componentDidMount() {\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    onClientUpdateVideoThumbnailBlob = update => {\n        const { thumbnail } = this.props.video;\n        const { fileId } = update;\n\n        if (!thumbnail) return;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { displaySize, openMedia, style } = this.props;\n        const { thumbnail, video, width, height, duration } = this.props.video;\n\n        const fitPhotoSize = getFitSize(thumbnail || { width: width, height: height }, displaySize);\n        if (!fitPhotoSize) return null;\n\n        const videoStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        const file = thumbnail ? thumbnail.photo : null;\n        const blob = file ? FileStore.getBlob(file.id) || file.blob : null;\n        const src = FileStore.getBlobUrl(blob);\n        const isBlurred = isBlurredThumbnail(thumbnail);\n\n        return (\n            <div className='video' style={videoStyle} onClick={openMedia}>\n                <img className={classNames('video-preview', { 'media-blurred': isBlurred })} src={src} alt='' />\n                <div className='video-play'>\n                    <PlayArrowIcon />\n                </div>\n                <div className='video-meta'>{getDurationString(duration) + ' ' + getFileSize(video)}</div>\n            </div>\n        );\n    }\n}\n\nVideo.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    video: PropTypes.object.isRequired,\n    openMedia: PropTypes.func.isRequired,\n    size: PropTypes.number,\n    displaySize: PropTypes.number\n};\n\nVideo.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE\n};\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}