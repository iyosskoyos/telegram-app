{"ast":null,"code":"import _regeneratorRuntime from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import FileStore from'../../Stores/FileStore';import ApplicationStore from'../../Stores/ApplicationStore';import TdLibController from'../../Controllers/TdLibController';import'./FilesDropTarget.css';var FilesDropTarget=/*#__PURE__*/function(_React$Component){_inherits(FilesDropTarget,_React$Component);function FilesDropTarget(props){var _this;_classCallCheck(this,FilesDropTarget);_this=_possibleConstructorReturn(this,_getPrototypeOf(FilesDropTarget).call(this,props));_this.onClientUpdateDragging=function(update){_this.setState({dragging:ApplicationStore.getDragging()});};_this.handleDragEnter=function(event){event.preventDefault();event.stopPropagation();};_this.handleDrop=function(event){event.preventDefault();event.stopPropagation();ApplicationStore.setDragging(false);_this.handleAttachDocumentComplete(event.dataTransfer.files);};_this.handleDragLeave=function(event){event.preventDefault();event.stopPropagation();ApplicationStore.setDragging(false);};_this.handleAttachDocumentComplete=function(files){if(files.length===0)return;for(var i=0;i<files.length;i++){var file=files[i];var content={'@type':'inputMessageDocument',document:{'@type':'inputFileBlob',name:file.name,data:file}};_this.onSendInternal(content,function(result){return FileStore.uploadFile(result.content.document.document.id,result);});}};_this.onSendInternal=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(content,callback){var currentChatId,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:currentChatId=ApplicationStore.getChatId();if(currentChatId){_context.next=3;break;}return _context.abrupt(\"return\");case 3:if(content){_context.next=5;break;}return _context.abrupt(\"return\");case 5:_context.prev=5;ApplicationStore.invokeScheduledAction(\"clientUpdateClearHistory chatId=\".concat(currentChatId));_context.next=9;return TdLibController.send({'@type':'sendMessage',chat_id:currentChatId,reply_to_message_id:0,input_message_content:content});case 9:result=_context.sent;//MessageStore.set(result);\nTdLibController.send({'@type':'viewMessages',chat_id:currentChatId,message_ids:[result.id]});callback(result);_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](5);alert('sendMessage error '+JSON.stringify(_context.t0));case 17:case\"end\":return _context.stop();}}},_callee,null,[[5,14]]);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();_this.state={dragging:ApplicationStore.getDragging()};return _this;}_createClass(FilesDropTarget,[{key:\"componentDidMount\",value:function componentDidMount(){ApplicationStore.on('clientUpdateDragging',this.onClientUpdateDragging);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){ApplicationStore.removeListener('clientUpdateDragging',this.onClientUpdateDragging);}},{key:\"render\",value:function render(){var dragging=this.state.dragging;return React.createElement(React.Fragment,null,dragging&&React.createElement(\"div\",{className:\"files-drop-target\",onDragEnter:this.handleDragEnter,onDragLeave:this.handleDragLeave,onDrop:this.handleDrop},React.createElement(\"div\",{className:\"files-drop-target-wrapper\"},React.createElement(\"div\",{className:\"files-drop-target-text\"},React.createElement(\"div\",{className:\"files-drop-target-title\"},\"Drop files here\"),React.createElement(\"div\",{className:\"files-drop-target-subtitle\"},\"to send them without compression\")))));}}]);return FilesDropTarget;}(React.Component);export default FilesDropTarget;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnMiddle/FilesDropTarget.js"],"names":["React","FileStore","ApplicationStore","TdLibController","FilesDropTarget","props","onClientUpdateDragging","update","setState","dragging","getDragging","handleDragEnter","event","preventDefault","stopPropagation","handleDrop","setDragging","handleAttachDocumentComplete","dataTransfer","files","handleDragLeave","length","i","file","content","document","name","data","onSendInternal","result","uploadFile","id","callback","currentChatId","getChatId","invokeScheduledAction","send","chat_id","reply_to_message_id","input_message_content","message_ids","alert","JSON","stringify","state","on","removeListener","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport FileStore from '../../Stores/FileStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './FilesDropTarget.css';\n\nclass FilesDropTarget extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: ApplicationStore.getDragging()\n        };\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateDragging', this.onClientUpdateDragging);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateDragging', this.onClientUpdateDragging);\n    }\n\n    onClientUpdateDragging = update => {\n        this.setState({ dragging: ApplicationStore.getDragging() });\n    };\n\n    handleDragEnter = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleDrop = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        ApplicationStore.setDragging(false);\n\n        this.handleAttachDocumentComplete(event.dataTransfer.files);\n    };\n\n    handleDragLeave = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        ApplicationStore.setDragging(false);\n    };\n\n    handleAttachDocumentComplete = files => {\n        if (files.length === 0) return;\n\n        for (let i = 0; i < files.length; i++) {\n            let file = files[i];\n            const content = {\n                '@type': 'inputMessageDocument',\n                document: { '@type': 'inputFileBlob', name: file.name, data: file }\n            };\n\n            this.onSendInternal(content, result => FileStore.uploadFile(result.content.document.document.id, result));\n        }\n    };\n\n    onSendInternal = async (content, callback) => {\n        const currentChatId = ApplicationStore.getChatId();\n\n        if (!currentChatId) return;\n        if (!content) return;\n\n        try {\n            ApplicationStore.invokeScheduledAction(`clientUpdateClearHistory chatId=${currentChatId}`);\n\n            let result = await TdLibController.send({\n                '@type': 'sendMessage',\n                chat_id: currentChatId,\n                reply_to_message_id: 0,\n                input_message_content: content\n            });\n\n            //MessageStore.set(result);\n\n            TdLibController.send({\n                '@type': 'viewMessages',\n                chat_id: currentChatId,\n                message_ids: [result.id]\n            });\n\n            callback(result);\n        } catch (error) {\n            alert('sendMessage error ' + JSON.stringify(error));\n        }\n    };\n\n    render() {\n        const { dragging } = this.state;\n\n        return (\n            <>\n                {dragging && (\n                    <div\n                        className='files-drop-target'\n                        onDragEnter={this.handleDragEnter}\n                        onDragLeave={this.handleDragLeave}\n                        onDrop={this.handleDrop}>\n                        <div className='files-drop-target-wrapper'>\n                            <div className='files-drop-target-text'>\n                                <div className='files-drop-target-title'>Drop files here</div>\n                                <div className='files-drop-target-subtitle'>to send them without compression</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nFilesDropTarget.propTypes = {};\n\nexport default FilesDropTarget;\n"]},"metadata":{},"sourceType":"module"}