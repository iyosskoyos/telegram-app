{"ast":null,"code":"var _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Auth/PasswordControl.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, isConnecting } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PasswordControl.css';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  margin: {\n    margin: '16px 0 8px 0'\n  },\n  withoutLabel: {\n    marginTop: theme.spacing.unit * 3\n  },\n  textField: {\n    flexBasis: 200\n  },\n  buttonLeft: {\n    marginRight: '8px',\n    marginTop: '16px'\n  },\n  buttonRight: {\n    marginLeft: '8px',\n    marginTop: '16px'\n  }\n});\n\nclass PasswordControl extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      connecting: isConnecting(ApplicationStore.connectionState),\n      password: '',\n      showPassword: false,\n      error: ''\n    };\n\n    this.onUpdateConnectionState = update => {\n      const state = update.state;\n      this.setState({\n        connecting: isConnecting(state)\n      });\n    };\n\n    this.handleNext = () => {\n      if (this.password) {\n        this.setState({\n          error: ''\n        });\n        this.handleDone();\n      } else {\n        this.setState({\n          error: 'Invalid password. Please try again.'\n        });\n      }\n    };\n\n    this.handleBack = () => {\n      this.props.onChangePhone();\n    };\n\n    this.handleDone = () => {\n      const password = this.password;\n      this.setState({\n        loading: true\n      });\n      TdLibController.send({\n        '@type': 'checkAuthenticationPassword',\n        password: password\n      }).then(result => {}).catch(error => {\n        let errorString = null;\n\n        if (error && error['@type'] === 'error' && error.message) {\n          errorString = error.message;\n        } else {\n          errorString = JSON.stringify(error);\n        }\n\n        this.setState({\n          error: errorString\n        });\n      }).finally(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.handleMouseDownPassword = event => {\n      event.preventDefault();\n    };\n\n    this.handleClickShowPassword = () => {\n      this.setState({\n        showPassword: !this.state.showPassword\n      });\n    };\n\n    this.handleChange = e => {\n      this.password = e.target.value;\n    };\n\n    this.handleKeyPress = e => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.handleNext();\n      }\n    };\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          passwordHint = _this$props.passwordHint,\n          t = _this$props.t;\n    const _this$state = this.state,\n          connecting = _this$state.connecting,\n          loading = _this$state.loading,\n          error = _this$state.error,\n          showPassword = _this$state.showPassword;\n    let title = t('YourPassword');\n\n    if (connecting) {\n      title = cleanProgressStatus(t('Connecting'));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"authorization-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"authorization-header-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, title), connecting && React.createElement(HeaderProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Please enter your cloud password.\"), React.createElement(FormControl, {\n      fullWidth: true,\n      className: classNames(classes.margin, classes.textField),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      htmlFor: \"adornment-password\",\n      error: Boolean(error),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Your cloud password\"), React.createElement(Input, {\n      fullWidth: true,\n      autoFocus: true,\n      id: \"adornment-password\",\n      type: showPassword ? 'text' : 'password',\n      disabled: loading,\n      error: Boolean(error),\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        \"aria-label\": \"Toggle password visibility\",\n        onClick: this.handleClickShowPassword,\n        onMouseDown: this.handleMouseDownPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, showPassword ? React.createElement(VisibilityOff, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }) : React.createElement(Visibility, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), passwordHint && React.createElement(FormHelperText, {\n      id: \"password-hint-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"password-hint-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Hint: \"), passwordHint), React.createElement(FormHelperText, {\n      id: \"password-error-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, error), React.createElement(\"div\", {\n      className: \"authorization-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Button, {\n      fullWidth: true,\n      className: classes.buttonLeft,\n      onClick: this.handleBack,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, t('Back')), React.createElement(Button, {\n      fullWidth: true,\n      color: \"primary\",\n      className: classes.buttonRight,\n      onClick: this.handleNext,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, t('Next'))));\n  }\n\n}\n\nconst enhance = compose(withTranslation(), withStyles(styles, {\n  withTheme: true\n}));\nexport default enhance(PasswordControl);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Auth/PasswordControl.js"],"names":["React","classNames","compose","withTranslation","withStyles","IconButton","InputAdornment","InputLabel","Input","FormControl","FormHelperText","Button","Visibility","VisibilityOff","HeaderProgress","cleanProgressStatus","isConnecting","ApplicationStore","TdLibController","styles","theme","root","display","flexWrap","margin","withoutLabel","marginTop","spacing","unit","textField","flexBasis","buttonLeft","marginRight","buttonRight","marginLeft","PasswordControl","Component","state","connecting","connectionState","password","showPassword","error","onUpdateConnectionState","update","setState","handleNext","handleDone","handleBack","props","onChangePhone","loading","send","then","result","catch","errorString","message","JSON","stringify","finally","handleMouseDownPassword","event","preventDefault","handleClickShowPassword","handleChange","e","target","value","handleKeyPress","key","componentDidMount","on","componentWillUnmount","removeListener","render","classes","passwordHint","t","title","Boolean","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport HeaderProgress from '../ColumnMiddle/HeaderProgress';\nimport { cleanProgressStatus, isConnecting } from '../../Utils/Common';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './PasswordControl.css';\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap'\n    },\n    margin: {\n        margin: '16px 0 8px 0'\n    },\n    withoutLabel: {\n        marginTop: theme.spacing.unit * 3\n    },\n    textField: {\n        flexBasis: 200\n    },\n    buttonLeft: {\n        marginRight: '8px',\n        marginTop: '16px'\n    },\n    buttonRight: {\n        marginLeft: '8px',\n        marginTop: '16px'\n    }\n});\n\nclass PasswordControl extends React.Component {\n    state = {\n        connecting: isConnecting(ApplicationStore.connectionState),\n        password: '',\n        showPassword: false,\n        error: ''\n    };\n\n    componentDidMount() {\n        ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n    }\n\n    onUpdateConnectionState = update => {\n        const { state } = update;\n\n        this.setState({ connecting: isConnecting(state) });\n    };\n\n    handleNext = () => {\n        if (this.password) {\n            this.setState({ error: '' });\n            this.handleDone();\n        } else {\n            this.setState({ error: 'Invalid password. Please try again.' });\n        }\n    };\n\n    handleBack = () => {\n        this.props.onChangePhone();\n    };\n\n    handleDone = () => {\n        const password = this.password;\n\n        this.setState({ loading: true });\n        TdLibController.send({\n            '@type': 'checkAuthenticationPassword',\n            password: password\n        })\n            .then(result => {})\n            .catch(error => {\n                let errorString = null;\n                if (error && error['@type'] === 'error' && error.message) {\n                    errorString = error.message;\n                } else {\n                    errorString = JSON.stringify(error);\n                }\n\n                this.setState({ error: errorString });\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    handleMouseDownPassword = event => {\n        event.preventDefault();\n    };\n\n    handleClickShowPassword = () => {\n        this.setState({ showPassword: !this.state.showPassword });\n    };\n\n    handleChange = e => {\n        this.password = e.target.value;\n    };\n\n    handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            this.handleNext();\n        }\n    };\n\n    render() {\n        const { classes, passwordHint, t } = this.props;\n        const { connecting, loading, error, showPassword } = this.state;\n\n        let title = t('YourPassword');\n        if (connecting) {\n            title = cleanProgressStatus(t('Connecting'));\n        }\n\n        return (\n            <div>\n                <div className='authorization-header'>\n                    <span className='authorization-header-content'>{title}</span>\n                    {connecting && <HeaderProgress />}\n                </div>\n                <div>Please enter your cloud password.</div>\n                <FormControl fullWidth className={classNames(classes.margin, classes.textField)}>\n                    <InputLabel htmlFor='adornment-password' error={Boolean(error)}>\n                        Your cloud password\n                    </InputLabel>\n                    <Input\n                        fullWidth\n                        autoFocus\n                        id='adornment-password'\n                        type={showPassword ? 'text' : 'password'}\n                        disabled={loading}\n                        error={Boolean(error)}\n                        onChange={this.handleChange}\n                        onKeyPress={this.handleKeyPress}\n                        endAdornment={\n                            <InputAdornment position='end'>\n                                <IconButton\n                                    aria-label='Toggle password visibility'\n                                    onClick={this.handleClickShowPassword}\n                                    onMouseDown={this.handleMouseDownPassword}>\n                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                </FormControl>\n                {passwordHint && (\n                    <FormHelperText id='password-hint-text'>\n                        <span className='password-hint-label'>Hint: </span>\n                        {passwordHint}\n                    </FormHelperText>\n                )}\n                <FormHelperText id='password-error-text'>{error}</FormHelperText>\n                <div className='authorization-actions'>\n                    <Button fullWidth className={classes.buttonLeft} onClick={this.handleBack} disabled={loading}>\n                        {t('Back')}\n                    </Button>\n                    <Button\n                        fullWidth\n                        color='primary'\n                        className={classes.buttonRight}\n                        onClick={this.handleNext}\n                        disabled={loading}>\n                        {t('Next')}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(PasswordControl);\n"]},"metadata":{},"sourceType":"module"}