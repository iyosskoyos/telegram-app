{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Additional/NotificationTimer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/es/Typography/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './NotificationTimer.css';\n\nclass NotificationTimer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTimer = () => {\n      const now = new Date();\n      const seconds = this.expire - now;\n      const value = 100 - seconds / this.props.timeout * 100; // console.log(`NotificationTimer ms=${seconds} value=${value}`);\n\n      this.setState({\n        seconds: seconds > 0 ? seconds : 0,\n        value: value > 100 ? 100 : value\n      });\n\n      if (now >= this.expire) {\n        if (this.timerId) {\n          clearInterval(this.timerId);\n          this.timerId = null;\n        }\n      }\n    };\n\n    this.state = {\n      seconds: this.props.timeout / 1000,\n      value: 0\n    };\n  }\n\n  componentDidMount() {\n    this.startTime = new Date();\n    this.expire = this.startTime;\n    this.expire.setMilliseconds(this.expire.getMilliseconds() + this.props.timeout);\n    this.timerId = setInterval(this.handleTimer, 100);\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      clearInterval(this.timerId);\n      this.timerId = null;\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          value = _this$state.value,\n          seconds = _this$state.seconds;\n    return React.createElement(\"div\", {\n      className: \"notification-timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"notification-timer-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      color: \"inherit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, (seconds / 1000).toFixed())), React.createElement(\"div\", {\n      className: \"notification-timer-progress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      size: 32,\n      value: 100 - value,\n      variant: \"static\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNotificationTimer.propTypes = {\n  timeout: PropTypes.number.isRequired\n};\nexport default NotificationTimer;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Additional/NotificationTimer.js"],"names":["React","PropTypes","Typography","CircularProgress","NotificationTimer","Component","constructor","props","handleTimer","now","Date","seconds","expire","value","timeout","setState","timerId","clearInterval","state","componentDidMount","startTime","setMilliseconds","getMilliseconds","setInterval","componentWillUnmount","render","toFixed","propTypes","number","isRequired"],"mappings":";;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAO,yBAAP;;AAEA,MAAMC,iBAAN,SAAgCJ,KAAK,CAACK,SAAtC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,WAhBmB,GAgBL,MAAM;AAChB,YAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,YAAMC,OAAO,GAAG,KAAKC,MAAL,GAAcH,GAA9B;AACA,YAAMI,KAAK,GAAG,MAAOF,OAAO,GAAG,KAAKJ,KAAL,CAAWO,OAAtB,GAAiC,GAArD,CAHgB,CAIhB;;AACA,WAAKC,QAAL,CAAc;AACVJ,QAAAA,OAAO,EAAEA,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwB,CADvB;AAEVE,QAAAA,KAAK,EAAEA,KAAK,GAAG,GAAR,GAAc,GAAd,GAAoBA;AAFjB,OAAd;;AAKA,UAAIJ,GAAG,IAAI,KAAKG,MAAhB,EAAwB;AACpB,YAAI,KAAKI,OAAT,EAAkB;AACdC,UAAAA,aAAa,CAAC,KAAKD,OAAN,CAAb;AACA,eAAKA,OAAL,GAAe,IAAf;AACH;AACJ;AACJ,KAhCkB;;AAGf,SAAKE,KAAL,GAAa;AACTP,MAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWO,OAAX,GAAqB,IADrB;AAETD,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,SAAL,GAAiB,IAAIV,IAAJ,EAAjB;AACA,SAAKE,MAAL,GAAc,KAAKQ,SAAnB;AACA,SAAKR,MAAL,CAAYS,eAAZ,CAA4B,KAAKT,MAAL,CAAYU,eAAZ,KAAgC,KAAKf,KAAL,CAAWO,OAAvE;AACA,SAAKE,OAAL,GAAeO,WAAW,CAAC,KAAKf,WAAN,EAAmB,GAAnB,CAA1B;AACH;;AAoBDgB,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKR,OAAT,EAAkB;AACdC,MAAAA,aAAa,CAAC,KAAKD,OAAN,CAAb;AACA,WAAKA,OAAL,GAAe,IAAf;AACH;AACJ;;AAEDS,EAAAA,MAAM,GAAG;AAAA,wBACsB,KAAKP,KAD3B;AAAA,UACGL,KADH,eACGA,KADH;AAAA,UACUF,OADV,eACUA,OADV;AAGL,WACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,CAACA,OAAO,GAAG,IAAX,EAAiBe,OAAjB,EAA7B,CADJ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,EAAxB;AAA4B,MAAA,KAAK,EAAE,MAAMb,KAAzC;AAAgD,MAAA,OAAO,EAAC,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJJ,CADJ;AAUH;;AAvD2C;;AA0DhDT,iBAAiB,CAACuB,SAAlB,GAA8B;AAC1Bb,EAAAA,OAAO,EAAEb,SAAS,CAAC2B,MAAV,CAAiBC;AADA,CAA9B;AAIA,eAAezB,iBAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/es/Typography/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './NotificationTimer.css';\n\nclass NotificationTimer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            seconds: this.props.timeout / 1000,\n            value: 0\n        };\n    }\n\n    componentDidMount() {\n        this.startTime = new Date();\n        this.expire = this.startTime;\n        this.expire.setMilliseconds(this.expire.getMilliseconds() + this.props.timeout);\n        this.timerId = setInterval(this.handleTimer, 100);\n    }\n\n    handleTimer = () => {\n        const now = new Date();\n        const seconds = this.expire - now;\n        const value = 100 - (seconds / this.props.timeout) * 100;\n        // console.log(`NotificationTimer ms=${seconds} value=${value}`);\n        this.setState({\n            seconds: seconds > 0 ? seconds : 0,\n            value: value > 100 ? 100 : value\n        });\n\n        if (now >= this.expire) {\n            if (this.timerId) {\n                clearInterval(this.timerId);\n                this.timerId = null;\n            }\n        }\n    };\n\n    componentWillUnmount() {\n        if (this.timerId) {\n            clearInterval(this.timerId);\n            this.timerId = null;\n        }\n    }\n\n    render() {\n        const { value, seconds } = this.state;\n\n        return (\n            <div className='notification-timer'>\n                <div className='notification-timer-text'>\n                    <Typography color='inherit'>{(seconds / 1000).toFixed()}</Typography>\n                </div>\n                <div className='notification-timer-progress'>\n                    <CircularProgress size={32} value={100 - value} variant='static' />\n                </div>\n            </div>\n        );\n    }\n}\n\nNotificationTimer.propTypes = {\n    timeout: PropTypes.number.isRequired\n};\n\nexport default NotificationTimer;\n"]},"metadata":{},"sourceType":"module"}