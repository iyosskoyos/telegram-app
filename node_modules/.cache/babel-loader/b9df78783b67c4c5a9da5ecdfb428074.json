{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Tile/ReplyTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getSrc } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport { hasVideoNote } from '../../Utils/Message';\nimport FileStore from '../../Stores/FileStore';\nimport './ReplyTile.css';\n\nclass ReplyTile extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClientUpdatePhotoBlob = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId,\n            photoSize = _this$props.photoSize;\n      if (!photoSize) return;\n      const photo = photoSize.photo;\n      if (!photo) return;\n\n      if (update.chatId === chatId && update.messageId === messageId && update.fileId === photo.id) {\n        this.forceUpdate();\n      }\n    };\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.on('clientUpdateAudioThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.on('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    FileStore.on('clientUpdateStickerThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.on('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdatePhotoBlob);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.removeListener('clientUpdateAudioThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.removeListener('clientUpdateDocumentThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n    FileStore.removeListener('clientUpdateStickerThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdatePhotoBlob);\n    FileStore.removeListener('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdatePhotoBlob);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          messageId = _this$props2.messageId,\n          photoSize = _this$props2.photoSize;\n    if (!photoSize) return null;\n    const photo = photoSize.photo;\n    if (!photo) return null;\n    const src = getSrc(photo);\n    const isBlurred = isBlurredThumbnail(photo);\n    const isVideoNote = hasVideoNote(chatId, messageId);\n    return React.createElement(\"div\", {\n      className: \"reply-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: classNames('reply-tile-photo', {\n        'reply-tile-photo-round': isVideoNote\n      }, {\n        'reply-tile-photo-loading': !src\n      }, {\n        'media-blurred': isBlurred\n      }),\n      draggable: false,\n      src: src,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReplyTile.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  photoSize: PropTypes.object.isRequired\n};\nexport default ReplyTile;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Tile/ReplyTile.js"],"names":["React","PropTypes","classNames","getSrc","isBlurredThumbnail","hasVideoNote","FileStore","ReplyTile","Component","onClientUpdatePhotoBlob","update","props","chatId","messageId","photoSize","photo","fileId","id","forceUpdate","componentDidMount","on","componentWillUnmount","removeListener","render","src","isBlurred","isVideoNote","propTypes","number","isRequired","object"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getSrc } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport { hasVideoNote } from '../../Utils/Message';\nimport FileStore from '../../Stores/FileStore';\nimport './ReplyTile.css';\n\nclass ReplyTile extends React.Component {\n    componentDidMount() {\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.on('clientUpdateAudioThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n        FileStore.on('clientUpdateStickerThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.on('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdatePhotoBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.removeListener('clientUpdateAudioThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.removeListener('clientUpdateDocumentThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdatePhotoBlob);\n        FileStore.removeListener('clientUpdateStickerThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdatePhotoBlob);\n        FileStore.removeListener('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdatePhotoBlob);\n    }\n\n    onClientUpdatePhotoBlob = update => {\n        const { chatId, messageId, photoSize } = this.props;\n        if (!photoSize) return;\n\n        const { photo } = photoSize;\n        if (!photo) return;\n\n        if (update.chatId === chatId && update.messageId === messageId && update.fileId === photo.id) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { chatId, messageId, photoSize } = this.props;\n        if (!photoSize) return null;\n\n        const { photo } = photoSize;\n        if (!photo) return null;\n\n        const src = getSrc(photo);\n        const isBlurred = isBlurredThumbnail(photo);\n        const isVideoNote = hasVideoNote(chatId, messageId);\n\n        return (\n            <div className='reply-tile'>\n                <img\n                    className={classNames(\n                        'reply-tile-photo',\n                        { 'reply-tile-photo-round': isVideoNote },\n                        { 'reply-tile-photo-loading': !src },\n                        { 'media-blurred': isBlurred }\n                    )}\n                    draggable={false}\n                    src={src}\n                    alt=''\n                />\n            </div>\n        );\n    }\n}\n\nReplyTile.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    photoSize: PropTypes.object.isRequired\n};\n\nexport default ReplyTile;\n"]},"metadata":{},"sourceType":"module"}