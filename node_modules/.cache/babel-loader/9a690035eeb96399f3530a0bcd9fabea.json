{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/MessageAuthor.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { getUserFullName } from '../../Utils/User';\nimport { getChatTitle, isPrivateChat } from '../../Utils/Chat';\nimport { openUser as openUserCommand, openChat as openChatCommand } from '../../Actions/Client';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport './MessageAuthor.css';\n\nclass MessageAuthor extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSelect = event => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            userId = _this$props.userId,\n            openUser = _this$props.openUser,\n            openChat = _this$props.openChat;\n\n      if (openUser && userId) {\n        event.stopPropagation();\n        openUserCommand(userId, true);\n        return;\n      }\n\n      if (openChat && chatId) {\n        event.stopPropagation();\n        openChatCommand(chatId, null, true);\n        return;\n      }\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          t = _this$props2.t,\n          chatId = _this$props2.chatId,\n          userId = _this$props2.userId,\n          openUser = _this$props2.openUser,\n          openChat = _this$props2.openChat;\n    const user = UserStore.get(userId);\n\n    if (user) {\n      const tileColor = isPrivateChat(chatId) ? 'message-author-color' : \"user_color_\".concat(Math.abs(userId) % 8 + 1);\n      const className = classNames([tileColor], 'message-author');\n      const fullName = getUserFullName(user);\n      return openUser ? React.createElement(\"a\", {\n        className: className,\n        onClick: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, fullName) : React.createElement(React.Fragment, null, fullName);\n    }\n\n    const chat = ChatStore.get(chatId);\n\n    if (chat) {\n      const className = classNames('message-author-color', 'message-author');\n      const fullName = getChatTitle(chatId, false, t);\n      return openChat ? React.createElement(\"a\", {\n        className: className,\n        onClick: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, fullName) : React.createElement(React.Fragment, null, fullName);\n    }\n\n    return null;\n  }\n\n}\n\nMessageAuthor.propTypes = {\n  chatId: PropTypes.number,\n  userId: PropTypes.number,\n  openUser: PropTypes.bool,\n  openChat: PropTypes.bool\n};\nMessageAuthor.defaultProps = {\n  openUser: false,\n  openChat: false\n};\nexport default withTranslation()(MessageAuthor);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/MessageAuthor.js"],"names":["React","PropTypes","withTranslation","classNames","getUserFullName","getChatTitle","isPrivateChat","openUser","openUserCommand","openChat","openChatCommand","UserStore","ChatStore","MessageAuthor","Component","handleSelect","event","props","chatId","userId","stopPropagation","render","t","user","get","tileColor","Math","abs","className","fullName","chat","propTypes","number","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { getUserFullName } from '../../Utils/User';\nimport { getChatTitle, isPrivateChat } from '../../Utils/Chat';\nimport { openUser as openUserCommand, openChat as openChatCommand } from '../../Actions/Client';\nimport UserStore from '../../Stores/UserStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport './MessageAuthor.css';\n\nclass MessageAuthor extends React.Component {\n    handleSelect = event => {\n        const { chatId, userId, openUser, openChat } = this.props;\n\n        if (openUser && userId) {\n            event.stopPropagation();\n\n            openUserCommand(userId, true);\n            return;\n        }\n\n        if (openChat && chatId) {\n            event.stopPropagation();\n\n            openChatCommand(chatId, null, true);\n            return;\n        }\n    };\n\n    render() {\n        const { t, chatId, userId, openUser, openChat } = this.props;\n\n        const user = UserStore.get(userId);\n        if (user) {\n            const tileColor = isPrivateChat(chatId)\n                ? 'message-author-color'\n                : `user_color_${(Math.abs(userId) % 8) + 1}`;\n            const className = classNames([tileColor], 'message-author');\n\n            const fullName = getUserFullName(user);\n\n            return openUser ? (\n                <a className={className} onClick={this.handleSelect}>\n                    {fullName}\n                </a>\n            ) : (\n                <>{fullName}</>\n            );\n        }\n\n        const chat = ChatStore.get(chatId);\n        if (chat) {\n            const className = classNames('message-author-color', 'message-author');\n\n            const fullName = getChatTitle(chatId, false, t);\n\n            return openChat ? (\n                <a className={className} onClick={this.handleSelect}>\n                    {fullName}\n                </a>\n            ) : (\n                <>{fullName}</>\n            );\n        }\n\n        return null;\n    }\n}\n\nMessageAuthor.propTypes = {\n    chatId: PropTypes.number,\n    userId: PropTypes.number,\n    openUser: PropTypes.bool,\n    openChat: PropTypes.bool\n};\n\nMessageAuthor.defaultProps = {\n    openUser: false,\n    openChat: false\n};\n\nexport default withTranslation()(MessageAuthor);\n"]},"metadata":{},"sourceType":"module"}