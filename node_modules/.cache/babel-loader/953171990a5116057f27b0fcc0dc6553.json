{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport dateFormat from 'dateformat';\nimport { getLetters, getSize } from './Common';\nimport { PROFILE_PHOTO_BIG_SIZE, PROFILE_PHOTO_SMALL_SIZE, SERVICE_NOTIFICATIONS_USER_ID } from '../Constants';\nimport UserStore from '../Stores/UserStore';\n\nfunction getUserStatus(user) {\n  if (!user) return null;\n  if (!user.status) return null;\n\n  if (user.id === SERVICE_NOTIFICATIONS_USER_ID) {\n    return 'service notifications';\n  }\n\n  if (user.type && user.type['@type'] === 'userTypeBot') {\n    return 'bot';\n  }\n\n  switch (user.status['@type']) {\n    case 'userStatusEmpty':\n      {\n        return 'last seen a long time ago';\n      }\n\n    case 'userStatusLastMonth':\n      {\n        return 'last seen within a month';\n      }\n\n    case 'userStatusLastWeek':\n      {\n        return 'last seen within a week';\n      }\n\n    case 'userStatusOffline':\n      {\n        let was_online = user.status.was_online;\n        if (!was_online) return 'offline';\n        const now = new Date();\n        const wasOnline = new Date(was_online * 1000);\n\n        if (wasOnline > now) {\n          return 'last seen just now';\n        }\n\n        let diff = new Date(now - wasOnline); // within a minute\n\n        if (diff.getTime() / 1000 < 60) {\n          return 'last seen just now';\n        } // within an hour\n\n\n        if (diff.getTime() / 1000 < 60 * 60) {\n          const minutes = Math.floor(diff.getTime() / 1000 / 60);\n          return \"last seen \".concat(minutes === 1 ? '1 minute' : minutes + ' minutes', \" ago\");\n        } // today\n\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        if (wasOnline > today) {\n          // up to 6 hours ago\n          if (diff.getTime() / 1000 < 6 * 60 * 60) {\n            const hours = Math.floor(diff.getTime() / 1000 / 60 / 60);\n            return \"last seen \".concat(hours === 1 ? '1 hour' : hours + ' hours', \" ago\");\n          } // other\n\n\n          return \"last seen today at \".concat(dateFormat(wasOnline, 'H:MM'));\n        } // yesterday\n\n\n        let yesterday = new Date();\n        yesterday.setDate(now.getDate() - 1);\n        today.setHours(0, 0, 0, 0);\n\n        if (wasOnline > yesterday) {\n          return \"last seen yesterday at \".concat(dateFormat(wasOnline, 'H:MM'));\n        }\n\n        return \"last seen \".concat(dateFormat(wasOnline, 'dd.mm.yyyy'));\n      }\n\n    case 'userStatusOnline':\n      {\n        return 'online';\n      }\n\n    case 'userStatusRecently':\n      {\n        return 'last seen recently';\n      }\n  }\n\n  return null;\n}\n\nfunction isUserOnline(user) {\n  if (!user) return false;\n  const id = user.id,\n        status = user.status,\n        type = user.type;\n  if (!status) return false;\n  if (!type) return false;\n  if (id === SERVICE_NOTIFICATIONS_USER_ID) return false;\n  return status['@type'] === 'userStatusOnline' && type['@type'] !== 'userTypeBot';\n}\n\nfunction getUserFullName(user) {\n  if (!user) return null;\n  if (!user.type) return null;\n\n  switch (user.type['@type']) {\n    case 'userTypeBot':\n    case 'userTypeRegular':\n      {\n        if (user.first_name && user.last_name) return \"\".concat(user.first_name, \" \").concat(user.last_name);\n        if (user.first_name) return user.first_name;\n        if (user.last_name) return user.last_name;\n      }\n\n    case 'userTypeDeleted':\n    case 'userTypeUnknown':\n      {\n        return 'Deleted account';\n      }\n  }\n\n  return null;\n}\n\nfunction getUserShortName(userId) {\n  const user = UserStore.get(userId);\n  if (!user) return null;\n  if (!user.type) return null;\n\n  switch (user.type['@type']) {\n    case 'userTypeBot':\n    case 'userTypeRegular':\n      {\n        if (user.first_name) return user.first_name;\n        if (user.last_name) return user.last_name;\n      }\n\n    case 'userTypeDeleted':\n    case 'userTypeUnknown':\n      {\n        return 'Deleted account';\n      }\n  }\n\n  return null;\n}\n\nfunction isUserBlocked(userId) {\n  const fullInfo = UserStore.getFullInfo(userId);\n\n  if (fullInfo) {\n    return fullInfo.is_blocked;\n  }\n\n  return false;\n}\n\nfunction getUserLetters(userId, firstName, lastName) {\n  const user = UserStore.get(userId);\n  if (!user && !(firstName || lastName)) return null;\n  const title = getUserFullName(user) || \"\".concat(firstName, \" \").concat(lastName).trim();\n  const letters = getLetters(title);\n\n  if (letters && letters.length > 0) {\n    return letters;\n  }\n\n  if (user) {\n    return user.first_name ? user.first_name.charAt(0) : user.last_name ? user.last_name.charAt(0) : '';\n  }\n\n  return firstName ? firstName.charAt(0) : lastName ? lastName.charAt(0) : '';\n}\n\nfunction getUserStatusOrder(user) {\n  if (!user) return 0;\n  if (!user.status) return 0;\n  if (user.type['@type'] === 'userTypeBot') return 0;\n\n  switch (user.status['@type']) {\n    case 'userStatusEmpty':\n      {\n        return 1;\n      }\n\n    case 'userStatusLastMonth':\n      {\n        return 10;\n      }\n\n    case 'userStatusLastWeek':\n      {\n        return 100;\n      }\n\n    case 'userStatusOffline':\n      {\n        return user.status.was_online;\n      }\n\n    case 'userStatusOnline':\n      {\n        return user.status.expires;\n      }\n\n    case 'userStatusRecently':\n      {\n        return 1000;\n      }\n  }\n}\n\nfunction getProfilePhoto(userProfilePhoto) {\n  if (!userProfilePhoto) return null;\n  const id = userProfilePhoto.id,\n        sizes = userProfilePhoto.sizes;\n  if (!sizes) return null;\n  if (!sizes.length) return null;\n  const smallPhotoSize = getSize(sizes, PROFILE_PHOTO_SMALL_SIZE);\n  const bigPhotoSize = getSize(sizes, PROFILE_PHOTO_BIG_SIZE);\n  return {\n    '@type': 'profilePhoto',\n    id: id,\n    small: smallPhotoSize.photo,\n    big: bigPhotoSize.photo\n  };\n}\n\nfunction getProfilePhotoDateHint(userProfilePhoto) {\n  if (!userProfilePhoto) return null;\n  const added_date = userProfilePhoto.added_date;\n  if (!added_date) return null;\n  const date = new Date(added_date * 1000);\n  return dateFormat(date, 'H:MM:ss d.mm.yyyy');\n}\n\nexport { getUserStatus, isUserOnline, getUserFullName, isUserBlocked, getUserLetters, getUserStatusOrder, getProfilePhoto, getProfilePhotoDateHint, getUserShortName };","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Utils/User.js"],"names":["dateFormat","getLetters","getSize","PROFILE_PHOTO_BIG_SIZE","PROFILE_PHOTO_SMALL_SIZE","SERVICE_NOTIFICATIONS_USER_ID","UserStore","getUserStatus","user","status","id","type","was_online","now","Date","wasOnline","diff","getTime","minutes","Math","floor","today","setHours","hours","yesterday","setDate","getDate","isUserOnline","getUserFullName","first_name","last_name","getUserShortName","userId","get","isUserBlocked","fullInfo","getFullInfo","is_blocked","getUserLetters","firstName","lastName","title","trim","letters","length","charAt","getUserStatusOrder","expires","getProfilePhoto","userProfilePhoto","sizes","smallPhotoSize","bigPhotoSize","small","photo","big","getProfilePhotoDateHint","added_date","date"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport dateFormat from 'dateformat';\nimport { getLetters, getSize } from './Common';\nimport { PROFILE_PHOTO_BIG_SIZE, PROFILE_PHOTO_SMALL_SIZE, SERVICE_NOTIFICATIONS_USER_ID } from '../Constants';\nimport UserStore from '../Stores/UserStore';\n\nfunction getUserStatus(user) {\n    if (!user) return null;\n    if (!user.status) return null;\n\n    if (user.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        return 'service notifications';\n    }\n\n    if (user.type && user.type['@type'] === 'userTypeBot') {\n        return 'bot';\n    }\n\n    switch (user.status['@type']) {\n        case 'userStatusEmpty': {\n            return 'last seen a long time ago';\n        }\n        case 'userStatusLastMonth': {\n            return 'last seen within a month';\n        }\n        case 'userStatusLastWeek': {\n            return 'last seen within a week';\n        }\n        case 'userStatusOffline': {\n            let { was_online } = user.status;\n            if (!was_online) return 'offline';\n\n            const now = new Date();\n            const wasOnline = new Date(was_online * 1000);\n            if (wasOnline > now) {\n                return 'last seen just now';\n            }\n\n            let diff = new Date(now - wasOnline);\n\n            // within a minute\n            if (diff.getTime() / 1000 < 60) {\n                return 'last seen just now';\n            }\n\n            // within an hour\n            if (diff.getTime() / 1000 < 60 * 60) {\n                const minutes = Math.floor(diff.getTime() / 1000 / 60);\n                return `last seen ${minutes === 1 ? '1 minute' : minutes + ' minutes'} ago`;\n            }\n\n            // today\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            if (wasOnline > today) {\n                // up to 6 hours ago\n                if (diff.getTime() / 1000 < 6 * 60 * 60) {\n                    const hours = Math.floor(diff.getTime() / 1000 / 60 / 60);\n                    return `last seen ${hours === 1 ? '1 hour' : hours + ' hours'} ago`;\n                }\n\n                // other\n                return `last seen today at ${dateFormat(wasOnline, 'H:MM')}`;\n            }\n\n            // yesterday\n            let yesterday = new Date();\n            yesterday.setDate(now.getDate() - 1);\n            today.setHours(0, 0, 0, 0);\n            if (wasOnline > yesterday) {\n                return `last seen yesterday at ${dateFormat(wasOnline, 'H:MM')}`;\n            }\n\n            return `last seen ${dateFormat(wasOnline, 'dd.mm.yyyy')}`;\n        }\n        case 'userStatusOnline': {\n            return 'online';\n        }\n        case 'userStatusRecently': {\n            return 'last seen recently';\n        }\n    }\n\n    return null;\n}\n\nfunction isUserOnline(user) {\n    if (!user) return false;\n\n    const { id, status, type } = user;\n    if (!status) return false;\n    if (!type) return false;\n    if (id === SERVICE_NOTIFICATIONS_USER_ID) return false;\n\n    return status['@type'] === 'userStatusOnline' && type['@type'] !== 'userTypeBot';\n}\n\nfunction getUserFullName(user) {\n    if (!user) return null;\n    if (!user.type) return null;\n\n    switch (user.type['@type']) {\n        case 'userTypeBot':\n        case 'userTypeRegular': {\n            if (user.first_name && user.last_name) return `${user.first_name} ${user.last_name}`;\n            if (user.first_name) return user.first_name;\n            if (user.last_name) return user.last_name;\n        }\n        case 'userTypeDeleted':\n        case 'userTypeUnknown': {\n            return 'Deleted account';\n        }\n    }\n\n    return null;\n}\n\nfunction getUserShortName(userId) {\n    const user = UserStore.get(userId);\n    if (!user) return null;\n    if (!user.type) return null;\n\n    switch (user.type['@type']) {\n        case 'userTypeBot':\n        case 'userTypeRegular': {\n            if (user.first_name) return user.first_name;\n            if (user.last_name) return user.last_name;\n        }\n        case 'userTypeDeleted':\n        case 'userTypeUnknown': {\n            return 'Deleted account';\n        }\n    }\n\n    return null;\n}\n\nfunction isUserBlocked(userId) {\n    const fullInfo = UserStore.getFullInfo(userId);\n    if (fullInfo) {\n        return fullInfo.is_blocked;\n    }\n\n    return false;\n}\n\nfunction getUserLetters(userId, firstName, lastName) {\n    const user = UserStore.get(userId);\n    if (!user && !(firstName || lastName)) return null;\n\n    const title = getUserFullName(user) || `${firstName} ${lastName}`.trim();\n    const letters = getLetters(title);\n    if (letters && letters.length > 0) {\n        return letters;\n    }\n\n    if (user) {\n        return user.first_name ? user.first_name.charAt(0) : user.last_name ? user.last_name.charAt(0) : '';\n    }\n\n    return firstName ? firstName.charAt(0) : lastName ? lastName.charAt(0) : '';\n}\n\nfunction getUserStatusOrder(user) {\n    if (!user) return 0;\n    if (!user.status) return 0;\n    if (user.type['@type'] === 'userTypeBot') return 0;\n\n    switch (user.status['@type']) {\n        case 'userStatusEmpty': {\n            return 1;\n        }\n        case 'userStatusLastMonth': {\n            return 10;\n        }\n        case 'userStatusLastWeek': {\n            return 100;\n        }\n        case 'userStatusOffline': {\n            return user.status.was_online;\n        }\n        case 'userStatusOnline': {\n            return user.status.expires;\n        }\n        case 'userStatusRecently': {\n            return 1000;\n        }\n    }\n}\n\nfunction getProfilePhoto(userProfilePhoto) {\n    if (!userProfilePhoto) return null;\n\n    const { id, sizes } = userProfilePhoto;\n    if (!sizes) return null;\n    if (!sizes.length) return null;\n\n    const smallPhotoSize = getSize(sizes, PROFILE_PHOTO_SMALL_SIZE);\n    const bigPhotoSize = getSize(sizes, PROFILE_PHOTO_BIG_SIZE);\n\n    return {\n        '@type': 'profilePhoto',\n        id: id,\n        small: smallPhotoSize.photo,\n        big: bigPhotoSize.photo\n    };\n}\n\nfunction getProfilePhotoDateHint(userProfilePhoto) {\n    if (!userProfilePhoto) return null;\n\n    const { added_date } = userProfilePhoto;\n    if (!added_date) return null;\n\n    const date = new Date(added_date * 1000);\n    return dateFormat(date, 'H:MM:ss d.mm.yyyy');\n}\n\nexport {\n    getUserStatus,\n    isUserOnline,\n    getUserFullName,\n    isUserBlocked,\n    getUserLetters,\n    getUserStatusOrder,\n    getProfilePhoto,\n    getProfilePhotoDateHint,\n    getUserShortName\n};\n"]},"metadata":{},"sourceType":"module"}