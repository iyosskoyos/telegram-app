{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport LocalStorageBackend from 'i18next-localstorage-backend';\nimport { initReactI18next } from 'react-i18next';\nimport TdLibController from '../Controllers/TdLibController';\nconst defaultLanguage = 'en';\nconst defaultNamespace = 'translation';\nconst cookies = new Cookies();\nconst language = cookies.get('i18next') || defaultLanguage; // const detection = {\n//     // order and from where user language should be detected\n//     order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\n//\n//     // keys or params to lookup language from\n//     lookupQuerystring: 'lng',\n//     lookupCookie: 'i18next',\n//     lookupLocalStorage: 'i18nextLng',\n//     lookupFromPathIndex: 0,\n//     lookupFromSubdomainIndex: 0,\n//\n//     // cache user language on\n//     caches: ['localStorage', 'cookie']\n// };\n\ni18n.use(initReactI18next) //.use(LanguageDetector) // passes i18n down to react-i18next\n.init({\n  //detection: detection,\n  ns: [defaultNamespace, 'local'],\n  defaultNS: defaultNamespace,\n  fallbackNS: ['local', 'emoji'],\n  resources: {\n    en: {\n      local: {\n        DeletedMessage: 'Deleted message',\n        YourPhone: 'Your Phone',\n        StartText: 'Please confirm your country code and enter your phone number.',\n        Next: 'Next',\n        InvalidPhoneNumber: 'Invalid phone number. Please check the number and try again.',\n        More: 'More',\n        SendMessage: 'Send Message',\n        ChatInfo: 'Chat Info',\n        ChannelInfo: 'Channel Info',\n        Stickers: 'STICKERS',\n        Emoji: 'EMOJI',\n        SelectChatToStartMessaging: 'Select a chat to start messaging',\n        ViewChannelInfo: 'View channel info',\n        ViewGroupInfo: 'View group info',\n        ViewProfile: 'View profile',\n        GoToMessage: 'Go to message',\n        PhotosTitle: 'Photos',\n        VideosTitle: 'Videos',\n        VoiceTitle: 'Voice messages'\n      },\n      emoji: {\n        Search: 'Search',\n        NotEmojiFound: 'No Emoji Found',\n        ChooseDefaultSkinTone: 'Choose your default skin tone',\n        SearchResults: 'Search Results',\n        Recent: 'Frequently Used',\n        SmileysPeople: 'Smileys & People',\n        AnimalsNature: 'Animals & Nature',\n        FoodDrink: 'Food & Drink',\n        Activity: 'Activity',\n        TravelPlaces: 'Travel & Places',\n        Objects: 'Objects',\n        Symbols: 'Symbols',\n        Flags: 'Flags',\n        Custom: 'Custom'\n      },\n      translation: {\n        AppName: 'Telegram',\n        Connecting: 'Connecting...',\n        ConnectingToProxy: 'Connecting to proxy...',\n        Loading: 'Loading...',\n        Updating: 'Updating...',\n        WaitingForNetwork: 'Waiting for network...'\n      }\n    },\n    ru: {\n      local: {\n        DeletedMessage: 'Удаленное сообщение',\n        YourPhone: 'Ваш телефон',\n        StartText: 'Пожалуйста, укажите код страны и свой номер телефона.',\n        Next: 'Далее',\n        InvalidPhoneNumber: 'Некорректный номер телефона. Пожалуйста, проверьте номер и попробуйте ещё раз.',\n        More: 'Ещё',\n        SendMessage: 'Отправить сообщение',\n        ChatInfo: 'Информация о чате',\n        ChannelInfo: 'Информация о канале',\n        Stickers: 'СТИКЕРЫ',\n        Emoji: 'ЕМОДЗИ',\n        SelectChatToStartMessaging: 'Выберите, кому хотели бы написать',\n        ViewChannelInfo: 'Информация о канале',\n        ViewGroupInfo: 'Информация о группе',\n        ViewProfile: 'Показать профиль',\n        GoToMessage: 'Перейти к сообщению',\n        PhotosTitle: 'Фотографии',\n        VideosTitle: 'Видеозаписи',\n        VoiceTitle: 'Голосовые сообщения'\n      },\n      emoji: {\n        Search: 'Поиск',\n        NotEmojiFound: 'Емодзи не найдены',\n        ChooseDefaultSkinTone: 'Выберите тон кожи по умолчанию',\n        SearchResults: 'Результаты поиска',\n        Recent: 'Часто используемые',\n        SmileysPeople: 'Смайлики и люди',\n        AnimalsNature: 'Животные и природа',\n        FoodDrink: 'Еда и напитки',\n        Activity: 'Активность',\n        TravelPlaces: 'Путешествия и местности',\n        Objects: 'Предметы',\n        Symbols: 'Символы',\n        Flags: 'Флаги',\n        Custom: 'Пользовательские'\n      },\n      translation: {\n        AppName: 'Telegram',\n        Connecting: 'Соединение...',\n        ConnectingToProxy: 'Подключение к прокси...',\n        Loading: 'Загрузка...',\n        Updating: 'Обновление...',\n        WaitingForNetwork: 'Ожидание сети...'\n      }\n    }\n  },\n  lng: language,\n  fallbackLng: defaultLanguage,\n  interpolation: {\n    escapeValue: false\n  },\n  react: {\n    wait: false\n  }\n});\nconst cache = new LocalStorageBackend(null, {\n  enabled: true,\n  prefix: 'i18next_res_',\n  expirationTime: Infinity\n});\nconst translationDefaultLng = cache.read(defaultLanguage, defaultNamespace, (err, data) => {\n  return data;\n});\nconst translationCurrentLng = cache.read(language, defaultNamespace, (err, data) => {\n  return data;\n});\ni18n.addResourceBundle(defaultLanguage, defaultNamespace, translationDefaultLng);\ni18n.addResourceBundle(language, defaultNamespace, translationCurrentLng);\n\nclass LocalizationStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            switch (update.authorization_state['@type']) {\n              case 'authorizationStateWaitTdlibParameters':\n                TdLibController.send({\n                  '@type': 'setOption',\n                  name: 'localization_target',\n                  value: {\n                    '@type': 'optionValueString',\n                    value: 'android'\n                  }\n                });\n                TdLibController.send({\n                  '@type': 'setOption',\n                  name: 'language_pack_id',\n                  value: {\n                    '@type': 'optionValueString',\n                    value: language\n                  }\n                });\n                TdLibController.send({\n                  '@type': 'getLocalizationTargetInfo',\n                  only_local: false\n                }).then(result => {\n                  this.info = result;\n                  TdLibController.clientUpdate({\n                    '@type': 'clientUpdateLanguageChange',\n                    language: language\n                  });\n                });\n                break;\n            }\n\n            break;\n          }\n\n        case 'updateLanguagePackStrings':\n          {\n            // add/remove new strings\n            this.emit('updateLanguagePackStrings', update);\n            break;\n          }\n      }\n    };\n\n    this.onClientUpdate = async update => {\n      switch (update['@type']) {\n        case 'clientUpdateLanguageChange':\n          {\n            const language = update.language;\n            TdLibController.send({\n              '@type': 'getLanguagePackStrings',\n              language_pack_id: language,\n              keys: []\n            }).then(async result => {\n              const cookies = new Cookies();\n              cookies.set('i18next', language);\n              const resources = this.processStrings(language, result);\n              this.cache.save(language, defaultNamespace, resources);\n              i18n.addResourceBundle(language, defaultNamespace, resources);\n              await i18n.changeLanguage(language);\n              TdLibController.send({\n                '@type': 'setOption',\n                name: 'language_pack_id',\n                value: {\n                  '@type': 'optionValueString',\n                  value: language\n                }\n              });\n              this.emit('clientUpdateLanguageChange', update);\n            });\n            break;\n          }\n      }\n    };\n\n    this.processStrings = (lng, languagePackStrings) => {\n      if (!languagePackStrings) return {};\n      const strings = languagePackStrings.strings;\n      if (!strings) return {};\n      let result = {};\n\n      for (let i = 0; i < strings.length; i++) {\n        const value = strings[i].value;\n\n        switch (value['@type']) {\n          case 'languagePackStringValueOrdinary':\n            {\n              result[strings[i].key] = value.value;\n              break;\n            }\n\n          case 'languagePackStringValuePluralized':\n            {\n              //result[strings[i].key] = value.value;\n              break;\n            }\n\n          case 'languagePackStringValueDeleted':\n            {\n              break;\n            }\n        }\n      }\n\n      return result;\n    };\n\n    this.loadLanguage = async language => {\n      const result = await TdLibController.send({\n        '@type': 'getLanguagePackStrings',\n        language_pack_id: language,\n        keys: []\n      });\n      const resources = this.processStrings(language, result);\n      this.cache.save(language, defaultNamespace, resources);\n      i18n.addResourceBundle(language, defaultNamespace, resources);\n    };\n\n    this.i18n = i18n;\n    this.cache = cache;\n    this.setMaxListeners(Infinity);\n    this.addTdLibListener();\n  }\n\n}\n\nconst store = new LocalizationStore();\nwindow.localization = store;\nexport default store;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Stores/LocalizationStore.js"],"names":["EventEmitter","Cookies","i18n","LanguageDetector","LocalStorageBackend","initReactI18next","TdLibController","defaultLanguage","defaultNamespace","cookies","language","get","use","init","ns","defaultNS","fallbackNS","resources","en","local","DeletedMessage","YourPhone","StartText","Next","InvalidPhoneNumber","More","SendMessage","ChatInfo","ChannelInfo","Stickers","Emoji","SelectChatToStartMessaging","ViewChannelInfo","ViewGroupInfo","ViewProfile","GoToMessage","PhotosTitle","VideosTitle","VoiceTitle","emoji","Search","NotEmojiFound","ChooseDefaultSkinTone","SearchResults","Recent","SmileysPeople","AnimalsNature","FoodDrink","Activity","TravelPlaces","Objects","Symbols","Flags","Custom","translation","AppName","Connecting","ConnectingToProxy","Loading","Updating","WaitingForNetwork","ru","lng","fallbackLng","interpolation","escapeValue","react","wait","cache","enabled","prefix","expirationTime","Infinity","translationDefaultLng","read","err","data","translationCurrentLng","addResourceBundle","LocalizationStore","constructor","addTdLibListener","addListener","onUpdate","onClientUpdate","removeTdLibListener","removeListener","update","authorization_state","send","name","value","only_local","then","result","info","clientUpdate","emit","language_pack_id","keys","set","processStrings","save","changeLanguage","languagePackStrings","strings","i","length","key","loadLanguage","setMaxListeners","store","window","localization"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport LocalStorageBackend from 'i18next-localstorage-backend';\nimport { initReactI18next } from 'react-i18next';\nimport TdLibController from '../Controllers/TdLibController';\n\nconst defaultLanguage = 'en';\nconst defaultNamespace = 'translation';\nconst cookies = new Cookies();\nconst language = cookies.get('i18next') || defaultLanguage;\n\n// const detection = {\n//     // order and from where user language should be detected\n//     order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\n//\n//     // keys or params to lookup language from\n//     lookupQuerystring: 'lng',\n//     lookupCookie: 'i18next',\n//     lookupLocalStorage: 'i18nextLng',\n//     lookupFromPathIndex: 0,\n//     lookupFromSubdomainIndex: 0,\n//\n//     // cache user language on\n//     caches: ['localStorage', 'cookie']\n// };\n\ni18n.use(initReactI18next) //.use(LanguageDetector) // passes i18n down to react-i18next\n    .init({\n        //detection: detection,\n        ns: [defaultNamespace, 'local'],\n        defaultNS: defaultNamespace,\n        fallbackNS: ['local', 'emoji'],\n        resources: {\n            en: {\n                local: {\n                    DeletedMessage: 'Deleted message',\n                    YourPhone: 'Your Phone',\n                    StartText: 'Please confirm your country code and enter your phone number.',\n                    Next: 'Next',\n                    InvalidPhoneNumber: 'Invalid phone number. Please check the number and try again.',\n                    More: 'More',\n                    SendMessage: 'Send Message',\n                    ChatInfo: 'Chat Info',\n                    ChannelInfo: 'Channel Info',\n                    Stickers: 'STICKERS',\n                    Emoji: 'EMOJI',\n                    SelectChatToStartMessaging: 'Select a chat to start messaging',\n                    ViewChannelInfo: 'View channel info',\n                    ViewGroupInfo: 'View group info',\n                    ViewProfile: 'View profile',\n                    GoToMessage: 'Go to message',\n                    PhotosTitle: 'Photos',\n                    VideosTitle: 'Videos',\n                    VoiceTitle: 'Voice messages'\n                },\n                emoji: {\n                    Search: 'Search',\n                    NotEmojiFound: 'No Emoji Found',\n                    ChooseDefaultSkinTone: 'Choose your default skin tone',\n                    SearchResults: 'Search Results',\n                    Recent: 'Frequently Used',\n                    SmileysPeople: 'Smileys & People',\n                    AnimalsNature: 'Animals & Nature',\n                    FoodDrink: 'Food & Drink',\n                    Activity: 'Activity',\n                    TravelPlaces: 'Travel & Places',\n                    Objects: 'Objects',\n                    Symbols: 'Symbols',\n                    Flags: 'Flags',\n                    Custom: 'Custom'\n                },\n                translation: {\n                    AppName: 'Telegram',\n                    Connecting: 'Connecting...',\n                    ConnectingToProxy: 'Connecting to proxy...',\n                    Loading: 'Loading...',\n                    Updating: 'Updating...',\n                    WaitingForNetwork: 'Waiting for network...'\n                }\n            },\n            ru: {\n                local: {\n                    DeletedMessage: 'Удаленное сообщение',\n                    YourPhone: 'Ваш телефон',\n                    StartText: 'Пожалуйста, укажите код страны и свой номер телефона.',\n                    Next: 'Далее',\n                    InvalidPhoneNumber:\n                        'Некорректный номер телефона. Пожалуйста, проверьте номер и попробуйте ещё раз.',\n                    More: 'Ещё',\n                    SendMessage: 'Отправить сообщение',\n                    ChatInfo: 'Информация о чате',\n                    ChannelInfo: 'Информация о канале',\n                    Stickers: 'СТИКЕРЫ',\n                    Emoji: 'ЕМОДЗИ',\n                    SelectChatToStartMessaging: 'Выберите, кому хотели бы написать',\n                    ViewChannelInfo: 'Информация о канале',\n                    ViewGroupInfo: 'Информация о группе',\n                    ViewProfile: 'Показать профиль',\n                    GoToMessage: 'Перейти к сообщению',\n                    PhotosTitle: 'Фотографии',\n                    VideosTitle: 'Видеозаписи',\n                    VoiceTitle: 'Голосовые сообщения'\n                },\n                emoji: {\n                    Search: 'Поиск',\n                    NotEmojiFound: 'Емодзи не найдены',\n                    ChooseDefaultSkinTone: 'Выберите тон кожи по умолчанию',\n                    SearchResults: 'Результаты поиска',\n                    Recent: 'Часто используемые',\n                    SmileysPeople: 'Смайлики и люди',\n                    AnimalsNature: 'Животные и природа',\n                    FoodDrink: 'Еда и напитки',\n                    Activity: 'Активность',\n                    TravelPlaces: 'Путешествия и местности',\n                    Objects: 'Предметы',\n                    Symbols: 'Символы',\n                    Flags: 'Флаги',\n                    Custom: 'Пользовательские'\n                },\n                translation: {\n                    AppName: 'Telegram',\n                    Connecting: 'Соединение...',\n                    ConnectingToProxy: 'Подключение к прокси...',\n                    Loading: 'Загрузка...',\n                    Updating: 'Обновление...',\n                    WaitingForNetwork: 'Ожидание сети...'\n                }\n            }\n        },\n        lng: language,\n        fallbackLng: defaultLanguage,\n        interpolation: {\n            escapeValue: false\n        },\n        react: {\n            wait: false\n        }\n    });\n\nconst cache = new LocalStorageBackend(null, {\n    enabled: true,\n    prefix: 'i18next_res_',\n    expirationTime: Infinity\n});\n\nconst translationDefaultLng = cache.read(defaultLanguage, defaultNamespace, (err, data) => {\n    return data;\n});\nconst translationCurrentLng = cache.read(language, defaultNamespace, (err, data) => {\n    return data;\n});\ni18n.addResourceBundle(defaultLanguage, defaultNamespace, translationDefaultLng);\ni18n.addResourceBundle(language, defaultNamespace, translationCurrentLng);\n\nclass LocalizationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.i18n = i18n;\n        this.cache = cache;\n\n        this.setMaxListeners(Infinity);\n        this.addTdLibListener();\n    }\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                switch (update.authorization_state['@type']) {\n                    case 'authorizationStateWaitTdlibParameters':\n                        TdLibController.send({\n                            '@type': 'setOption',\n                            name: 'localization_target',\n                            value: { '@type': 'optionValueString', value: 'android' }\n                        });\n                        TdLibController.send({\n                            '@type': 'setOption',\n                            name: 'language_pack_id',\n                            value: { '@type': 'optionValueString', value: language }\n                        });\n                        TdLibController.send({\n                            '@type': 'getLocalizationTargetInfo',\n                            only_local: false\n                        }).then(result => {\n                            this.info = result;\n\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateLanguageChange',\n                                language: language\n                            });\n                        });\n                        break;\n                }\n                break;\n            }\n            case 'updateLanguagePackStrings': {\n                // add/remove new strings\n\n                this.emit('updateLanguagePackStrings', update);\n                break;\n            }\n        }\n    };\n\n    onClientUpdate = async update => {\n        switch (update['@type']) {\n            case 'clientUpdateLanguageChange': {\n                const { language } = update;\n\n                TdLibController.send({\n                    '@type': 'getLanguagePackStrings',\n                    language_pack_id: language,\n                    keys: []\n                }).then(async result => {\n                    const cookies = new Cookies();\n                    cookies.set('i18next', language);\n\n                    const resources = this.processStrings(language, result);\n\n                    this.cache.save(language, defaultNamespace, resources);\n\n                    i18n.addResourceBundle(language, defaultNamespace, resources);\n\n                    await i18n.changeLanguage(language);\n\n                    TdLibController.send({\n                        '@type': 'setOption',\n                        name: 'language_pack_id',\n                        value: { '@type': 'optionValueString', value: language }\n                    });\n\n                    this.emit('clientUpdateLanguageChange', update);\n                });\n                break;\n            }\n        }\n    };\n\n    processStrings = (lng, languagePackStrings) => {\n        if (!languagePackStrings) return {};\n        const { strings } = languagePackStrings;\n        if (!strings) return {};\n\n        let result = {};\n        for (let i = 0; i < strings.length; i++) {\n            const { value } = strings[i];\n            switch (value['@type']) {\n                case 'languagePackStringValueOrdinary': {\n                    result[strings[i].key] = value.value;\n                    break;\n                }\n                case 'languagePackStringValuePluralized': {\n                    //result[strings[i].key] = value.value;\n                    break;\n                }\n                case 'languagePackStringValueDeleted': {\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    loadLanguage = async language => {\n        const result = await TdLibController.send({\n            '@type': 'getLanguagePackStrings',\n            language_pack_id: language,\n            keys: []\n        });\n\n        const resources = this.processStrings(language, result);\n\n        this.cache.save(language, defaultNamespace, resources);\n\n        i18n.addResourceBundle(language, defaultNamespace, resources);\n    };\n}\n\nconst store = new LocalizationStore();\nwindow.localization = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}