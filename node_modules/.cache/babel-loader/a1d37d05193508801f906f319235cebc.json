{"ast":null,"code":"import _defineProperty from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import classNames from'classnames';import PlayArrowIcon from'@material-ui/icons/PlayArrow';import{getFitSize,getDurationString}from'../../../Utils/Common';import{getFileSize}from'../../../Utils/File';import{isBlurredThumbnail}from'../../../Utils/Media';import{PHOTO_DISPLAY_SIZE,PHOTO_SIZE}from'../../../Constants';import FileStore from'../../../Stores/FileStore';import'./Video.css';var Video=/*#__PURE__*/function(_React$Component){_inherits(Video,_React$Component);function Video(){var _getPrototypeOf2;var _this;_classCallCheck(this,Video);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Video)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.onClientUpdateVideoThumbnailBlob=function(update){var thumbnail=_this.props.video.thumbnail;var fileId=update.fileId;if(!thumbnail)return;if(thumbnail.photo&&thumbnail.photo.id===fileId){_this.forceUpdate();}};return _this;}_createClass(Video,[{key:\"componentDidMount\",value:function componentDidMount(){FileStore.on('clientUpdateVideoThumbnailBlob',this.onClientUpdateVideoThumbnailBlob);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){FileStore.removeListener('clientUpdateVideoThumbnailBlob',this.onClientUpdateVideoThumbnailBlob);}},{key:\"render\",value:function render(){var _this$props=this.props,displaySize=_this$props.displaySize,openMedia=_this$props.openMedia,style=_this$props.style;var _this$props$video=this.props.video,thumbnail=_this$props$video.thumbnail,video=_this$props$video.video,width=_this$props$video.width,height=_this$props$video.height,duration=_this$props$video.duration;var fitPhotoSize=getFitSize(thumbnail||{width:width,height:height},displaySize);if(!fitPhotoSize)return null;var videoStyle=_objectSpread({width:fitPhotoSize.width,height:fitPhotoSize.height},style);var file=thumbnail?thumbnail.photo:null;var blob=file?FileStore.getBlob(file.id)||file.blob:null;var src=FileStore.getBlobUrl(blob);var isBlurred=isBlurredThumbnail(thumbnail);return React.createElement(\"div\",{className:\"video\",style:videoStyle,onClick:openMedia},React.createElement(\"img\",{className:classNames('video-preview',{'media-blurred':isBlurred}),src:src,alt:\"\"}),React.createElement(\"div\",{className:\"video-play\"},React.createElement(PlayArrowIcon,null)),React.createElement(\"div\",{className:\"video-meta\"},getDurationString(duration)+' '+getFileSize(video)));}}]);return Video;}(React.Component);Video.defaultProps={size:PHOTO_SIZE,displaySize:PHOTO_DISPLAY_SIZE};export default Video;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Message/Media/Video.js"],"names":["React","classNames","PlayArrowIcon","getFitSize","getDurationString","getFileSize","isBlurredThumbnail","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","FileStore","Video","onClientUpdateVideoThumbnailBlob","update","thumbnail","props","video","fileId","photo","id","forceUpdate","on","removeListener","displaySize","openMedia","style","width","height","duration","fitPhotoSize","videoStyle","file","blob","getBlob","src","getBlobUrl","isBlurred","Component","defaultProps","size"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport { getFitSize, getDurationString } from '../../../Utils/Common';\nimport { getFileSize } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport FileStore from '../../../Stores/FileStore';\nimport './Video.css';\n\nclass Video extends React.Component {\n    componentDidMount() {\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateVideoThumbnailBlob);\n    }\n\n    onClientUpdateVideoThumbnailBlob = update => {\n        const { thumbnail } = this.props.video;\n        const { fileId } = update;\n\n        if (!thumbnail) return;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { displaySize, openMedia, style } = this.props;\n        const { thumbnail, video, width, height, duration } = this.props.video;\n\n        const fitPhotoSize = getFitSize(thumbnail || { width: width, height: height }, displaySize);\n        if (!fitPhotoSize) return null;\n\n        const videoStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        const file = thumbnail ? thumbnail.photo : null;\n        const blob = file ? FileStore.getBlob(file.id) || file.blob : null;\n        const src = FileStore.getBlobUrl(blob);\n        const isBlurred = isBlurredThumbnail(thumbnail);\n\n        return (\n            <div className='video' style={videoStyle} onClick={openMedia}>\n                <img className={classNames('video-preview', { 'media-blurred': isBlurred })} src={src} alt='' />\n                <div className='video-play'>\n                    <PlayArrowIcon />\n                </div>\n                <div className='video-meta'>{getDurationString(duration) + ' ' + getFileSize(video)}</div>\n            </div>\n        );\n    }\n}\n\nVideo.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    video: PropTypes.object.isRequired,\n    openMedia: PropTypes.func.isRequired,\n    size: PropTypes.number,\n    displaySize: PropTypes.number\n};\n\nVideo.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE\n};\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}