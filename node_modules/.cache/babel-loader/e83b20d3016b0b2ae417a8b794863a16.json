{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass StickerStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.stickerSet = null;\n      this.hint = null;\n      this.animationData = new WeakMap();\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateInstalledStickerSets':\n          {\n            const sticker_set_ids = update.sticker_set_ids;\n\n            if (this.stickerSet) {\n              const _this$stickerSet = this.stickerSet,\n                    id = _this$stickerSet.id,\n                    is_installed = _this$stickerSet.is_installed;\n\n              if (is_installed !== sticker_set_ids.some(x => x === id)) {\n                this.stickerSet = Object.assign({}, this.stickerSet, {\n                  is_installed: !is_installed\n                });\n              }\n            }\n\n            this.emit('updateInstalledStickerSets', update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateStickerSend':\n          {\n            this.emit('clientUpdateStickerSend', update);\n            break;\n          }\n\n        case 'clientUpdateLocalStickersHint':\n          {\n            const hint = update.hint;\n            this.hint = hint;\n            this.emit('clientUpdateLocalStickersHint', update);\n            break;\n          }\n\n        case 'clientUpdateRemoteStickersHint':\n          {\n            const hint = update.hint;\n\n            if (this.hint && this.hint.timestamp === hint.timestamp) {\n              this.hint = Object.assign({}, this.hint, {\n                foundStickers: hint.stickers\n              });\n            }\n\n            this.emit('clientUpdateRemoteStickersHint', update);\n            break;\n          }\n\n        case 'clientUpdateStickerSet':\n          {\n            const stickerSet = update.stickerSet;\n            this.stickerSet = stickerSet;\n            this.emit('clientUpdateStickerSet', update);\n            break;\n          }\n\n        case 'clientUpdateStickerSetPosition':\n          {\n            this.emit('clientUpdateStickerSetPosition', update);\n            break;\n          }\n\n        case 'clientUpdateStickerPreview':\n          {\n            this.emit('clientUpdateStickerPreview', update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  getAnimationData(key) {\n    return this.animationData.get(key);\n  }\n\n  setAnimationData(key, data) {\n    this.animationData.set(key, data);\n  }\n\n}\n\nconst store = new StickerStore();\nwindow.sticker = store;\nexport default store;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Stores/StickerStore.js"],"names":["EventEmitter","TdLibController","StickerStore","constructor","reset","stickerSet","hint","animationData","WeakMap","onUpdate","update","authorization_state","sticker_set_ids","id","is_installed","some","x","Object","assign","emit","onClientUpdate","timestamp","foundStickers","stickers","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","getAnimationData","key","get","setAnimationData","data","set","store","window","sticker"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass StickerStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.stickerSet = null;\n        this.hint = null;\n        this.animationData = new WeakMap();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateInstalledStickerSets': {\n                const { sticker_set_ids } = update;\n                if (this.stickerSet) {\n                    const { id, is_installed } = this.stickerSet;\n                    if (is_installed !== sticker_set_ids.some(x => x === id)) {\n                        this.stickerSet = Object.assign({}, this.stickerSet, { is_installed: !is_installed });\n                    }\n                }\n\n                this.emit('updateInstalledStickerSets', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateStickerSend': {\n                this.emit('clientUpdateStickerSend', update);\n                break;\n            }\n            case 'clientUpdateLocalStickersHint': {\n                const { hint } = update;\n\n                this.hint = hint;\n\n                this.emit('clientUpdateLocalStickersHint', update);\n                break;\n            }\n            case 'clientUpdateRemoteStickersHint': {\n                const { hint } = update;\n\n                if (this.hint && this.hint.timestamp === hint.timestamp) {\n                    this.hint = Object.assign({}, this.hint, { foundStickers: hint.stickers });\n                }\n\n                this.emit('clientUpdateRemoteStickersHint', update);\n                break;\n            }\n            case 'clientUpdateStickerSet': {\n                const { stickerSet } = update;\n\n                this.stickerSet = stickerSet;\n\n                this.emit('clientUpdateStickerSet', update);\n                break;\n            }\n            case 'clientUpdateStickerSetPosition': {\n                this.emit('clientUpdateStickerSetPosition', update);\n                break;\n            }\n            case 'clientUpdateStickerPreview': {\n                this.emit('clientUpdateStickerPreview', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    getAnimationData(key) {\n        return this.animationData.get(key);\n    }\n\n    setAnimationData(key, data) {\n        this.animationData.set(key, data);\n    }\n}\n\nconst store = new StickerStore();\nwindow.sticker = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}