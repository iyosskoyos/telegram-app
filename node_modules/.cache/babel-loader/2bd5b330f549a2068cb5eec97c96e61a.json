{"ast":null,"code":"import _regeneratorRuntime from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */ /* eslint-disable */import pako from'pako';self.addEventListener('message',function(_ref){var _ref$data=_ref.data,key=_ref$data.key,blob=_ref$data.blob;var reader=new FileReader();reader.onload=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{result=pako.inflate(e.target.result,{to:'string'});postMessage({key:key,result:result});}catch(err){postMessage({key:key,error:true,msg:err.toString()});}case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}();if(typeof blob!=\"undefined\")reader.readAsArrayBuffer(blob);});function PakoWorker(props){this.onmessage=function(_ref3){var _ref3$data=_ref3.data,key=_ref3$data.key,blob=_ref3$data.blob;var reader=new FileReader();reader.onload=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:try{result=pako.inflate(e.target.result,{to:'string'});postMessage({key:key,result:result});}catch(err){postMessage({key:key,error:true,msg:err.toString()});}case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref4.apply(this,arguments);};}();reader.readAsArrayBuffer(blob);};}export default PakoWorker;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Workers/PakoWorker.js"],"names":["pako","self","addEventListener","data","key","blob","reader","FileReader","onload","e","result","inflate","target","to","postMessage","err","error","msg","toString","readAsArrayBuffer","PakoWorker","props","onmessage"],"mappings":"iOAAA;;;;;IAOA,oBACA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CAEAC,IAAI,CAACC,gBAAL,CAAsB,SAAtB,CAAiC,cAA6B,oBAA1BC,IAA0B,CAAlBC,GAAkB,WAAlBA,GAAkB,CAAbC,IAAa,WAAbA,IAAa,CAC1D,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACAD,MAAM,CAACE,MAAP,2FAAgB,iBAAMC,CAAN,6HACZ,GAAI,CACMC,MADN,CACeV,IAAI,CAACW,OAAL,CAAaF,CAAC,CAACG,MAAF,CAASF,MAAtB,CAA8B,CAAEG,EAAE,CAAE,QAAN,CAA9B,CADf,CAEAC,WAAW,CAAC,CAAEV,GAAG,CAAHA,GAAF,CAAOM,MAAM,CAAEA,MAAf,CAAD,CAAX,CACH,CAAC,MAAOK,GAAP,CAAY,CACVD,WAAW,CAAC,CAAEV,GAAG,CAAHA,GAAF,CAAOY,KAAK,CAAE,IAAd,CAAoBC,GAAG,CAAEF,GAAG,CAACG,QAAJ,EAAzB,CAAD,CAAX,CACH,CANW,sDAAhB,gEAQA,GAAG,MAAOb,CAAAA,IAAP,EAAa,WAAhB,CACAC,MAAM,CAACa,iBAAP,CAAyBd,IAAzB,EACH,CAZD,EAcA,QAASe,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CAC1B,KAAKC,SAAL,CAAe,eAA6B,sBAA1BnB,IAA0B,CAAlBC,GAAkB,YAAlBA,GAAkB,CAAbC,IAAa,YAAbA,IAAa,CACxC,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACAD,MAAM,CAACE,MAAP,2FAAgB,kBAAMC,CAAN,iIACnB,GAAI,CACMC,MADN,CACeV,IAAI,CAACW,OAAL,CAAaF,CAAC,CAACG,MAAF,CAASF,MAAtB,CAA8B,CAAEG,EAAE,CAAE,QAAN,CAA9B,CADf,CAEAC,WAAW,CAAC,CAAEV,GAAG,CAAHA,GAAF,CAAOM,MAAM,CAAEA,MAAf,CAAD,CAAX,CACH,CAAC,MAAOK,GAAP,CAAY,CACVD,WAAW,CAAC,CAAEV,GAAG,CAAHA,GAAF,CAAOY,KAAK,CAAE,IAAd,CAAoBC,GAAG,CAAEF,GAAG,CAACG,QAAJ,EAAzB,CAAD,CAAX,CACH,CANkB,wDAAhB,iEAQAZ,MAAM,CAACa,iBAAP,CAAyBd,IAAzB,EACH,CAXD,CAYA,CAED,cAAee,CAAAA,UAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable */\nimport pako from 'pako';\n\nself.addEventListener('message', ({ data: { key, blob } }) => {\n    const reader = new FileReader();\n    reader.onload = async e => {\n        try {\n            const result = pako.inflate(e.target.result, { to: 'string' });\n            postMessage({ key, result: result });\n        } catch (err) {\n            postMessage({ key, error: true, msg: err.toString() });\n        }\n    };\n    if(typeof blob!=\"undefined\")\n    reader.readAsArrayBuffer(blob);\n});\n\nfunction PakoWorker(props) {\n\tthis.onmessage=({ data: { key, blob } }) => {\n\t    const reader = new FileReader();\n\t    reader.onload = async e => {\n\t\ttry {\n\t\t    const result = pako.inflate(e.target.result, { to: 'string' });\n\t\t    postMessage({ key, result: result });\n\t\t} catch (err) {\n\t\t    postMessage({ key, error: true, msg: err.toString() });\n\t\t}\n\t    };\n\t    reader.readAsArrayBuffer(blob);\n\t}\n}\n\nexport default PakoWorker;\n"]},"metadata":{},"sourceType":"module"}