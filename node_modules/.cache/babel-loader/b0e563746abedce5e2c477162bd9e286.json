{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/ColumnMiddle/InputBoxControl.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport emojiRegex from 'emoji-regex';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport SendIcon from '@material-ui/icons/Send';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport AttachButton from './../ColumnMiddle/AttachButton';\nimport CreatePollDialog from '../Popup/CreatePollDialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBoxHeader from './InputBoxHeader';\nimport OutputTypingManager from '../../Utils/OutputTypingManager';\nimport { getSize, readImageSize } from '../../Utils/Common';\nimport { getChatDraft, getChatDraftReplyToMessageId, isMeChat, isPrivateChat } from '../../Utils/Chat';\nimport { borderStyle } from '../Theme';\nimport { PHOTO_SIZE } from '../../Constants';\nimport MessageStore from '../../Stores/MessageStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InputBoxControl.css';\nconst EmojiPickerButton = React.lazy(() => import('./../ColumnMiddle/EmojiPickerButton'));\n\nconst styles = theme => _objectSpread({\n  iconButton: {\n    margin: '8px 0'\n  },\n  closeIconButton: {\n    margin: 0\n  }\n}, borderStyle(theme));\n\nclass InputBoxControl extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateStickerSend = update => {\n      const item = update.sticker;\n      if (!item) return;\n      const sticker = item.sticker,\n            thumbnail = item.thumbnail,\n            width = item.width,\n            height = item.height;\n      if (!sticker) return;\n      this.newMessageRef.current.innerText = null;\n      this.newMessageRef.current.textContent = null;\n      this.innerHTML = null;\n      const content = {\n        '@type': 'inputMessageSticker',\n        sticker: {\n          '@type': 'inputFileId',\n          id: sticker.id\n        },\n        width,\n        height\n      };\n\n      if (thumbnail) {\n        const thumbnailWidth = thumbnail.width,\n              thumbnailHeight = thumbnail.height,\n              photo = thumbnail.photo;\n        content.thumbnail = {\n          thumbnail: {\n            '@type': 'inputFileId',\n            id: photo.id\n          },\n          width: thumbnailWidth,\n          height: thumbnailHeight\n        };\n      }\n\n      this.onSendInternal(content, true, result => {});\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateLocalStickersHint',\n        hint: null\n      });\n    };\n\n    this.onClientUpdateReply = update => {\n      const currentChatId = this.state.chatId;\n      const chatId = update.chatId,\n            messageId = update.messageId;\n\n      if (currentChatId !== chatId) {\n        return;\n      }\n\n      this.setState({\n        replyToMessageId: messageId\n      });\n\n      if (messageId) {\n        this.setInputFocus();\n      }\n    };\n\n    this.onClientUpdateChatId = update => {\n      const chatId = this.state.chatId;\n      if (chatId === update.nextChatId) return;\n      this.innerHTML = null;\n      this.setState({\n        chatId: update.nextChatId,\n        replyToMessageId: getChatDraftReplyToMessageId(update.nextChatId),\n        openPasteDialog: false\n      });\n    };\n\n    this.setDraft = () => {\n      const chatId = this.state.chatId;\n      const element = this.newMessageRef.current;\n      const draft = getChatDraft(chatId);\n\n      if (draft) {\n        element.innerText = draft.text;\n        this.innerHTML = draft.text;\n      } else {\n        element.innerText = null;\n        this.innerHTML = null;\n      }\n    };\n\n    this.setInputFocus = () => {\n      setTimeout(() => {\n        if (this.newMessageRef.current) {\n          const element = this.newMessageRef.current;\n\n          if (element.childNodes.length > 0) {\n            const range = document.createRange();\n            range.setStart(element.childNodes[0], element.childNodes[0].length);\n            range.collapse(true);\n            const selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }\n\n          element.focus();\n        }\n      }, 100);\n    };\n\n    this.setChatDraftMessage = chatDraftMessage => {\n      if (!chatDraftMessage) return;\n      const chatId = chatDraftMessage.chatId,\n            draftMessage = chatDraftMessage.draftMessage;\n      if (!chatId) return;\n      TdLibController.send({\n        '@type': 'setChatDraftMessage',\n        chat_id: chatId,\n        draft_message: draftMessage\n      });\n    };\n\n    this.getNewChatDraftMessage = (chatId, replyToMessageId) => {\n      let chat = ChatStore.get(chatId);\n      if (!chat) return;\n      const newDraft = this.getInputText();\n      let previousDraft = '';\n      let previousReplyToMessageId = 0;\n      const draft_message = chat.draft_message;\n\n      if (draft_message && draft_message.input_message_text && draft_message.input_message_text.text) {\n        const reply_to_message_id = draft_message.reply_to_message_id,\n              input_message_text = draft_message.input_message_text;\n        previousReplyToMessageId = reply_to_message_id;\n\n        if (input_message_text && input_message_text.text) {\n          previousDraft = input_message_text.text.text;\n        }\n      }\n\n      if (newDraft !== previousDraft || replyToMessageId !== previousReplyToMessageId) {\n        const draftMessage = {\n          '@type': 'draftMessage',\n          reply_to_message_id: replyToMessageId,\n          input_message_text: {\n            '@type': 'inputMessageText',\n            text: {\n              '@type': 'formattedText',\n              text: newDraft,\n              entities: null\n            },\n            disable_web_page_preview: true,\n            clear_draft: false\n          }\n        };\n        return {\n          chatId: chatId,\n          draftMessage: draftMessage\n        };\n      }\n\n      return null;\n    };\n\n    this.handleSubmit = () => {\n      let text = this.getInputText();\n      this.newMessageRef.current.innerText = null;\n      this.newMessageRef.current.textContent = null;\n      this.innerHTML = null;\n      this.handleInput();\n      if (!text) return;\n      if (!text.trim()) return;\n      const content = {\n        '@type': 'inputMessageText',\n        text: {\n          '@type': 'formattedText',\n          text: text,\n          entities: null\n        },\n        disable_web_page_preview: false,\n        clear_draft: true\n      };\n      this.onSendInternal(content, false, result => {});\n    };\n\n    this.handleAttachPoll = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateNewPoll'\n      });\n    };\n\n    this.handleAttachPhoto = () => {\n      if (!this.attachPhotoRef) return;\n      this.attachPhotoRef.current.click();\n    };\n\n    this.handleAttachPhotoComplete = () => {\n      let files = this.attachPhotoRef.current.files;\n      if (files.length === 0) return;\n      Array.from(files).forEach(file => {\n        readImageSize(file, result => {\n          this.handleSendPhoto(result);\n        });\n      });\n      this.attachPhotoRef.current.value = '';\n    };\n\n    this.handleAttachDocument = () => {\n      if (!this.attachDocumentRef) return;\n      this.attachDocumentRef.current.click();\n    };\n\n    this.handleAttachDocumentComplete = () => {\n      let files = this.attachDocumentRef.current.files;\n      if (files.length === 0) return;\n      Array.from(files).forEach(file => {\n        this.handleSendDocument(file);\n      });\n      this.attachDocumentRef.current.value = '';\n    };\n\n    this.handleKeyUp = () => {\n      const chatId = this.state.chatId;\n      if (isMeChat(chatId)) return;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return;\n      const innerText = this.newMessageRef.current.innerText;\n      const innerHTML = this.newMessageRef.current.innerHTML;\n\n      if (innerText && innerText === '\\n' && innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n        this.newMessageRef.current.innerHTML = '';\n      }\n\n      if (!innerText) return;\n      const typingManager = chat.OutputTypingManager || (chat.OutputTypingManager = new OutputTypingManager(chat.id));\n      typingManager.setTyping({\n        '@type': 'chatActionTyping'\n      });\n    };\n\n    this.handleKeyDown = e => {\n      const innerText = this.newMessageRef.current.innerText;\n      const innerHTML = this.newMessageRef.current.innerHTML;\n      this.innerHTML = innerHTML;\n\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        this.handleSubmit();\n      }\n    };\n\n    this.handleSendPhoto = file => {\n      if (!file) return;\n      const content = {\n        '@type': 'inputMessagePhoto',\n        photo: {\n          '@type': 'inputFileBlob',\n          name: file.name,\n          data: file\n        },\n        width: file.photoWidth,\n        height: file.photoHeight\n      };\n      this.onSendInternal(content, true, result => {\n        const cachedMessage = MessageStore.get(result.chat_id, result.id);\n\n        if (cachedMessage != null) {\n          this.handleSendingMessage(cachedMessage, file);\n        }\n\n        FileStore.uploadFile(result.content.photo.sizes[0].photo.id, result);\n      });\n    };\n\n    this.handleSendPoll = poll => {\n      this.onSendInternal(poll, true, () => {});\n    };\n\n    this.handleSendDocument = file => {\n      if (!file) return;\n      const content = {\n        '@type': 'inputMessageDocument',\n        document: {\n          '@type': 'inputFileBlob',\n          name: file.name,\n          data: file\n        }\n      };\n      this.onSendInternal(content, true, result => FileStore.uploadFile(result.content.document.document.id, result));\n    };\n\n    this.handlePaste = event => {\n      const items = (event.clipboardData || event.originalEvent.clipboardData).items;\n      const files = [];\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].kind.indexOf('file') === 0) {\n          files.push(items[i].getAsFile());\n        }\n      }\n\n      if (files.length > 0) {\n        event.preventDefault();\n        this.files = files;\n        this.setState({\n          openPasteDialog: true\n        });\n        return;\n      }\n\n      const plainText = event.clipboardData.getData('text/plain');\n\n      if (plainText) {\n        event.preventDefault();\n        document.execCommand('insertHTML', false, plainText);\n        this.innerHTML = plainText;\n        return;\n      }\n    };\n\n    this.handlePasteContinue = () => {\n      this.handleClosePaste();\n      const files = this.files;\n      if (!files) return;\n      if (!files.length) return;\n      files.forEach(file => {\n        this.handleSendDocument(file);\n      });\n      this.files = null;\n    };\n\n    this.handleClosePaste = () => {\n      this.setState({\n        openPasteDialog: false\n      });\n    };\n\n    this.handleSendingMessage = (message, blob) => {\n      if (message && message.sending_state && message.sending_state['@type'] === 'messageSendingStatePending') {\n        if (message.content && message.content['@type'] === 'messagePhoto' && message.content.photo) {\n          let size = getSize(message.content.photo.sizes, PHOTO_SIZE);\n          if (!size) return;\n          let file = size.photo;\n\n          if (file && file.local && file.local.is_downloading_completed && !file.blob) {\n            file.blob = blob;\n            FileStore.updatePhotoBlob(message.chat_id, message.id, file.id);\n          }\n        }\n      }\n    };\n\n    this.onSendInternal = async (content, clearDraft, callback) => {\n      const _this$state = this.state,\n            chatId = _this$state.chatId,\n            replyToMessageId = _this$state.replyToMessageId;\n      if (!chatId) return;\n      if (!content) return;\n\n      try {\n        await ApplicationStore.invokeScheduledAction(\"clientUpdateClearHistory chatId=\".concat(chatId));\n        let result = await TdLibController.send({\n          '@type': 'sendMessage',\n          chat_id: chatId,\n          reply_to_message_id: replyToMessageId,\n          input_message_content: content\n        });\n        this.setState({\n          replyToMessageId: 0\n        }, () => {\n          if (clearDraft) {\n            const newChatDraftMessage = this.getNewChatDraftMessage(this.state.chatId, this.state.replyToMessageId);\n            this.setChatDraftMessage(newChatDraftMessage);\n          }\n        }); //MessageStore.set(result);\n\n        TdLibController.send({\n          '@type': 'viewMessages',\n          chat_id: chatId,\n          message_ids: [result.id]\n        });\n        callback(result);\n      } catch (error) {\n        alert('sendMessage error ' + JSON.stringify(error));\n      }\n    };\n\n    this.handleEmojiSelect = emoji => {\n      if (!emoji) return;\n      this.newMessageRef.current.innerText += emoji.native;\n      this.handleInput();\n    };\n\n    this.handleInput = async event => {\n      const innerText = this.newMessageRef.current.innerText;\n\n      if (!innerText || innerText.length > 11) {\n        const hint = StickerStore.hint;\n\n        if (hint) {\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateLocalStickersHint',\n            hint: null\n          });\n        }\n\n        return;\n      }\n\n      const t0 = performance.now();\n      const regex = emojiRegex();\n      let match = regex.exec(innerText);\n      const t1 = performance.now();\n      console.log('Matched ' + (t1 - t0) + 'ms', match);\n\n      if (!match || innerText !== match[0]) {\n        const hint = StickerStore.hint;\n\n        if (hint) {\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateLocalStickersHint',\n            hint: null\n          });\n        }\n\n        return;\n      }\n\n      const timestamp = Date.now();\n      TdLibController.send({\n        '@type': 'getStickers',\n        emoji: match[0],\n        limit: 100\n      }).then(stickers => {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateLocalStickersHint',\n          hint: {\n            timestamp,\n            emoji: match[0],\n            stickers\n          }\n        });\n      });\n      TdLibController.send({\n        '@type': 'searchStickers',\n        emoji: match[0],\n        limit: 100\n      }).then(stickers => {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateRemoteStickersHint',\n          hint: {\n            timestamp,\n            emoji: match[0],\n            stickers\n          }\n        });\n      });\n    };\n\n    this.attachDocumentRef = React.createRef();\n    this.attachPhotoRef = React.createRef();\n    this.newMessageRef = React.createRef();\n\n    const _chatId = ApplicationStore.getChatId();\n\n    this.innerHTML = null;\n    this.state = {\n      chatId: _chatId,\n      replyToMessageId: getChatDraftReplyToMessageId(_chatId),\n      openPasteDialog: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props = this.props,\n          theme = _this$props.theme,\n          t = _this$props.t;\n    const _this$state2 = this.state,\n          chatId = _this$state2.chatId,\n          replyToMessageId = _this$state2.replyToMessageId,\n          openPasteDialog = _this$state2.openPasteDialog;\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    if (nextProps.t !== t) {\n      return true;\n    }\n\n    if (nextState.chatId !== chatId) {\n      return true;\n    }\n\n    if (nextState.replyToMessageId !== replyToMessageId) {\n      return true;\n    }\n\n    if (nextState.openPasteDialog !== openPasteDialog) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    //console.log('Perf componentDidMount');\n    ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    MessageStore.on('clientUpdateReply', this.onClientUpdateReply);\n    StickerStore.on('clientUpdateStickerSend', this.onClientUpdateStickerSend);\n    this.setInputFocus();\n    this.setDraft();\n    this.handleInput();\n  }\n\n  componentWillUnmount() {\n    const newChatDraftMessage = this.getNewChatDraftMessage(this.state.chatId, this.state.replyToMessageId);\n    this.setChatDraftMessage(newChatDraftMessage);\n    ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    MessageStore.removeListener('clientUpdateReply', this.onClientUpdateReply);\n    StickerStore.removeListener('clientUpdateStickerSend', this.onClientUpdateStickerSend);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    //console.log('Perf componentDidUpdate');\n    this.setChatDraftMessage(snapshot);\n\n    if (prevState.chatId !== this.state.chatId) {\n      this.setInputFocus();\n      this.setDraft();\n      this.handleInput();\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    if (prevState.chatId === this.state.chatId) return null;\n    return this.getNewChatDraftMessage(prevState.chatId, prevState.replyToMessageId);\n  }\n\n  getInputText() {\n    let innerText = this.newMessageRef.current.innerText;\n    let innerHTML = this.newMessageRef.current.innerHTML;\n\n    if (innerText && innerText === '\\n' && innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n      this.newMessageRef.current.innerHTML = '';\n    }\n\n    return innerText;\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          classes = _this$props2.classes,\n          t = _this$props2.t;\n    const _this$state3 = this.state,\n          chatId = _this$state3.chatId,\n          replyToMessageId = _this$state3.replyToMessageId,\n          openPasteDialog = _this$state3.openPasteDialog;\n    const content = this.innerHTML !== null ? this.innerHTML : null;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classNames(classes.borderColor, 'inputbox'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(InputBoxHeader, {\n      chatId: chatId,\n      messageId: replyToMessageId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"inputbox-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inputbox-left-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, React.createElement(React.Suspense, {\n      fallback: React.createElement(IconButton, {\n        className: classes.iconButton,\n        \"aria-label\": \"Emoticon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618\n        },\n        __self: this\n      }, React.createElement(InsertEmoticonIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(EmojiPickerButton, {\n      onSelect: this.handleEmojiSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"inputbox-middle-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"inputbox-message\",\n      ref: this.newMessageRef,\n      key: new Date(),\n      placeholder: t('Message'),\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      onKeyDown: this.handleKeyDown,\n      onKeyUp: this.handleKeyUp,\n      onPaste: this.handlePaste,\n      onInput: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, content)), React.createElement(\"div\", {\n      className: \"inputbox-right-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: this.attachDocumentRef,\n      className: \"inputbox-attach-button\",\n      type: \"file\",\n      multiple: \"multiple\",\n      onChange: this.handleAttachDocumentComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      ref: this.attachPhotoRef,\n      className: \"inputbox-attach-button\",\n      type: \"file\",\n      multiple: \"multiple\",\n      accept: \"image/*\",\n      onChange: this.handleAttachPhotoComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }), React.createElement(AttachButton, {\n      chatId: chatId,\n      onAttachPhoto: this.handleAttachPhoto,\n      onAttachDocument: this.handleAttachDocument,\n      onAttachPoll: this.handleAttachPoll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      color: \"primary\",\n      className: classes.iconButton,\n      \"aria-label\": \"Send\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(SendIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }))))), !isPrivateChat(chatId) && React.createElement(CreatePollDialog, {\n      onSend: this.handleSendPoll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: openPasteDialog,\n      onClose: this.handleClosePaste,\n      \"aria-labelledby\": \"delete-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"delete-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, t('AppName')), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, this.files && this.files.length > 1 ? 'Are you sure you want to send files?' : 'Are you sure you want to send file?')), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClosePaste,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, t('Cancel')), React.createElement(Button, {\n      onClick: this.handlePasteContinue,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, t('Ok')))));\n  }\n\n}\n\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(InputBoxControl);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/ColumnMiddle/InputBoxControl.js"],"names":["React","Component","classNames","compose","emojiRegex","withTranslation","withStyles","SendIcon","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","InsertEmoticonIcon","AttachButton","CreatePollDialog","IconButton","InputBoxHeader","OutputTypingManager","getSize","readImageSize","getChatDraft","getChatDraftReplyToMessageId","isMeChat","isPrivateChat","borderStyle","PHOTO_SIZE","MessageStore","ChatStore","ApplicationStore","FileStore","StickerStore","TdLibController","EmojiPickerButton","lazy","styles","theme","iconButton","margin","closeIconButton","InputBoxControl","constructor","props","onClientUpdateStickerSend","update","item","sticker","thumbnail","width","height","newMessageRef","current","innerText","textContent","innerHTML","content","id","thumbnailWidth","thumbnailHeight","photo","onSendInternal","result","clientUpdate","hint","onClientUpdateReply","currentChatId","state","chatId","messageId","setState","replyToMessageId","setInputFocus","onClientUpdateChatId","nextChatId","openPasteDialog","setDraft","element","draft","text","setTimeout","childNodes","length","range","document","createRange","setStart","collapse","selection","window","getSelection","removeAllRanges","addRange","focus","setChatDraftMessage","chatDraftMessage","draftMessage","send","chat_id","draft_message","getNewChatDraftMessage","chat","get","newDraft","getInputText","previousDraft","previousReplyToMessageId","input_message_text","reply_to_message_id","entities","disable_web_page_preview","clear_draft","handleSubmit","handleInput","trim","handleAttachPoll","handleAttachPhoto","attachPhotoRef","click","handleAttachPhotoComplete","files","Array","from","forEach","file","handleSendPhoto","value","handleAttachDocument","attachDocumentRef","handleAttachDocumentComplete","handleSendDocument","handleKeyUp","typingManager","setTyping","handleKeyDown","e","key","shiftKey","preventDefault","name","data","photoWidth","photoHeight","cachedMessage","handleSendingMessage","uploadFile","sizes","handleSendPoll","poll","handlePaste","event","items","clipboardData","originalEvent","i","kind","indexOf","push","getAsFile","plainText","getData","execCommand","handlePasteContinue","handleClosePaste","message","blob","sending_state","size","local","is_downloading_completed","updatePhotoBlob","clearDraft","callback","invokeScheduledAction","input_message_content","newChatDraftMessage","message_ids","error","alert","JSON","stringify","handleEmojiSelect","emoji","native","t0","performance","now","regex","match","exec","t1","console","log","timestamp","Date","limit","then","stickers","createRef","getChatId","shouldComponentUpdate","nextProps","nextState","t","componentDidMount","on","componentWillUnmount","removeListener","componentDidUpdate","prevProps","prevState","snapshot","getSnapshotBeforeUpdate","render","classes","borderColor","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport emojiRegex from 'emoji-regex';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport SendIcon from '@material-ui/icons/Send';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport AttachButton from './../ColumnMiddle/AttachButton';\nimport CreatePollDialog from '../Popup/CreatePollDialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBoxHeader from './InputBoxHeader';\nimport OutputTypingManager from '../../Utils/OutputTypingManager';\nimport { getSize, readImageSize } from '../../Utils/Common';\nimport { getChatDraft, getChatDraftReplyToMessageId, isMeChat, isPrivateChat } from '../../Utils/Chat';\nimport { borderStyle } from '../Theme';\nimport { PHOTO_SIZE } from '../../Constants';\nimport MessageStore from '../../Stores/MessageStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InputBoxControl.css';\n\nconst EmojiPickerButton = React.lazy(() => import('./../ColumnMiddle/EmojiPickerButton'));\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0'\n    },\n    closeIconButton: {\n        margin: 0\n    },\n    ...borderStyle(theme)\n});\n\nclass InputBoxControl extends Component {\n    constructor(props) {\n        super(props);\n\n        this.attachDocumentRef = React.createRef();\n        this.attachPhotoRef = React.createRef();\n        this.newMessageRef = React.createRef();\n\n        const chatId = ApplicationStore.getChatId();\n\n        this.innerHTML = null;\n        this.state = {\n            chatId: chatId,\n            replyToMessageId: getChatDraftReplyToMessageId(chatId),\n            openPasteDialog: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { theme, t } = this.props;\n        const { chatId, replyToMessageId, openPasteDialog } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextProps.t !== t) {\n            return true;\n        }\n\n        if (nextState.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextState.replyToMessageId !== replyToMessageId) {\n            return true;\n        }\n\n        if (nextState.openPasteDialog !== openPasteDialog) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        //console.log('Perf componentDidMount');\n\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n        MessageStore.on('clientUpdateReply', this.onClientUpdateReply);\n        StickerStore.on('clientUpdateStickerSend', this.onClientUpdateStickerSend);\n\n        this.setInputFocus();\n        this.setDraft();\n        this.handleInput();\n    }\n\n    componentWillUnmount() {\n        const newChatDraftMessage = this.getNewChatDraftMessage(this.state.chatId, this.state.replyToMessageId);\n        this.setChatDraftMessage(newChatDraftMessage);\n\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n        MessageStore.removeListener('clientUpdateReply', this.onClientUpdateReply);\n        StickerStore.removeListener('clientUpdateStickerSend', this.onClientUpdateStickerSend);\n    }\n\n    onClientUpdateStickerSend = update => {\n        const { sticker: item } = update;\n        if (!item) return;\n\n        const { sticker, thumbnail, width, height } = item;\n        if (!sticker) return;\n\n        this.newMessageRef.current.innerText = null;\n        this.newMessageRef.current.textContent = null;\n        this.innerHTML = null;\n\n        const content = {\n            '@type': 'inputMessageSticker',\n            sticker: {\n                '@type': 'inputFileId',\n                id: sticker.id\n            },\n            width,\n            height\n        };\n\n        if (thumbnail) {\n            const { width: thumbnailWidth, height: thumbnailHeight, photo } = thumbnail;\n\n            content.thumbnail = {\n                thumbnail: {\n                    '@type': 'inputFileId',\n                    id: photo.id\n                },\n                width: thumbnailWidth,\n                height: thumbnailHeight\n            };\n        }\n\n        this.onSendInternal(content, true, result => {});\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateLocalStickersHint',\n            hint: null\n        });\n    };\n\n    onClientUpdateReply = update => {\n        const { chatId: currentChatId } = this.state;\n        const { chatId, messageId } = update;\n\n        if (currentChatId !== chatId) {\n            return;\n        }\n\n        this.setState({ replyToMessageId: messageId });\n\n        if (messageId) {\n            this.setInputFocus();\n        }\n    };\n\n    onClientUpdateChatId = update => {\n        const { chatId } = this.state;\n        if (chatId === update.nextChatId) return;\n\n        this.innerHTML = null;\n        this.setState({\n            chatId: update.nextChatId,\n            replyToMessageId: getChatDraftReplyToMessageId(update.nextChatId),\n            openPasteDialog: false\n        });\n    };\n\n    setDraft = () => {\n        const { chatId } = this.state;\n\n        const element = this.newMessageRef.current;\n\n        const draft = getChatDraft(chatId);\n        if (draft) {\n            element.innerText = draft.text;\n            this.innerHTML = draft.text;\n        } else {\n            element.innerText = null;\n            this.innerHTML = null;\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //console.log('Perf componentDidUpdate');\n        this.setChatDraftMessage(snapshot);\n\n        if (prevState.chatId !== this.state.chatId) {\n            this.setInputFocus();\n            this.setDraft();\n            this.handleInput();\n        }\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        if (prevState.chatId === this.state.chatId) return null;\n\n        return this.getNewChatDraftMessage(prevState.chatId, prevState.replyToMessageId);\n    }\n\n    setInputFocus = () => {\n        setTimeout(() => {\n            if (this.newMessageRef.current) {\n                const element = this.newMessageRef.current;\n\n                if (element.childNodes.length > 0) {\n                    const range = document.createRange();\n                    range.setStart(element.childNodes[0], element.childNodes[0].length);\n                    range.collapse(true);\n\n                    const selection = window.getSelection();\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                }\n                element.focus();\n            }\n        }, 100);\n    };\n\n    setChatDraftMessage = chatDraftMessage => {\n        if (!chatDraftMessage) return;\n\n        const { chatId, draftMessage } = chatDraftMessage;\n        if (!chatId) return;\n\n        TdLibController.send({\n            '@type': 'setChatDraftMessage',\n            chat_id: chatId,\n            draft_message: draftMessage\n        });\n    };\n\n    getNewChatDraftMessage = (chatId, replyToMessageId) => {\n        let chat = ChatStore.get(chatId);\n        if (!chat) return;\n        const newDraft = this.getInputText();\n\n        let previousDraft = '';\n        let previousReplyToMessageId = 0;\n        const { draft_message } = chat;\n        if (draft_message && draft_message.input_message_text && draft_message.input_message_text.text) {\n            const { reply_to_message_id, input_message_text } = draft_message;\n\n            previousReplyToMessageId = reply_to_message_id;\n            if (input_message_text && input_message_text.text) {\n                previousDraft = input_message_text.text.text;\n            }\n        }\n\n        if (newDraft !== previousDraft || replyToMessageId !== previousReplyToMessageId) {\n            const draftMessage = {\n                '@type': 'draftMessage',\n                reply_to_message_id: replyToMessageId,\n                input_message_text: {\n                    '@type': 'inputMessageText',\n                    text: {\n                        '@type': 'formattedText',\n                        text: newDraft,\n                        entities: null\n                    },\n                    disable_web_page_preview: true,\n                    clear_draft: false\n                }\n            };\n\n            return { chatId: chatId, draftMessage: draftMessage };\n        }\n\n        return null;\n    };\n\n    handleSubmit = () => {\n        let text = this.getInputText();\n\n        this.newMessageRef.current.innerText = null;\n        this.newMessageRef.current.textContent = null;\n        this.innerHTML = null;\n        this.handleInput();\n\n        if (!text) return;\n        if (!text.trim()) return;\n\n        const content = {\n            '@type': 'inputMessageText',\n            text: {\n                '@type': 'formattedText',\n                text: text,\n                entities: null\n            },\n            disable_web_page_preview: false,\n            clear_draft: true\n        };\n\n        this.onSendInternal(content, false, result => {});\n    };\n\n    handleAttachPoll = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateNewPoll'\n        });\n    };\n\n    handleAttachPhoto = () => {\n        if (!this.attachPhotoRef) return;\n\n        this.attachPhotoRef.current.click();\n    };\n\n    handleAttachPhotoComplete = () => {\n        let files = this.attachPhotoRef.current.files;\n        if (files.length === 0) return;\n\n        Array.from(files).forEach(file => {\n            readImageSize(file, result => {\n                this.handleSendPhoto(result);\n            });\n        });\n\n        this.attachPhotoRef.current.value = '';\n    };\n\n    handleAttachDocument = () => {\n        if (!this.attachDocumentRef) return;\n\n        this.attachDocumentRef.current.click();\n    };\n\n    handleAttachDocumentComplete = () => {\n        let files = this.attachDocumentRef.current.files;\n        if (files.length === 0) return;\n\n        Array.from(files).forEach(file => {\n            this.handleSendDocument(file);\n        });\n\n        this.attachDocumentRef.current.value = '';\n    };\n\n    getInputText() {\n        let innerText = this.newMessageRef.current.innerText;\n        let innerHTML = this.newMessageRef.current.innerHTML;\n\n        if (innerText && innerText === '\\n' && innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n            this.newMessageRef.current.innerHTML = '';\n        }\n\n        return innerText;\n    }\n\n    handleKeyUp = () => {\n        const { chatId } = this.state;\n\n        if (isMeChat(chatId)) return;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        const innerText = this.newMessageRef.current.innerText;\n        const innerHTML = this.newMessageRef.current.innerHTML;\n\n        if (innerText && innerText === '\\n' && innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n            this.newMessageRef.current.innerHTML = '';\n        }\n\n        if (!innerText) return;\n\n        const typingManager = chat.OutputTypingManager || (chat.OutputTypingManager = new OutputTypingManager(chat.id));\n\n        typingManager.setTyping({ '@type': 'chatActionTyping' });\n    };\n\n    handleKeyDown = e => {\n        const innerText = this.newMessageRef.current.innerText;\n        const innerHTML = this.newMessageRef.current.innerHTML;\n        this.innerHTML = innerHTML;\n\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    };\n\n    handleSendPhoto = file => {\n        if (!file) return;\n\n        const content = {\n            '@type': 'inputMessagePhoto',\n            photo: { '@type': 'inputFileBlob', name: file.name, data: file },\n            width: file.photoWidth,\n            height: file.photoHeight\n        };\n\n        this.onSendInternal(content, true, result => {\n            const cachedMessage = MessageStore.get(result.chat_id, result.id);\n            if (cachedMessage != null) {\n                this.handleSendingMessage(cachedMessage, file);\n            }\n\n            FileStore.uploadFile(result.content.photo.sizes[0].photo.id, result);\n        });\n    };\n\n    handleSendPoll = poll => {\n        this.onSendInternal(poll, true, () => {});\n    };\n\n    handleSendDocument = file => {\n        if (!file) return;\n\n        const content = {\n            '@type': 'inputMessageDocument',\n            document: { '@type': 'inputFileBlob', name: file.name, data: file }\n        };\n\n        this.onSendInternal(content, true, result => FileStore.uploadFile(result.content.document.document.id, result));\n    };\n\n    handlePaste = event => {\n        const items = (event.clipboardData || event.originalEvent.clipboardData).items;\n\n        const files = [];\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].kind.indexOf('file') === 0) {\n                files.push(items[i].getAsFile());\n            }\n        }\n\n        if (files.length > 0) {\n            event.preventDefault();\n\n            this.files = files;\n            this.setState({ openPasteDialog: true });\n            return;\n        }\n\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            document.execCommand('insertHTML', false, plainText);\n            this.innerHTML = plainText;\n            return;\n        }\n    };\n\n    handlePasteContinue = () => {\n        this.handleClosePaste();\n\n        const files = this.files;\n        if (!files) return;\n        if (!files.length) return;\n\n        files.forEach(file => {\n            this.handleSendDocument(file);\n        });\n\n        this.files = null;\n    };\n\n    handleClosePaste = () => {\n        this.setState({ openPasteDialog: false });\n    };\n\n    handleSendingMessage = (message, blob) => {\n        if (message && message.sending_state && message.sending_state['@type'] === 'messageSendingStatePending') {\n            if (message.content && message.content['@type'] === 'messagePhoto' && message.content.photo) {\n                let size = getSize(message.content.photo.sizes, PHOTO_SIZE);\n                if (!size) return;\n\n                let file = size.photo;\n                if (file && file.local && file.local.is_downloading_completed && !file.blob) {\n                    file.blob = blob;\n                    FileStore.updatePhotoBlob(message.chat_id, message.id, file.id);\n                }\n            }\n        }\n    };\n\n    onSendInternal = async (content, clearDraft, callback) => {\n        const { chatId, replyToMessageId } = this.state;\n\n        if (!chatId) return;\n        if (!content) return;\n\n        try {\n            await ApplicationStore.invokeScheduledAction(`clientUpdateClearHistory chatId=${chatId}`);\n\n            let result = await TdLibController.send({\n                '@type': 'sendMessage',\n                chat_id: chatId,\n                reply_to_message_id: replyToMessageId,\n                input_message_content: content\n            });\n\n            this.setState({ replyToMessageId: 0 }, () => {\n                if (clearDraft) {\n                    const newChatDraftMessage = this.getNewChatDraftMessage(\n                        this.state.chatId,\n                        this.state.replyToMessageId\n                    );\n                    this.setChatDraftMessage(newChatDraftMessage);\n                }\n            });\n            //MessageStore.set(result);\n\n            TdLibController.send({\n                '@type': 'viewMessages',\n                chat_id: chatId,\n                message_ids: [result.id]\n            });\n\n            callback(result);\n        } catch (error) {\n            alert('sendMessage error ' + JSON.stringify(error));\n        }\n    };\n\n    handleEmojiSelect = emoji => {\n        if (!emoji) return;\n\n        this.newMessageRef.current.innerText += emoji.native;\n        this.handleInput();\n    };\n\n    handleInput = async event => {\n        const innerText = this.newMessageRef.current.innerText;\n        if (!innerText || innerText.length > 11) {\n            const { hint } = StickerStore;\n            if (hint) {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateLocalStickersHint',\n                    hint: null\n                });\n            }\n\n            return;\n        }\n\n        const t0 = performance.now();\n        const regex = emojiRegex();\n        let match = regex.exec(innerText);\n        const t1 = performance.now();\n        console.log('Matched ' + (t1 - t0) + 'ms', match);\n        if (!match || innerText !== match[0]) {\n            const { hint } = StickerStore;\n            if (hint) {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateLocalStickersHint',\n                    hint: null\n                });\n            }\n\n            return;\n        }\n\n        const timestamp = Date.now();\n        TdLibController.send({\n            '@type': 'getStickers',\n            emoji: match[0],\n            limit: 100\n        }).then(stickers => {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateLocalStickersHint',\n                hint: {\n                    timestamp,\n                    emoji: match[0],\n                    stickers\n                }\n            });\n        });\n\n        TdLibController.send({\n            '@type': 'searchStickers',\n            emoji: match[0],\n            limit: 100\n        }).then(stickers => {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateRemoteStickersHint',\n                hint: {\n                    timestamp,\n                    emoji: match[0],\n                    stickers\n                }\n            });\n        });\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { chatId, replyToMessageId, openPasteDialog } = this.state;\n\n        const content = this.innerHTML !== null ? this.innerHTML : null;\n\n        return (\n            <>\n                <div className={classNames(classes.borderColor, 'inputbox')}>\n                    <InputBoxHeader chatId={chatId} messageId={replyToMessageId} />\n                    <div className='inputbox-wrapper'>\n                        <div className='inputbox-left-column'>\n                            <React.Suspense\n                                fallback={\n                                    <IconButton className={classes.iconButton} aria-label='Emoticon'>\n                                        <InsertEmoticonIcon />\n                                    </IconButton>\n                                }>\n                                <EmojiPickerButton onSelect={this.handleEmojiSelect} />\n                            </React.Suspense>\n                        </div>\n                        <div className='inputbox-middle-column'>\n                            <div\n                                id='inputbox-message'\n                                ref={this.newMessageRef}\n                                key={new Date()}\n                                placeholder={t('Message')}\n                                contentEditable\n                                suppressContentEditableWarning\n                                onKeyDown={this.handleKeyDown}\n                                onKeyUp={this.handleKeyUp}\n                                onPaste={this.handlePaste}\n                                onInput={this.handleInput}>\n                                {content}\n                            </div>\n                        </div>\n                        <div className='inputbox-right-column'>\n                            <input\n                                ref={this.attachDocumentRef}\n                                className='inputbox-attach-button'\n                                type='file'\n                                multiple='multiple'\n                                onChange={this.handleAttachDocumentComplete}\n                            />\n                            <input\n                                ref={this.attachPhotoRef}\n                                className='inputbox-attach-button'\n                                type='file'\n                                multiple='multiple'\n                                accept='image/*'\n                                onChange={this.handleAttachPhotoComplete}\n                            />\n                            <AttachButton\n                                chatId={chatId}\n                                onAttachPhoto={this.handleAttachPhoto}\n                                onAttachDocument={this.handleAttachDocument}\n                                onAttachPoll={this.handleAttachPoll}\n                            />\n\n                            {/*<IconButton>*/}\n                            {/*<KeyboardVoiceIcon />*/}\n                            {/*</IconButton>*/}\n                            <IconButton\n                                color='primary'\n                                className={classes.iconButton}\n                                aria-label='Send'\n                                onClick={this.handleSubmit}>\n                                <SendIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                </div>\n                {!isPrivateChat(chatId) && <CreatePollDialog onSend={this.handleSendPoll} />}\n                <Dialog\n                    transitionDuration={0}\n                    open={openPasteDialog}\n                    onClose={this.handleClosePaste}\n                    aria-labelledby='delete-dialog-title'>\n                    <DialogTitle id='delete-dialog-title'>{t('AppName')}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {this.files && this.files.length > 1\n                                ? 'Are you sure you want to send files?'\n                                : 'Are you sure you want to send file?'}\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClosePaste} color='primary'>\n                            {t('Cancel')}\n                        </Button>\n                        <Button onClick={this.handlePasteContinue} color='primary'>\n                            {t('Ok')}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(InputBoxControl);\n"]},"metadata":{},"sourceType":"module"}