{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { randomString } from './Helpers'; // eslint-disable-next-line import/no-webpack-loader-syntax\n\nimport PakoWorker from './pako.worker';\nconst worker = new PakoWorker();\nconst handlers = new Map();\n\nworker.onmessage = event => {\n  const data = event.data;\n  if (!data) return;\n  const key = data.key,\n        error = data.error,\n        result = data.result,\n        msg = data.msg;\n\n  const _handlers$get = handlers.get(key),\n        resolve = _handlers$get.resolve,\n        reject = _handlers$get.reject;\n\n  handlers.delete(key);\n\n  if (!error) {\n    resolve(result);\n  } else {\n    reject(msg);\n  }\n};\n\nexport async function inflateBlob(blob) {\n  const key = randomString();\n  return new Promise((resolve, reject) => {\n    handlers.set(key, {\n      resolve,\n      reject\n    });\n    worker.postMessage({\n      key,\n      blob\n    });\n  });\n}","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Workers/BlobInflator.js"],"names":["randomString","PakoWorker","worker","handlers","Map","onmessage","event","data","key","error","result","msg","get","resolve","reject","delete","inflateBlob","blob","Promise","set","postMessage"],"mappings":"AAAA;;;;;;AAOA,SAASA,YAAT,QAA6B,WAA7B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,MAAM,GAAG,IAAID,UAAJ,EAAf;AACA,MAAME,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AAEAF,MAAM,CAACG,SAAP,GAAmBC,KAAK,IAAI;AAAA,QAChBC,IADgB,GACPD,KADO,CAChBC,IADgB;AAExB,MAAI,CAACA,IAAL,EAAW;AAFa,QAIhBC,GAJgB,GAIYD,IAJZ,CAIhBC,GAJgB;AAAA,QAIXC,KAJW,GAIYF,IAJZ,CAIXE,KAJW;AAAA,QAIJC,MAJI,GAIYH,IAJZ,CAIJG,MAJI;AAAA,QAIIC,GAJJ,GAIYJ,IAJZ,CAIII,GAJJ;;AAAA,wBAMIR,QAAQ,CAACS,GAAT,CAAaJ,GAAb,CANJ;AAAA,QAMhBK,OANgB,iBAMhBA,OANgB;AAAA,QAMPC,MANO,iBAMPA,MANO;;AAOxBX,EAAAA,QAAQ,CAACY,MAAT,CAAgBP,GAAhB;;AAEA,MAAI,CAACC,KAAL,EAAY;AACRI,IAAAA,OAAO,CAACH,MAAD,CAAP;AACH,GAFD,MAEO;AACHI,IAAAA,MAAM,CAACH,GAAD,CAAN;AACH;AACJ,CAdD;;AAgBA,OAAO,eAAeK,WAAf,CAA2BC,IAA3B,EAAiC;AACpC,QAAMT,GAAG,GAAGR,YAAY,EAAxB;AACA,SAAO,IAAIkB,OAAJ,CAAY,CAACL,OAAD,EAAUC,MAAV,KAAqB;AACpCX,IAAAA,QAAQ,CAACgB,GAAT,CAAaX,GAAb,EAAkB;AAAEK,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAlB;AACAZ,IAAAA,MAAM,CAACkB,WAAP,CAAmB;AAAEZ,MAAAA,GAAF;AAAOS,MAAAA;AAAP,KAAnB;AACH,GAHM,CAAP;AAIH","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { randomString } from './Helpers';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport PakoWorker from './pako.worker';\n\nconst worker = new PakoWorker();\nconst handlers = new Map();\n\nworker.onmessage = event => {\n    const { data } = event;\n    if (!data) return;\n\n    const { key, error, result, msg } = data;\n\n    const { resolve, reject } = handlers.get(key);\n    handlers.delete(key);\n\n    if (!error) {\n        resolve(result);\n    } else {\n        reject(msg);\n    }\n};\n\nexport async function inflateBlob(blob) {\n    const key = randomString();\n    return new Promise((resolve, reject) => {\n        handlers.set(key, { resolve, reject });\n        worker.postMessage({ key, blob });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}