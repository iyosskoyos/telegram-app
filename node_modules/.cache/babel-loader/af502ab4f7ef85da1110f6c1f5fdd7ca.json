{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/DialogContent.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getChatTypingString, getChatDraft, getLastMessageSenderName, getLastMessageContent, showChatDraft } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogContent.css';\n\nconst styles = theme => ({\n  dialogContent: {\n    color: theme.palette.text.secondary\n  }\n});\n\nclass DialogContent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClientUpdateClearHistory = update => {\n      const chatId = this.props.chatId;\n\n      if (chatId === update.chatId) {\n        this.clearHistory = update.inProgress;\n        this.forceUpdate();\n      }\n    };\n\n    this.onFastUpdatingComplete = update => {\n      this.forceUpdate();\n    };\n\n    this.onUpdate = update => {\n      const chatId = this.props.chatId;\n      if (chatId !== update.chat_id) return;\n      this.forceUpdate();\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.chatId !== this.props.chatId) {\n      return true;\n    }\n\n    if (nextProps.t !== this.props.t) {\n      return true;\n    }\n\n    if (nextProps.theme !== this.props.theme) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ChatStore.on('updateChatDraftMessage', this.onUpdate);\n    ChatStore.on('updateChatLastMessage', this.onUpdate);\n    ChatStore.on('updateChatReadInbox', this.onUpdate);\n    ChatStore.on('updateUserChatAction', this.onUpdate);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n    ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n    ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n    ChatStore.removeListener('updateUserChatAction', this.onUpdate);\n  }\n\n  render() {\n    const _this$props = this.props,\n          chatId = _this$props.chatId,\n          t = _this$props.t,\n          classes = _this$props.classes;\n    if (this.clearHistory) return React.createElement(\"div\", {\n      className: classNames('dialog-content', classes.dialogContent),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, '\\u00A0');\n    const chat = ChatStore.get(chatId);\n    if (!chat) return React.createElement(\"div\", {\n      className: classNames('dialog-content', classes.dialogContent),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, '\\u00A0');\n    let contentControl = null;\n    const typingString = getChatTypingString(chatId);\n\n    if (typingString) {\n      contentControl = React.createElement(\"span\", {\n        className: \"dialog-content-accent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, typingString);\n    }\n\n    if (!contentControl) {\n      const draft = getChatDraft(chatId);\n\n      if (showChatDraft(chatId)) {\n        const text = draft.text || '\\u00A0';\n        contentControl = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n          className: \"dialog-content-draft\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, t('Draft') + ': '), text);\n      }\n    }\n\n    if (!contentControl) {\n      const content = getLastMessageContent(chat, t) || '\\u00A0';\n      const senderName = getLastMessageSenderName(chat);\n      contentControl = React.createElement(React.Fragment, null, senderName && React.createElement(\"span\", {\n        className: \"dialog-content-accent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, senderName, \": \"), content);\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames('dialog-content', classes.dialogContent),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, contentControl);\n  }\n\n}\n\nconst enhance = compose(withTranslation(), withStyles(styles, {\n  withTheme: true\n}));\nexport default enhance(DialogContent);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/DialogContent.js"],"names":["React","classNames","compose","withTranslation","withStyles","getChatTypingString","getChatDraft","getLastMessageSenderName","getLastMessageContent","showChatDraft","ChatStore","styles","theme","dialogContent","color","palette","text","secondary","DialogContent","Component","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","shouldComponentUpdate","nextProps","nextState","t","componentDidMount","on","componentWillUnmount","removeListener","render","classes","chat","get","contentControl","typingString","draft","content","senderName","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    getChatTypingString,\n    getChatDraft,\n    getLastMessageSenderName,\n    getLastMessageContent,\n    showChatDraft\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogContent.css';\n\nconst styles = theme => ({\n    dialogContent: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass DialogContent extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== this.props.t) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateUserChatAction', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateUserChatAction', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { chatId, t, classes } = this.props;\n\n        if (this.clearHistory)\n            return <div className={classNames('dialog-content', classes.dialogContent)}>{'\\u00A0'}</div>;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return <div className={classNames('dialog-content', classes.dialogContent)}>{'\\u00A0'}</div>;\n\n        let contentControl = null;\n        const typingString = getChatTypingString(chatId);\n        if (typingString) {\n            contentControl = <span className='dialog-content-accent'>{typingString}</span>;\n        }\n\n        if (!contentControl) {\n            const draft = getChatDraft(chatId);\n            if (showChatDraft(chatId)) {\n                const text = draft.text || '\\u00A0';\n\n                contentControl = (\n                    <>\n                        <span className='dialog-content-draft'>{t('Draft') + ': '}</span>\n                        {text}\n                    </>\n                );\n            }\n        }\n\n        if (!contentControl) {\n            const content = getLastMessageContent(chat, t) || '\\u00A0';\n            const senderName = getLastMessageSenderName(chat);\n            contentControl = (\n                <>\n                    {senderName && <span className='dialog-content-accent'>{senderName}: </span>}\n                    {content}\n                </>\n            );\n        }\n\n        return <div className={classNames('dialog-content', classes.dialogContent)}>{contentControl}</div>;\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(DialogContent);\n"]},"metadata":{},"sourceType":"module"}