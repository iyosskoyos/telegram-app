{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Message/Message.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CheckMarkIcon from '@material-ui/icons/Check';\nimport Reply from './Reply';\nimport Forward from './Forward';\nimport Meta from './Meta';\nimport MessageStatus from './MessageStatus';\nimport MessageAuthor from './MessageAuthor';\nimport UserTile from '../Tile/UserTile';\nimport ChatTile from '../Tile/ChatTile';\nimport UnreadSeparator from './UnreadSeparator';\nimport WebPage from './Media/WebPage';\nimport { getEmojiMatches, getText, getMedia, getUnread, getWebPage, openMedia } from '../../Utils/Message';\nimport { canSendMessages } from '../../Utils/Chat';\nimport { openUser, openChat, selectMessage, openReply } from '../../Actions/Client';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Message.css';\n\nconst styles = theme => ({\n  message: {\n    backgroundColor: 'transparent'\n  },\n  messageAuthorColor: {\n    color: theme.palette.primary.main\n  },\n  messageSelected: {\n    backgroundColor: theme.palette.primary.main + '22'\n  },\n  messageSelectTick: {\n    background: theme.palette.primary.main,\n    color: 'white'\n  },\n  '@keyframes highlighted': {\n    from: {\n      backgroundColor: theme.palette.primary.main + '22'\n    },\n    to: {\n      backgroundColor: 'transparent'\n    }\n  },\n  messageHighlighted: {\n    animation: 'highlighted 4s ease-out'\n  }\n});\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateClearSelection = update => {\n      if (!this.state.selected) return;\n      this.setState({\n        selected: false\n      });\n    };\n\n    this.onClientUpdateMessageHighlighted = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const _this$state = this.state,\n            selected = _this$state.selected,\n            highlighted = _this$state.highlighted;\n      if (selected) return;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (highlighted) {\n          this.setState({\n            highlighted: false\n          }, () => {\n            setTimeout(() => {\n              this.setState({\n                highlighted: true\n              });\n            }, 0);\n          });\n        } else {\n          this.setState({\n            highlighted: true\n          });\n        }\n      } else if (highlighted) {\n        this.setState({\n          highlighted: false\n        });\n      }\n    };\n\n    this.onClientUpdateMessageSelected = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n      const selected = update.selected;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          selected,\n          highlighted: false\n        });\n      }\n    };\n\n    this.onUpdateMessageEdited = update => {\n      const chat_id = update.chat_id,\n            message_id = update.message_id;\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n\n      if (chatId === chat_id && messageId === message_id) {\n        this.forceUpdate();\n      }\n    };\n\n    this.onUpdateMessageViews = update => {\n      const chat_id = update.chat_id,\n            message_id = update.message_id;\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n\n      if (chatId === chat_id && messageId === message_id) {\n        this.forceUpdate();\n      }\n    };\n\n    this.onUpdateMessageContent = update => {\n      const chat_id = update.chat_id,\n            message_id = update.message_id;\n      const _this$props5 = this.props,\n            chatId = _this$props5.chatId,\n            messageId = _this$props5.messageId;\n      const emojiMatches = this.state.emojiMatches;\n      if (chatId !== chat_id) return;\n      if (messageId !== message_id) return;\n      const newEmojiMatches = getEmojiMatches(chatId, messageId);\n\n      if (newEmojiMatches !== emojiMatches) {\n        this.setState({\n          emojiMatches: getEmojiMatches(chatId, messageId)\n        });\n      } else {\n        this.forceUpdate();\n      }\n    };\n\n    this.handleSelectUser = userId => {\n      openUser(userId, true);\n    };\n\n    this.handleSelectChat = chatId => {\n      openChat(chatId, null, true);\n    };\n\n    this.handleSelection = () => {\n      if (!this.mouseDown) return;\n      const selection = window.getSelection().toString();\n      if (selection) return;\n      const _this$props6 = this.props,\n            chatId = _this$props6.chatId,\n            messageId = _this$props6.messageId;\n      const selected = !MessageStore.selectedItems.has(\"chatId=\".concat(chatId, \"_messageId=\").concat(messageId));\n      selectMessage(chatId, messageId, selected);\n    };\n\n    this.handleDateClick = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const _this$props7 = this.props,\n            chatId = _this$props7.chatId,\n            messageId = _this$props7.messageId;\n      const message = MessageStore.get(chatId, messageId);\n      const canBeReplied = canSendMessages(chatId);\n\n      if (canBeReplied) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateReply',\n          chatId: chatId,\n          messageId: messageId\n        });\n        return;\n      }\n\n      const canBeForwarded = message && message.can_be_forwarded;\n\n      if (canBeForwarded) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateForward',\n          info: {\n            chatId: chatId,\n            messageIds: [messageId]\n          }\n        });\n      }\n    };\n\n    this.openMedia = event => {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      const _this$props8 = this.props,\n            chatId = _this$props8.chatId,\n            messageId = _this$props8.messageId;\n      openMedia(chatId, messageId);\n    };\n\n    this.handleAnimationEnd = () => {\n      this.setState({\n        highlighted: false\n      });\n    };\n\n    this.handleMouseDown = () => {\n      this.mouseDown = true;\n    };\n\n    this.handleMouseOver = () => {\n      this.mouseDown = false;\n    };\n\n    this.handleMouseOut = () => {\n      this.mouseOut = false;\n    };\n\n    this.handleReplyClick = () => {\n      const _this$props9 = this.props,\n            chatId = _this$props9.chatId,\n            messageId = _this$props9.messageId;\n      openReply(chatId, messageId);\n    };\n\n    const _this$props10 = this.props,\n          _chatId = _this$props10.chatId,\n          _messageId = _this$props10.messageId;\n\n    if (process.env.NODE_ENV !== 'production') {\n      this.state = {\n        message: MessageStore.get(_chatId, _messageId),\n        emojiMatches: getEmojiMatches(_chatId, _messageId),\n        selected: false,\n        highlighted: false\n      };\n    } else {\n      this.state = {\n        emojiMatches: getEmojiMatches(_chatId, _messageId),\n        selected: false,\n        highlighted: false\n      };\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props11 = this.props,\n          theme = _this$props11.theme,\n          chatId = _this$props11.chatId,\n          messageId = _this$props11.messageId,\n          sendingState = _this$props11.sendingState,\n          showUnreadSeparator = _this$props11.showUnreadSeparator,\n          showTitle = _this$props11.showTitle;\n    const _this$state2 = this.state,\n          contextMenu = _this$state2.contextMenu,\n          selected = _this$state2.selected,\n          highlighted = _this$state2.highlighted,\n          emojiMatches = _this$state2.emojiMatches;\n\n    if (nextProps.theme !== theme) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextProps.chatId !== chatId) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextProps.messageId !== messageId) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextProps.sendingState !== sendingState) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextProps.showUnreadSeparator !== showUnreadSeparator) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextProps.showTitle !== showTitle) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextState.contextMenu !== contextMenu) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextState.selected !== selected) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextState.highlighted !== highlighted) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    }\n\n    if (nextState.emojiMatches !== emojiMatches) {\n      console.log('Message.shouldComponentUpdate true');\n      return true;\n    } // console.log('Message.shouldComponentUpdate false');\n\n\n    return false;\n  }\n\n  componentDidMount() {\n    MessageStore.on('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateMessageSelected);\n    MessageStore.on('clientUpdateClearSelection', this.onClientUpdateClearSelection);\n    MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    MessageStore.on('updateMessageEdited', this.onUpdateMessageEdited);\n    MessageStore.on('updateMessageViews', this.onUpdateMessageViews);\n  }\n\n  componentWillUnmount() {\n    MessageStore.removeListener('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    MessageStore.removeListener('clientUpdateMessageSelected', this.onClientUpdateMessageSelected);\n    MessageStore.removeListener('clientUpdateClearSelection', this.onClientUpdateClearSelection);\n    MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n    MessageStore.removeListener('updateMessageEdited', this.onUpdateMessageEdited);\n    MessageStore.removeListener('updateMessageViews', this.onUpdateMessageViews);\n  }\n\n  render() {\n    const _this$props12 = this.props,\n          t = _this$props12.t,\n          classes = _this$props12.classes,\n          chatId = _this$props12.chatId,\n          messageId = _this$props12.messageId,\n          showUnreadSeparator = _this$props12.showUnreadSeparator,\n          showTitle = _this$props12.showTitle;\n    const _this$state3 = this.state,\n          emojiMatches = _this$state3.emojiMatches,\n          selected = _this$state3.selected,\n          highlighted = _this$state3.highlighted;\n    const message = MessageStore.get(chatId, messageId);\n    if (!message) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"[empty message]\");\n    const sending_state = message.sending_state,\n          views = message.views,\n          date = message.date,\n          edit_date = message.edit_date,\n          reply_to_message_id = message.reply_to_message_id,\n          forward_info = message.forward_info,\n          sender_user_id = message.sender_user_id;\n    const text = getText(message);\n    const webPage = getWebPage(message);\n    const media = getMedia(message, this.openMedia);\n    this.unread = getUnread(message);\n    let tile = null;\n\n    if (showTitle) {\n      tile = sender_user_id ? React.createElement(UserTile, {\n        userId: sender_user_id,\n        onSelect: this.handleSelectUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }) : React.createElement(ChatTile, {\n        chatId: chatId,\n        onSelect: this.handleSelectChat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      });\n    }\n\n    const messageClassName = classNames('message', classes.message, {\n      'message-selected': selected,\n      [classes.messageSelected]: selected,\n      [classes.messageHighlighted]: highlighted && !selected,\n      'message-short': !showTitle\n    });\n    const meta = React.createElement(Meta, {\n      date: date,\n      editDate: edit_date,\n      views: views,\n      onDateClick: this.handleDateClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: messageClassName,\n      onMouseOver: this.handleMouseOver,\n      onMouseOut: this.handleMouseOut,\n      onMouseDown: this.handleMouseDown,\n      onClick: this.handleSelection,\n      onAnimationEnd: this.handleAnimationEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, showUnreadSeparator && React.createElement(UnreadSeparator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"message-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"message-left-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(CheckMarkIcon, {\n      className: classNames('message-select-tick', classes.messageSelectTick),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), this.unread && React.createElement(MessageStatus, {\n      chatId: chatId,\n      messageId: messageId,\n      sendingState: sending_state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    })), tile, React.createElement(\"div\", {\n      className: \"message-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"message-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, showTitle && !forward_info && React.createElement(MessageAuthor, {\n      chatId: chatId,\n      openChat: true,\n      userId: sender_user_id,\n      openUser: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), forward_info && React.createElement(Forward, {\n      forwardInfo: forward_info,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), showTitle && meta), Boolean(reply_to_message_id) && React.createElement(Reply, {\n      chatId: chatId,\n      messageId: reply_to_message_id,\n      onClick: this.handleReplyClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), media, React.createElement(\"div\", {\n      className: classNames('message-text', {\n        'message-text-1emoji': emojiMatches === 1,\n        'message-text-2emoji': emojiMatches === 2,\n        'message-text-3emoji': emojiMatches === 3\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, text), webPage && React.createElement(WebPage, {\n      chatId: chatId,\n      messageId: messageId,\n      openMedia: this.openMedia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    })), !showTitle && meta));\n  }\n\n}\n\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(Message);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Message/Message.js"],"names":["React","Component","classNames","compose","withTranslation","withStyles","CheckMarkIcon","Reply","Forward","Meta","MessageStatus","MessageAuthor","UserTile","ChatTile","UnreadSeparator","WebPage","getEmojiMatches","getText","getMedia","getUnread","getWebPage","openMedia","canSendMessages","openUser","openChat","selectMessage","openReply","MessageStore","TdLibController","styles","theme","message","backgroundColor","messageAuthorColor","color","palette","primary","main","messageSelected","messageSelectTick","background","from","to","messageHighlighted","animation","Message","constructor","props","onClientUpdateClearSelection","update","state","selected","setState","onClientUpdateMessageHighlighted","chatId","messageId","highlighted","setTimeout","onClientUpdateMessageSelected","onUpdateMessageEdited","chat_id","message_id","forceUpdate","onUpdateMessageViews","onUpdateMessageContent","emojiMatches","newEmojiMatches","handleSelectUser","userId","handleSelectChat","handleSelection","mouseDown","selection","window","getSelection","toString","selectedItems","has","handleDateClick","e","preventDefault","stopPropagation","get","canBeReplied","clientUpdate","canBeForwarded","can_be_forwarded","info","messageIds","event","handleAnimationEnd","handleMouseDown","handleMouseOver","handleMouseOut","mouseOut","handleReplyClick","process","env","NODE_ENV","shouldComponentUpdate","nextProps","nextState","sendingState","showUnreadSeparator","showTitle","contextMenu","console","log","componentDidMount","on","componentWillUnmount","removeListener","render","t","classes","sending_state","views","date","edit_date","reply_to_message_id","forward_info","sender_user_id","text","webPage","media","unread","tile","messageClassName","meta","Boolean","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CheckMarkIcon from '@material-ui/icons/Check';\nimport Reply from './Reply';\nimport Forward from './Forward';\nimport Meta from './Meta';\nimport MessageStatus from './MessageStatus';\nimport MessageAuthor from './MessageAuthor';\nimport UserTile from '../Tile/UserTile';\nimport ChatTile from '../Tile/ChatTile';\nimport UnreadSeparator from './UnreadSeparator';\nimport WebPage from './Media/WebPage';\nimport { getEmojiMatches, getText, getMedia, getUnread, getWebPage, openMedia } from '../../Utils/Message';\nimport { canSendMessages } from '../../Utils/Chat';\nimport { openUser, openChat, selectMessage, openReply } from '../../Actions/Client';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Message.css';\n\nconst styles = theme => ({\n    message: {\n        backgroundColor: 'transparent'\n    },\n    messageAuthorColor: {\n        color: theme.palette.primary.main\n    },\n    messageSelected: {\n        backgroundColor: theme.palette.primary.main + '22'\n    },\n    messageSelectTick: {\n        background: theme.palette.primary.main,\n        color: 'white'\n    },\n    '@keyframes highlighted': {\n        from: { backgroundColor: theme.palette.primary.main + '22' },\n        to: { backgroundColor: 'transparent' }\n    },\n    messageHighlighted: {\n        animation: 'highlighted 4s ease-out'\n    }\n});\n\nclass Message extends Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId, messageId } = this.props;\n        if (process.env.NODE_ENV !== 'production') {\n            this.state = {\n                message: MessageStore.get(chatId, messageId),\n                emojiMatches: getEmojiMatches(chatId, messageId),\n                selected: false,\n                highlighted: false\n            };\n        } else {\n            this.state = {\n                emojiMatches: getEmojiMatches(chatId, messageId),\n                selected: false,\n                highlighted: false\n            };\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { theme, chatId, messageId, sendingState, showUnreadSeparator, showTitle } = this.props;\n        const { contextMenu, selected, highlighted, emojiMatches } = this.state;\n\n        if (nextProps.theme !== theme) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextProps.sendingState !== sendingState) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextProps.showUnreadSeparator !== showUnreadSeparator) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextProps.showTitle !== showTitle) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextState.contextMenu !== contextMenu) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextState.selected !== selected) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextState.highlighted !== highlighted) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        if (nextState.emojiMatches !== emojiMatches) {\n            console.log('Message.shouldComponentUpdate true');\n            return true;\n        }\n\n        // console.log('Message.shouldComponentUpdate false');\n        return false;\n    }\n\n    componentDidMount() {\n        MessageStore.on('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n        MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateMessageSelected);\n        MessageStore.on('clientUpdateClearSelection', this.onClientUpdateClearSelection);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.on('updateMessageEdited', this.onUpdateMessageEdited);\n        MessageStore.on('updateMessageViews', this.onUpdateMessageViews);\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeListener('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n        MessageStore.removeListener('clientUpdateMessageSelected', this.onClientUpdateMessageSelected);\n        MessageStore.removeListener('clientUpdateClearSelection', this.onClientUpdateClearSelection);\n        MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.removeListener('updateMessageEdited', this.onUpdateMessageEdited);\n        MessageStore.removeListener('updateMessageViews', this.onUpdateMessageViews);\n    }\n\n    onClientUpdateClearSelection = update => {\n        if (!this.state.selected) return;\n\n        this.setState({ selected: false });\n    };\n\n    onClientUpdateMessageHighlighted = update => {\n        const { chatId, messageId } = this.props;\n        const { selected, highlighted } = this.state;\n\n        if (selected) return;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (highlighted) {\n                this.setState({ highlighted: false }, () => {\n                    setTimeout(() => {\n                        this.setState({ highlighted: true });\n                    }, 0);\n                });\n            } else {\n                this.setState({ highlighted: true });\n            }\n        } else if (highlighted) {\n            this.setState({ highlighted: false });\n        }\n    };\n\n    onClientUpdateMessageSelected = update => {\n        const { chatId, messageId } = this.props;\n        const { selected } = update;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({ selected, highlighted: false });\n        }\n    };\n\n    onUpdateMessageEdited = update => {\n        const { chat_id, message_id } = update;\n        const { chatId, messageId } = this.props;\n\n        if (chatId === chat_id && messageId === message_id) {\n            this.forceUpdate();\n        }\n    };\n\n    onUpdateMessageViews = update => {\n        const { chat_id, message_id } = update;\n        const { chatId, messageId } = this.props;\n\n        if (chatId === chat_id && messageId === message_id) {\n            this.forceUpdate();\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chat_id, message_id } = update;\n        const { chatId, messageId } = this.props;\n        const { emojiMatches } = this.state;\n\n        if (chatId !== chat_id) return;\n        if (messageId !== message_id) return;\n\n        const newEmojiMatches = getEmojiMatches(chatId, messageId);\n        if (newEmojiMatches !== emojiMatches) {\n            this.setState({ emojiMatches: getEmojiMatches(chatId, messageId) });\n        } else {\n            this.forceUpdate();\n        }\n    };\n\n    handleSelectUser = userId => {\n        openUser(userId, true);\n    };\n\n    handleSelectChat = chatId => {\n        openChat(chatId, null, true);\n    };\n\n    handleSelection = () => {\n        if (!this.mouseDown) return;\n\n        const selection = window.getSelection().toString();\n        if (selection) return;\n\n        const { chatId, messageId } = this.props;\n\n        const selected = !MessageStore.selectedItems.has(`chatId=${chatId}_messageId=${messageId}`);\n        selectMessage(chatId, messageId, selected);\n    };\n\n    handleDateClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { chatId, messageId } = this.props;\n\n        const message = MessageStore.get(chatId, messageId);\n\n        const canBeReplied = canSendMessages(chatId);\n        if (canBeReplied) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateReply',\n                chatId: chatId,\n                messageId: messageId\n            });\n            return;\n        }\n\n        const canBeForwarded = message && message.can_be_forwarded;\n        if (canBeForwarded) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateForward',\n                info: {\n                    chatId: chatId,\n                    messageIds: [messageId]\n                }\n            });\n        }\n    };\n\n    openMedia = event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        const { chatId, messageId } = this.props;\n\n        openMedia(chatId, messageId);\n    };\n\n    handleAnimationEnd = () => {\n        this.setState({ highlighted: false });\n    };\n\n    handleMouseDown = () => {\n        this.mouseDown = true;\n    };\n\n    handleMouseOver = () => {\n        this.mouseDown = false;\n    };\n\n    handleMouseOut = () => {\n        this.mouseOut = false;\n    };\n\n    handleReplyClick = () => {\n        const { chatId, messageId } = this.props;\n        openReply(chatId, messageId);\n    };\n\n    render() {\n        const { t, classes, chatId, messageId, showUnreadSeparator, showTitle } = this.props;\n        const { emojiMatches, selected, highlighted } = this.state;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return <div>[empty message]</div>;\n\n        const { sending_state, views, date, edit_date, reply_to_message_id, forward_info, sender_user_id } = message;\n\n        const text = getText(message);\n        const webPage = getWebPage(message);\n        const media = getMedia(message, this.openMedia);\n        this.unread = getUnread(message);\n\n        let tile = null;\n        if (showTitle) {\n            tile = sender_user_id ? (\n                <UserTile userId={sender_user_id} onSelect={this.handleSelectUser} />\n            ) : (\n                <ChatTile chatId={chatId} onSelect={this.handleSelectChat} />\n            );\n        }\n\n        const messageClassName = classNames('message', classes.message, {\n            'message-selected': selected,\n            [classes.messageSelected]: selected,\n            [classes.messageHighlighted]: highlighted && !selected,\n            'message-short': !showTitle\n        });\n\n        const meta = <Meta date={date} editDate={edit_date} views={views} onDateClick={this.handleDateClick} />;\n\n        return (\n            <div\n                className={messageClassName}\n                onMouseOver={this.handleMouseOver}\n                onMouseOut={this.handleMouseOut}\n                onMouseDown={this.handleMouseDown}\n                onClick={this.handleSelection}\n                onAnimationEnd={this.handleAnimationEnd}>\n                {showUnreadSeparator && <UnreadSeparator />}\n                <div className='message-wrapper'>\n                    <div className='message-left-padding'>\n                        {/*<div className='message-left-padding-wrapper'>*/}\n                        {/**/}\n                        {/*</div>*/}\n                        <CheckMarkIcon className={classNames('message-select-tick', classes.messageSelectTick)} />\n                        {this.unread && (\n                            <MessageStatus chatId={chatId} messageId={messageId} sendingState={sending_state} />\n                        )}\n                    </div>\n                    {tile}\n                    <div className='message-content'>\n                        <div className='message-title'>\n                            {showTitle && !forward_info && (\n                                <MessageAuthor chatId={chatId} openChat userId={sender_user_id} openUser />\n                            )}\n                            {forward_info && <Forward forwardInfo={forward_info} />}\n                            {showTitle && meta}\n                        </div>\n                        {Boolean(reply_to_message_id) && (\n                            <Reply chatId={chatId} messageId={reply_to_message_id} onClick={this.handleReplyClick} />\n                        )}\n                        {media}\n                        <div\n                            className={classNames('message-text', {\n                                'message-text-1emoji': emojiMatches === 1,\n                                'message-text-2emoji': emojiMatches === 2,\n                                'message-text-3emoji': emojiMatches === 3\n                            })}>\n                            {text}\n                        </div>\n                        {webPage && <WebPage chatId={chatId} messageId={messageId} openMedia={this.openMedia} />}\n                    </div>\n                    {!showTitle && meta}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(Message);\n"]},"metadata":{},"sourceType":"module"}