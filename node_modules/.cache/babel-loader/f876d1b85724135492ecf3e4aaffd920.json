{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Message/Media/Animation.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getFitSize } from '../../../Utils/Common';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { getFileSize, getSrc, isGifMimeType } from '../../../Utils/File';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport AppStore from '../../../Stores/ApplicationStore';\nimport FileStore from '../../../Stores/FileStore';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport './Animation.css';\n\nclass Animation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.startStopPlayer = () => {\n      const player = this.videoRef.current;\n\n      if (player) {\n        if (this.windowFocused && (this.inView && !this.openMediaViewer && !this.openProfileMediaViewer && !this.openIV || this.ivInView && !this.openIVMedia)) {\n          player.play();\n        } else {\n          player.pause();\n        }\n      }\n    };\n\n    this.onClientUpdateInstantViewContent = update => {\n      this.openIV = Boolean(InstantViewStore.getCurrent());\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateProfileMediaViewerContent = update => {\n      this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateMediaViewerContent = update => {\n      this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateInstantViewViewerContent = update => {\n      this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateFocusWindow = update => {\n      this.windowFocused = update.focused;\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateMessagesInView = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const key = \"\".concat(chatId, \"_\").concat(messageId);\n      this.inView = update.messages.has(key);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateBlocksInView = update => {\n      const pageBlock = this.props.pageBlock;\n      if (!pageBlock) return;\n      this.ivInView = update.blocks.has(pageBlock);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateAnimationBlob = update => {\n      const animation = this.props.animation.animation;\n      const fileId = update.fileId;\n      if (!animation) return;\n\n      if (animation.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.onClientUpdateAnimationThumbnailBlob = update => {\n      const thumbnail = this.props.animation.thumbnail;\n      if (!thumbnail) return;\n      const fileId = update.fileId;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.videoRef = React.createRef();\n    this.setPlayerParams();\n  }\n\n  setPlayerParams() {\n    this.windowFocused = window.hasFocus;\n    this.inView = false;\n    this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n    this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n    this.openIV = Boolean(InstantViewStore.getCurrent());\n    this.ivInView = false;\n    this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.animation !== this.props.animation) {\n      this.setPlayerParams();\n    }\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n    FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n    AppStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    AppStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    AppStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n    InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    InstantViewStore.on('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n    FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n    AppStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    AppStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    AppStore.removeListener('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    MessageStore.removeListener('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n    InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    InstantViewStore.removeListener('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    InstantViewStore.removeListener('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          displaySize = _this$props2.displaySize,\n          openMedia = _this$props2.openMedia,\n          t = _this$props2.t,\n          style = _this$props2.style;\n    const _this$props$animation = this.props.animation,\n          thumbnail = _this$props$animation.thumbnail,\n          animation = _this$props$animation.animation,\n          mime_type = _this$props$animation.mime_type,\n          width = _this$props$animation.width,\n          height = _this$props$animation.height;\n    const fitPhotoSize = getFitSize({\n      width,\n      height\n    } || thumbnail, displaySize, false);\n    if (!fitPhotoSize) return null;\n\n    const animationStyle = _objectSpread({\n      width: fitPhotoSize.width,\n      height: fitPhotoSize.height\n    }, style);\n\n    const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n    const src = getSrc(animation);\n    const isBlurred = isBlurredThumbnail(thumbnail);\n    const isGif = isGifMimeType(mime_type);\n    return React.createElement(\"div\", {\n      className: \"animation\",\n      style: animationStyle,\n      onClick: openMedia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, src ? isGif ? React.createElement(\"img\", {\n      className: \"animation-preview\",\n      src: src,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }) : React.createElement(\"video\", {\n      ref: this.videoRef,\n      className: \"media-viewer-content-animation\",\n      src: src,\n      poster: thumbnailSrc,\n      muted: true,\n      autoPlay: true,\n      loop: true,\n      playsInline: true,\n      width: animationStyle.width,\n      height: animationStyle.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, null, React.createElement(\"img\", {\n      className: classNames('animation-preview', {\n        'media-blurred': isBlurred\n      }),\n      src: thumbnailSrc,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"animation-meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, getFileSize(animation))), React.createElement(FileProgress, {\n      file: animation,\n      download: true,\n      upload: true,\n      cancelButton: true,\n      icon: React.createElement(\"div\", {\n        className: \"animation-play\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, t('AttachGif')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAnimation.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  pageBlock: PropTypes.object,\n  animation: PropTypes.object.isRequired,\n  openMedia: PropTypes.func,\n  size: PropTypes.number,\n  displaySize: PropTypes.number,\n  iv: PropTypes.bool\n};\nAnimation.defaultProps = {\n  size: PHOTO_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE,\n  iv: false\n};\nexport default withTranslation()(Animation);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Message/Media/Animation.js"],"names":["React","PropTypes","classNames","withTranslation","FileProgress","getFitSize","isBlurredThumbnail","getFileSize","getSrc","isGifMimeType","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","AppStore","FileStore","InstantViewStore","MessageStore","Animation","Component","constructor","props","startStopPlayer","player","videoRef","current","windowFocused","inView","openMediaViewer","openProfileMediaViewer","openIV","ivInView","openIVMedia","play","pause","onClientUpdateInstantViewContent","update","Boolean","getCurrent","onClientUpdateProfileMediaViewerContent","profileMediaViewerContent","onClientUpdateMediaViewerContent","mediaViewerContent","onClientUpdateInstantViewViewerContent","viewerContent","onClientUpdateFocusWindow","focused","onClientUpdateMessagesInView","chatId","messageId","key","messages","has","onClientUpdateBlocksInView","pageBlock","blocks","onClientUpdateAnimationBlob","animation","fileId","id","forceUpdate","onClientUpdateAnimationThumbnailBlob","thumbnail","photo","createRef","setPlayerParams","window","hasFocus","componentDidUpdate","prevProps","prevState","snapshot","componentDidMount","on","componentWillUnmount","removeListener","render","displaySize","openMedia","t","style","mime_type","width","height","fitPhotoSize","animationStyle","thumbnailSrc","src","isBlurred","isGif","propTypes","number","object","isRequired","func","size","iv","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport FileProgress from '../../Viewer/FileProgress';\nimport { getFitSize } from '../../../Utils/Common';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { getFileSize, getSrc, isGifMimeType } from '../../../Utils/File';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport AppStore from '../../../Stores/ApplicationStore';\nimport FileStore from '../../../Stores/FileStore';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport './Animation.css';\n\nclass Animation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        this.setPlayerParams();\n    }\n\n    setPlayerParams() {\n        this.windowFocused = window.hasFocus;\n\n        this.inView = false;\n        this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n        this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.ivInView = false;\n        this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.animation !== this.props.animation) {\n            this.setPlayerParams();\n        }\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n        AppStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        AppStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        AppStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n        InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n        InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n        InstantViewStore.on('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateAnimationThumbnailBlob);\n        FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateAnimationBlob);\n        AppStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        AppStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        AppStore.removeListener('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        MessageStore.removeListener('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n        InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n        InstantViewStore.removeListener(\n            'clientUpdateInstantViewViewerContent',\n            this.onClientUpdateInstantViewViewerContent\n        );\n        InstantViewStore.removeListener('clientUpdateBlocksInView', this.onClientUpdateBlocksInView);\n    }\n\n    startStopPlayer = () => {\n        const player = this.videoRef.current;\n        if (player) {\n            if (\n                this.windowFocused &&\n                ((this.inView && !this.openMediaViewer && !this.openProfileMediaViewer && !this.openIV) ||\n                    (this.ivInView && !this.openIVMedia))\n            ) {\n                player.play();\n            } else {\n                player.pause();\n            }\n        }\n    };\n\n    onClientUpdateInstantViewContent = update => {\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateProfileMediaViewerContent = update => {\n        this.openProfileMediaViewer = Boolean(AppStore.profileMediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.openMediaViewer = Boolean(AppStore.mediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateInstantViewViewerContent = update => {\n        this.openIVMedia = Boolean(InstantViewStore.viewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateFocusWindow = update => {\n        this.windowFocused = update.focused;\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMessagesInView = update => {\n        const { chatId, messageId } = this.props;\n        const key = `${chatId}_${messageId}`;\n\n        this.inView = update.messages.has(key);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateBlocksInView = update => {\n        const { pageBlock } = this.props;\n        if (!pageBlock) return;\n\n        this.ivInView = update.blocks.has(pageBlock);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateAnimationBlob = update => {\n        const { animation } = this.props.animation;\n        const { fileId } = update;\n\n        if (!animation) return;\n\n        if (animation.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    onClientUpdateAnimationThumbnailBlob = update => {\n        const { thumbnail } = this.props.animation;\n        if (!thumbnail) return;\n\n        const { fileId } = update;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { displaySize, openMedia, t, style } = this.props;\n        const { thumbnail, animation, mime_type, width, height } = this.props.animation;\n\n        const fitPhotoSize = getFitSize({ width, height } || thumbnail, displaySize, false);\n        if (!fitPhotoSize) return null;\n\n        const animationStyle = {\n            width: fitPhotoSize.width,\n            height: fitPhotoSize.height,\n            ...style\n        };\n\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const src = getSrc(animation);\n\n        const isBlurred = isBlurredThumbnail(thumbnail);\n        const isGif = isGifMimeType(mime_type);\n\n        return (\n            <div className='animation' style={animationStyle} onClick={openMedia}>\n                {src ? (\n                    isGif ? (\n                        <img className='animation-preview' src={src} alt='' />\n                    ) : (\n                        <video\n                            ref={this.videoRef}\n                            className='media-viewer-content-animation'\n                            src={src}\n                            poster={thumbnailSrc}\n                            muted\n                            autoPlay\n                            loop\n                            playsInline\n                            width={animationStyle.width}\n                            height={animationStyle.height}\n                        />\n                    )\n                ) : (\n                    <>\n                        <img\n                            className={classNames('animation-preview', { 'media-blurred': isBlurred })}\n                            src={thumbnailSrc}\n                            alt=''\n                        />\n                        <div className='animation-meta'>{getFileSize(animation)}</div>\n                    </>\n                )}\n                <FileProgress\n                    file={animation}\n                    download\n                    upload\n                    cancelButton\n                    icon={<div className='animation-play'>{t('AttachGif')}</div>}\n                />\n            </div>\n        );\n    }\n}\n\nAnimation.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    pageBlock: PropTypes.object,\n    animation: PropTypes.object.isRequired,\n    openMedia: PropTypes.func,\n    size: PropTypes.number,\n    displaySize: PropTypes.number,\n    iv: PropTypes.bool\n};\n\nAnimation.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE,\n    iv: false\n};\n\nexport default withTranslation()(Animation);\n"]},"metadata":{},"sourceType":"module"}