{"ast":null,"code":"import _defineProperty from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import*as ReactDOM from'react-dom';import classNames from'classnames';import withStyles from'@material-ui/core/styles/withStyles';import DayMeta from'../Message/DayMeta';import FilesDropTarget from'./FilesDropTarget';import Message from'../Message/Message';import PinnedMessage from'./PinnedMessage';import Placeholder from'./Placeholder';import ScrollDownButton from'./ScrollDownButton';import ServiceMessage from'../Message/ServiceMessage';import StickersHint from'./StickersHint';import{throttle,getPhotoSize,itemsInView,historyEquals}from'../../Utils/Common';import{loadChatsContent,loadDraftContent,loadMessageContents}from'../../Utils/File';import{filterDuplicateMessages,filterMessages}from'../../Utils/Message';import{isServiceMessage}from'../../Utils/ServiceMessage';import{canSendFiles,getChatFullInfo,getSupergroupId,isChannelChat}from'../../Utils/Chat';import{highlightMessage,openChat}from'../../Actions/Client';import{MESSAGE_SLICE_LIMIT,MESSAGE_SPLIT_MAX_TIME_S}from'../../Constants';import ApplicationStore from'../../Stores/ApplicationStore';import ChatStore from'../../Stores/ChatStore';import FileStore from'../../Stores/FileStore';import MessageStore from'../../Stores/MessageStore';import PlayerStore from'../../Stores/PlayerStore';import SupergroupStore from'../../Stores/SupergroupStore';import TdLibController from'../../Controllers/TdLibController';import'./MessagesList.css';var ScrollBehaviorEnum=Object.freeze({SCROLL_TO_BOTTOM:'SCROLL_TO_BOTTOM',SCROLL_TO_UNREAD:'SCROLL_TO_UNREAD',SCROLL_TO_MESSAGE:'SCROLL_TO_MESSAGE',KEEP_SCROLL_POSITION:'KEEP_SCROLL_POSITION',NONE:'NONE'});var styles=function styles(theme){return{background:{background:theme.palette.type==='dark'?theme.palette.grey[900]:'transparent'}};};var MessagesList=/*#__PURE__*/function(_React$Component){_inherits(MessagesList,_React$Component);function MessagesList(props){var _this;_classCallCheck(this,MessagesList);_this=_possibleConstructorReturn(this,_getPrototypeOf(MessagesList).call(this,props));// console.log(`MessagesList.ctor chat_id=${props.chatId} message_id=${props.messageId}`);\n// console.log('MessagesList.newSessionId ctor');\n_this.onClientUpdateFocusWindow=function(update){var focused=update.focused;if(focused){_this.defferedActions.forEach(function(x){return x();});_this.defferedActions=[];}};_this.onClientUpdateOpenReply=function(update){var chatId=update.chatId,messageId=update.messageId;var replyHistory=_this.state.replyHistory;if(_this.props.chatId!==chatId){return;}var lastItem=replyHistory.length>0?replyHistory[replyHistory.length-1]:null;if(lastItem&&lastItem.chatId===chatId&&lastItem.messageId===messageId){return;}replyHistory.push({chatId:chatId,messageId:messageId});};_this.onClientUpdateMediaActive=function(update){var list=_this.listRef.current;var prevOffsetHeight=list.offsetHeight;var prevScrollTop=list.scrollTop;_this.setState({playerOpened:true},function(){if(list.scrollTop===prevScrollTop){list.scrollTop+=Math.abs(prevOffsetHeight-list.offsetHeight);}});};_this.onClientUpdateMediaEnding=function(udpate){var list=_this.listRef.current;_this.prevOffsetHeight=list.offsetHeight;_this.prevScrollTop=list.scrollTop;};_this.onClientUpdateMediaEnd=function(udpate){var list=_this.listRef.current;//const prevOffsetHeight = list.offsetHeight;\n//const prevScrollTop = list.scrollTop;\n_this.setState({playerOpened:false},function(){if(list.scrollTop===_this.prevScrollTop){list.scrollTop-=Math.abs(_this.prevOffsetHeight-list.offsetHeight);}});};_this.onClientUpdateSelection=function(update){_this.setState({selectionActive:MessageStore.selectedItems.size>0});};_this.onClientUpdateClearHistory=function(update){var chatId=_this.props.chatId;if(chatId===update.chatId){_this.setState({clearHistory:update.inProgress});}};_this.onUpdateMessageContent=function(update){var chatId=_this.props.chatId;var history=_this.state.history;var chat_id=update.chat_id,message_id=update.message_id;if(chatId!==chat_id)return;if(history.findIndex(function(x){return x.id===message_id;})!==-1){var message=MessageStore.get(chat_id,message_id);if(!message)return;var store=FileStore.getStore();loadMessageContents(store,[message]);}};_this.onUpdateChatLastMessage=function(update){var chatId=_this.props.chatId;if(chatId!==update.chat_id)return;};_this.onUpdateMessageSendSucceeded=function(update){if(!_this.completed)return;var message=update.message,old_message_id=update.old_message_id;var chatId=_this.props.chatId;if(chatId!==message.chat_id)return;// let handleSendSucceeded = false;\n// const { content } = message;\n// switch (content['@type']) {\n//     case 'messagePoll': {\n//         handleSendSucceeded = true;\n//         break;\n//     }\n// }\n//\n// if (!handleSendSucceeded) return;\nvar scrollBehavior=message.is_outgoing?ScrollBehaviorEnum.SCROLL_TO_BOTTOM:ScrollBehaviorEnum.KEEP_SCROLL_POSITION;_this.replaceMessage(old_message_id,message,function(){if(scrollBehavior!==ScrollBehaviorEnum.KEEP_SCROLL_POSITION){_this.handleScrollBehavior(scrollBehavior,_this.snapshot);}});var store=FileStore.getStore();loadMessageContents(store,[message]);_this.viewMessages([message]);};_this.onUpdateNewMessage=function(update){if(!_this.completed)return;var message=update.message;var chatId=_this.props.chatId;if(chatId!==message.chat_id)return;var list=_this.listRef.current;var scrollBehavior=message.is_outgoing?ScrollBehaviorEnum.SCROLL_TO_BOTTOM:ScrollBehaviorEnum.NONE;if(list.scrollTop+list.offsetHeight>=list.scrollHeight){scrollBehavior=ScrollBehaviorEnum.SCROLL_TO_BOTTOM;}var newState=message.is_outgoing?{scrollDownVisible:false}:{};var history=[message];_this.scrollBehaviorNone=true;_this.insertPrevious(filterMessages(history),newState,function(){_this.scrollBehaviorNone=false;_this.handleScrollBehavior(scrollBehavior,_this.snapshot);});var store=FileStore.getStore();loadMessageContents(store,history);_this.viewMessages(history);};_this.onUpdateDeleteMessages=function(update){var chatId=_this.props.chatId;var chat_id=update.chat_id,is_permanent=update.is_permanent,message_ids=update.message_ids;if(chatId!==chat_id)return;if(!is_permanent)return;_this.deleteHistory(message_ids);};_this.updateItemsInView=function(){if(!_this.messages)return;var messages=new Map();var items=itemsInView(_this.listRef,_this.itemsRef);for(var i=0;i<items.length;i++){var messageWrapper=_this.messages[items[i]];if(messageWrapper){var message=messageWrapper.props.children[1];var _message$props=message.props,chatId=_message$props.chatId,messageId=_message$props.messageId;var key=\"\".concat(chatId,\"_\").concat(messageId);messages.set(key,key);}}TdLibController.clientUpdate({'@type':'clientUpdateMessagesInView',messages:messages});return;if(!messages.length)return;/*let ids = messages.map(x => x.id);\n        console.log('[perf] load_messages_contents ids=[' + ids + ']');\n\n                let messagesMap = new Map(messages.map((i) => [i.id, i]));\n\n                if (this.previousMessages){\n                    let cancelMessages = [];\n                    for (let i = 0; i < this.previousMessages.length; i++){\n                        if (!messagesMap.has(this.previousMessages[i].id)){\n                            cancelMessages.push(this.previousMessages[i]);\n                        }\n                    }\n                    if (cancelMessages.length > 0) {\n                        this.cancelLoadMessageContents(cancelMessages);\n                    }\n                }\n                this.previousMessages = messages;*/var store=FileStore.getStore();loadMessageContents(store,messages);};_this.loadIncompleteHistory=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(result){var MAX_ITERATIONS,incomplete,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:MAX_ITERATIONS=5;incomplete=result&&result.messages.length>0&&result.messages.length<MESSAGE_SLICE_LIMIT;i=0;case 3:if(!(i<MAX_ITERATIONS&&incomplete)){_context.next=11;break;}_context.next=6;return _this.onLoadNext();case 6:result=_context.sent;incomplete=result&&result.messages.length>0&&result.messages.length<MESSAGE_SLICE_LIMIT;case 8:i++;_context.next=3;break;case 11:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.onLoadNext=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var chatId,history,fromMessageId,sessionId,result,store;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:chatId=_this.props.chatId;history=_this.state.history;if(chatId){_context2.next=4;break;}return _context2.abrupt(\"return\");case 4:if(!_this.loading){_context2.next=6;break;}return _context2.abrupt(\"return\");case 6:if(!_this.loadMigratedHistory){_context2.next=9;break;}_this.onLoadMigratedHistory();return _context2.abrupt(\"return\");case 9:fromMessageId=history&&history.length>0?history[0].id:0;_this.loading=true;sessionId=_this.sessionId;_context2.next=14;return TdLibController.send({'@type':'getChatHistory',chat_id:chatId,from_message_id:fromMessageId,offset:0,limit:MESSAGE_SLICE_LIMIT}).finally(function(){_this.loading=false;});case 14:result=_context2.sent;if(!(sessionId!==_this.sessionId)){_context2.next=17;break;}return _context2.abrupt(\"return\");case 17:if(!(_this.props.chatId!==chatId)){_context2.next=19;break;}return _context2.abrupt(\"return\");case 19:MessageStore.setItems(result.messages);result.messages.reverse();_this.insertNext(filterMessages(result.messages),function(){if(!result.messages.length){_this.onLoadMigratedHistory();}});store=FileStore.getStore();loadMessageContents(store,result.messages);_this.viewMessages(result.messages);return _context2.abrupt(\"return\",result);case 26:case\"end\":return _context2.stop();}}},_callee2);}));_this.onLoadMigratedHistory=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var chatId,history,supergroupId,fullInfo,basicGroupChat,fromMessageId,sessionId,result,store;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:chatId=_this.props.chatId;history=_this.state.history;if(chatId){_context3.next=4;break;}return _context3.abrupt(\"return\");case 4:if(!_this.loading){_context3.next=6;break;}return _context3.abrupt(\"return\");case 6:supergroupId=getSupergroupId(chatId);if(supergroupId){_context3.next=9;break;}return _context3.abrupt(\"return\");case 9:fullInfo=SupergroupStore.getFullInfo(supergroupId);if(fullInfo){_context3.next=12;break;}return _context3.abrupt(\"return\");case 12:if(fullInfo.upgraded_from_basic_group_id){_context3.next=14;break;}return _context3.abrupt(\"return\");case 14:_this.loadMigratedHistory=true;_context3.next=17;return TdLibController.send({'@type':'createBasicGroupChat',basic_group_id:fullInfo.upgraded_from_basic_group_id});case 17:basicGroupChat=_context3.sent;if(basicGroupChat){_context3.next=20;break;}return _context3.abrupt(\"return\");case 20:fromMessageId=history.length>0&&history[0].chat_id===basicGroupChat.id?history[0].id:0;_this.loading=true;sessionId=_this.sessionId;_context3.next=25;return TdLibController.send({'@type':'getChatHistory',chat_id:basicGroupChat.id,from_message_id:fromMessageId,offset:0,limit:MESSAGE_SLICE_LIMIT}).finally(function(){_this.loading=false;});case 25:result=_context3.sent;if(!(sessionId!==_this.sessionId)){_context3.next=28;break;}return _context3.abrupt(\"return\");case 28:if(!(_this.props.chatId!==chatId)){_context3.next=30;break;}return _context3.abrupt(\"return\");case 30:MessageStore.setItems(result.messages);result.messages.reverse();_this.insertNext(filterMessages(result.messages));store=FileStore.getStore();loadMessageContents(store,result.messages);_this.viewMessages(result.messages);case 36:case\"end\":return _context3.stop();}}},_callee3);}));_this.onLoadPrevious=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var chatId,history,chat,fromMessageId,sessionId,result,store;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:chatId=_this.props.chatId;history=_this.state.history;chat=ChatStore.get(chatId);if(chat){_context4.next=5;break;}return _context4.abrupt(\"return\");case 5:if(!_this.loading){_context4.next=7;break;}return _context4.abrupt(\"return\");case 7:if(!_this.completed){_context4.next=9;break;}return _context4.abrupt(\"return\");case 9:fromMessageId=history&&history.length>0?history[history.length-1].id:0;_this.loading=true;sessionId=_this.sessionId;_context4.next=14;return TdLibController.send({'@type':'getChatHistory',chat_id:chatId,from_message_id:fromMessageId,offset:-MESSAGE_SLICE_LIMIT-1,limit:MESSAGE_SLICE_LIMIT+1}).finally(function(){_this.loading=false;});case 14:result=_context4.sent;if(!(sessionId!==_this.sessionId)){_context4.next=17;break;}return _context4.abrupt(\"return\");case 17:if(!(_this.props.chatId!==chatId)){_context4.next=19;break;}return _context4.abrupt(\"return\");case 19:if(chat.last_message){_this.completed=result.messages.length>0&&chat.last_message.id===result.messages[0].id;}else{_this.completed=true;}filterDuplicateMessages(result,_this.state.history);MessageStore.setItems(result.messages);result.messages.reverse();_this.scrollBehaviorNone=true;_this.insertPrevious(filterMessages(result.messages),{},function(){_this.scrollBehaviorNone=false;});store=FileStore.getStore();loadMessageContents(store,result.messages);_this.viewMessages(result.messages);return _context4.abrupt(\"return\",result);case 29:case\"end\":return _context4.stop();}}},_callee4);}));_this.handleScroll=function(){var _this$state=_this.state,scrollDownVisible=_this$state.scrollDownVisible,replyHistory=_this$state.replyHistory,history=_this$state.history;var list=_this.listRef.current;// console.log(\n//     `[ml] handleScroll\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\n_this.updateItemsInView();if(list.scrollTop<=0){_this.onLoadNext();}else if(list.scrollTop+list.offsetHeight===list.scrollHeight){_this.onLoadPrevious();}if(list.scrollTop+list.offsetHeight===list.scrollHeight){if(_this.completed&&scrollDownVisible){if(_this.prevScrollTop!==list.scrollTop&&_this.prevScrollTop&&_this.prevHistory===history){_this.setState({scrollDownVisible:false,replyHistory:[]});}else if(!replyHistory.length){_this.setState({scrollDownVisible:false});}}}else{if(!scrollDownVisible){_this.setState({scrollDownVisible:true});}}_this.prevScrollTop=list.scrollTop;_this.prevHistory=history;};_this.handleScrollBehavior=function(scrollBehavior,snapshot){var _this$props=_this.props,chatId=_this$props.chatId,messageId=_this$props.messageId;var _ref5=snapshot||{scrollTop:0,scrollHeight:0,offsetHeight:0},scrollTop=_ref5.scrollTop,scrollHeight=_ref5.scrollHeight,offsetHeight=_ref5.offsetHeight;// console.log(\n//     `[ml] handleScrollBehavior\n//     scrollBehavior=${scrollBehavior}\n//     snapshot.scrollTop=${scrollTop}\n//     snapshot.offsetHeight=${offsetHeight}\n//     snapshot.scrollHeight=${scrollHeight}`\n// );\nswitch(scrollBehavior){case ScrollBehaviorEnum.SCROLL_TO_BOTTOM:{_this.scrollToBottom();break;}case ScrollBehaviorEnum.SCROLL_TO_MESSAGE:{_this.scrollToMessage();break;}case ScrollBehaviorEnum.SCROLL_TO_UNREAD:{_this.scrollToUnread();break;}case ScrollBehaviorEnum.KEEP_SCROLL_POSITION:{_this.keepScrollPosition(snapshot);break;}case ScrollBehaviorEnum.NONE:{break;}}};_this.keepScrollPosition=function(snapshot){var scrollTop=snapshot.scrollTop,scrollHeight=snapshot.scrollHeight,offsetHeight=snapshot.offsetHeight;var list=_this.listRef.current;// console.log(\n//     `[ml] keepScrollPosition before\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\nlist.scrollTop=scrollTop+(list.scrollHeight-scrollHeight);// console.log(\n//     `[ml] keepScrollPosition after\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\n};_this.scrollToUnread=function(){var _this$props2=_this.props,chatId=_this$props2.chatId,messageId=_this$props2.messageId;var history=_this.state.history;var list=_this.listRef.current;// console.log(\n//     `MessagesList.scrollToUnread before\n//     chatId=${chatId} messageId=${messageId}\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\nvar scrolled=false;for(var i=0;i<history.length;i++){var itemComponent=_this.itemsMap.get(i);var item=ReactDOM.findDOMNode(itemComponent);if(item){if(itemComponent.props.showUnreadSeparator){list.scrollTop=item.offsetTop;// + unread messages margin-top\nscrolled=true;break;}}}// console.log(\n//     `MessagesList.scrollToUnread after\n//     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\nif(!scrolled){_this.scrollToBottom();}};_this.scrollToMessage=function(){var _this$props3=_this.props,chatId=_this$props3.chatId,messageId=_this$props3.messageId;var history=_this.state.history;var list=_this.listRef.current;// console.log(\n//     `MessagesList.scrollToMessage before\n//     chatId=${chatId} messageId=${messageId}\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\nvar scrolled=false;for(var i=0;i<history.length;i++){var itemComponent=_this.itemsMap.get(i);var item=ReactDOM.findDOMNode(itemComponent);if(item){if(itemComponent.props.messageId===messageId){list.scrollTop=item.offsetTop-list.offsetHeight/2.0;scrolled=true;break;}}}// console.log(\n//     `MessagesList.scrollToMessage after\n//     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\nif(!scrolled){_this.scrollToBottom();}};_this.scrollToBottom=function(){var _this$props4=_this.props,chatId=_this$props4.chatId,messageId=_this$props4.messageId;var list=_this.listRef.current;// console.log(\n//     `MessagesList.scrollToBottom before\n//     chatId=${chatId} messageId=${messageId}\n//     list.scrollTop=${list.scrollTop}\n//     list.offsetHeight=${list.offsetHeight}\n//     list.scrollHeight=${list.scrollHeight}`\n// );\nvar nextScrollTop=list.scrollHeight-list.offsetHeight;if(nextScrollTop!==list.scrollTop){list.scrollTop=list.scrollHeight-list.offsetHeight;// console.log(\n//     `MessagesList.scrollToBottom after\n// chatId=${chatId} messageId=${messageId}\n// list.scrollTop=${list.scrollTop}\n// list.offsetHeight=${list.offsetHeight}\n// list.scrollHeight=${list.scrollHeight}`\n// );\n}else{// console.log(\n//     `MessagesList.scrollToBottom after (no changes)\n// chatId=${chatId} messageId=${messageId}\n// list.scrollTop=${list.scrollTop}\n// list.offsetHeight=${list.offsetHeight}\n// list.scrollHeight=${list.scrollHeight}`\n// );\n}};_this.scrollToStart=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var chatId,chat,fromMessageId,offset,limit,sessionId,result,separatorMessageId,store;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:chatId=_this.props.chatId;chat=ChatStore.get(chatId);if(chat){_context5.next=4;break;}return _context5.abrupt(\"return\");case 4:// console.log('MessagesList.newSessionId scrollToStart');\n_this.sessionId=Date.now();_this.loading=false;_this.completed=false;fromMessageId=0;offset=0;limit=MESSAGE_SLICE_LIMIT;_this.loading=true;sessionId=_this.sessionId;_context5.next=14;return TdLibController.send({'@type':'getChatHistory',chat_id:chat.id,from_message_id:fromMessageId,offset:offset,limit:limit}).finally(function(){_this.loading=false;});case 14:result=_context5.sent;if(!(sessionId!==_this.sessionId)){_context5.next=17;break;}return _context5.abrupt(\"return\");case 17:if(!(_this.props.chatId!==chatId)){_context5.next=19;break;}return _context5.abrupt(\"return\");case 19:if(chat.last_message){_this.completed=result.messages.length>0&&chat.last_message.id===result.messages[0].id;}else{_this.completed=true;}// console.log('MessagesList.scrollToStart scrollDown', false);\n_this.setState({scrollDownVisible:false,replyHistory:[]});MessageStore.setItems(result.messages);result.messages.reverse();separatorMessageId=0;_this.replace(separatorMessageId,result.messages,function(){_this.handleScrollBehavior(ScrollBehaviorEnum.SCROLL_TO_BOTTOM,_this.snapshot);});// load files\nstore=FileStore.getStore();loadMessageContents(store,result.messages);_this.viewMessages(result.messages);_this.loadIncompleteHistory(result);case 29:case\"end\":return _context5.stop();}}},_callee5);}));_this.handleListDragEnter=function(event){event.preventDefault();event.stopPropagation();var chatId=_this.props.chatId;if(!canSendFiles(chatId))return;ApplicationStore.setDragging(true);};_this.handleScrollDownClick=function(event){var replyHistory=_this.state.replyHistory;if(replyHistory.length>0){var lastReply=replyHistory.pop();if(lastReply){var chatId=lastReply.chatId,messageId=lastReply.messageId;if(chatId===_this.props.chatId){openChat(chatId,messageId);}}}else{_this.scrollToStart();}};_this.sessionId=Date.now();_this.state={prevChatId:0,prevMessageId:null,playerOpened:false,history:[],clearHistory:false,selectionActive:false,separatorMessageId:0,scrollDownVisible:false,replyHistory:[]};_this.listRef=React.createRef();_this.itemsRef=React.createRef();_this.defferedActions=[];_this.itemsMap=new Map();_this.updateItemsInView=throttle(_this.updateItemsInView,500);return _this;}_createClass(MessagesList,[{key:\"getSnapshotBeforeUpdate\",value:function getSnapshotBeforeUpdate(prevProps,prevState){var list=this.listRef.current;var scrollTop=list.scrollTop,scrollHeight=list.scrollHeight,offsetHeight=list.offsetHeight;var snapshot={scrollTop:scrollTop,scrollHeight:scrollHeight,offsetHeight:offsetHeight};// console.log(\n//     `MessagesList.getSnapshotBeforeUpdate\n//     chatId=${chatId} messageId=${messageId}\n//     list.scrollTop=${scrollTop}\n//     list.scrollHeight=${scrollHeight}\n//     list.offsetHeight=${offsetHeight}`\n// );\nconsole.log('[ml] getSnapshotBeforeUpdate',snapshot);this.snapshot=snapshot;return snapshot;}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){var _this$props5=this.props,chatId=_this$props5.chatId,messageId=_this$props5.messageId;var scrollDownVisible=this.state.scrollDownVisible;var list=this.listRef.current;// console.log(\n//     `[ml] componentDidUpdate\n//     scrollBehaviorNone=${this.scrollBehaviorNone}\n//     scrollDownVisible=${scrollDownVisible}\n//     list.scrollTop=${list.scrollTop}\n//     list.scrollHeight=${list.scrollHeight}\n//     list.offsetHeight=${list.offsetHeight}`\n// );\nif(prevProps.chatId!==chatId||prevProps.messageId!==messageId){//console.log('[Animation] componentDidUpdate');\nthis.handleSelectChat(chatId,prevProps.chatId,messageId,prevProps.messageId);}else{if(!this.scrollBehaviorNone){this.handleScrollBehavior(ScrollBehaviorEnum.KEEP_SCROLL_POSITION,snapshot);//console.log('[Animation] componentDidUpdate handleScrollBehavior');\n}}}},{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){var _this$props6=this.props,chatId=_this$props6.chatId,messageId=_this$props6.messageId,theme=_this$props6.theme;var _this$state2=this.state,playerOpened=_this$state2.playerOpened,history=_this$state2.history,dragging=_this$state2.dragging,clearHistory=_this$state2.clearHistory,selectionActive=_this$state2.selectionActive,scrollDownVisible=_this$state2.scrollDownVisible;if(nextProps.theme!==theme){// console.log('MessagesList.shouldComponentUpdate theme');\nreturn true;}if(nextProps.chatId!==chatId){// console.log('MessagesList.shouldComponentUpdate chatId');\nreturn true;}if(nextProps.messageId!==messageId){// console.log('MessagesList.shouldComponentUpdate messageId');\nreturn true;}if(nextState.scrollDownVisible!==scrollDownVisible){// console.log('MessagesList.shouldComponentUpdate scrollDownVisible');\nreturn true;}if(nextState.playerOpened!==playerOpened){// console.log('MessagesList.shouldComponentUpdate playerOpened');\nreturn true;}if(!historyEquals(nextState.history,history)){// console.trace('MessagesList.shouldComponentUpdate history', nextState.history, history);\nreturn true;}if(nextState.dragging!==dragging){// console.log('MessagesList.shouldComponentUpdate dragging');\nreturn true;}if(nextState.clearHistory!==clearHistory){// console.log('MessagesList.shouldComponentUpdate clearHistory');\nreturn true;}if(nextState.selectionActive!==selectionActive){// console.log('MessagesList.shouldComponentUpdate selectionActive');\nreturn true;}// console.log('MessagesList.shouldComponentUpdate false');\nreturn false;}},{key:\"componentDidMount\",value:function componentDidMount(){MessageStore.on('updateNewMessage',this.onUpdateNewMessage);MessageStore.on('updateDeleteMessages',this.onUpdateDeleteMessages);MessageStore.on('updateMessageContent',this.onUpdateMessageContent);MessageStore.on('updateMessageSendSucceeded',this.onUpdateMessageSendSucceeded);MessageStore.on('clientUpdateMessageSelected',this.onClientUpdateSelection);MessageStore.on('clientUpdateClearSelection',this.onClientUpdateSelection);MessageStore.on('clientUpdateOpenReply',this.onClientUpdateOpenReply);ChatStore.on('updateChatLastMessage',this.onUpdateChatLastMessage);ChatStore.on('clientUpdateClearHistory',this.onClientUpdateClearHistory);ApplicationStore.on('clientUpdateFocusWindow',this.onClientUpdateFocusWindow);PlayerStore.on('clientUpdateMediaActive',this.onClientUpdateMediaActive);PlayerStore.on('clientUpdateMediaEnding',this.onClientUpdateMediaEnding);PlayerStore.on('clientUpdateMediaEnd',this.onClientUpdateMediaEnd);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){MessageStore.removeListener('updateNewMessage',this.onUpdateNewMessage);MessageStore.removeListener('updateDeleteMessages',this.onUpdateDeleteMessages);MessageStore.removeListener('updateMessageContent',this.onUpdateMessageContent);MessageStore.removeListener('updateMessageSendSucceeded',this.onUpdateMessageSendSucceeded);MessageStore.removeListener('clientUpdateMessageSelected',this.onClientUpdateSelection);MessageStore.removeListener('clientUpdateClearSelection',this.onClientUpdateSelection);MessageStore.removeListener('clientUpdateOpenReply',this.onClientUpdateOpenReply);ChatStore.removeListener('updateChatLastMessage',this.onUpdateChatLastMessage);ChatStore.removeListener('clientUpdateClearHistory',this.onClientUpdateClearHistory);ApplicationStore.removeListener('clientUpdateFocusWindow',this.onClientUpdateFocusWindow);PlayerStore.removeListener('clientUpdateMediaActive',this.onClientUpdateMediaActive);PlayerStore.removeListener('clientUpdateMediaEnding',this.onClientUpdateMediaEnding);PlayerStore.removeListener('clientUpdateMediaEnd',this.onClientUpdateMediaEnd);}},{key:\"handleSelectChat\",value:function(){var _handleSelectChat=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(chatId,previousChatId,messageId,previousMessageId){var _this2=this;var chat,previousChat,unread,fromMessageId,offset,limit,sessionId,result,separatorMessageId,i,id,scrollBehavior,store;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:chat=ChatStore.get(chatId);previousChat=ChatStore.get(previousChatId);//console.log('MessagesList.newSessionId handleSelectChat');\nthis.sessionId=Date.now();this.loading=false;this.completed=false;this.loadMigratedHistory=false;this.defferedActions=[];if(!chat){_context6.next=49;break;}TdLibController.send({'@type':'openChat',chat_id:chat.id});unread=!messageId&&chat.unread_count>0;fromMessageId=unread&&chat.unread_count>1?chat.last_read_inbox_message_id:messageId?messageId:0;offset=unread&&chat.unread_count>1||messageId?-1-MESSAGE_SLICE_LIMIT:0;limit=unread&&chat.unread_count>1||messageId?2*MESSAGE_SLICE_LIMIT:MESSAGE_SLICE_LIMIT;this.loading=true;sessionId=this.sessionId;_context6.next=17;return TdLibController.send({'@type':'getChatHistory',chat_id:chat.id,from_message_id:fromMessageId,offset:offset,limit:limit}).finally(function(){_this2.loading=false;});case 17:result=_context6.sent;if(!(sessionId!==this.sessionId)){_context6.next=20;break;}return _context6.abrupt(\"return\");case 20:if(chat.last_message){this.completed=result.messages.length>0&&chat.last_message.id===result.messages[0].id;}else{this.completed=true;}MessageStore.setItems(result.messages);result.messages.reverse();separatorMessageId=Number.MAX_VALUE;if(!(chat&&chat.unread_count>1)){_context6.next=36;break;}i=result.messages.length-1;case 26:if(!(i>=0)){_context6.next=36;break;}id=result.messages[i].id;if(!(!result.messages[i].is_outgoing&&id>chat.last_read_inbox_message_id&&id<separatorMessageId)){_context6.next=32;break;}separatorMessageId=id;_context6.next=33;break;case 32:return _context6.abrupt(\"break\",36);case 33:i--;_context6.next=26;break;case 36:separatorMessageId=separatorMessageId===Number.MAX_VALUE?0:separatorMessageId;scrollBehavior=ScrollBehaviorEnum.SCROLL_TO_BOTTOM;if(messageId){scrollBehavior=ScrollBehaviorEnum.SCROLL_TO_MESSAGE;}else if(unread&&separatorMessageId){scrollBehavior=ScrollBehaviorEnum.SCROLL_TO_UNREAD;}this.replace(separatorMessageId,result.messages,function(){_this2.handleScrollBehavior(scrollBehavior,_this2.snapshot);if(messageId){highlightMessage(chatId,messageId);}});// load files\nstore=FileStore.getStore();loadMessageContents(store,result.messages);this.viewMessages(result.messages);loadChatsContent(store,[chatId]);loadDraftContent(store,chatId);this.loadIncompleteHistory(result);// load full info\ngetChatFullInfo(chat.id);_context6.next=51;break;case 49:this.loading=true;this.replace(0,[],function(){_this2.loading=false;});case 51:if(previousChat&&previousChatId!==chatId){TdLibController.send({'@type':'closeChat',chat_id:previousChatId});}case 52:case\"end\":return _context6.stop();}}},_callee6,this);}));function handleSelectChat(_x2,_x3,_x4,_x5){return _handleSelectChat.apply(this,arguments);}return handleSelectChat;}()},{key:\"viewMessages\",value:function viewMessages(messages){if(!messages)return;if(messages.length===0)return;if(!messages[0].chat_id)return;var viewAction=function viewAction(){TdLibController.send({'@type':'viewMessages',chat_id:messages[0].chat_id,message_ids:messages.map(function(x){return x.id;})});};if(window.hasFocus){viewAction();}else{this.defferedActions.push(viewAction);}}},{key:\"cancelLoadMessageContents\",value:function cancelLoadMessageContents(messages){//return;\nfor(var i=messages.length-1;i>=0;i--){var message=messages[i];if(message&&message.content){switch(message.content['@type']){case'messagePhoto':{var _this$getMessagePhoto=this.getMessagePhoto(message),_this$getMessagePhoto2=_slicedToArray(_this$getMessagePhoto,2),id=_this$getMessagePhoto2[0],pid=_this$getMessagePhoto2[1];if(pid){var obj=getPhotoSize(message.content.photo.sizes);if(!obj.blob){FileStore.cancelGetRemoteFile(id,message);}}break;}case'messageSticker':{var _this$getMessageStick=this.getMessageSticker(message),_this$getMessageStick2=_slicedToArray(_this$getMessageStick,2),_id=_this$getMessageStick2[0],_pid=_this$getMessageStick2[1];if(_pid){var _obj=message.content.sticker.sticker;if(!_obj.blob){FileStore.cancelGetRemoteFile(_id,message);}}break;}default:break;}}}}},{key:\"replace\",value:function replace(separatorMessageId,history,callback){this.setState({separatorMessageId:separatorMessageId,history:history},callback);}},{key:\"replaceMessage\",value:function replaceMessage(oldMessageId,message,callback){if(!message){if(callback)callback();return;}this.setState({history:this.state.history.filter(function(x){return x.id!==oldMessageId;}).concat([message])},callback);}},{key:\"insertNext\",value:function insertNext(history,callback){if(history.length===0){if(callback)callback();return;}this.setState({history:history.concat(this.state.history)},callback);}},{key:\"insertPrevious\",value:function insertPrevious(history,newState,callback){if(history.length===0){if(callback)callback();return;}this.setState(_objectSpread({history:this.state.history.concat(history)},newState),callback);}},{key:\"deleteHistory\",value:function deleteHistory(message_ids,callback){var history=this.state.history;if(history.length===0){if(callback)callback();return;}var map=new Map(message_ids.map(function(x){return[x,x];}));this.setState({history:history.filter(function(x){return!map.has(x.id);})},callback);}},{key:\"render\",value:function render(){var _this3=this;var _this$props7=this.props,classes=_this$props7.classes,chatId=_this$props7.chatId;var _this$state3=this.state,history=_this$state3.history,separatorMessageId=_this$state3.separatorMessageId,clearHistory=_this$state3.clearHistory,selectionActive=_this$state3.selectionActive,scrollDownVisible=_this$state3.scrollDownVisible;// console.log('MessagesList.render scrollDown', this.props.chatId, this.props.messageId, scrollDownVisible, history.length);\nvar isChannel=isChannelChat(chatId);var prevShowDate=false;this.itemsMap.clear();this.messages=clearHistory?null:history.map(function(x,i){var prevMessage=i>0?history[i-1]:null;var date=new Date(x.date*1000);var prevDate=prevMessage?new Date(prevMessage.date*1000):date;var showDate=false;if(i===0||date.getFullYear()!==prevDate.getFullYear()||date.getMonth()!==prevDate.getMonth()||date.getDate()!==prevDate.getDate()){showDate=true;}var m=null;if(isServiceMessage(x)){m=React.createElement(ServiceMessage,{key:\"chat_id=\".concat(x.chat_id,\" message_id=\").concat(x.id),ref:function ref(el){return _this3.itemsMap.set(i,el);},chatId:x.chat_id,messageId:x.id,showUnreadSeparator:separatorMessageId===x.id});}else{var showTitle=prevShowDate||isChannel||i===0||prevMessage&&(isServiceMessage(prevMessage)||x.sender_user_id!==prevMessage.sender_user_id||x.date-prevMessage.date>MESSAGE_SPLIT_MAX_TIME_S);m=React.createElement(Message,{key:\"chat_id=\".concat(x.chat_id,\" message_id=\").concat(x.id),ref:function ref(el){return _this3.itemsMap.set(i,el);},chatId:x.chat_id,messageId:x.id,sendingState:x.sending_state,showTitle:showTitle,showUnreadSeparator:separatorMessageId===x.id});}// return m;\nreturn React.createElement(\"div\",{key:\"chat_id=\".concat(x.chat_id,\" message_id=\").concat(x.id)},showDate&&React.createElement(DayMeta,{date:x.date}),m);});return React.createElement(\"div\",{className:classNames(classes.background,'messages-list',{'messages-list-selection-active':selectionActive}),onDragEnter:this.handleListDragEnter},React.createElement(\"div\",{ref:this.listRef,className:\"messages-list-wrapper\",onScroll:this.handleScroll},React.createElement(\"div\",{className:\"messages-list-top\"}),React.createElement(\"div\",{ref:this.itemsRef,className:\"messages-list-items\"},this.messages)),React.createElement(Placeholder,null),scrollDownVisible&&React.createElement(ScrollDownButton,{onClick:this.handleScrollDownClick}),React.createElement(PinnedMessage,{chatId:chatId}),React.createElement(FilesDropTarget,null),React.createElement(StickersHint,null));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.chatId!==state.prevChatId||props.messageId!==state.prevMessageId){return{prevChatId:props.chatId,prevMessageId:props.messageId,clearHistory:false,selectionActive:false,separatorMessageId:0,scrollDownVisible:props.chatId===state.prevChatId&&(state.scrollDownVisible||state.replyHistory.length>0),replyHistory:props.chatId!==state.prevChatId?[]:state.replyHistory};}return null;}}]);return MessagesList;}(React.Component);export default withStyles(styles,{withTheme:true})(MessagesList);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnMiddle/MessagesList.js"],"names":["React","ReactDOM","classNames","withStyles","DayMeta","FilesDropTarget","Message","PinnedMessage","Placeholder","ScrollDownButton","ServiceMessage","StickersHint","throttle","getPhotoSize","itemsInView","historyEquals","loadChatsContent","loadDraftContent","loadMessageContents","filterDuplicateMessages","filterMessages","isServiceMessage","canSendFiles","getChatFullInfo","getSupergroupId","isChannelChat","highlightMessage","openChat","MESSAGE_SLICE_LIMIT","MESSAGE_SPLIT_MAX_TIME_S","ApplicationStore","ChatStore","FileStore","MessageStore","PlayerStore","SupergroupStore","TdLibController","ScrollBehaviorEnum","Object","freeze","SCROLL_TO_BOTTOM","SCROLL_TO_UNREAD","SCROLL_TO_MESSAGE","KEEP_SCROLL_POSITION","NONE","styles","theme","background","palette","type","grey","MessagesList","props","onClientUpdateFocusWindow","update","focused","defferedActions","forEach","x","onClientUpdateOpenReply","chatId","messageId","replyHistory","state","lastItem","length","push","onClientUpdateMediaActive","list","listRef","current","prevOffsetHeight","offsetHeight","prevScrollTop","scrollTop","setState","playerOpened","Math","abs","onClientUpdateMediaEnding","udpate","onClientUpdateMediaEnd","onClientUpdateSelection","selectionActive","selectedItems","size","onClientUpdateClearHistory","clearHistory","inProgress","onUpdateMessageContent","history","chat_id","message_id","findIndex","id","message","get","store","getStore","onUpdateChatLastMessage","onUpdateMessageSendSucceeded","completed","old_message_id","scrollBehavior","is_outgoing","replaceMessage","handleScrollBehavior","snapshot","viewMessages","onUpdateNewMessage","scrollHeight","newState","scrollDownVisible","scrollBehaviorNone","insertPrevious","onUpdateDeleteMessages","is_permanent","message_ids","deleteHistory","updateItemsInView","messages","Map","items","itemsRef","i","messageWrapper","children","key","set","clientUpdate","loadIncompleteHistory","result","MAX_ITERATIONS","incomplete","onLoadNext","loading","loadMigratedHistory","onLoadMigratedHistory","fromMessageId","sessionId","send","from_message_id","offset","limit","finally","setItems","reverse","insertNext","supergroupId","fullInfo","getFullInfo","upgraded_from_basic_group_id","basic_group_id","basicGroupChat","onLoadPrevious","chat","last_message","handleScroll","prevHistory","scrollToBottom","scrollToMessage","scrollToUnread","keepScrollPosition","scrolled","itemComponent","itemsMap","item","findDOMNode","showUnreadSeparator","offsetTop","nextScrollTop","scrollToStart","Date","now","separatorMessageId","replace","handleListDragEnter","event","preventDefault","stopPropagation","setDragging","handleScrollDownClick","lastReply","pop","prevChatId","prevMessageId","createRef","prevProps","prevState","console","log","handleSelectChat","nextProps","nextState","dragging","on","removeListener","previousChatId","previousMessageId","previousChat","unread","unread_count","last_read_inbox_message_id","Number","MAX_VALUE","viewAction","map","window","hasFocus","content","getMessagePhoto","pid","obj","photo","sizes","blob","cancelGetRemoteFile","getMessageSticker","sticker","callback","oldMessageId","filter","concat","has","classes","isChannel","prevShowDate","clear","prevMessage","date","prevDate","showDate","getFullYear","getMonth","getDate","m","el","showTitle","sender_user_id","sending_state","Component","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport DayMeta from '../Message/DayMeta';\nimport FilesDropTarget from './FilesDropTarget';\nimport Message from '../Message/Message';\nimport PinnedMessage from './PinnedMessage';\nimport Placeholder from './Placeholder';\nimport ScrollDownButton from './ScrollDownButton';\nimport ServiceMessage from '../Message/ServiceMessage';\nimport StickersHint from './StickersHint';\nimport { throttle, getPhotoSize, itemsInView, historyEquals } from '../../Utils/Common';\nimport { loadChatsContent, loadDraftContent, loadMessageContents } from '../../Utils/File';\nimport { filterDuplicateMessages, filterMessages } from '../../Utils/Message';\nimport { isServiceMessage } from '../../Utils/ServiceMessage';\nimport { canSendFiles, getChatFullInfo, getSupergroupId, isChannelChat } from '../../Utils/Chat';\nimport { highlightMessage, openChat } from '../../Actions/Client';\nimport { MESSAGE_SLICE_LIMIT, MESSAGE_SPLIT_MAX_TIME_S } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MessagesList.css';\n\nconst ScrollBehaviorEnum = Object.freeze({\n    SCROLL_TO_BOTTOM: 'SCROLL_TO_BOTTOM',\n    SCROLL_TO_UNREAD: 'SCROLL_TO_UNREAD',\n    SCROLL_TO_MESSAGE: 'SCROLL_TO_MESSAGE',\n    KEEP_SCROLL_POSITION: 'KEEP_SCROLL_POSITION',\n    NONE: 'NONE'\n});\n\nconst styles = theme => ({\n    background: {\n        background: theme.palette.type === 'dark' ? theme.palette.grey[900] : 'transparent'\n    }\n});\n\nclass MessagesList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // console.log(`MessagesList.ctor chat_id=${props.chatId} message_id=${props.messageId}`);\n\n        // console.log('MessagesList.newSessionId ctor');\n        this.sessionId = Date.now();\n        this.state = {\n            prevChatId: 0,\n            prevMessageId: null,\n            playerOpened: false,\n            history: [],\n            clearHistory: false,\n            selectionActive: false,\n            separatorMessageId: 0,\n            scrollDownVisible: false,\n            replyHistory: []\n        };\n\n        this.listRef = React.createRef();\n        this.itemsRef = React.createRef();\n\n        this.defferedActions = [];\n        this.itemsMap = new Map();\n\n        this.updateItemsInView = throttle(this.updateItemsInView, 500);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n            return {\n                prevChatId: props.chatId,\n                prevMessageId: props.messageId,\n                clearHistory: false,\n                selectionActive: false,\n                separatorMessageId: 0,\n                scrollDownVisible:\n                    props.chatId === state.prevChatId && (state.scrollDownVisible || state.replyHistory.length > 0),\n                replyHistory: props.chatId !== state.prevChatId ? [] : state.replyHistory\n            };\n        }\n\n        return null;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const list = this.listRef.current;\n        const { scrollTop, scrollHeight, offsetHeight } = list;\n\n        const snapshot = {\n            scrollTop,\n            scrollHeight,\n            offsetHeight\n        };\n\n        // console.log(\n        //     `MessagesList.getSnapshotBeforeUpdate\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${scrollTop}\n        //     list.scrollHeight=${scrollHeight}\n        //     list.offsetHeight=${offsetHeight}`\n        // );\n\n        console.log('[ml] getSnapshotBeforeUpdate', snapshot);\n        this.snapshot = snapshot;\n        return snapshot;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, messageId } = this.props;\n        const { scrollDownVisible } = this.state;\n\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] componentDidUpdate\n        //     scrollBehaviorNone=${this.scrollBehaviorNone}\n        //     scrollDownVisible=${scrollDownVisible}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.scrollHeight=${list.scrollHeight}\n        //     list.offsetHeight=${list.offsetHeight}`\n        // );\n\n        if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n            //console.log('[Animation] componentDidUpdate');\n            this.handleSelectChat(chatId, prevProps.chatId, messageId, prevProps.messageId);\n        } else {\n            if (!this.scrollBehaviorNone) {\n                this.handleScrollBehavior(ScrollBehaviorEnum.KEEP_SCROLL_POSITION, snapshot);\n                //console.log('[Animation] componentDidUpdate handleScrollBehavior');\n            }\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, theme } = this.props;\n        const { playerOpened, history, dragging, clearHistory, selectionActive, scrollDownVisible } = this.state;\n\n        if (nextProps.theme !== theme) {\n            // console.log('MessagesList.shouldComponentUpdate theme');\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            // console.log('MessagesList.shouldComponentUpdate chatId');\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            // console.log('MessagesList.shouldComponentUpdate messageId');\n            return true;\n        }\n\n        if (nextState.scrollDownVisible !== scrollDownVisible) {\n            // console.log('MessagesList.shouldComponentUpdate scrollDownVisible');\n            return true;\n        }\n\n        if (nextState.playerOpened !== playerOpened) {\n            // console.log('MessagesList.shouldComponentUpdate playerOpened');\n            return true;\n        }\n\n        if (!historyEquals(nextState.history, history)) {\n            // console.trace('MessagesList.shouldComponentUpdate history', nextState.history, history);\n            return true;\n        }\n\n        if (nextState.dragging !== dragging) {\n            // console.log('MessagesList.shouldComponentUpdate dragging');\n            return true;\n        }\n\n        if (nextState.clearHistory !== clearHistory) {\n            // console.log('MessagesList.shouldComponentUpdate clearHistory');\n            return true;\n        }\n\n        if (nextState.selectionActive !== selectionActive) {\n            // console.log('MessagesList.shouldComponentUpdate selectionActive');\n            return true;\n        }\n\n        // console.log('MessagesList.shouldComponentUpdate false');\n        return false;\n    }\n\n    componentDidMount() {\n        MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n        MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateSelection);\n        MessageStore.on('clientUpdateClearSelection', this.onClientUpdateSelection);\n        MessageStore.on('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n        ChatStore.on('updateChatLastMessage', this.onUpdateChatLastMessage);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.removeListener('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n        MessageStore.removeListener('clientUpdateMessageSelected', this.onClientUpdateSelection);\n        MessageStore.removeListener('clientUpdateClearSelection', this.onClientUpdateSelection);\n        MessageStore.removeListener('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdateChatLastMessage);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    onClientUpdateFocusWindow = update => {\n        const { focused } = update;\n        if (focused) {\n            this.defferedActions.forEach(x => x());\n            this.defferedActions = [];\n        }\n    };\n\n    onClientUpdateOpenReply = update => {\n        const { chatId, messageId } = update;\n        const { replyHistory } = this.state;\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        const lastItem = replyHistory.length > 0 ? replyHistory[replyHistory.length - 1] : null;\n        if (lastItem && lastItem.chatId === chatId && lastItem.messageId === messageId) {\n            return;\n        }\n\n        replyHistory.push({ chatId, messageId });\n    };\n\n    onClientUpdateMediaActive = update => {\n        const list = this.listRef.current;\n\n        const prevOffsetHeight = list.offsetHeight;\n        const prevScrollTop = list.scrollTop;\n        this.setState({ playerOpened: true }, () => {\n            if (list.scrollTop === prevScrollTop) {\n                list.scrollTop += Math.abs(prevOffsetHeight - list.offsetHeight);\n            }\n        });\n    };\n\n    onClientUpdateMediaEnding = udpate => {\n        const list = this.listRef.current;\n\n        this.prevOffsetHeight = list.offsetHeight;\n        this.prevScrollTop = list.scrollTop;\n    };\n\n    onClientUpdateMediaEnd = udpate => {\n        const list = this.listRef.current;\n\n        //const prevOffsetHeight = list.offsetHeight;\n        //const prevScrollTop = list.scrollTop;\n\n        this.setState({ playerOpened: false }, () => {\n            if (list.scrollTop === this.prevScrollTop) {\n                list.scrollTop -= Math.abs(this.prevOffsetHeight - list.offsetHeight);\n            }\n        });\n    };\n\n    onClientUpdateSelection = update => {\n        this.setState({\n            selectionActive: MessageStore.selectedItems.size > 0\n        });\n    };\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.setState({ clearHistory: update.inProgress });\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n        const { chat_id, message_id } = update;\n\n        if (chatId !== chat_id) return;\n\n        if (history.findIndex(x => x.id === message_id) !== -1) {\n            const message = MessageStore.get(chat_id, message_id);\n            if (!message) return;\n\n            const store = FileStore.getStore();\n            loadMessageContents(store, [message]);\n        }\n    };\n\n    onUpdateChatLastMessage = update => {\n        const { chatId } = this.props;\n        if (chatId !== update.chat_id) return;\n    };\n\n    onUpdateMessageSendSucceeded = update => {\n        if (!this.completed) return;\n\n        const { message, old_message_id } = update;\n        const { chatId } = this.props;\n        if (chatId !== message.chat_id) return;\n\n        // let handleSendSucceeded = false;\n        // const { content } = message;\n        // switch (content['@type']) {\n        //     case 'messagePoll': {\n        //         handleSendSucceeded = true;\n        //         break;\n        //     }\n        // }\n        //\n        // if (!handleSendSucceeded) return;\n\n        const scrollBehavior = message.is_outgoing\n            ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM\n            : ScrollBehaviorEnum.KEEP_SCROLL_POSITION;\n\n        this.replaceMessage(old_message_id, message, () => {\n            if (scrollBehavior !== ScrollBehaviorEnum.KEEP_SCROLL_POSITION) {\n                this.handleScrollBehavior(scrollBehavior, this.snapshot);\n            }\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n        this.viewMessages([message]);\n    };\n\n    onUpdateNewMessage = update => {\n        if (!this.completed) return;\n\n        const { message } = update;\n        const { chatId } = this.props;\n        if (chatId !== message.chat_id) return;\n\n        const list = this.listRef.current;\n\n        let scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.NONE;\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n        }\n\n        const newState = message.is_outgoing ? { scrollDownVisible: false } : {};\n\n        const history = [message];\n        this.scrollBehaviorNone = true;\n        this.insertPrevious(filterMessages(history), newState, () => {\n            this.scrollBehaviorNone = false;\n            this.handleScrollBehavior(scrollBehavior, this.snapshot);\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, history);\n        this.viewMessages(history);\n    };\n\n    onUpdateDeleteMessages = update => {\n        const { chatId } = this.props;\n        const { chat_id, is_permanent, message_ids } = update;\n        if (chatId !== chat_id) return;\n\n        if (!is_permanent) return;\n\n        this.deleteHistory(message_ids);\n    };\n\n    updateItemsInView = () => {\n        if (!this.messages) return;\n\n        const messages = new Map();\n        const items = itemsInView(this.listRef, this.itemsRef);\n        for (let i = 0; i < items.length; i++) {\n            const messageWrapper = this.messages[items[i]];\n            if (messageWrapper) {\n                const message = messageWrapper.props.children[1];\n                const { chatId, messageId } = message.props;\n                const key = `${chatId}_${messageId}`;\n                messages.set(key, key);\n            }\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMessagesInView',\n            messages: messages\n        });\n        return;\n\n        if (!messages.length) return;\n\n        /*let ids = messages.map(x => x.id);\n        console.log('[perf] load_messages_contents ids=[' + ids + ']');\n\n                let messagesMap = new Map(messages.map((i) => [i.id, i]));\n\n                if (this.previousMessages){\n                    let cancelMessages = [];\n                    for (let i = 0; i < this.previousMessages.length; i++){\n                        if (!messagesMap.has(this.previousMessages[i].id)){\n                            cancelMessages.push(this.previousMessages[i]);\n                        }\n                    }\n                    if (cancelMessages.length > 0) {\n                        this.cancelLoadMessageContents(cancelMessages);\n                    }\n                }\n                this.previousMessages = messages;*/\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n    };\n\n    async handleSelectChat(chatId, previousChatId, messageId, previousMessageId) {\n        const chat = ChatStore.get(chatId);\n        const previousChat = ChatStore.get(previousChatId);\n\n        //console.log('MessagesList.newSessionId handleSelectChat');\n        this.sessionId = Date.now();\n        this.loading = false;\n        this.completed = false;\n        this.loadMigratedHistory = false;\n        this.defferedActions = [];\n\n        if (chat) {\n            TdLibController.send({\n                '@type': 'openChat',\n                chat_id: chat.id\n            });\n\n            const unread = !messageId && chat.unread_count > 0;\n            const fromMessageId =\n                unread && chat.unread_count > 1 ? chat.last_read_inbox_message_id : messageId ? messageId : 0;\n            const offset = (unread && chat.unread_count > 1) || messageId ? -1 - MESSAGE_SLICE_LIMIT : 0;\n            const limit =\n                (unread && chat.unread_count > 1) || messageId ? 2 * MESSAGE_SLICE_LIMIT : MESSAGE_SLICE_LIMIT;\n\n            this.loading = true;\n            const sessionId = this.sessionId;\n            const result = await TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: chat.id,\n                from_message_id: fromMessageId,\n                offset: offset,\n                limit: limit\n            }).finally(() => {\n                this.loading = false;\n            });\n\n            if (sessionId !== this.sessionId) {\n                return;\n            }\n\n            if (chat.last_message) {\n                this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n            } else {\n                this.completed = true;\n            }\n\n            MessageStore.setItems(result.messages);\n            result.messages.reverse();\n\n            let separatorMessageId = Number.MAX_VALUE;\n            if (chat && chat.unread_count > 1) {\n                for (let i = result.messages.length - 1; i >= 0; i--) {\n                    const { id } = result.messages[i];\n                    if (\n                        !result.messages[i].is_outgoing &&\n                        id > chat.last_read_inbox_message_id &&\n                        id < separatorMessageId\n                    ) {\n                        separatorMessageId = id;\n                    } else {\n                        break;\n                    }\n                }\n            }\n            separatorMessageId = separatorMessageId === Number.MAX_VALUE ? 0 : separatorMessageId;\n\n            let scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n            if (messageId) {\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_MESSAGE;\n            } else if (unread && separatorMessageId) {\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_UNREAD;\n            }\n\n            this.replace(separatorMessageId, result.messages, () => {\n                this.handleScrollBehavior(scrollBehavior, this.snapshot);\n                if (messageId) {\n                    highlightMessage(chatId, messageId);\n                }\n            });\n\n            // load files\n            const store = FileStore.getStore();\n            loadMessageContents(store, result.messages);\n            this.viewMessages(result.messages);\n\n            loadChatsContent(store, [chatId]);\n            loadDraftContent(store, chatId);\n\n            this.loadIncompleteHistory(result);\n\n            // load full info\n            getChatFullInfo(chat.id);\n        } else {\n            this.loading = true;\n            this.replace(0, [], () => {\n                this.loading = false;\n            });\n        }\n\n        if (previousChat && previousChatId !== chatId) {\n            TdLibController.send({\n                '@type': 'closeChat',\n                chat_id: previousChatId\n            });\n        }\n    }\n\n    viewMessages(messages) {\n        if (!messages) return;\n        if (messages.length === 0) return;\n        if (!messages[0].chat_id) return;\n\n        const viewAction = () => {\n            TdLibController.send({\n                '@type': 'viewMessages',\n                chat_id: messages[0].chat_id,\n                message_ids: messages.map(x => x.id)\n            });\n        };\n\n        if (window.hasFocus) {\n            viewAction();\n        } else {\n            this.defferedActions.push(viewAction);\n        }\n    }\n\n    cancelLoadMessageContents(messages) {\n        //return;\n        for (let i = messages.length - 1; i >= 0; i--) {\n            let message = messages[i];\n            if (message && message.content) {\n                switch (message.content['@type']) {\n                    case 'messagePhoto': {\n                        let [id, pid] = this.getMessagePhoto(message);\n                        if (pid) {\n                            let obj = getPhotoSize(message.content.photo.sizes);\n                            if (!obj.blob) {\n                                FileStore.cancelGetRemoteFile(id, message);\n                            }\n                        }\n                        break;\n                    }\n                    case 'messageSticker': {\n                        let [id, pid] = this.getMessageSticker(message);\n                        if (pid) {\n                            let obj = message.content.sticker.sticker;\n                            if (!obj.blob) {\n                                FileStore.cancelGetRemoteFile(id, message);\n                            }\n                        }\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    loadIncompleteHistory = async result => {\n        const MAX_ITERATIONS = 5;\n        let incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n\n        for (let i = 0; i < MAX_ITERATIONS && incomplete; i++) {\n            result = await this.onLoadNext();\n            incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n        }\n    };\n\n    onLoadNext = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        if (!chatId) return;\n        if (this.loading) return;\n\n        if (this.loadMigratedHistory) {\n            this.onLoadMigratedHistory();\n            return;\n        }\n\n        const fromMessageId = history && history.length > 0 ? history[0].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        let result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: MESSAGE_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.insertNext(filterMessages(result.messages), () => {\n            if (!result.messages.length) {\n                this.onLoadMigratedHistory();\n            }\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        return result;\n    };\n\n    onLoadMigratedHistory = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        if (!chatId) return;\n        if (this.loading) return;\n\n        const supergroupId = getSupergroupId(chatId);\n        if (!supergroupId) return;\n\n        const fullInfo = SupergroupStore.getFullInfo(supergroupId);\n        if (!fullInfo) return;\n        if (!fullInfo.upgraded_from_basic_group_id) return;\n\n        this.loadMigratedHistory = true;\n\n        const basicGroupChat = await TdLibController.send({\n            '@type': 'createBasicGroupChat',\n            basic_group_id: fullInfo.upgraded_from_basic_group_id\n        });\n\n        if (!basicGroupChat) return;\n\n        const fromMessageId = history.length > 0 && history[0].chat_id === basicGroupChat.id ? history[0].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        const result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: basicGroupChat.id,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: MESSAGE_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.insertNext(filterMessages(result.messages));\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n    };\n\n    onLoadPrevious = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        if (!chat) return;\n        if (this.loading) return;\n        if (this.completed) return;\n\n        const fromMessageId = history && history.length > 0 ? history[history.length - 1].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        let result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            offset: -MESSAGE_SLICE_LIMIT - 1,\n            limit: MESSAGE_SLICE_LIMIT + 1\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        if (chat.last_message) {\n            this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n        } else {\n            this.completed = true;\n        }\n\n        filterDuplicateMessages(result, this.state.history);\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.scrollBehaviorNone = true;\n        this.insertPrevious(filterMessages(result.messages), {}, () => {\n            this.scrollBehaviorNone = false;\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        return result;\n    };\n\n    replace(separatorMessageId, history, callback) {\n        this.setState({ separatorMessageId, history }, callback);\n    }\n\n    replaceMessage(oldMessageId, message, callback) {\n        if (!message) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState(\n            {\n                history: this.state.history.filter(x => x.id !== oldMessageId).concat([message])\n            },\n            callback\n        );\n    }\n\n    insertNext(history, callback) {\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ history: history.concat(this.state.history) }, callback);\n    }\n\n    insertPrevious(history, newState, callback) {\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ history: this.state.history.concat(history), ...newState }, callback);\n    }\n\n    deleteHistory(message_ids, callback) {\n        const { history } = this.state;\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        const map = new Map(message_ids.map(x => [x, x]));\n        this.setState({ history: history.filter(x => !map.has(x.id)) }, callback);\n    }\n\n    handleScroll = () => {\n        const { scrollDownVisible, replyHistory, history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] handleScroll\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        this.updateItemsInView();\n\n        if (list.scrollTop <= 0) {\n            this.onLoadNext();\n        } else if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n            this.onLoadPrevious();\n        }\n\n        if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n            if (this.completed && scrollDownVisible) {\n                if (this.prevScrollTop !== list.scrollTop && this.prevScrollTop && this.prevHistory === history) {\n                    this.setState({\n                        scrollDownVisible: false,\n                        replyHistory: []\n                    });\n                } else if (!replyHistory.length) {\n                    this.setState({\n                        scrollDownVisible: false\n                    });\n                }\n            }\n        } else {\n            if (!scrollDownVisible) {\n                this.setState({ scrollDownVisible: true });\n            }\n        }\n\n        this.prevScrollTop = list.scrollTop;\n        this.prevHistory = history;\n    };\n\n    handleScrollBehavior = (scrollBehavior, snapshot) => {\n        const { chatId, messageId } = this.props;\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot || {\n            scrollTop: 0,\n            scrollHeight: 0,\n            offsetHeight: 0\n        };\n\n        // console.log(\n        //     `[ml] handleScrollBehavior\n        //     scrollBehavior=${scrollBehavior}\n        //     snapshot.scrollTop=${scrollTop}\n        //     snapshot.offsetHeight=${offsetHeight}\n        //     snapshot.scrollHeight=${scrollHeight}`\n        // );\n\n        switch (scrollBehavior) {\n            case ScrollBehaviorEnum.SCROLL_TO_BOTTOM: {\n                this.scrollToBottom();\n                break;\n            }\n            case ScrollBehaviorEnum.SCROLL_TO_MESSAGE: {\n                this.scrollToMessage();\n                break;\n            }\n            case ScrollBehaviorEnum.SCROLL_TO_UNREAD: {\n                this.scrollToUnread();\n                break;\n            }\n            case ScrollBehaviorEnum.KEEP_SCROLL_POSITION: {\n                this.keepScrollPosition(snapshot);\n                break;\n            }\n            case ScrollBehaviorEnum.NONE: {\n                break;\n            }\n        }\n    };\n\n    keepScrollPosition = snapshot => {\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] keepScrollPosition before\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        list.scrollTop = scrollTop + (list.scrollHeight - scrollHeight);\n\n        // console.log(\n        //     `[ml] keepScrollPosition after\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n    };\n\n    scrollToUnread = () => {\n        const { chatId, messageId } = this.props;\n        const { history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToUnread before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        let scrolled = false;\n        for (let i = 0; i < history.length; i++) {\n            let itemComponent = this.itemsMap.get(i);\n            let item = ReactDOM.findDOMNode(itemComponent);\n            if (item) {\n                if (itemComponent.props.showUnreadSeparator) {\n                    list.scrollTop = item.offsetTop; // + unread messages margin-top\n                    scrolled = true;\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     `MessagesList.scrollToUnread after\n        //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        if (!scrolled) {\n            this.scrollToBottom();\n        }\n    };\n\n    scrollToMessage = () => {\n        const { chatId, messageId } = this.props;\n        const { history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToMessage before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        let scrolled = false;\n        for (let i = 0; i < history.length; i++) {\n            let itemComponent = this.itemsMap.get(i);\n            let item = ReactDOM.findDOMNode(itemComponent);\n            if (item) {\n                if (itemComponent.props.messageId === messageId) {\n                    list.scrollTop = item.offsetTop - list.offsetHeight / 2.0;\n                    scrolled = true;\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     `MessagesList.scrollToMessage after\n        //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        if (!scrolled) {\n            this.scrollToBottom();\n        }\n    };\n\n    scrollToBottom = () => {\n        const { chatId, messageId } = this.props;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToBottom before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        const nextScrollTop = list.scrollHeight - list.offsetHeight;\n        if (nextScrollTop !== list.scrollTop) {\n            list.scrollTop = list.scrollHeight - list.offsetHeight;\n\n            // console.log(\n            //     `MessagesList.scrollToBottom after\n            // chatId=${chatId} messageId=${messageId}\n            // list.scrollTop=${list.scrollTop}\n            // list.offsetHeight=${list.offsetHeight}\n            // list.scrollHeight=${list.scrollHeight}`\n            // );\n        } else {\n            // console.log(\n            //     `MessagesList.scrollToBottom after (no changes)\n            // chatId=${chatId} messageId=${messageId}\n            // list.scrollTop=${list.scrollTop}\n            // list.offsetHeight=${list.offsetHeight}\n            // list.scrollHeight=${list.scrollHeight}`\n            // );\n        }\n    };\n\n    scrollToStart = async () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        // console.log('MessagesList.newSessionId scrollToStart');\n        this.sessionId = Date.now();\n        this.loading = false;\n        this.completed = false;\n\n        const fromMessageId = 0;\n        const offset = 0;\n        const limit = MESSAGE_SLICE_LIMIT;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        const result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chat.id,\n            from_message_id: fromMessageId,\n            offset: offset,\n            limit: limit\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        if (chat.last_message) {\n            this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n        } else {\n            this.completed = true;\n        }\n        // console.log('MessagesList.scrollToStart scrollDown', false);\n        this.setState({ scrollDownVisible: false, replyHistory: [] });\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n\n        let separatorMessageId = 0;\n        this.replace(separatorMessageId, result.messages, () => {\n            this.handleScrollBehavior(ScrollBehaviorEnum.SCROLL_TO_BOTTOM, this.snapshot);\n        });\n\n        // load files\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        this.loadIncompleteHistory(result);\n    };\n\n    handleListDragEnter = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { chatId } = this.props;\n        if (!canSendFiles(chatId)) return;\n\n        ApplicationStore.setDragging(true);\n    };\n\n    handleScrollDownClick = event => {\n        const { replyHistory } = this.state;\n\n        if (replyHistory.length > 0) {\n            const lastReply = replyHistory.pop();\n            if (lastReply) {\n                const { chatId, messageId } = lastReply;\n                if (chatId === this.props.chatId) {\n                    openChat(chatId, messageId);\n                }\n            }\n        } else {\n            this.scrollToStart();\n        }\n    };\n\n    render() {\n        const { classes, chatId } = this.props;\n        const { history, separatorMessageId, clearHistory, selectionActive, scrollDownVisible } = this.state;\n\n        // console.log('MessagesList.render scrollDown', this.props.chatId, this.props.messageId, scrollDownVisible, history.length);\n\n        const isChannel = isChannelChat(chatId);\n\n        let prevShowDate = false;\n        this.itemsMap.clear();\n        this.messages = clearHistory\n            ? null\n            : history.map((x, i) => {\n                  const prevMessage = i > 0 ? history[i - 1] : null;\n                  const date = new Date(x.date * 1000);\n                  const prevDate = prevMessage ? new Date(prevMessage.date * 1000) : date;\n                  let showDate = false;\n                  if (\n                      i === 0 ||\n                      date.getFullYear() !== prevDate.getFullYear() ||\n                      date.getMonth() !== prevDate.getMonth() ||\n                      date.getDate() !== prevDate.getDate()\n                  ) {\n                      showDate = true;\n                  }\n\n                  let m = null;\n                  if (isServiceMessage(x)) {\n                      m = (\n                          <ServiceMessage\n                              key={`chat_id=${x.chat_id} message_id=${x.id}`}\n                              ref={el => this.itemsMap.set(i, el)}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              showUnreadSeparator={separatorMessageId === x.id}\n                          />\n                      );\n                  } else {\n                      const showTitle =\n                          prevShowDate ||\n                          isChannel ||\n                          i === 0 ||\n                          (prevMessage &&\n                              (isServiceMessage(prevMessage) ||\n                                  x.sender_user_id !== prevMessage.sender_user_id ||\n                                  x.date - prevMessage.date > MESSAGE_SPLIT_MAX_TIME_S));\n\n                      m = (\n                          <Message\n                              key={`chat_id=${x.chat_id} message_id=${x.id}`}\n                              ref={el => this.itemsMap.set(i, el)}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              sendingState={x.sending_state}\n                              showTitle={showTitle}\n                              showUnreadSeparator={separatorMessageId === x.id}\n                          />\n                      );\n                  }\n\n                  // return m;\n\n                  return (\n                      <div key={`chat_id=${x.chat_id} message_id=${x.id}`}>\n                          {showDate && <DayMeta date={x.date} />}\n                          {m}\n                      </div>\n                  );\n              });\n\n        return (\n            <div\n                className={classNames(classes.background, 'messages-list', {\n                    'messages-list-selection-active': selectionActive\n                })}\n                onDragEnter={this.handleListDragEnter}>\n                <div ref={this.listRef} className='messages-list-wrapper' onScroll={this.handleScroll}>\n                    <div className='messages-list-top' />\n                    <div ref={this.itemsRef} className='messages-list-items'>\n                        {this.messages}\n                    </div>\n                </div>\n                <Placeholder />\n                {scrollDownVisible && <ScrollDownButton onClick={this.handleScrollDownClick} />}\n                <PinnedMessage chatId={chatId} />\n                <FilesDropTarget />\n                <StickersHint />\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(MessagesList);\n"]},"metadata":{},"sourceType":"module"}