{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Utils/ServiceMessage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport Currency from './Currency';\nimport MessageAuthor from '../Components/Message/MessageAuthor';\nimport ChatStore from '../Stores/ChatStore';\nimport UserStore from '../Stores/UserStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\nimport MessageStore from '../Stores/MessageStore';\nlet serviceMap = new Map();\nserviceMap.set('messageBasicGroupChatCreate', 'messageBasicGroupChatCreate');\nserviceMap.set('messageChatAddMembers', 'messageChatAddMembers');\nserviceMap.set('messageChatChangePhoto', 'messageChatChangePhoto');\nserviceMap.set('messageChatChangeTitle', 'messageChatChangeTitle');\nserviceMap.set('messageChatDeleteMember', 'messageChatDeleteMember');\nserviceMap.set('messageChatDeletePhoto', 'messageChatDeletePhoto');\nserviceMap.set('messageChatJoinByLink', 'messageChatJoinByLink');\nserviceMap.set('messageChatSetTtl', 'messageChatSetTtl');\nserviceMap.set('messageChatUpgradeFrom', 'messageChatUpgradeFrom');\nserviceMap.set('messageChatUpgradeTo', 'messageChatUpgradeTo');\nserviceMap.set('messageContactRegistered', 'messageContactRegistered');\nserviceMap.set('messageCustomServiceAction', 'messageCustomServiceAction');\nserviceMap.set('messageGameScore', 'messageGameScore');\nserviceMap.set('messagePassportDataReceived', 'messagePassportDataReceived');\nserviceMap.set('messagePassportDataSent', 'messagePassportDataSent');\nserviceMap.set('messagePaymentSuccessful', 'messagePaymentSuccessful');\nserviceMap.set('messagePaymentSuccessfulBot', 'messagePaymentSuccessfulBot');\nserviceMap.set('messagePinMessage', 'messagePinMessage');\nserviceMap.set('messageScreenshotTaken', 'messageScreenshotTaken');\nserviceMap.set('messageSupergroupChatCreate', 'messageSupergroupChatCreate');\nserviceMap.set('messageUnsupported', 'messageUnsupported');\nserviceMap.set('messageWebsiteConnected', 'messageWebsiteConnected');\n\nfunction isServiceMessage(message) {\n  if (!message) return false;\n  if (!message.content) return false;\n  return serviceMap.has(message.content['@type']) || message.ttl > 0;\n}\n\nfunction getTTLString(ttl) {\n  if (ttl < 60) {\n    const seconds = ttl === 1 ? 'second' : 'seconds';\n    return \"\".concat(ttl, \" \").concat(seconds);\n  }\n\n  if (ttl < 60 * 60) {\n    const minutes = Math.floor(ttl / 60) === 1 ? 'minute' : 'minutes';\n    return \"\".concat(ttl, \" \").concat(minutes);\n  }\n\n  if (ttl < 24 * 60 * 60) {\n    const hours = Math.floor(ttl / 60 / 60) === 1 ? 'hour' : 'hours';\n    return \"\".concat(ttl, \" \").concat(hours);\n  }\n\n  if (ttl < 7 * 24 * 60 * 60) {\n    const days = Math.floor(ttl / 60 / 60 / 24) === 1 ? 'day' : 'days';\n    return \"\".concat(ttl, \" \").concat(days);\n  }\n\n  if (ttl === 7 * 24 * 60 * 60) {\n    return '1 week';\n  }\n\n  return \"\".concat(ttl, \" seconds\");\n}\n\nfunction getPassportElementTypeString(type) {\n  switch (type['@type']) {\n    case 'passportElementTypeAddress':\n      {\n        return 'Address';\n      }\n\n    case 'passportElementTypeBankStatement':\n      {\n        return 'Bank Statement';\n      }\n\n    case 'passportElementTypeDriverLicense':\n      {\n        return 'Driver Licence';\n      }\n\n    case 'passportElementTypeEmailAddress':\n      {\n        return 'Email';\n      }\n\n    case 'passportElementTypeIdentityCard':\n      {\n        return 'Identity Card';\n      }\n\n    case 'passportElementTypeInternalPassport':\n      {\n        return 'Internal Passport';\n      }\n\n    case 'passportElementTypePassport':\n      {\n        return 'Passport';\n      }\n\n    case 'passportElementTypePassportRegistration':\n      {\n        return 'Passport Registration';\n      }\n\n    case 'passportElementTypePersonalDetails':\n      {\n        return 'Personal details';\n      }\n\n    case 'passportElementTypePhoneNumber':\n      {\n        return 'Phone Number';\n      }\n\n    case 'passportElementTypeRentalAgreement':\n      {\n        return 'Tenancy Agreement';\n      }\n\n    case 'passportElementTypeTemporaryRegistration':\n      {\n        return 'Temporary Registration';\n      }\n\n    case 'passportElementTypeUtilityBill':\n      {\n        return 'Utility Bill';\n      }\n  }\n\n  return '';\n}\n\nfunction getMessageAuthor(message, openUser) {\n  if (!message) return null;\n  const chat_id = message.chat_id,\n        sender_user_id = message.sender_user_id;\n\n  if (sender_user_id !== 0) {\n    return React.createElement(MessageAuthor, {\n      userId: sender_user_id,\n      openUser: openUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    });\n  }\n\n  const chat = ChatStore.get(chat_id);\n  if (!chat) return null;\n  return chat.title;\n}\n\nfunction getServiceMessageContent(message, openUser = false) {\n  if (!message) return null;\n  if (!message.content) return null;\n  const isOutgoing = message.sender_user_id === UserStore.getMyId();\n  const chat = ChatStore.get(message.chat_id);\n  const isChannel = chat.type['@type'] === 'chatTypeSupergroup' && chat.type.is_channel;\n  const ttl = message.ttl,\n        sender_user_id = message.sender_user_id,\n        content = message.content;\n\n  if (ttl > 0) {\n    switch (content['@type']) {\n      case 'messagePhoto':\n        {\n          if (isOutgoing) {\n            return 'You sent a self-destructing photo. Please view it on your mobile';\n          }\n\n          return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n            userId: sender_user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }), ' sent a self-destructing photo. Please view it on your mobile');\n        }\n\n      case 'messageVideo':\n        {\n          if (isOutgoing) {\n            return 'You sent a self-destructing video. Please view it on your mobile';\n          }\n\n          return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n            userId: sender_user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }), ' sent a self-destructing video. Please view it on your mobile');\n        }\n\n      default:\n        {\n          if (isOutgoing) {\n            return 'You sent a self-destructing message. Please view it on your mobile';\n          }\n\n          return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n            userId: sender_user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }), ' sent a self-destructing message. Please view it on your mobile');\n        }\n    }\n  }\n\n  switch (content['@type']) {\n    case 'messageBasicGroupChatCreate':\n      {\n        const _ChatStore$get = ChatStore.get(message.chat_id),\n              title = _ChatStore$get.title;\n\n        if (isOutgoing) {\n          return \"You created group \\xAB\".concat(title, \"\\xBB\");\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }), \" created group \\xAB\".concat(title, \"\\xBB\"));\n      }\n\n    case 'messageChatAddMembers':\n      {\n        const members = content.member_user_ids.map(x => React.createElement(MessageAuthor, {\n          key: x,\n          userId: x,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        })).reduce((accumulator, current, index, array) => {\n          const separator = index === array.length - 1 ? ' and ' : ', ';\n          return accumulator === null ? [current] : [...accumulator, separator, current];\n        }, null);\n\n        if (isOutgoing) {\n          return content.member_user_ids.length === 1 && content.member_user_ids[0] === UserStore.getMyId() ? 'You joined the group' : React.createElement(React.Fragment, null, 'You added ', members);\n        }\n\n        return content.member_user_ids.length === 1 && content.member_user_ids[0] === message.sender_user_id ? React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }), ' joined the group') : React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }), ' added ', members);\n      }\n\n    case 'messageChatChangePhoto':\n      {\n        if (isChannel) {\n          return 'Channel photo updated';\n        }\n\n        if (isOutgoing) {\n          return 'You updated group photo';\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }), \" updated group photo\");\n      }\n\n    case 'messageChatChangeTitle':\n      {\n        const title = content.title;\n\n        if (isChannel) {\n          return \"Channel name was changed to \\xAB\".concat(title, \"\\xBB\");\n        }\n\n        if (isOutgoing) {\n          return \"You changed group name to \\xAB\".concat(title, \"\\xBB\");\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }), \" changed group name to \\xAB\".concat(title, \"\\xBB\"));\n      }\n\n    case 'messageChatDeleteMember':\n      {\n        if (isOutgoing) {\n          return content.user_id === UserStore.getMyId() ? 'You left the group' : React.createElement(React.Fragment, null, 'You removed ', React.createElement(MessageAuthor, {\n            userId: content.user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }));\n        }\n\n        return content.user_id === sender_user_id ? React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }), ' left the group') : React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }), ' removed ', React.createElement(MessageAuthor, {\n          userId: content.user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }));\n      }\n\n    case 'messageChatDeletePhoto':\n      {\n        if (isChannel) {\n          return 'Channel photo removed';\n        }\n\n        if (isOutgoing) {\n          return 'You removed group photo';\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299\n          },\n          __self: this\n        }), ' removed group photo');\n      }\n\n    case 'messageChatJoinByLink':\n      {\n        if (isOutgoing) {\n          return 'You joined the group via invite link';\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311\n          },\n          __self: this\n        }), ' joined the group via invite link');\n      }\n\n    case 'messageChatSetTtl':\n      {\n        const ttl = content.ttl;\n        const ttlString = getTTLString(ttl);\n\n        if (ttl <= 0) {\n          if (isOutgoing) {\n            return 'You disabled the self-destruct timer';\n          }\n\n          return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n            userId: sender_user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 327\n            },\n            __self: this\n          }), ' disabled the self-destruct timer');\n        }\n\n        if (isOutgoing) {\n          return \"You set the self-destruct timer to \".concat(ttlString);\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }), \" set the self-destruct timer to \".concat(ttlString));\n      }\n\n    case 'messageChatUpgradeFrom':\n      {\n        return 'The group was upgraded to a supergroup';\n      }\n\n    case 'messageChatUpgradeTo':\n      {\n        return 'Group migrated to a supergroup';\n      }\n\n    case 'messageContactRegistered':\n      {\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          },\n          __self: this\n        }), ' just joined Telegram');\n      }\n\n    case 'messageCustomServiceAction':\n      {\n        return content.text;\n      }\n\n    case 'messageGameScore':\n      {\n        const messageGame = MessageStore.get(message.chat_id, content.game_message_id);\n\n        if (messageGame && messageGame.content && messageGame.content['@type'] === 'messageGame' && messageGame.content.game) {\n          const game = messageGame.content.game;\n\n          if (isOutgoing) {\n            return \"You scored \".concat(content.score, \" in \\xAB\").concat(game.title, \"\\xBB\");\n          }\n\n          return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n            userId: messageGame.sender_user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 377\n            },\n            __self: this\n          }), \" scored \".concat(content.score, \" in \\xAB\").concat(game.title, \"\\xBB\"));\n        }\n\n        if (isOutgoing) {\n          return \"You scored \".concat(content.score);\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }), \" scored \".concat(content.score));\n      }\n\n    case 'messagePassportDataReceived':\n      {\n        return 'Telegram Passport data received';\n      }\n\n    case 'messagePassportDataSent':\n      {\n        const chat = ChatStore.get(message.chat_id);\n        const passportElementTypes = content.types.map(x => getPassportElementTypeString(x)).reduce((accumulator, current) => {\n          return accumulator === null ? [current] : [...accumulator, ', ', current];\n        }, null);\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: chat.type.user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408\n          },\n          __self: this\n        }), ' received the following documents: ', passportElementTypes);\n      }\n\n    case 'messagePaymentSuccessful':\n      {\n        const chat = ChatStore.get(message.chat_id);\n        const messageInvoice = MessageStore.get(message.chat_id, content.invoice_message_id);\n\n        if (messageInvoice && messageInvoice.content && messageInvoice.content['@type'] === 'messageInvoice' && messageInvoice.content.invoice) {\n          const invoice = messageInvoice.content.invoice;\n          return React.createElement(React.Fragment, null, \"You have just successfully transferred \".concat(Currency.getString(content.total_amount, content.currency), \" to \"), React.createElement(MessageAuthor, {\n            userId: chat.type.user_id,\n            openUser: openUser,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 432\n            },\n            __self: this\n          }), \" for \".concat(invoice.title));\n        }\n\n        return React.createElement(React.Fragment, null, \"You have just successfully transferred \".concat(Currency.getString(content.total_amount, content.currency), \" to \"), React.createElement(MessageAuthor, {\n          userId: chat.type.user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444\n          },\n          __self: this\n        }));\n      }\n\n    case 'messagePaymentSuccessfulBot':\n      {\n        return 'Payment successful';\n      }\n\n    case 'messagePinMessage':\n      {\n        const author = getMessageAuthor(message, openUser);\n        const pinnedMessage = MessageStore.get(message.chat_id, content.message_id);\n\n        if (!pinnedMessage || !pinnedMessage.content) {\n          return React.createElement(React.Fragment, null, author, ' pinned a message');\n        }\n\n        let pinnedContent = ' pinned a message';\n\n        if (isServiceMessage(pinnedMessage)) {\n          pinnedContent = ' pinned a service message';\n        } else {\n          switch (pinnedMessage.content['@type']) {\n            case 'messageAnimation':\n              {\n                pinnedContent = ' pinned a GIF';\n                break;\n              }\n\n            case 'messageAudio':\n              {\n                pinnedContent = ' pinned a track';\n                break;\n              }\n\n            case 'messageCall':\n              {\n                pinnedContent = ' pinned a call';\n                break;\n              }\n\n            case 'messageContact':\n              {\n                pinnedContent = ' pinned a contact';\n                break;\n              }\n\n            case 'messageDocument':\n              {\n                pinnedContent = ' pinned a file';\n                break;\n              }\n\n            case 'messageExpiredPhoto':\n              {\n                pinnedContent = ' pinned a photo';\n                break;\n              }\n\n            case 'messageExpiredVideo':\n              {\n                pinnedContent = ' pinned a video';\n                break;\n              }\n\n            case 'messageGame':\n              {\n                pinnedContent = ' pinned a game';\n                break;\n              }\n\n            case 'messageInvoice':\n              {\n                pinnedContent = ' pinned an invoice';\n                break;\n              }\n\n            case 'messageLocation':\n              {\n                pinnedContent = ' pinned a map';\n                break;\n              }\n\n            case 'messagePhoto':\n              {\n                pinnedContent = ' pinned a photo';\n                break;\n              }\n\n            case 'messagePoll':\n              {\n                pinnedContent = ' pinned a poll';\n                break;\n              }\n\n            case 'messageSticker':\n              {\n                pinnedContent = ' pinned a sticker';\n                break;\n              }\n\n            case 'messageText':\n              {\n                const maxLength = 16;\n                const text = pinnedMessage.content.text.text;\n\n                if (text.length <= maxLength) {\n                  pinnedContent = \" pinned \\xAB\".concat(text, \"\\xBB\");\n                } else {\n                  pinnedContent = \" pinned \\xAB\".concat(text.substring(0, maxLength), \"...\\xBB\");\n                }\n\n                break;\n              }\n\n            case 'messageUnsupported':\n              {\n                pinnedContent = ' pinned unsupported message';\n                break;\n              }\n\n            case 'messageVenue':\n              {\n                pinnedContent = ' pinned a venue';\n                break;\n              }\n\n            case 'messageVideo':\n              {\n                pinnedContent = ' pinned a video';\n                break;\n              }\n\n            case 'messageVideoNote':\n              {\n                pinnedContent = ' pinned a video message';\n                break;\n              }\n\n            case 'messageVoiceNote':\n              {\n                pinnedContent = ' pinned a voice message';\n                break;\n              }\n          }\n        }\n\n        return React.createElement(React.Fragment, null, author, pinnedContent);\n      }\n\n    case 'messageScreenshotTaken':\n      {\n        if (isOutgoing) {\n          return 'You took a screenshot!';\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 568\n          },\n          __self: this\n        }), ' took a screenshot!');\n      }\n\n    case 'messageSupergroupChatCreate':\n      {\n        const title = content.title;\n\n        if (isChannel) {\n          return 'Channel created';\n        }\n\n        if (isOutgoing) {\n          return \"You created group \\xAB\".concat(title, \"\\xBB\");\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(MessageAuthor, {\n          userId: sender_user_id,\n          openUser: openUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586\n          },\n          __self: this\n        }), \" created group \\xAB\".concat(title, \"\\xBB\"));\n      }\n\n    case 'messageUnsupported':\n      {\n        return 'Unsupported message';\n      }\n\n    case 'messageWebsiteConnected':\n      {\n        return \"You allowed this bot to message you when you logged in on \".concat(content.domain_name, \".\");\n      }\n  }\n\n  return \"[\".concat(message.content['@type'], \"]\");\n}\n\nexport { isServiceMessage, getServiceMessageContent };","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Utils/ServiceMessage.js"],"names":["React","Currency","MessageAuthor","ChatStore","UserStore","SupergroupStore","MessageStore","serviceMap","Map","set","isServiceMessage","message","content","has","ttl","getTTLString","seconds","minutes","Math","floor","hours","days","getPassportElementTypeString","type","getMessageAuthor","openUser","chat_id","sender_user_id","chat","get","title","getServiceMessageContent","isOutgoing","getMyId","isChannel","is_channel","members","member_user_ids","map","x","reduce","accumulator","current","index","array","separator","length","user_id","ttlString","text","messageGame","game_message_id","game","score","passportElementTypes","types","messageInvoice","invoice_message_id","invoice","getString","total_amount","currency","author","pinnedMessage","message_id","pinnedContent","maxLength","substring","domain_name"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport Currency from './Currency';\nimport MessageAuthor from '../Components/Message/MessageAuthor';\nimport ChatStore from '../Stores/ChatStore';\nimport UserStore from '../Stores/UserStore';\nimport SupergroupStore from '../Stores/SupergroupStore';\nimport MessageStore from '../Stores/MessageStore';\n\nlet serviceMap = new Map();\nserviceMap.set('messageBasicGroupChatCreate', 'messageBasicGroupChatCreate');\nserviceMap.set('messageChatAddMembers', 'messageChatAddMembers');\nserviceMap.set('messageChatChangePhoto', 'messageChatChangePhoto');\nserviceMap.set('messageChatChangeTitle', 'messageChatChangeTitle');\nserviceMap.set('messageChatDeleteMember', 'messageChatDeleteMember');\nserviceMap.set('messageChatDeletePhoto', 'messageChatDeletePhoto');\nserviceMap.set('messageChatJoinByLink', 'messageChatJoinByLink');\nserviceMap.set('messageChatSetTtl', 'messageChatSetTtl');\nserviceMap.set('messageChatUpgradeFrom', 'messageChatUpgradeFrom');\nserviceMap.set('messageChatUpgradeTo', 'messageChatUpgradeTo');\nserviceMap.set('messageContactRegistered', 'messageContactRegistered');\nserviceMap.set('messageCustomServiceAction', 'messageCustomServiceAction');\nserviceMap.set('messageGameScore', 'messageGameScore');\nserviceMap.set('messagePassportDataReceived', 'messagePassportDataReceived');\nserviceMap.set('messagePassportDataSent', 'messagePassportDataSent');\nserviceMap.set('messagePaymentSuccessful', 'messagePaymentSuccessful');\nserviceMap.set('messagePaymentSuccessfulBot', 'messagePaymentSuccessfulBot');\nserviceMap.set('messagePinMessage', 'messagePinMessage');\nserviceMap.set('messageScreenshotTaken', 'messageScreenshotTaken');\nserviceMap.set('messageSupergroupChatCreate', 'messageSupergroupChatCreate');\nserviceMap.set('messageUnsupported', 'messageUnsupported');\nserviceMap.set('messageWebsiteConnected', 'messageWebsiteConnected');\n\nfunction isServiceMessage(message) {\n    if (!message) return false;\n    if (!message.content) return false;\n\n    return serviceMap.has(message.content['@type']) || message.ttl > 0;\n}\n\nfunction getTTLString(ttl) {\n    if (ttl < 60) {\n        const seconds = ttl === 1 ? 'second' : 'seconds';\n        return `${ttl} ${seconds}`;\n    }\n    if (ttl < 60 * 60) {\n        const minutes = Math.floor(ttl / 60) === 1 ? 'minute' : 'minutes';\n        return `${ttl} ${minutes}`;\n    }\n    if (ttl < 24 * 60 * 60) {\n        const hours = Math.floor(ttl / 60 / 60) === 1 ? 'hour' : 'hours';\n        return `${ttl} ${hours}`;\n    }\n    if (ttl < 7 * 24 * 60 * 60) {\n        const days = Math.floor(ttl / 60 / 60 / 24) === 1 ? 'day' : 'days';\n        return `${ttl} ${days}`;\n    }\n    if (ttl === 7 * 24 * 60 * 60) {\n        return '1 week';\n    }\n\n    return `${ttl} seconds`;\n}\n\nfunction getPassportElementTypeString(type) {\n    switch (type['@type']) {\n        case 'passportElementTypeAddress': {\n            return 'Address';\n        }\n        case 'passportElementTypeBankStatement': {\n            return 'Bank Statement';\n        }\n        case 'passportElementTypeDriverLicense': {\n            return 'Driver Licence';\n        }\n        case 'passportElementTypeEmailAddress': {\n            return 'Email';\n        }\n        case 'passportElementTypeIdentityCard': {\n            return 'Identity Card';\n        }\n        case 'passportElementTypeInternalPassport': {\n            return 'Internal Passport';\n        }\n        case 'passportElementTypePassport': {\n            return 'Passport';\n        }\n        case 'passportElementTypePassportRegistration': {\n            return 'Passport Registration';\n        }\n        case 'passportElementTypePersonalDetails': {\n            return 'Personal details';\n        }\n        case 'passportElementTypePhoneNumber': {\n            return 'Phone Number';\n        }\n        case 'passportElementTypeRentalAgreement': {\n            return 'Tenancy Agreement';\n        }\n        case 'passportElementTypeTemporaryRegistration': {\n            return 'Temporary Registration';\n        }\n        case 'passportElementTypeUtilityBill': {\n            return 'Utility Bill';\n        }\n    }\n\n    return '';\n}\n\nfunction getMessageAuthor(message, openUser) {\n    if (!message) return null;\n\n    const { chat_id, sender_user_id } = message;\n\n    if (sender_user_id !== 0) {\n        return <MessageAuthor userId={sender_user_id} openUser={openUser} />;\n    }\n\n    const chat = ChatStore.get(chat_id);\n    if (!chat) return null;\n\n    return chat.title;\n}\n\nfunction getServiceMessageContent(message, openUser = false) {\n    if (!message) return null;\n    if (!message.content) return null;\n\n    const isOutgoing = message.sender_user_id === UserStore.getMyId();\n    const chat = ChatStore.get(message.chat_id);\n    const isChannel = chat.type['@type'] === 'chatTypeSupergroup' && chat.type.is_channel;\n\n    const { ttl, sender_user_id, content } = message;\n    if (ttl > 0) {\n        switch (content['@type']) {\n            case 'messagePhoto': {\n                if (isOutgoing) {\n                    return 'You sent a self-destructing photo. Please view it on your mobile';\n                }\n\n                return (\n                    <>\n                        <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                        {' sent a self-destructing photo. Please view it on your mobile'}\n                    </>\n                );\n            }\n            case 'messageVideo': {\n                if (isOutgoing) {\n                    return 'You sent a self-destructing video. Please view it on your mobile';\n                }\n\n                return (\n                    <>\n                        <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                        {' sent a self-destructing video. Please view it on your mobile'}\n                    </>\n                );\n            }\n            default: {\n                if (isOutgoing) {\n                    return 'You sent a self-destructing message. Please view it on your mobile';\n                }\n\n                return (\n                    <>\n                        <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                        {' sent a self-destructing message. Please view it on your mobile'}\n                    </>\n                );\n            }\n        }\n    }\n\n    switch (content['@type']) {\n        case 'messageBasicGroupChatCreate': {\n            const { title } = ChatStore.get(message.chat_id);\n\n            if (isOutgoing) {\n                return `You created group «${title}»`;\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {` created group «${title}»`}\n                </>\n            );\n        }\n        case 'messageChatAddMembers': {\n            const members = content.member_user_ids\n                .map(x => <MessageAuthor key={x} userId={x} openUser={openUser} />)\n                .reduce((accumulator, current, index, array) => {\n                    const separator = index === array.length - 1 ? ' and ' : ', ';\n                    return accumulator === null ? [current] : [...accumulator, separator, current];\n                }, null);\n\n            if (isOutgoing) {\n                return content.member_user_ids.length === 1 && content.member_user_ids[0] === UserStore.getMyId() ? (\n                    'You joined the group'\n                ) : (\n                    <>\n                        {'You added '}\n                        {members}\n                    </>\n                );\n            }\n\n            return content.member_user_ids.length === 1 && content.member_user_ids[0] === message.sender_user_id ? (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' joined the group'}\n                </>\n            ) : (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' added '}\n                    {members}\n                </>\n            );\n        }\n        case 'messageChatChangePhoto': {\n            if (isChannel) {\n                return 'Channel photo updated';\n            }\n\n            if (isOutgoing) {\n                return 'You updated group photo';\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {` updated group photo`}\n                </>\n            );\n        }\n        case 'messageChatChangeTitle': {\n            const { title } = content;\n\n            if (isChannel) {\n                return `Channel name was changed to «${title}»`;\n            }\n\n            if (isOutgoing) {\n                return `You changed group name to «${title}»`;\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {` changed group name to «${title}»`}\n                </>\n            );\n        }\n        case 'messageChatDeleteMember': {\n            if (isOutgoing) {\n                return content.user_id === UserStore.getMyId() ? (\n                    'You left the group'\n                ) : (\n                    <>\n                        {'You removed '}\n                        <MessageAuthor userId={content.user_id} openUser={openUser} />\n                    </>\n                );\n            }\n\n            return content.user_id === sender_user_id ? (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' left the group'}\n                </>\n            ) : (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' removed '}\n                    <MessageAuthor userId={content.user_id} openUser={openUser} />\n                </>\n            );\n        }\n        case 'messageChatDeletePhoto': {\n            if (isChannel) {\n                return 'Channel photo removed';\n            }\n\n            if (isOutgoing) {\n                return 'You removed group photo';\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' removed group photo'}\n                </>\n            );\n        }\n        case 'messageChatJoinByLink': {\n            if (isOutgoing) {\n                return 'You joined the group via invite link';\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' joined the group via invite link'}\n                </>\n            );\n        }\n        case 'messageChatSetTtl': {\n            const { ttl } = content;\n            const ttlString = getTTLString(ttl);\n\n            if (ttl <= 0) {\n                if (isOutgoing) {\n                    return 'You disabled the self-destruct timer';\n                }\n\n                return (\n                    <>\n                        <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                        {' disabled the self-destruct timer'}\n                    </>\n                );\n            }\n\n            if (isOutgoing) {\n                return `You set the self-destruct timer to ${ttlString}`;\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {` set the self-destruct timer to ${ttlString}`}\n                </>\n            );\n        }\n        case 'messageChatUpgradeFrom': {\n            return 'The group was upgraded to a supergroup';\n        }\n        case 'messageChatUpgradeTo': {\n            return 'Group migrated to a supergroup';\n        }\n        case 'messageContactRegistered': {\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' just joined Telegram'}\n                </>\n            );\n        }\n        case 'messageCustomServiceAction': {\n            return content.text;\n        }\n        case 'messageGameScore': {\n            const messageGame = MessageStore.get(message.chat_id, content.game_message_id);\n            if (\n                messageGame &&\n                messageGame.content &&\n                messageGame.content['@type'] === 'messageGame' &&\n                messageGame.content.game\n            ) {\n                const { game } = messageGame.content;\n\n                if (isOutgoing) {\n                    return `You scored ${content.score} in «${game.title}»`;\n                }\n\n                return (\n                    <>\n                        <MessageAuthor userId={messageGame.sender_user_id} openUser={openUser} />\n                        {` scored ${content.score} in «${game.title}»`}\n                    </>\n                );\n            }\n\n            if (isOutgoing) {\n                return `You scored ${content.score}`;\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {` scored ${content.score}`}\n                </>\n            );\n        }\n        case 'messagePassportDataReceived': {\n            return 'Telegram Passport data received';\n        }\n        case 'messagePassportDataSent': {\n            const chat = ChatStore.get(message.chat_id);\n\n            const passportElementTypes = content.types\n                .map(x => getPassportElementTypeString(x))\n                .reduce((accumulator, current) => {\n                    return accumulator === null ? [current] : [...accumulator, ', ', current];\n                }, null);\n\n            return (\n                <>\n                    <MessageAuthor userId={chat.type.user_id} openUser={openUser} />\n                    {' received the following documents: '}\n                    {passportElementTypes}\n                </>\n            );\n        }\n        case 'messagePaymentSuccessful': {\n            const chat = ChatStore.get(message.chat_id);\n\n            const messageInvoice = MessageStore.get(message.chat_id, content.invoice_message_id);\n            if (\n                messageInvoice &&\n                messageInvoice.content &&\n                messageInvoice.content['@type'] === 'messageInvoice' &&\n                messageInvoice.content.invoice\n            ) {\n                const { invoice } = messageInvoice.content;\n\n                return (\n                    <>\n                        {`You have just successfully transferred ${Currency.getString(\n                            content.total_amount,\n                            content.currency\n                        )} to `}\n                        <MessageAuthor userId={chat.type.user_id} openUser={openUser} />\n                        {` for ${invoice.title}`}\n                    </>\n                );\n            }\n\n            return (\n                <>\n                    {`You have just successfully transferred ${Currency.getString(\n                        content.total_amount,\n                        content.currency\n                    )} to `}\n                    <MessageAuthor userId={chat.type.user_id} openUser={openUser} />\n                </>\n            );\n        }\n        case 'messagePaymentSuccessfulBot': {\n            return 'Payment successful';\n        }\n        case 'messagePinMessage': {\n            const author = getMessageAuthor(message, openUser);\n            const pinnedMessage = MessageStore.get(message.chat_id, content.message_id);\n            if (!pinnedMessage || !pinnedMessage.content) {\n                return (\n                    <>\n                        {author}\n                        {' pinned a message'}\n                    </>\n                );\n            }\n\n            let pinnedContent = ' pinned a message';\n            if (isServiceMessage(pinnedMessage)) {\n                pinnedContent = ' pinned a service message';\n            } else {\n                switch (pinnedMessage.content['@type']) {\n                    case 'messageAnimation': {\n                        pinnedContent = ' pinned a GIF';\n                        break;\n                    }\n                    case 'messageAudio': {\n                        pinnedContent = ' pinned a track';\n                        break;\n                    }\n                    case 'messageCall': {\n                        pinnedContent = ' pinned a call';\n                        break;\n                    }\n                    case 'messageContact': {\n                        pinnedContent = ' pinned a contact';\n                        break;\n                    }\n                    case 'messageDocument': {\n                        pinnedContent = ' pinned a file';\n                        break;\n                    }\n                    case 'messageExpiredPhoto': {\n                        pinnedContent = ' pinned a photo';\n                        break;\n                    }\n                    case 'messageExpiredVideo': {\n                        pinnedContent = ' pinned a video';\n                        break;\n                    }\n                    case 'messageGame': {\n                        pinnedContent = ' pinned a game';\n                        break;\n                    }\n                    case 'messageInvoice': {\n                        pinnedContent = ' pinned an invoice';\n                        break;\n                    }\n                    case 'messageLocation': {\n                        pinnedContent = ' pinned a map';\n                        break;\n                    }\n                    case 'messagePhoto': {\n                        pinnedContent = ' pinned a photo';\n                        break;\n                    }\n                    case 'messagePoll': {\n                        pinnedContent = ' pinned a poll';\n                        break;\n                    }\n                    case 'messageSticker': {\n                        pinnedContent = ' pinned a sticker';\n                        break;\n                    }\n                    case 'messageText': {\n                        const maxLength = 16;\n                        const text = pinnedMessage.content.text.text;\n                        if (text.length <= maxLength) {\n                            pinnedContent = ` pinned «${text}»`;\n                        } else {\n                            pinnedContent = ` pinned «${text.substring(0, maxLength)}...»`;\n                        }\n\n                        break;\n                    }\n                    case 'messageUnsupported': {\n                        pinnedContent = ' pinned unsupported message';\n                        break;\n                    }\n                    case 'messageVenue': {\n                        pinnedContent = ' pinned a venue';\n                        break;\n                    }\n                    case 'messageVideo': {\n                        pinnedContent = ' pinned a video';\n                        break;\n                    }\n                    case 'messageVideoNote': {\n                        pinnedContent = ' pinned a video message';\n                        break;\n                    }\n                    case 'messageVoiceNote': {\n                        pinnedContent = ' pinned a voice message';\n                        break;\n                    }\n                }\n            }\n\n            return (\n                <>\n                    {author}\n                    {pinnedContent}\n                </>\n            );\n        }\n        case 'messageScreenshotTaken': {\n            if (isOutgoing) {\n                return 'You took a screenshot!';\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {' took a screenshot!'}\n                </>\n            );\n        }\n        case 'messageSupergroupChatCreate': {\n            const { title } = content;\n\n            if (isChannel) {\n                return 'Channel created';\n            }\n\n            if (isOutgoing) {\n                return `You created group «${title}»`;\n            }\n\n            return (\n                <>\n                    <MessageAuthor userId={sender_user_id} openUser={openUser} />\n                    {` created group «${title}»`}\n                </>\n            );\n        }\n        case 'messageUnsupported': {\n            return 'Unsupported message';\n        }\n        case 'messageWebsiteConnected': {\n            return `You allowed this bot to message you when you logged in on ${content.domain_name}.`;\n        }\n    }\n\n    return `[${message.content['@type']}]`;\n}\n\nexport { isServiceMessage, getServiceMessageContent };\n"]},"metadata":{},"sourceType":"module"}