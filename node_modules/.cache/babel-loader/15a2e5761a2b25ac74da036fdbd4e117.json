{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Tile/DialogMeta.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getLastMessageDate } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMeta.css';\n\nconst styles = theme => ({\n  dialogMetaDate: {\n    color: theme.palette.text.secondary\n  }\n});\n\nclass DialogMeta extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClientUpdateClearHistory = update => {\n      const chatId = this.props.chatId;\n\n      if (chatId === update.chatId) {\n        this.clearHistory = update.inProgress;\n        this.forceUpdate();\n      }\n    };\n\n    this.onFastUpdatingComplete = update => {\n      this.forceUpdate();\n    };\n\n    this.onUpdate = update => {\n      const chatId = this.props.chatId;\n      if (chatId !== update.chat_id) return;\n      this.forceUpdate();\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.chatId !== this.props.chatId) {\n      return true;\n    }\n\n    if (nextProps.theme !== this.props.theme) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ChatStore.on('updateChatDraftMessage', this.onUpdate);\n    ChatStore.on('updateChatLastMessage', this.onUpdate);\n    ChatStore.on('updateChatReadInbox', this.onUpdate);\n    ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n    ChatStore.on('updateMessageMentionRead', this.onUpdate);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n    ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n    ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n    ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n    ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n  }\n\n  render() {\n    if (this.clearHistory) return null;\n    const _this$props = this.props,\n          chatId = _this$props.chatId,\n          classes = _this$props.classes;\n    const chat = ChatStore.get(chatId);\n    const date = getLastMessageDate(chat);\n    return React.createElement(React.Fragment, null, date && React.createElement(\"div\", {\n      className: classNames('dialog-meta', classes.dialogMetaDate),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, date));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(DialogMeta);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Tile/DialogMeta.js"],"names":["React","classNames","withStyles","getLastMessageDate","ChatStore","styles","theme","dialogMetaDate","color","palette","text","secondary","DialogMeta","Component","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","shouldComponentUpdate","nextProps","nextState","componentDidMount","on","componentWillUnmount","removeListener","render","classes","chat","get","date","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getLastMessageDate } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMeta.css';\n\nconst styles = theme => ({\n    dialogMetaDate: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass DialogMeta extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId, classes } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        const date = getLastMessageDate(chat);\n\n        return <>{date && <div className={classNames('dialog-meta', classes.dialogMetaDate)}>{date}</div>}</>;\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogMeta);\n"]},"metadata":{},"sourceType":"module"}