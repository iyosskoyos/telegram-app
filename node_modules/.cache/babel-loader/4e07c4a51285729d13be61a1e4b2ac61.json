{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport packageJson from '../../package.json';\nimport { stringToBoolean, getBrowser, getOSName } from '../Utils/Common';\nimport { VERBOSITY_JS_MAX, VERBOSITY_JS_MIN, VERBOSITY_MAX, VERBOSITY_MIN, WASM_FILE_HASH, WASM_FILE_NAME } from '../Constants';\nimport TdClient from 'tdweb/dist/tdweb';\n\nfunction databaseExists(dbname, callback) {\n  var req = indexedDB.open(dbname);\n  var existed = true;\n\n  req.onsuccess = function () {\n    req.result.close();\n    if (!existed) indexedDB.deleteDatabase(dbname);\n    callback(existed);\n  };\n\n  req.onupgradeneeded = function () {\n    existed = false;\n  };\n}\n\nclass TdLibController extends EventEmitter {\n  constructor() {\n    super();\n\n    this.init = location => {\n      this.setParameters(location);\n      const _this$parameters = this.parameters,\n            verbosity = _this$parameters.verbosity,\n            jsVerbosity = _this$parameters.jsVerbosity,\n            useTestDC = _this$parameters.useTestDC,\n            readOnly = _this$parameters.readOnly,\n            fastUpdating = _this$parameters.fastUpdating,\n            useDatabase = _this$parameters.useDatabase,\n            mode = _this$parameters.mode;\n      const dbName = useTestDC ? 'tdlib_test' : 'tdlib';\n      databaseExists(dbName, exists => {\n        this.clientUpdate({\n          '@type': 'clientUpdateDatabaseExists',\n          exists\n        });\n        let options = {\n          logVerbosityLevel: verbosity,\n          jsLogVerbosityLevel: jsVerbosity,\n          mode: mode,\n          // 'wasm-streaming'/'wasm'/'asmjs'\n          prefix: useTestDC ? 'tdlib_test' : 'tdlib',\n          readOnly: readOnly,\n          isBackground: false,\n          useDatabase: useDatabase,\n          wasmUrl: \"\".concat(WASM_FILE_NAME, \"?_sw-precache=\").concat(WASM_FILE_HASH) // onUpdate: update => this.emit('update', update)\n\n        };\n        console.log(\"[TdLibController] (fast_updating=\".concat(fastUpdating, \") Start client with params=\").concat(JSON.stringify(options)));\n        this.client = new TdClient(options);\n\n        this.client.onUpdate = update => {\n          if (!this.disableLog) {\n            if (update['@type'] === 'updateFile') {\n              console.log('receive updateFile file_id=' + update.file.id, update);\n            } else {\n              console.log('receive update', update);\n            }\n          }\n\n          this.emit('update', update);\n        };\n      });\n    };\n\n    this.clientUpdate = update => {\n      if (!this.disableLog) {\n        console.log('clientUpdate', update);\n      }\n\n      this.emit('clientUpdate', update);\n    };\n\n    this.setParameters = location => {\n      if (!location) return;\n      const search = location.search;\n      if (!search) return;\n      const params = new URLSearchParams(search.toLowerCase());\n\n      if (params.has('test')) {\n        this.parameters.useTestDC = stringToBoolean(params.get('test'));\n      }\n\n      if (params.has('verbosity')) {\n        const verbosity = parseInt(params.get('verbosity'), 10);\n\n        if (verbosity >= VERBOSITY_MIN && verbosity <= VERBOSITY_MAX) {\n          this.parameters.verbosity = verbosity;\n        }\n      }\n\n      if (params.has('jsverbosity')) {\n        const jsVerbosity = parseInt(params.get('jsverbosity'), 10);\n\n        if (jsVerbosity >= VERBOSITY_JS_MIN && jsVerbosity <= VERBOSITY_JS_MAX) {\n          this.parameters.jsVerbosity = jsVerbosity;\n        }\n      }\n\n      if (params.has('tag') && params.has('tagverbosity')) {\n        const tag = params.get('tag').replace('[', '').replace(']', '').split(',');\n        const tagVerbosity = params.get('tagverbosity').replace('[', '').replace(']', '').split(',');\n\n        if (tag && tagVerbosity && tag.length === tagVerbosity.length) {\n          this.parameters.tag = tag;\n          this.parameters.tagVerbosity = tagVerbosity;\n        }\n      }\n\n      if (params.has('readonly')) {\n        this.parameters.readOnly = stringToBoolean(params.get('readonly'));\n      }\n\n      if (params.has('fastupdating')) {\n        this.parameters.fastUpdating = stringToBoolean(params.get('fastupdating'));\n      }\n\n      if (params.has('db')) {\n        this.parameters.useDatabase = stringToBoolean(params.get('db'));\n      }\n\n      if (params.has('mode')) {\n        this.parameters.mode = params.get('mode');\n      }\n    };\n\n    this.send = request => {\n      if (!this.disableLog) {\n        console.log('send', request);\n        return this.client.send(request).then(result => {\n          console.log('receive', result);\n          return result;\n        }).catch(error => {\n          console.error('catch', error);\n          throw error;\n        });\n      } else {\n        return this.client.send(request);\n      }\n    };\n\n    this.sendTdParameters = async () => {\n      const apiId = process.env.REACT_APP_TELEGRAM_API_ID;\n      const apiHash = process.env.REACT_APP_TELEGRAM_API_HASH;\n\n      if (!apiId || !apiHash) {\n        if (window.confirm('API id is missing!\\n' + 'In order to obtain an API id and develop your own application ' + 'using the Telegram API please visit https://core.telegram.org/api/obtaining_api_id')) {\n          window.location.href = 'https://core.telegram.org/api/obtaining_api_id';\n        }\n      }\n\n      const useTestDC = this.parameters.useTestDC;\n      const version = packageJson.version;\n      this.send({\n        '@type': 'setTdlibParameters',\n        parameters: {\n          '@type': 'tdParameters',\n          use_test_dc: useTestDC,\n          api_id: apiId,\n          api_hash: apiHash,\n          system_language_code: navigator.language || 'en',\n          device_model: getBrowser(),\n          system_version: getOSName(),\n          application_version: version,\n          use_secret_chats: false,\n          use_message_database: true,\n          use_file_database: false,\n          database_directory: '/db',\n          files_directory: '/'\n        } // ,\n        // extra: {\n        //     a: ['a', 'b'],\n        //     b: 123\n        // }\n\n      });\n\n      if (this.parameters.tag && this.parameters.tagVerbosity) {\n        for (let i = 0; i < this.parameters.tag.length; i++) {\n          let tag = this.parameters.tag[i];\n          let tagVerbosity = this.parameters.tagVerbosity[i];\n          this.send({\n            '@type': 'setLogTagVerbosityLevel',\n            tag: tag,\n            new_verbosity_level: tagVerbosity\n          });\n        }\n      }\n    };\n\n    this.setChatId = (chatId, messageId = null) => {\n      const update = {\n        '@type': 'clientUpdateChatId',\n        chatId: chatId,\n        messageId: messageId\n      };\n      this.clientUpdate(update);\n    };\n\n    this.parameters = {\n      useTestDC: false,\n      readOnly: false,\n      verbosity: 1,\n      jsVerbosity: 3,\n      fastUpdating: true,\n      useDatabase: false,\n      mode: 'wasm'\n    };\n    this.disableLog = false;\n    this.setMaxListeners(Infinity);\n  }\n\n  logOut() {\n    this.send({\n      '@type': 'logOut'\n    }).catch(error => {\n      this.emit('tdlib_auth_error', error);\n    });\n  }\n\n  setMediaViewerContent(content) {\n    this.clientUpdate({\n      '@type': 'clientUpdateMediaViewerContent',\n      content: content\n    });\n  }\n\n}\n\nconst controller = new TdLibController();\nexport default controller;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Controllers/TdLibController.js"],"names":["EventEmitter","packageJson","stringToBoolean","getBrowser","getOSName","VERBOSITY_JS_MAX","VERBOSITY_JS_MIN","VERBOSITY_MAX","VERBOSITY_MIN","WASM_FILE_HASH","WASM_FILE_NAME","TdClient","databaseExists","dbname","callback","req","indexedDB","open","existed","onsuccess","result","close","deleteDatabase","onupgradeneeded","TdLibController","constructor","init","location","setParameters","parameters","verbosity","jsVerbosity","useTestDC","readOnly","fastUpdating","useDatabase","mode","dbName","exists","clientUpdate","options","logVerbosityLevel","jsLogVerbosityLevel","prefix","isBackground","wasmUrl","console","log","JSON","stringify","client","onUpdate","update","disableLog","file","id","emit","search","params","URLSearchParams","toLowerCase","has","get","parseInt","tag","replace","split","tagVerbosity","length","send","request","then","catch","error","sendTdParameters","apiId","process","env","REACT_APP_TELEGRAM_API_ID","apiHash","REACT_APP_TELEGRAM_API_HASH","window","confirm","href","version","use_test_dc","api_id","api_hash","system_language_code","navigator","language","device_model","system_version","application_version","use_secret_chats","use_message_database","use_file_database","database_directory","files_directory","i","new_verbosity_level","setChatId","chatId","messageId","setMaxListeners","Infinity","logOut","setMediaViewerContent","content","controller"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport packageJson from '../../package.json';\nimport { stringToBoolean, getBrowser, getOSName } from '../Utils/Common';\nimport {\n    VERBOSITY_JS_MAX,\n    VERBOSITY_JS_MIN,\n    VERBOSITY_MAX,\n    VERBOSITY_MIN,\n    WASM_FILE_HASH,\n    WASM_FILE_NAME\n} from '../Constants';\nimport TdClient from 'tdweb/dist/tdweb';\n\nfunction databaseExists(dbname, callback) {\n    var req = indexedDB.open(dbname);\n    var existed = true;\n    req.onsuccess = function() {\n        req.result.close();\n        if (!existed) indexedDB.deleteDatabase(dbname);\n        callback(existed);\n    };\n    req.onupgradeneeded = function() {\n        existed = false;\n    };\n}\n\nclass TdLibController extends EventEmitter {\n    constructor() {\n        super();\n\n        this.parameters = {\n            useTestDC: false,\n            readOnly: false,\n            verbosity: 1,\n            jsVerbosity: 3,\n            fastUpdating: true,\n            useDatabase: false,\n            mode: 'wasm'\n        };\n\n        this.disableLog = false;\n\n        this.setMaxListeners(Infinity);\n    }\n\n    init = location => {\n        this.setParameters(location);\n\n        const { verbosity, jsVerbosity, useTestDC, readOnly, fastUpdating, useDatabase, mode } = this.parameters;\n        const dbName = useTestDC ? 'tdlib_test' : 'tdlib';\n\n        databaseExists(dbName, exists => {\n            this.clientUpdate({ '@type': 'clientUpdateDatabaseExists', exists });\n\n            let options = {\n                logVerbosityLevel: verbosity,\n                jsLogVerbosityLevel: jsVerbosity,\n                mode: mode, // 'wasm-streaming'/'wasm'/'asmjs'\n                prefix: useTestDC ? 'tdlib_test' : 'tdlib',\n                readOnly: readOnly,\n                isBackground: false,\n                useDatabase: useDatabase,\n                wasmUrl: `${WASM_FILE_NAME}?_sw-precache=${WASM_FILE_HASH}`\n                // onUpdate: update => this.emit('update', update)\n            };\n\n            console.log(\n                `[TdLibController] (fast_updating=${fastUpdating}) Start client with params=${JSON.stringify(options)}`\n            );\n\n            this.client = new TdClient(options);\n            this.client.onUpdate = update => {\n                if (!this.disableLog) {\n                    if (update['@type'] === 'updateFile') {\n                        console.log('receive updateFile file_id=' + update.file.id, update);\n                    } else {\n                        console.log('receive update', update);\n                    }\n                }\n                this.emit('update', update);\n            };\n        });\n    };\n\n    clientUpdate = update => {\n        if (!this.disableLog) {\n            console.log('clientUpdate', update);\n        }\n        this.emit('clientUpdate', update);\n    };\n\n    setParameters = location => {\n        if (!location) return;\n\n        const { search } = location;\n        if (!search) return;\n\n        const params = new URLSearchParams(search.toLowerCase());\n\n        if (params.has('test')) {\n            this.parameters.useTestDC = stringToBoolean(params.get('test'));\n        }\n\n        if (params.has('verbosity')) {\n            const verbosity = parseInt(params.get('verbosity'), 10);\n            if (verbosity >= VERBOSITY_MIN && verbosity <= VERBOSITY_MAX) {\n                this.parameters.verbosity = verbosity;\n            }\n        }\n\n        if (params.has('jsverbosity')) {\n            const jsVerbosity = parseInt(params.get('jsverbosity'), 10);\n            if (jsVerbosity >= VERBOSITY_JS_MIN && jsVerbosity <= VERBOSITY_JS_MAX) {\n                this.parameters.jsVerbosity = jsVerbosity;\n            }\n        }\n\n        if (params.has('tag') && params.has('tagverbosity')) {\n            const tag = params\n                .get('tag')\n                .replace('[', '')\n                .replace(']', '')\n                .split(',');\n            const tagVerbosity = params\n                .get('tagverbosity')\n                .replace('[', '')\n                .replace(']', '')\n                .split(',');\n            if (tag && tagVerbosity && tag.length === tagVerbosity.length) {\n                this.parameters.tag = tag;\n                this.parameters.tagVerbosity = tagVerbosity;\n            }\n        }\n\n        if (params.has('readonly')) {\n            this.parameters.readOnly = stringToBoolean(params.get('readonly'));\n        }\n\n        if (params.has('fastupdating')) {\n            this.parameters.fastUpdating = stringToBoolean(params.get('fastupdating'));\n        }\n\n        if (params.has('db')) {\n            this.parameters.useDatabase = stringToBoolean(params.get('db'));\n        }\n        if (params.has('mode')) {\n            this.parameters.mode = params.get('mode');\n        }\n    };\n\n    send = request => {\n        if (!this.disableLog) {\n            console.log('send', request);\n            return this.client\n                .send(request)\n                .then(result => {\n                    console.log('receive', result);\n                    return result;\n                })\n                .catch(error => {\n                    console.error('catch', error);\n\n                    throw error;\n                });\n        } else {\n            return this.client.send(request);\n        }\n    };\n\n    sendTdParameters = async () => {\n        const apiId = process.env.REACT_APP_TELEGRAM_API_ID;\n        const apiHash = process.env.REACT_APP_TELEGRAM_API_HASH;\n\n        if (!apiId || !apiHash) {\n            if (\n                window.confirm(\n                    'API id is missing!\\n' +\n                        'In order to obtain an API id and develop your own application ' +\n                        'using the Telegram API please visit https://core.telegram.org/api/obtaining_api_id'\n                )\n            ) {\n                window.location.href = 'https://core.telegram.org/api/obtaining_api_id';\n            }\n        }\n\n        const { useTestDC } = this.parameters;\n        const { version } = packageJson;\n\n        this.send({\n            '@type': 'setTdlibParameters',\n            parameters: {\n                '@type': 'tdParameters',\n                use_test_dc: useTestDC,\n                api_id: apiId,\n                api_hash: apiHash,\n                system_language_code: navigator.language || 'en',\n                device_model: getBrowser(),\n                system_version: getOSName(),\n                application_version: version,\n                use_secret_chats: false,\n                use_message_database: true,\n                use_file_database: false,\n                database_directory: '/db',\n                files_directory: '/'\n            }\n            // ,\n            // extra: {\n            //     a: ['a', 'b'],\n            //     b: 123\n            // }\n        });\n\n        if (this.parameters.tag && this.parameters.tagVerbosity) {\n            for (let i = 0; i < this.parameters.tag.length; i++) {\n                let tag = this.parameters.tag[i];\n                let tagVerbosity = this.parameters.tagVerbosity[i];\n\n                this.send({\n                    '@type': 'setLogTagVerbosityLevel',\n                    tag: tag,\n                    new_verbosity_level: tagVerbosity\n                });\n            }\n        }\n    };\n\n    logOut() {\n        this.send({ '@type': 'logOut' }).catch(error => {\n            this.emit('tdlib_auth_error', error);\n        });\n    }\n\n    setChatId = (chatId, messageId = null) => {\n        const update = {\n            '@type': 'clientUpdateChatId',\n            chatId: chatId,\n            messageId: messageId\n        };\n\n        this.clientUpdate(update);\n    };\n\n    setMediaViewerContent(content) {\n        this.clientUpdate({\n            '@type': 'clientUpdateMediaViewerContent',\n            content: content\n        });\n    }\n}\n\nconst controller = new TdLibController();\n\nexport default controller;\n"]},"metadata":{},"sourceType":"module"}