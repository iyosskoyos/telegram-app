{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport { isMessageMuted } from '../Utils/Message';\nimport { APP_NAME, NOTIFICATION_AUDIO_DELAY_MS } from '../Constants';\nimport ChatStore from './ChatStore';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass NotificationStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      // depends on ChatStore and MessageStore updates\n      this.chatStore = ChatStore;\n      this.messageStore = MessageStore;\n      this.newMessages = new Map();\n      this.settings = new Map();\n      this.windowFocused = true;\n      this.timerHandler = null;\n      this.nextSoundAt = new Date();\n    };\n\n    this.onTimer = () => {\n      // console.log('[ns] onTimer');\n      const unreadCount = this.getUnreadCount();\n      const showBadge = document.title === APP_NAME && unreadCount > 0;\n\n      if (showBadge) {\n        let title = '+99 notifications';\n\n        if (unreadCount === 1) {\n          title = '1 notification';\n        } else if (unreadCount < 99) {\n          title = \"\".concat(unreadCount, \" notifications\");\n        }\n\n        document.title = title;\n        document.getElementById('favicon').href = 'favicon_unread.ico';\n      } else {\n        document.title = APP_NAME;\n        document.getElementById('favicon').href = 'favicon.ico';\n      }\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateChatReadInbox':\n          {\n            const windowFocused = this.windowFocused;\n\n            if (!windowFocused) {\n              const chat_id = update.chat_id,\n                    last_read_inbox_message_id = update.last_read_inbox_message_id;\n              const chatMap = this.newMessages.get(chat_id);\n\n              if (chatMap) {\n                const newChatMap = new Map([...chatMap].filter(([id, m]) => m.id > last_read_inbox_message_id));\n\n                if (newChatMap.size < chatMap.size) {\n                  this.newMessages.set(chat_id, newChatMap);\n                  this.updateTimer();\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 'updateChatNotificationSettings':\n          {\n            const windowFocused = this.windowFocused;\n\n            if (!windowFocused) {\n              this.updateTimer();\n            }\n\n            break;\n          }\n\n        case 'updateDeleteMessages':\n          {\n            const windowFocused = this.windowFocused;\n\n            if (!windowFocused) {\n              const chat_id = update.chat_id,\n                    message_ids = update.message_ids,\n                    is_permanent = update.is_permanent;\n\n              if (is_permanent && message_ids.length > 0) {\n                const chatMap = this.newMessages.get(chat_id);\n\n                if (chatMap) {\n                  const filterMap = new Map(message_ids.map(id => [id, id]));\n                  const newChatMap = new Map([...chatMap].filter(([id, m]) => !filterMap.has(id)));\n\n                  if (newChatMap.size < chatMap.size) {\n                    this.newMessages.set(chat_id, newChatMap);\n                    this.updateTimer();\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 'updateNewMessage':\n          {\n            const windowFocused = this.windowFocused; // console.log('[ns] updateNewMessage', windowFocused);\n\n            if (!windowFocused) {\n              const message = update.message;\n              const chat_id = message.chat_id,\n                    id = message.id;\n              const chatMap = this.newMessages.get(chat_id) || new Map();\n              chatMap.set(id, message);\n              this.newMessages.set(chat_id, chatMap);\n              this.updateTimer();\n\n              if (!isMessageMuted(message)) {\n                const now = new Date();\n\n                if (now > this.nextSoundAt) {\n                  // console.log('[ns] audio play');\n                  const audio = new Audio('sound_a.mp3');\n                  audio.play();\n                  const nextSoundAt = new Date();\n                  nextSoundAt.setMilliseconds(nextSoundAt.getMilliseconds() + NOTIFICATION_AUDIO_DELAY_MS);\n                  this.nextSoundAt = nextSoundAt;\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 'updateScopeNotificationSettings':\n          {\n            const scope = update.scope,\n                  notification_settings = update.notification_settings;\n            this.settings.set(scope['@type'], notification_settings);\n            const windowFocused = this.windowFocused;\n\n            if (!windowFocused) {\n              this.updateTimer();\n            }\n\n            this.emit('updateScopeNotificationSettings', update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateFocusWindow':\n          {\n            const focused = update.focused; // console.log('[ns] clientUpdateFocusWindow', update);\n\n            this.windowFocused = focused;\n\n            if (focused) {\n              this.newMessages = new Map();\n              this.updateTimer();\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  getUnreadCount() {\n    let unreadCount = 0;\n    this.newMessages.forEach(chat => {\n      chat.forEach(m => {\n        if (!isMessageMuted(m)) {\n          unreadCount++;\n        }\n      });\n    });\n    return unreadCount;\n  }\n\n  updateTimer() {\n    const unreadCount = this.getUnreadCount(); // console.log('[ns] updateTimer', unreadCount, this.newMessages);\n\n    if (unreadCount > 0) {\n      if (!this.timerHandler) {\n        // console.log('[ns] setInterval');\n        this.onTimer();\n        this.timerHandler = setInterval(this.onTimer, 1000);\n      }\n    } else {\n      if (this.timerHandler) {\n        // console.log('[ns] clearInterval');\n        clearInterval(this.timerHandler);\n        this.timerHandler = null;\n        this.onTimer();\n      }\n    }\n  }\n\n}\n\nconst store = new NotificationStore();\nwindow.notifications = store;\nexport default store;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Stores/NotificationStore.js"],"names":["EventEmitter","isMessageMuted","APP_NAME","NOTIFICATION_AUDIO_DELAY_MS","ChatStore","MessageStore","TdLibController","NotificationStore","constructor","reset","chatStore","messageStore","newMessages","Map","settings","windowFocused","timerHandler","nextSoundAt","Date","onTimer","unreadCount","getUnreadCount","showBadge","document","title","getElementById","href","onUpdate","update","chat_id","last_read_inbox_message_id","chatMap","get","newChatMap","filter","id","m","size","set","updateTimer","message_ids","is_permanent","length","filterMap","map","has","message","now","audio","Audio","play","setMilliseconds","getMilliseconds","scope","notification_settings","emit","onClientUpdate","focused","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","forEach","chat","setInterval","clearInterval","store","window","notifications"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport { isMessageMuted } from '../Utils/Message';\nimport { APP_NAME, NOTIFICATION_AUDIO_DELAY_MS } from '../Constants';\nimport ChatStore from './ChatStore';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass NotificationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        // depends on ChatStore and MessageStore updates\n        this.chatStore = ChatStore;\n        this.messageStore = MessageStore;\n\n        this.newMessages = new Map();\n        this.settings = new Map();\n        this.windowFocused = true;\n        this.timerHandler = null;\n        this.nextSoundAt = new Date();\n    };\n\n    getUnreadCount() {\n        let unreadCount = 0;\n        this.newMessages.forEach(chat => {\n            chat.forEach(m => {\n                if (!isMessageMuted(m)) {\n                    unreadCount++;\n                }\n            });\n        });\n\n        return unreadCount;\n    }\n\n    updateTimer() {\n        const unreadCount = this.getUnreadCount();\n        // console.log('[ns] updateTimer', unreadCount, this.newMessages);\n\n        if (unreadCount > 0) {\n            if (!this.timerHandler) {\n                // console.log('[ns] setInterval');\n\n                this.onTimer();\n                this.timerHandler = setInterval(this.onTimer, 1000);\n            }\n        } else {\n            if (this.timerHandler) {\n                // console.log('[ns] clearInterval');\n\n                clearInterval(this.timerHandler);\n                this.timerHandler = null;\n                this.onTimer();\n            }\n        }\n    }\n\n    onTimer = () => {\n        // console.log('[ns] onTimer');\n\n        const unreadCount = this.getUnreadCount();\n        const showBadge = document.title === APP_NAME && unreadCount > 0;\n\n        if (showBadge) {\n            let title = '+99 notifications';\n            if (unreadCount === 1) {\n                title = '1 notification';\n            } else if (unreadCount < 99) {\n                title = `${unreadCount} notifications`;\n            }\n            document.title = title;\n            document.getElementById('favicon').href = 'favicon_unread.ico';\n        } else {\n            document.title = APP_NAME;\n            document.getElementById('favicon').href = 'favicon.ico';\n        }\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateChatReadInbox': {\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    const { chat_id, last_read_inbox_message_id } = update;\n\n                    const chatMap = this.newMessages.get(chat_id);\n                    if (chatMap) {\n                        const newChatMap = new Map([...chatMap].filter(([id, m]) => m.id > last_read_inbox_message_id));\n                        if (newChatMap.size < chatMap.size) {\n                            this.newMessages.set(chat_id, newChatMap);\n                            this.updateTimer();\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'updateChatNotificationSettings': {\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    this.updateTimer();\n                }\n\n                break;\n            }\n            case 'updateDeleteMessages': {\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    const { chat_id, message_ids, is_permanent } = update;\n                    if (is_permanent && message_ids.length > 0) {\n                        const chatMap = this.newMessages.get(chat_id);\n                        if (chatMap) {\n                            const filterMap = new Map(message_ids.map(id => [id, id]));\n\n                            const newChatMap = new Map([...chatMap].filter(([id, m]) => !filterMap.has(id)));\n                            if (newChatMap.size < chatMap.size) {\n                                this.newMessages.set(chat_id, newChatMap);\n                                this.updateTimer();\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'updateNewMessage': {\n                const { windowFocused } = this;\n                // console.log('[ns] updateNewMessage', windowFocused);\n                if (!windowFocused) {\n                    const { message } = update;\n                    const { chat_id, id } = message;\n\n                    const chatMap = this.newMessages.get(chat_id) || new Map();\n                    chatMap.set(id, message);\n                    this.newMessages.set(chat_id, chatMap);\n                    this.updateTimer();\n\n                    if (!isMessageMuted(message)) {\n                        const now = new Date();\n                        if (now > this.nextSoundAt) {\n                            // console.log('[ns] audio play');\n                            const audio = new Audio('sound_a.mp3');\n                            audio.play();\n\n                            const nextSoundAt = new Date();\n                            nextSoundAt.setMilliseconds(nextSoundAt.getMilliseconds() + NOTIFICATION_AUDIO_DELAY_MS);\n                            this.nextSoundAt = nextSoundAt;\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'updateScopeNotificationSettings': {\n                const { scope, notification_settings } = update;\n\n                this.settings.set(scope['@type'], notification_settings);\n\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    this.updateTimer();\n                }\n\n                this.emit('updateScopeNotificationSettings', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateFocusWindow': {\n                const { focused } = update;\n                // console.log('[ns] clientUpdateFocusWindow', update);\n\n                this.windowFocused = focused;\n                if (focused) {\n                    this.newMessages = new Map();\n                    this.updateTimer();\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n}\n\nconst store = new NotificationStore();\nwindow.notifications = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}