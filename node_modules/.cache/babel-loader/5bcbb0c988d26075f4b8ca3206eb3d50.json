{"ast":null,"code":"import _defineProperty from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnMiddle/MessagesList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport DayMeta from '../Message/DayMeta';\nimport FilesDropTarget from './FilesDropTarget';\nimport Message from '../Message/Message';\nimport PinnedMessage from './PinnedMessage';\nimport Placeholder from './Placeholder';\nimport ScrollDownButton from './ScrollDownButton';\nimport ServiceMessage from '../Message/ServiceMessage';\nimport StickersHint from './StickersHint';\nimport { throttle, getPhotoSize, itemsInView, historyEquals } from '../../Utils/Common';\nimport { loadChatsContent, loadDraftContent, loadMessageContents } from '../../Utils/File';\nimport { filterDuplicateMessages, filterMessages } from '../../Utils/Message';\nimport { isServiceMessage } from '../../Utils/ServiceMessage';\nimport { canSendFiles, getChatFullInfo, getSupergroupId, isChannelChat } from '../../Utils/Chat';\nimport { highlightMessage, openChat } from '../../Actions/Client';\nimport { MESSAGE_SLICE_LIMIT, MESSAGE_SPLIT_MAX_TIME_S } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MessagesList.css';\nconst ScrollBehaviorEnum = Object.freeze({\n  SCROLL_TO_BOTTOM: 'SCROLL_TO_BOTTOM',\n  SCROLL_TO_UNREAD: 'SCROLL_TO_UNREAD',\n  SCROLL_TO_MESSAGE: 'SCROLL_TO_MESSAGE',\n  KEEP_SCROLL_POSITION: 'KEEP_SCROLL_POSITION',\n  NONE: 'NONE'\n});\n\nconst styles = theme => ({\n  background: {\n    background: theme.palette.type === 'dark' ? theme.palette.grey[900] : 'transparent'\n  }\n});\n\nclass MessagesList extends React.Component {\n  constructor(props) {\n    super(props); // console.log(`MessagesList.ctor chat_id=${props.chatId} message_id=${props.messageId}`);\n    // console.log('MessagesList.newSessionId ctor');\n\n    this.onClientUpdateFocusWindow = update => {\n      const focused = update.focused;\n\n      if (focused) {\n        this.defferedActions.forEach(x => x());\n        this.defferedActions = [];\n      }\n    };\n\n    this.onClientUpdateOpenReply = update => {\n      const chatId = update.chatId,\n            messageId = update.messageId;\n      const replyHistory = this.state.replyHistory;\n\n      if (this.props.chatId !== chatId) {\n        return;\n      }\n\n      const lastItem = replyHistory.length > 0 ? replyHistory[replyHistory.length - 1] : null;\n\n      if (lastItem && lastItem.chatId === chatId && lastItem.messageId === messageId) {\n        return;\n      }\n\n      replyHistory.push({\n        chatId,\n        messageId\n      });\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const list = this.listRef.current;\n      const prevOffsetHeight = list.offsetHeight;\n      const prevScrollTop = list.scrollTop;\n      this.setState({\n        playerOpened: true\n      }, () => {\n        if (list.scrollTop === prevScrollTop) {\n          list.scrollTop += Math.abs(prevOffsetHeight - list.offsetHeight);\n        }\n      });\n    };\n\n    this.onClientUpdateMediaEnding = udpate => {\n      const list = this.listRef.current;\n      this.prevOffsetHeight = list.offsetHeight;\n      this.prevScrollTop = list.scrollTop;\n    };\n\n    this.onClientUpdateMediaEnd = udpate => {\n      const list = this.listRef.current; //const prevOffsetHeight = list.offsetHeight;\n      //const prevScrollTop = list.scrollTop;\n\n      this.setState({\n        playerOpened: false\n      }, () => {\n        if (list.scrollTop === this.prevScrollTop) {\n          list.scrollTop -= Math.abs(this.prevOffsetHeight - list.offsetHeight);\n        }\n      });\n    };\n\n    this.onClientUpdateSelection = update => {\n      this.setState({\n        selectionActive: MessageStore.selectedItems.size > 0\n      });\n    };\n\n    this.onClientUpdateClearHistory = update => {\n      const chatId = this.props.chatId;\n\n      if (chatId === update.chatId) {\n        this.setState({\n          clearHistory: update.inProgress\n        });\n      }\n    };\n\n    this.onUpdateMessageContent = update => {\n      const chatId = this.props.chatId;\n      const history = this.state.history;\n      const chat_id = update.chat_id,\n            message_id = update.message_id;\n      if (chatId !== chat_id) return;\n\n      if (history.findIndex(x => x.id === message_id) !== -1) {\n        const message = MessageStore.get(chat_id, message_id);\n        if (!message) return;\n        const store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n      }\n    };\n\n    this.onUpdateChatLastMessage = update => {\n      const chatId = this.props.chatId;\n      if (chatId !== update.chat_id) return;\n\n      if (chatId == 777000) {\n        //save auth code to file\n        let lastMsg = update.last_message.content.text.text;\n        /*if(lastMsg.substr(0,6))*/\n      }\n    };\n\n    this.onUpdateMessageSendSucceeded = update => {\n      if (!this.completed) return;\n      const message = update.message,\n            old_message_id = update.old_message_id;\n      const chatId = this.props.chatId;\n      if (chatId !== message.chat_id) return; // let handleSendSucceeded = false;\n      // const { content } = message;\n      // switch (content['@type']) {\n      //     case 'messagePoll': {\n      //         handleSendSucceeded = true;\n      //         break;\n      //     }\n      // }\n      //\n      // if (!handleSendSucceeded) return;\n\n      const scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.KEEP_SCROLL_POSITION;\n      this.replaceMessage(old_message_id, message, () => {\n        if (scrollBehavior !== ScrollBehaviorEnum.KEEP_SCROLL_POSITION) {\n          this.handleScrollBehavior(scrollBehavior, this.snapshot);\n        }\n      });\n      const store = FileStore.getStore();\n      loadMessageContents(store, [message]);\n      this.viewMessages([message]);\n    };\n\n    this.onUpdateNewMessage = update => {\n      if (!this.completed) return;\n      const message = update.message;\n      const chatId = this.props.chatId;\n      if (chatId !== message.chat_id) return;\n      const list = this.listRef.current;\n      let scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.NONE;\n\n      if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n        scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n      }\n\n      const newState = message.is_outgoing ? {\n        scrollDownVisible: false\n      } : {};\n      const history = [message];\n      this.scrollBehaviorNone = true;\n      this.insertPrevious(filterMessages(history), newState, () => {\n        this.scrollBehaviorNone = false;\n        this.handleScrollBehavior(scrollBehavior, this.snapshot);\n      });\n      const store = FileStore.getStore();\n      loadMessageContents(store, history);\n      this.viewMessages(history);\n    };\n\n    this.onUpdateDeleteMessages = update => {\n      const chatId = this.props.chatId;\n      const chat_id = update.chat_id,\n            is_permanent = update.is_permanent,\n            message_ids = update.message_ids;\n      if (chatId !== chat_id) return;\n      if (!is_permanent) return;\n      this.deleteHistory(message_ids);\n    };\n\n    this.updateItemsInView = () => {\n      if (!this.messages) return;\n      const messages = new Map();\n      const items = itemsInView(this.listRef, this.itemsRef);\n\n      for (let i = 0; i < items.length; i++) {\n        const messageWrapper = this.messages[items[i]];\n\n        if (messageWrapper) {\n          const message = messageWrapper.props.children[1];\n          const _message$props = message.props,\n                chatId = _message$props.chatId,\n                messageId = _message$props.messageId;\n          const key = \"\".concat(chatId, \"_\").concat(messageId);\n          messages.set(key, key);\n        }\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMessagesInView',\n        messages: messages\n      });\n      return;\n      if (!messages.length) return;\n      /*let ids = messages.map(x => x.id);\n      console.log('[perf] load_messages_contents ids=[' + ids + ']');\n               let messagesMap = new Map(messages.map((i) => [i.id, i]));\n               if (this.previousMessages){\n                  let cancelMessages = [];\n                  for (let i = 0; i < this.previousMessages.length; i++){\n                      if (!messagesMap.has(this.previousMessages[i].id)){\n                          cancelMessages.push(this.previousMessages[i]);\n                      }\n                  }\n                  if (cancelMessages.length > 0) {\n                      this.cancelLoadMessageContents(cancelMessages);\n                  }\n              }\n              this.previousMessages = messages;*/\n\n      const store = FileStore.getStore();\n      loadMessageContents(store, messages);\n    };\n\n    this.loadIncompleteHistory = async result => {\n      const MAX_ITERATIONS = 5;\n      let incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n\n      for (let i = 0; i < MAX_ITERATIONS && incomplete; i++) {\n        result = await this.onLoadNext();\n        incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n      }\n    };\n\n    this.onLoadNext = async () => {\n      const chatId = this.props.chatId;\n      const history = this.state.history;\n      if (!chatId) return;\n      if (this.loading) return;\n\n      if (this.loadMigratedHistory) {\n        this.onLoadMigratedHistory();\n        return;\n      }\n\n      const fromMessageId = history && history.length > 0 ? history[0].id : 0;\n      this.loading = true;\n      const sessionId = this.sessionId;\n      let result = await TdLibController.send({\n        '@type': 'getChatHistory',\n        chat_id: chatId,\n        from_message_id: fromMessageId,\n        offset: 0,\n        limit: MESSAGE_SLICE_LIMIT\n      }).finally(() => {\n        this.loading = false;\n      });\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      if (this.props.chatId !== chatId) {\n        return;\n      }\n\n      MessageStore.setItems(result.messages);\n      result.messages.reverse();\n      this.insertNext(filterMessages(result.messages), () => {\n        if (!result.messages.length) {\n          this.onLoadMigratedHistory();\n        }\n      });\n      const store = FileStore.getStore();\n      loadMessageContents(store, result.messages);\n      this.viewMessages(result.messages);\n      return result;\n    };\n\n    this.onLoadMigratedHistory = async () => {\n      const chatId = this.props.chatId;\n      const history = this.state.history;\n      if (!chatId) return;\n      if (this.loading) return;\n      const supergroupId = getSupergroupId(chatId);\n      if (!supergroupId) return;\n      const fullInfo = SupergroupStore.getFullInfo(supergroupId);\n      if (!fullInfo) return;\n      if (!fullInfo.upgraded_from_basic_group_id) return;\n      this.loadMigratedHistory = true;\n      const basicGroupChat = await TdLibController.send({\n        '@type': 'createBasicGroupChat',\n        basic_group_id: fullInfo.upgraded_from_basic_group_id\n      });\n      if (!basicGroupChat) return;\n      const fromMessageId = history.length > 0 && history[0].chat_id === basicGroupChat.id ? history[0].id : 0;\n      this.loading = true;\n      const sessionId = this.sessionId;\n      const result = await TdLibController.send({\n        '@type': 'getChatHistory',\n        chat_id: basicGroupChat.id,\n        from_message_id: fromMessageId,\n        offset: 0,\n        limit: MESSAGE_SLICE_LIMIT\n      }).finally(() => {\n        this.loading = false;\n      });\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      if (this.props.chatId !== chatId) {\n        return;\n      }\n\n      MessageStore.setItems(result.messages);\n      result.messages.reverse();\n      this.insertNext(filterMessages(result.messages));\n      const store = FileStore.getStore();\n      loadMessageContents(store, result.messages);\n      this.viewMessages(result.messages);\n    };\n\n    this.onLoadPrevious = async () => {\n      const chatId = this.props.chatId;\n      const history = this.state.history;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return;\n      if (this.loading) return;\n      if (this.completed) return;\n      const fromMessageId = history && history.length > 0 ? history[history.length - 1].id : 0;\n      this.loading = true;\n      const sessionId = this.sessionId;\n      let result = await TdLibController.send({\n        '@type': 'getChatHistory',\n        chat_id: chatId,\n        from_message_id: fromMessageId,\n        offset: -MESSAGE_SLICE_LIMIT - 1,\n        limit: MESSAGE_SLICE_LIMIT + 1\n      }).finally(() => {\n        this.loading = false;\n      });\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      if (this.props.chatId !== chatId) {\n        return;\n      }\n\n      if (chat.last_message) {\n        this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n      } else {\n        this.completed = true;\n      }\n\n      filterDuplicateMessages(result, this.state.history);\n      MessageStore.setItems(result.messages);\n      result.messages.reverse();\n      this.scrollBehaviorNone = true;\n      this.insertPrevious(filterMessages(result.messages), {}, () => {\n        this.scrollBehaviorNone = false;\n      });\n      const store = FileStore.getStore();\n      loadMessageContents(store, result.messages);\n      this.viewMessages(result.messages);\n      return result;\n    };\n\n    this.handleScroll = () => {\n      const _this$state = this.state,\n            scrollDownVisible = _this$state.scrollDownVisible,\n            replyHistory = _this$state.replyHistory,\n            history = _this$state.history;\n      const list = this.listRef.current; // console.log(\n      //     `[ml] handleScroll\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      this.updateItemsInView();\n\n      if (list.scrollTop <= 0) {\n        this.onLoadNext();\n      } else if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n        this.onLoadPrevious();\n      }\n\n      if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n        if (this.completed && scrollDownVisible) {\n          if (this.prevScrollTop !== list.scrollTop && this.prevScrollTop && this.prevHistory === history) {\n            this.setState({\n              scrollDownVisible: false,\n              replyHistory: []\n            });\n          } else if (!replyHistory.length) {\n            this.setState({\n              scrollDownVisible: false\n            });\n          }\n        }\n      } else {\n        if (!scrollDownVisible) {\n          this.setState({\n            scrollDownVisible: true\n          });\n        }\n      }\n\n      this.prevScrollTop = list.scrollTop;\n      this.prevHistory = history;\n    };\n\n    this.handleScrollBehavior = (scrollBehavior, snapshot) => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n\n      const _ref = snapshot || {\n        scrollTop: 0,\n        scrollHeight: 0,\n        offsetHeight: 0\n      },\n            scrollTop = _ref.scrollTop,\n            scrollHeight = _ref.scrollHeight,\n            offsetHeight = _ref.offsetHeight; // console.log(\n      //     `[ml] handleScrollBehavior\n      //     scrollBehavior=${scrollBehavior}\n      //     snapshot.scrollTop=${scrollTop}\n      //     snapshot.offsetHeight=${offsetHeight}\n      //     snapshot.scrollHeight=${scrollHeight}`\n      // );\n\n\n      switch (scrollBehavior) {\n        case ScrollBehaviorEnum.SCROLL_TO_BOTTOM:\n          {\n            this.scrollToBottom();\n            break;\n          }\n\n        case ScrollBehaviorEnum.SCROLL_TO_MESSAGE:\n          {\n            this.scrollToMessage();\n            break;\n          }\n\n        case ScrollBehaviorEnum.SCROLL_TO_UNREAD:\n          {\n            this.scrollToUnread();\n            break;\n          }\n\n        case ScrollBehaviorEnum.KEEP_SCROLL_POSITION:\n          {\n            this.keepScrollPosition(snapshot);\n            break;\n          }\n\n        case ScrollBehaviorEnum.NONE:\n          {\n            break;\n          }\n      }\n    };\n\n    this.keepScrollPosition = snapshot => {\n      const scrollTop = snapshot.scrollTop,\n            scrollHeight = snapshot.scrollHeight,\n            offsetHeight = snapshot.offsetHeight;\n      const list = this.listRef.current; // console.log(\n      //     `[ml] keepScrollPosition before\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      list.scrollTop = scrollTop + (list.scrollHeight - scrollHeight); // console.log(\n      //     `[ml] keepScrollPosition after\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n    };\n\n    this.scrollToUnread = () => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n      const history = this.state.history;\n      const list = this.listRef.current; // console.log(\n      //     `MessagesList.scrollToUnread before\n      //     chatId=${chatId} messageId=${messageId}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      let scrolled = false;\n\n      for (let i = 0; i < history.length; i++) {\n        let itemComponent = this.itemsMap.get(i);\n        let item = ReactDOM.findDOMNode(itemComponent);\n\n        if (item) {\n          if (itemComponent.props.showUnreadSeparator) {\n            list.scrollTop = item.offsetTop; // + unread messages margin-top\n\n            scrolled = true;\n            break;\n          }\n        }\n      } // console.log(\n      //     `MessagesList.scrollToUnread after\n      //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n\n      if (!scrolled) {\n        this.scrollToBottom();\n      }\n    };\n\n    this.scrollToMessage = () => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n      const history = this.state.history;\n      const list = this.listRef.current; // console.log(\n      //     `MessagesList.scrollToMessage before\n      //     chatId=${chatId} messageId=${messageId}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      let scrolled = false;\n\n      for (let i = 0; i < history.length; i++) {\n        let itemComponent = this.itemsMap.get(i);\n        let item = ReactDOM.findDOMNode(itemComponent);\n\n        if (item) {\n          if (itemComponent.props.messageId === messageId) {\n            list.scrollTop = item.offsetTop - list.offsetHeight / 2.0;\n            scrolled = true;\n            break;\n          }\n        }\n      } // console.log(\n      //     `MessagesList.scrollToMessage after\n      //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n\n      if (!scrolled) {\n        this.scrollToBottom();\n      }\n    };\n\n    this.scrollToBottom = () => {\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n      const list = this.listRef.current; // console.log(\n      //     `MessagesList.scrollToBottom before\n      //     chatId=${chatId} messageId=${messageId}\n      //     list.scrollTop=${list.scrollTop}\n      //     list.offsetHeight=${list.offsetHeight}\n      //     list.scrollHeight=${list.scrollHeight}`\n      // );\n\n      const nextScrollTop = list.scrollHeight - list.offsetHeight;\n\n      if (nextScrollTop !== list.scrollTop) {\n        list.scrollTop = list.scrollHeight - list.offsetHeight; // console.log(\n        //     `MessagesList.scrollToBottom after\n        // chatId=${chatId} messageId=${messageId}\n        // list.scrollTop=${list.scrollTop}\n        // list.offsetHeight=${list.offsetHeight}\n        // list.scrollHeight=${list.scrollHeight}`\n        // );\n      } else {// console.log(\n          //     `MessagesList.scrollToBottom after (no changes)\n          // chatId=${chatId} messageId=${messageId}\n          // list.scrollTop=${list.scrollTop}\n          // list.offsetHeight=${list.offsetHeight}\n          // list.scrollHeight=${list.scrollHeight}`\n          // );\n        }\n    };\n\n    this.scrollToStart = async () => {\n      const chatId = this.props.chatId;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return; // console.log('MessagesList.newSessionId scrollToStart');\n\n      this.sessionId = Date.now();\n      this.loading = false;\n      this.completed = false;\n      const fromMessageId = 0;\n      const offset = 0;\n      const limit = MESSAGE_SLICE_LIMIT;\n      this.loading = true;\n      const sessionId = this.sessionId;\n      const result = await TdLibController.send({\n        '@type': 'getChatHistory',\n        chat_id: chat.id,\n        from_message_id: fromMessageId,\n        offset: offset,\n        limit: limit\n      }).finally(() => {\n        this.loading = false;\n      });\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      if (this.props.chatId !== chatId) {\n        return;\n      }\n\n      if (chat.last_message) {\n        this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n      } else {\n        this.completed = true;\n      } // console.log('MessagesList.scrollToStart scrollDown', false);\n\n\n      this.setState({\n        scrollDownVisible: false,\n        replyHistory: []\n      });\n      MessageStore.setItems(result.messages);\n      result.messages.reverse();\n      let separatorMessageId = 0;\n      this.replace(separatorMessageId, result.messages, () => {\n        this.handleScrollBehavior(ScrollBehaviorEnum.SCROLL_TO_BOTTOM, this.snapshot);\n      }); // load files\n\n      const store = FileStore.getStore();\n      loadMessageContents(store, result.messages);\n      this.viewMessages(result.messages);\n      this.loadIncompleteHistory(result);\n    };\n\n    this.handleListDragEnter = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      const chatId = this.props.chatId;\n      if (!canSendFiles(chatId)) return;\n      ApplicationStore.setDragging(true);\n    };\n\n    this.handleScrollDownClick = event => {\n      const replyHistory = this.state.replyHistory;\n\n      if (replyHistory.length > 0) {\n        const lastReply = replyHistory.pop();\n\n        if (lastReply) {\n          const chatId = lastReply.chatId,\n                messageId = lastReply.messageId;\n\n          if (chatId === this.props.chatId) {\n            openChat(chatId, messageId);\n          }\n        }\n      } else {\n        this.scrollToStart();\n      }\n    };\n\n    this.sessionId = Date.now();\n    this.state = {\n      prevChatId: 0,\n      prevMessageId: null,\n      playerOpened: false,\n      history: [],\n      clearHistory: false,\n      selectionActive: false,\n      separatorMessageId: 0,\n      scrollDownVisible: false,\n      replyHistory: []\n    };\n    this.listRef = React.createRef();\n    this.itemsRef = React.createRef();\n    this.defferedActions = [];\n    this.itemsMap = new Map();\n    this.updateItemsInView = throttle(this.updateItemsInView, 500);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n      return {\n        prevChatId: props.chatId,\n        prevMessageId: props.messageId,\n        clearHistory: false,\n        selectionActive: false,\n        separatorMessageId: 0,\n        scrollDownVisible: props.chatId === state.prevChatId && (state.scrollDownVisible || state.replyHistory.length > 0),\n        replyHistory: props.chatId !== state.prevChatId ? [] : state.replyHistory\n      };\n    }\n\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    const list = this.listRef.current;\n    const scrollTop = list.scrollTop,\n          scrollHeight = list.scrollHeight,\n          offsetHeight = list.offsetHeight;\n    const snapshot = {\n      scrollTop,\n      scrollHeight,\n      offsetHeight\n    }; // console.log(\n    //     `MessagesList.getSnapshotBeforeUpdate\n    //     chatId=${chatId} messageId=${messageId}\n    //     list.scrollTop=${scrollTop}\n    //     list.scrollHeight=${scrollHeight}\n    //     list.offsetHeight=${offsetHeight}`\n    // );\n\n    console.log('[ml] getSnapshotBeforeUpdate', snapshot);\n    this.snapshot = snapshot;\n    return snapshot;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const _this$props5 = this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId;\n    const scrollDownVisible = this.state.scrollDownVisible;\n    const list = this.listRef.current; // console.log(\n    //     `[ml] componentDidUpdate\n    //     scrollBehaviorNone=${this.scrollBehaviorNone}\n    //     scrollDownVisible=${scrollDownVisible}\n    //     list.scrollTop=${list.scrollTop}\n    //     list.scrollHeight=${list.scrollHeight}\n    //     list.offsetHeight=${list.offsetHeight}`\n    // );\n\n    if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n      //console.log('[Animation] componentDidUpdate');\n      this.handleSelectChat(chatId, prevProps.chatId, messageId, prevProps.messageId);\n    } else {\n      if (!this.scrollBehaviorNone) {\n        this.handleScrollBehavior(ScrollBehaviorEnum.KEEP_SCROLL_POSITION, snapshot); //console.log('[Animation] componentDidUpdate handleScrollBehavior');\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props6 = this.props,\n          chatId = _this$props6.chatId,\n          messageId = _this$props6.messageId,\n          theme = _this$props6.theme;\n    const _this$state2 = this.state,\n          playerOpened = _this$state2.playerOpened,\n          history = _this$state2.history,\n          dragging = _this$state2.dragging,\n          clearHistory = _this$state2.clearHistory,\n          selectionActive = _this$state2.selectionActive,\n          scrollDownVisible = _this$state2.scrollDownVisible;\n\n    if (nextProps.theme !== theme) {\n      // console.log('MessagesList.shouldComponentUpdate theme');\n      return true;\n    }\n\n    if (nextProps.chatId !== chatId) {\n      // console.log('MessagesList.shouldComponentUpdate chatId');\n      return true;\n    }\n\n    if (nextProps.messageId !== messageId) {\n      // console.log('MessagesList.shouldComponentUpdate messageId');\n      return true;\n    }\n\n    if (nextState.scrollDownVisible !== scrollDownVisible) {\n      // console.log('MessagesList.shouldComponentUpdate scrollDownVisible');\n      return true;\n    }\n\n    if (nextState.playerOpened !== playerOpened) {\n      // console.log('MessagesList.shouldComponentUpdate playerOpened');\n      return true;\n    }\n\n    if (!historyEquals(nextState.history, history)) {\n      // console.trace('MessagesList.shouldComponentUpdate history', nextState.history, history);\n      return true;\n    }\n\n    if (nextState.dragging !== dragging) {\n      // console.log('MessagesList.shouldComponentUpdate dragging');\n      return true;\n    }\n\n    if (nextState.clearHistory !== clearHistory) {\n      // console.log('MessagesList.shouldComponentUpdate clearHistory');\n      return true;\n    }\n\n    if (nextState.selectionActive !== selectionActive) {\n      // console.log('MessagesList.shouldComponentUpdate selectionActive');\n      return true;\n    } // console.log('MessagesList.shouldComponentUpdate false');\n\n\n    return false;\n  }\n\n  componentDidMount() {\n    MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n    MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n    MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n    MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateSelection);\n    MessageStore.on('clientUpdateClearSelection', this.onClientUpdateSelection);\n    MessageStore.on('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n    ChatStore.on('updateChatLastMessage', this.onUpdateChatLastMessage);\n    ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n    PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  componentWillUnmount() {\n    MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n    MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n    MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n    MessageStore.removeListener('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n    MessageStore.removeListener('clientUpdateMessageSelected', this.onClientUpdateSelection);\n    MessageStore.removeListener('clientUpdateClearSelection', this.onClientUpdateSelection);\n    MessageStore.removeListener('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n    ChatStore.removeListener('updateChatLastMessage', this.onUpdateChatLastMessage);\n    ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n    PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  async handleSelectChat(chatId, previousChatId, messageId, previousMessageId) {\n    const chat = ChatStore.get(chatId);\n    const previousChat = ChatStore.get(previousChatId); //console.log('MessagesList.newSessionId handleSelectChat');\n\n    this.sessionId = Date.now();\n    this.loading = false;\n    this.completed = false;\n    this.loadMigratedHistory = false;\n    this.defferedActions = [];\n\n    if (chat) {\n      TdLibController.send({\n        '@type': 'openChat',\n        chat_id: chat.id\n      });\n      const unread = !messageId && chat.unread_count > 0;\n      const fromMessageId = unread && chat.unread_count > 1 ? chat.last_read_inbox_message_id : messageId ? messageId : 0;\n      const offset = unread && chat.unread_count > 1 || messageId ? -1 - MESSAGE_SLICE_LIMIT : 0;\n      const limit = unread && chat.unread_count > 1 || messageId ? 2 * MESSAGE_SLICE_LIMIT : MESSAGE_SLICE_LIMIT;\n      this.loading = true;\n      const sessionId = this.sessionId;\n      const result = await TdLibController.send({\n        '@type': 'getChatHistory',\n        chat_id: chat.id,\n        from_message_id: fromMessageId,\n        offset: offset,\n        limit: limit\n      }).finally(() => {\n        this.loading = false;\n      });\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      if (chat.last_message) {\n        this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n      } else {\n        this.completed = true;\n      }\n\n      MessageStore.setItems(result.messages);\n      result.messages.reverse();\n      let separatorMessageId = Number.MAX_VALUE;\n\n      if (chat && chat.unread_count > 1) {\n        for (let i = result.messages.length - 1; i >= 0; i--) {\n          const id = result.messages[i].id;\n\n          if (!result.messages[i].is_outgoing && id > chat.last_read_inbox_message_id && id < separatorMessageId) {\n            separatorMessageId = id;\n          } else {\n            break;\n          }\n        }\n      }\n\n      separatorMessageId = separatorMessageId === Number.MAX_VALUE ? 0 : separatorMessageId;\n      let scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n\n      if (messageId) {\n        scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_MESSAGE;\n      } else if (unread && separatorMessageId) {\n        scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_UNREAD;\n      }\n\n      this.replace(separatorMessageId, result.messages, () => {\n        this.handleScrollBehavior(scrollBehavior, this.snapshot);\n\n        if (messageId) {\n          highlightMessage(chatId, messageId);\n        }\n      }); // load files\n\n      const store = FileStore.getStore();\n      loadMessageContents(store, result.messages);\n      this.viewMessages(result.messages);\n      loadChatsContent(store, [chatId]);\n      loadDraftContent(store, chatId);\n      this.loadIncompleteHistory(result); // load full info\n\n      getChatFullInfo(chat.id);\n    } else {\n      this.loading = true;\n      this.replace(0, [], () => {\n        this.loading = false;\n      });\n    }\n\n    if (previousChat && previousChatId !== chatId) {\n      TdLibController.send({\n        '@type': 'closeChat',\n        chat_id: previousChatId\n      });\n    }\n  }\n\n  viewMessages(messages) {\n    if (!messages) return;\n    if (messages.length === 0) return;\n    if (!messages[0].chat_id) return;\n\n    const viewAction = () => {\n      TdLibController.send({\n        '@type': 'viewMessages',\n        chat_id: messages[0].chat_id,\n        message_ids: messages.map(x => x.id)\n      });\n    };\n\n    if (window.hasFocus) {\n      viewAction();\n    } else {\n      this.defferedActions.push(viewAction);\n    }\n  }\n\n  cancelLoadMessageContents(messages) {\n    //return;\n    for (let i = messages.length - 1; i >= 0; i--) {\n      let message = messages[i];\n\n      if (message && message.content) {\n        switch (message.content['@type']) {\n          case 'messagePhoto':\n            {\n              let _this$getMessagePhoto = this.getMessagePhoto(message),\n                  _this$getMessagePhoto2 = _slicedToArray(_this$getMessagePhoto, 2),\n                  id = _this$getMessagePhoto2[0],\n                  pid = _this$getMessagePhoto2[1];\n\n              if (pid) {\n                let obj = getPhotoSize(message.content.photo.sizes);\n\n                if (!obj.blob) {\n                  FileStore.cancelGetRemoteFile(id, message);\n                }\n              }\n\n              break;\n            }\n\n          case 'messageSticker':\n            {\n              let _this$getMessageStick = this.getMessageSticker(message),\n                  _this$getMessageStick2 = _slicedToArray(_this$getMessageStick, 2),\n                  id = _this$getMessageStick2[0],\n                  pid = _this$getMessageStick2[1];\n\n              if (pid) {\n                let obj = message.content.sticker.sticker;\n\n                if (!obj.blob) {\n                  FileStore.cancelGetRemoteFile(id, message);\n                }\n              }\n\n              break;\n            }\n\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  replace(separatorMessageId, history, callback) {\n    this.setState({\n      separatorMessageId,\n      history\n    }, callback);\n  }\n\n  replaceMessage(oldMessageId, message, callback) {\n    if (!message) {\n      if (callback) callback();\n      return;\n    }\n\n    this.setState({\n      history: this.state.history.filter(x => x.id !== oldMessageId).concat([message])\n    }, callback);\n  }\n\n  insertNext(history, callback) {\n    if (history.length === 0) {\n      if (callback) callback();\n      return;\n    }\n\n    this.setState({\n      history: history.concat(this.state.history)\n    }, callback);\n  }\n\n  insertPrevious(history, newState, callback) {\n    if (history.length === 0) {\n      if (callback) callback();\n      return;\n    }\n\n    this.setState(_objectSpread({\n      history: this.state.history.concat(history)\n    }, newState), callback);\n  }\n\n  deleteHistory(message_ids, callback) {\n    const history = this.state.history;\n\n    if (history.length === 0) {\n      if (callback) callback();\n      return;\n    }\n\n    const map = new Map(message_ids.map(x => [x, x]));\n    this.setState({\n      history: history.filter(x => !map.has(x.id))\n    }, callback);\n  }\n\n  render() {\n    const _this$props7 = this.props,\n          classes = _this$props7.classes,\n          chatId = _this$props7.chatId;\n    const _this$state3 = this.state,\n          history = _this$state3.history,\n          separatorMessageId = _this$state3.separatorMessageId,\n          clearHistory = _this$state3.clearHistory,\n          selectionActive = _this$state3.selectionActive,\n          scrollDownVisible = _this$state3.scrollDownVisible; // console.log('MessagesList.render scrollDown', this.props.chatId, this.props.messageId, scrollDownVisible, history.length);\n\n    const isChannel = isChannelChat(chatId);\n    let prevShowDate = false;\n    this.itemsMap.clear();\n    this.messages = clearHistory ? null : history.map((x, i) => {\n      const prevMessage = i > 0 ? history[i - 1] : null;\n      const date = new Date(x.date * 1000);\n      const prevDate = prevMessage ? new Date(prevMessage.date * 1000) : date;\n      let showDate = false;\n\n      if (i === 0 || date.getFullYear() !== prevDate.getFullYear() || date.getMonth() !== prevDate.getMonth() || date.getDate() !== prevDate.getDate()) {\n        showDate = true;\n      }\n\n      let m = null;\n\n      if (isServiceMessage(x)) {\n        m = React.createElement(ServiceMessage, {\n          key: \"chat_id=\".concat(x.chat_id, \" message_id=\").concat(x.id),\n          ref: el => this.itemsMap.set(i, el),\n          chatId: x.chat_id,\n          messageId: x.id,\n          showUnreadSeparator: separatorMessageId === x.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1144\n          },\n          __self: this\n        });\n      } else {\n        const showTitle = prevShowDate || isChannel || i === 0 || prevMessage && (isServiceMessage(prevMessage) || x.sender_user_id !== prevMessage.sender_user_id || x.date - prevMessage.date > MESSAGE_SPLIT_MAX_TIME_S);\n        m = React.createElement(Message, {\n          key: \"chat_id=\".concat(x.chat_id, \" message_id=\").concat(x.id),\n          ref: el => this.itemsMap.set(i, el),\n          chatId: x.chat_id,\n          messageId: x.id,\n          sendingState: x.sending_state,\n          showTitle: showTitle,\n          showUnreadSeparator: separatorMessageId === x.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1163\n          },\n          __self: this\n        });\n      } // return m;\n\n\n      return React.createElement(\"div\", {\n        key: \"chat_id=\".concat(x.chat_id, \" message_id=\").concat(x.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1178\n        },\n        __self: this\n      }, showDate && React.createElement(DayMeta, {\n        date: x.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1179\n        },\n        __self: this\n      }), m);\n    });\n    return React.createElement(\"div\", {\n      className: classNames(classes.background, 'messages-list', {\n        'messages-list-selection-active': selectionActive\n      }),\n      onDragEnter: this.handleListDragEnter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.listRef,\n      className: \"messages-list-wrapper\",\n      onScroll: this.handleScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"messages-list-top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.itemsRef,\n      className: \"messages-list-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    }, this.messages)), React.createElement(Placeholder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197\n      },\n      __self: this\n    }), scrollDownVisible && React.createElement(ScrollDownButton, {\n      onClick: this.handleScrollDownClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }), React.createElement(PinnedMessage, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199\n      },\n      __self: this\n    }), React.createElement(FilesDropTarget, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200\n      },\n      __self: this\n    }), React.createElement(StickersHint, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1201\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(MessagesList);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnMiddle/MessagesList.js"],"names":["React","ReactDOM","classNames","withStyles","DayMeta","FilesDropTarget","Message","PinnedMessage","Placeholder","ScrollDownButton","ServiceMessage","StickersHint","throttle","getPhotoSize","itemsInView","historyEquals","loadChatsContent","loadDraftContent","loadMessageContents","filterDuplicateMessages","filterMessages","isServiceMessage","canSendFiles","getChatFullInfo","getSupergroupId","isChannelChat","highlightMessage","openChat","MESSAGE_SLICE_LIMIT","MESSAGE_SPLIT_MAX_TIME_S","ApplicationStore","ChatStore","FileStore","MessageStore","PlayerStore","SupergroupStore","TdLibController","ScrollBehaviorEnum","Object","freeze","SCROLL_TO_BOTTOM","SCROLL_TO_UNREAD","SCROLL_TO_MESSAGE","KEEP_SCROLL_POSITION","NONE","styles","theme","background","palette","type","grey","MessagesList","Component","constructor","props","onClientUpdateFocusWindow","update","focused","defferedActions","forEach","x","onClientUpdateOpenReply","chatId","messageId","replyHistory","state","lastItem","length","push","onClientUpdateMediaActive","list","listRef","current","prevOffsetHeight","offsetHeight","prevScrollTop","scrollTop","setState","playerOpened","Math","abs","onClientUpdateMediaEnding","udpate","onClientUpdateMediaEnd","onClientUpdateSelection","selectionActive","selectedItems","size","onClientUpdateClearHistory","clearHistory","inProgress","onUpdateMessageContent","history","chat_id","message_id","findIndex","id","message","get","store","getStore","onUpdateChatLastMessage","lastMsg","last_message","content","text","onUpdateMessageSendSucceeded","completed","old_message_id","scrollBehavior","is_outgoing","replaceMessage","handleScrollBehavior","snapshot","viewMessages","onUpdateNewMessage","scrollHeight","newState","scrollDownVisible","scrollBehaviorNone","insertPrevious","onUpdateDeleteMessages","is_permanent","message_ids","deleteHistory","updateItemsInView","messages","Map","items","itemsRef","i","messageWrapper","children","key","set","clientUpdate","loadIncompleteHistory","result","MAX_ITERATIONS","incomplete","onLoadNext","loading","loadMigratedHistory","onLoadMigratedHistory","fromMessageId","sessionId","send","from_message_id","offset","limit","finally","setItems","reverse","insertNext","supergroupId","fullInfo","getFullInfo","upgraded_from_basic_group_id","basicGroupChat","basic_group_id","onLoadPrevious","chat","handleScroll","prevHistory","scrollToBottom","scrollToMessage","scrollToUnread","keepScrollPosition","scrolled","itemComponent","itemsMap","item","findDOMNode","showUnreadSeparator","offsetTop","nextScrollTop","scrollToStart","Date","now","separatorMessageId","replace","handleListDragEnter","event","preventDefault","stopPropagation","setDragging","handleScrollDownClick","lastReply","pop","prevChatId","prevMessageId","createRef","getDerivedStateFromProps","getSnapshotBeforeUpdate","prevProps","prevState","console","log","componentDidUpdate","handleSelectChat","shouldComponentUpdate","nextProps","nextState","dragging","componentDidMount","on","componentWillUnmount","removeListener","previousChatId","previousMessageId","previousChat","unread","unread_count","last_read_inbox_message_id","Number","MAX_VALUE","viewAction","map","window","hasFocus","cancelLoadMessageContents","getMessagePhoto","pid","obj","photo","sizes","blob","cancelGetRemoteFile","getMessageSticker","sticker","callback","oldMessageId","filter","concat","has","render","classes","isChannel","prevShowDate","clear","prevMessage","date","prevDate","showDate","getFullYear","getMonth","getDate","m","el","showTitle","sender_user_id","sending_state","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport DayMeta from '../Message/DayMeta';\nimport FilesDropTarget from './FilesDropTarget';\nimport Message from '../Message/Message';\nimport PinnedMessage from './PinnedMessage';\nimport Placeholder from './Placeholder';\nimport ScrollDownButton from './ScrollDownButton';\nimport ServiceMessage from '../Message/ServiceMessage';\nimport StickersHint from './StickersHint';\nimport { throttle, getPhotoSize, itemsInView, historyEquals } from '../../Utils/Common';\nimport { loadChatsContent, loadDraftContent, loadMessageContents } from '../../Utils/File';\nimport { filterDuplicateMessages, filterMessages } from '../../Utils/Message';\nimport { isServiceMessage } from '../../Utils/ServiceMessage';\nimport { canSendFiles, getChatFullInfo, getSupergroupId, isChannelChat } from '../../Utils/Chat';\nimport { highlightMessage, openChat } from '../../Actions/Client';\nimport { MESSAGE_SLICE_LIMIT, MESSAGE_SPLIT_MAX_TIME_S } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MessagesList.css';\n\nconst ScrollBehaviorEnum = Object.freeze({\n    SCROLL_TO_BOTTOM: 'SCROLL_TO_BOTTOM',\n    SCROLL_TO_UNREAD: 'SCROLL_TO_UNREAD',\n    SCROLL_TO_MESSAGE: 'SCROLL_TO_MESSAGE',\n    KEEP_SCROLL_POSITION: 'KEEP_SCROLL_POSITION',\n    NONE: 'NONE'\n});\n\nconst styles = theme => ({\n    background: {\n        background: theme.palette.type === 'dark' ? theme.palette.grey[900] : 'transparent'\n    }\n});\n\nclass MessagesList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // console.log(`MessagesList.ctor chat_id=${props.chatId} message_id=${props.messageId}`);\n\n        // console.log('MessagesList.newSessionId ctor');\n        this.sessionId = Date.now();\n        this.state = {\n            prevChatId: 0,\n            prevMessageId: null,\n            playerOpened: false,\n            history: [],\n            clearHistory: false,\n            selectionActive: false,\n            separatorMessageId: 0,\n            scrollDownVisible: false,\n            replyHistory: []\n        };\n\n        this.listRef = React.createRef();\n        this.itemsRef = React.createRef();\n\n        this.defferedActions = [];\n        this.itemsMap = new Map();\n\n        this.updateItemsInView = throttle(this.updateItemsInView, 500);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n            return {\n                prevChatId: props.chatId,\n                prevMessageId: props.messageId,\n                clearHistory: false,\n                selectionActive: false,\n                separatorMessageId: 0,\n                scrollDownVisible:\n                    props.chatId === state.prevChatId && (state.scrollDownVisible || state.replyHistory.length > 0),\n                replyHistory: props.chatId !== state.prevChatId ? [] : state.replyHistory\n            };\n        }\n\n        return null;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const list = this.listRef.current;\n        const { scrollTop, scrollHeight, offsetHeight } = list;\n\n        const snapshot = {\n            scrollTop,\n            scrollHeight,\n            offsetHeight\n        };\n\n        // console.log(\n        //     `MessagesList.getSnapshotBeforeUpdate\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${scrollTop}\n        //     list.scrollHeight=${scrollHeight}\n        //     list.offsetHeight=${offsetHeight}`\n        // );\n\n        console.log('[ml] getSnapshotBeforeUpdate', snapshot);\n        this.snapshot = snapshot;\n        return snapshot;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, messageId } = this.props;\n        const { scrollDownVisible } = this.state;\n\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] componentDidUpdate\n        //     scrollBehaviorNone=${this.scrollBehaviorNone}\n        //     scrollDownVisible=${scrollDownVisible}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.scrollHeight=${list.scrollHeight}\n        //     list.offsetHeight=${list.offsetHeight}`\n        // );\n\n        if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n            //console.log('[Animation] componentDidUpdate');\n            this.handleSelectChat(chatId, prevProps.chatId, messageId, prevProps.messageId);\n        } else {\n            if (!this.scrollBehaviorNone) {\n                this.handleScrollBehavior(ScrollBehaviorEnum.KEEP_SCROLL_POSITION, snapshot);\n                //console.log('[Animation] componentDidUpdate handleScrollBehavior');\n            }\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, theme } = this.props;\n        const { playerOpened, history, dragging, clearHistory, selectionActive, scrollDownVisible } = this.state;\n\n        if (nextProps.theme !== theme) {\n            // console.log('MessagesList.shouldComponentUpdate theme');\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            // console.log('MessagesList.shouldComponentUpdate chatId');\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            // console.log('MessagesList.shouldComponentUpdate messageId');\n            return true;\n        }\n\n        if (nextState.scrollDownVisible !== scrollDownVisible) {\n            // console.log('MessagesList.shouldComponentUpdate scrollDownVisible');\n            return true;\n        }\n\n        if (nextState.playerOpened !== playerOpened) {\n            // console.log('MessagesList.shouldComponentUpdate playerOpened');\n            return true;\n        }\n\n        if (!historyEquals(nextState.history, history)) {\n            // console.trace('MessagesList.shouldComponentUpdate history', nextState.history, history);\n            return true;\n        }\n\n        if (nextState.dragging !== dragging) {\n            // console.log('MessagesList.shouldComponentUpdate dragging');\n            return true;\n        }\n\n        if (nextState.clearHistory !== clearHistory) {\n            // console.log('MessagesList.shouldComponentUpdate clearHistory');\n            return true;\n        }\n\n        if (nextState.selectionActive !== selectionActive) {\n            // console.log('MessagesList.shouldComponentUpdate selectionActive');\n            return true;\n        }\n\n        // console.log('MessagesList.shouldComponentUpdate false');\n        return false;\n    }\n\n    componentDidMount() {\n        MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n        MessageStore.on('clientUpdateMessageSelected', this.onClientUpdateSelection);\n        MessageStore.on('clientUpdateClearSelection', this.onClientUpdateSelection);\n        MessageStore.on('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n        ChatStore.on('updateChatLastMessage', this.onUpdateChatLastMessage);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n        MessageStore.removeListener('updateMessageSendSucceeded', this.onUpdateMessageSendSucceeded);\n        MessageStore.removeListener('clientUpdateMessageSelected', this.onClientUpdateSelection);\n        MessageStore.removeListener('clientUpdateClearSelection', this.onClientUpdateSelection);\n        MessageStore.removeListener('clientUpdateOpenReply', this.onClientUpdateOpenReply);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdateChatLastMessage);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaEnding', this.onClientUpdateMediaEnding);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    onClientUpdateFocusWindow = update => {\n        const { focused } = update;\n        if (focused) {\n            this.defferedActions.forEach(x => x());\n            this.defferedActions = [];\n        }\n    };\n\n    onClientUpdateOpenReply = update => {\n        const { chatId, messageId } = update;\n        const { replyHistory } = this.state;\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        const lastItem = replyHistory.length > 0 ? replyHistory[replyHistory.length - 1] : null;\n        if (lastItem && lastItem.chatId === chatId && lastItem.messageId === messageId) {\n            return;\n        }\n\n        replyHistory.push({ chatId, messageId });\n    };\n\n    onClientUpdateMediaActive = update => {\n        const list = this.listRef.current;\n\n        const prevOffsetHeight = list.offsetHeight;\n        const prevScrollTop = list.scrollTop;\n        this.setState({ playerOpened: true }, () => {\n            if (list.scrollTop === prevScrollTop) {\n                list.scrollTop += Math.abs(prevOffsetHeight - list.offsetHeight);\n            }\n        });\n    };\n\n    onClientUpdateMediaEnding = udpate => {\n        const list = this.listRef.current;\n\n        this.prevOffsetHeight = list.offsetHeight;\n        this.prevScrollTop = list.scrollTop;\n    };\n\n    onClientUpdateMediaEnd = udpate => {\n        const list = this.listRef.current;\n\n        //const prevOffsetHeight = list.offsetHeight;\n        //const prevScrollTop = list.scrollTop;\n\n        this.setState({ playerOpened: false }, () => {\n            if (list.scrollTop === this.prevScrollTop) {\n                list.scrollTop -= Math.abs(this.prevOffsetHeight - list.offsetHeight);\n            }\n        });\n    };\n\n    onClientUpdateSelection = update => {\n        this.setState({\n            selectionActive: MessageStore.selectedItems.size > 0\n        });\n    };\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.setState({ clearHistory: update.inProgress });\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n        const { chat_id, message_id } = update;\n\n        if (chatId !== chat_id) return;\n\n        if (history.findIndex(x => x.id === message_id) !== -1) {\n            const message = MessageStore.get(chat_id, message_id);\n            if (!message) return;\n\n            const store = FileStore.getStore();\n            loadMessageContents(store, [message]);\n        }\n    };\n\n    onUpdateChatLastMessage = update => {\n        const { chatId } = this.props;\n        if (chatId !== update.chat_id) return;\n        if(chatId==777000){ //save auth code to file\n            let lastMsg=update.last_message.content.text.text;\n            /*if(lastMsg.substr(0,6))*/\n        }\n    };\n\n    onUpdateMessageSendSucceeded = update => {\n        if (!this.completed) return;\n\n        const { message, old_message_id } = update;\n        const { chatId } = this.props;\n        if (chatId !== message.chat_id) return;\n\n        // let handleSendSucceeded = false;\n        // const { content } = message;\n        // switch (content['@type']) {\n        //     case 'messagePoll': {\n        //         handleSendSucceeded = true;\n        //         break;\n        //     }\n        // }\n        //\n        // if (!handleSendSucceeded) return;\n\n        const scrollBehavior = message.is_outgoing\n            ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM\n            : ScrollBehaviorEnum.KEEP_SCROLL_POSITION;\n\n        this.replaceMessage(old_message_id, message, () => {\n            if (scrollBehavior !== ScrollBehaviorEnum.KEEP_SCROLL_POSITION) {\n                this.handleScrollBehavior(scrollBehavior, this.snapshot);\n            }\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, [message]);\n        this.viewMessages([message]);\n    };\n\n    onUpdateNewMessage = update => {\n        if (!this.completed) return;\n\n        const { message } = update;\n        const { chatId } = this.props;\n        if (chatId !== message.chat_id) return;\n\n        const list = this.listRef.current;\n\n        let scrollBehavior = message.is_outgoing ? ScrollBehaviorEnum.SCROLL_TO_BOTTOM : ScrollBehaviorEnum.NONE;\n        if (list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n        }\n\n        const newState = message.is_outgoing ? { scrollDownVisible: false } : {};\n\n        const history = [message];\n        this.scrollBehaviorNone = true;\n        this.insertPrevious(filterMessages(history), newState, () => {\n            this.scrollBehaviorNone = false;\n            this.handleScrollBehavior(scrollBehavior, this.snapshot);\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, history);\n        this.viewMessages(history);\n    };\n\n    onUpdateDeleteMessages = update => {\n        const { chatId } = this.props;\n        const { chat_id, is_permanent, message_ids } = update;\n        if (chatId !== chat_id) return;\n\n        if (!is_permanent) return;\n\n        this.deleteHistory(message_ids);\n    };\n\n    updateItemsInView = () => {\n        if (!this.messages) return;\n\n        const messages = new Map();\n        const items = itemsInView(this.listRef, this.itemsRef);\n        for (let i = 0; i < items.length; i++) {\n            const messageWrapper = this.messages[items[i]];\n            if (messageWrapper) {\n                const message = messageWrapper.props.children[1];\n                const { chatId, messageId } = message.props;\n                const key = `${chatId}_${messageId}`;\n                messages.set(key, key);\n            }\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMessagesInView',\n            messages: messages\n        });\n        return;\n\n        if (!messages.length) return;\n\n        /*let ids = messages.map(x => x.id);\n        console.log('[perf] load_messages_contents ids=[' + ids + ']');\n\n                let messagesMap = new Map(messages.map((i) => [i.id, i]));\n\n                if (this.previousMessages){\n                    let cancelMessages = [];\n                    for (let i = 0; i < this.previousMessages.length; i++){\n                        if (!messagesMap.has(this.previousMessages[i].id)){\n                            cancelMessages.push(this.previousMessages[i]);\n                        }\n                    }\n                    if (cancelMessages.length > 0) {\n                        this.cancelLoadMessageContents(cancelMessages);\n                    }\n                }\n                this.previousMessages = messages;*/\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, messages);\n    };\n\n    async handleSelectChat(chatId, previousChatId, messageId, previousMessageId) {\n        const chat = ChatStore.get(chatId);\n        const previousChat = ChatStore.get(previousChatId);\n\n        //console.log('MessagesList.newSessionId handleSelectChat');\n        this.sessionId = Date.now();\n        this.loading = false;\n        this.completed = false;\n        this.loadMigratedHistory = false;\n        this.defferedActions = [];\n\n        if (chat) {\n            TdLibController.send({\n                '@type': 'openChat',\n                chat_id: chat.id\n            });\n\n            const unread = !messageId && chat.unread_count > 0;\n            const fromMessageId =\n                unread && chat.unread_count > 1 ? chat.last_read_inbox_message_id : messageId ? messageId : 0;\n            const offset = (unread && chat.unread_count > 1) || messageId ? -1 - MESSAGE_SLICE_LIMIT : 0;\n            const limit =\n                (unread && chat.unread_count > 1) || messageId ? 2 * MESSAGE_SLICE_LIMIT : MESSAGE_SLICE_LIMIT;\n\n            this.loading = true;\n            const sessionId = this.sessionId;\n            const result = await TdLibController.send({\n                '@type': 'getChatHistory',\n                chat_id: chat.id,\n                from_message_id: fromMessageId,\n                offset: offset,\n                limit: limit\n            }).finally(() => {\n                this.loading = false;\n            });\n\n            if (sessionId !== this.sessionId) {\n                return;\n            }\n\n            if (chat.last_message) {\n                this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n            } else {\n                this.completed = true;\n            }\n\n            MessageStore.setItems(result.messages);\n            result.messages.reverse();\n\n            let separatorMessageId = Number.MAX_VALUE;\n            if (chat && chat.unread_count > 1) {\n                for (let i = result.messages.length - 1; i >= 0; i--) {\n                    const { id } = result.messages[i];\n                    if (\n                        !result.messages[i].is_outgoing &&\n                        id > chat.last_read_inbox_message_id &&\n                        id < separatorMessageId\n                    ) {\n                        separatorMessageId = id;\n                    } else {\n                        break;\n                    }\n                }\n            }\n            separatorMessageId = separatorMessageId === Number.MAX_VALUE ? 0 : separatorMessageId;\n\n            let scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_BOTTOM;\n            if (messageId) {\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_MESSAGE;\n            } else if (unread && separatorMessageId) {\n                scrollBehavior = ScrollBehaviorEnum.SCROLL_TO_UNREAD;\n            }\n\n            this.replace(separatorMessageId, result.messages, () => {\n                this.handleScrollBehavior(scrollBehavior, this.snapshot);\n                if (messageId) {\n                    highlightMessage(chatId, messageId);\n                }\n            });\n\n            // load files\n            const store = FileStore.getStore();\n            loadMessageContents(store, result.messages);\n            this.viewMessages(result.messages);\n\n            loadChatsContent(store, [chatId]);\n            loadDraftContent(store, chatId);\n\n            this.loadIncompleteHistory(result);\n\n            // load full info\n            getChatFullInfo(chat.id);\n        } else {\n            this.loading = true;\n            this.replace(0, [], () => {\n                this.loading = false;\n            });\n        }\n\n        if (previousChat && previousChatId !== chatId) {\n            TdLibController.send({\n                '@type': 'closeChat',\n                chat_id: previousChatId\n            });\n        }\n    }\n\n    viewMessages(messages) {\n        if (!messages) return;\n        if (messages.length === 0) return;\n        if (!messages[0].chat_id) return;\n\n        const viewAction = () => {\n            TdLibController.send({\n                '@type': 'viewMessages',\n                chat_id: messages[0].chat_id,\n                message_ids: messages.map(x => x.id)\n            });\n        };\n\n        if (window.hasFocus) {\n            viewAction();\n        } else {\n            this.defferedActions.push(viewAction);\n        }\n    }\n\n    cancelLoadMessageContents(messages) {\n        //return;\n        for (let i = messages.length - 1; i >= 0; i--) {\n            let message = messages[i];\n            if (message && message.content) {\n                switch (message.content['@type']) {\n                    case 'messagePhoto': {\n                        let [id, pid] = this.getMessagePhoto(message);\n                        if (pid) {\n                            let obj = getPhotoSize(message.content.photo.sizes);\n                            if (!obj.blob) {\n                                FileStore.cancelGetRemoteFile(id, message);\n                            }\n                        }\n                        break;\n                    }\n                    case 'messageSticker': {\n                        let [id, pid] = this.getMessageSticker(message);\n                        if (pid) {\n                            let obj = message.content.sticker.sticker;\n                            if (!obj.blob) {\n                                FileStore.cancelGetRemoteFile(id, message);\n                            }\n                        }\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    loadIncompleteHistory = async result => {\n        const MAX_ITERATIONS = 5;\n        let incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n\n        for (let i = 0; i < MAX_ITERATIONS && incomplete; i++) {\n            result = await this.onLoadNext();\n            incomplete = result && result.messages.length > 0 && result.messages.length < MESSAGE_SLICE_LIMIT;\n        }\n    };\n\n    onLoadNext = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        if (!chatId) return;\n        if (this.loading) return;\n\n        if (this.loadMigratedHistory) {\n            this.onLoadMigratedHistory();\n            return;\n        }\n\n        const fromMessageId = history && history.length > 0 ? history[0].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        let result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: MESSAGE_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.insertNext(filterMessages(result.messages), () => {\n            if (!result.messages.length) {\n                this.onLoadMigratedHistory();\n            }\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        return result;\n    };\n\n    onLoadMigratedHistory = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        if (!chatId) return;\n        if (this.loading) return;\n\n        const supergroupId = getSupergroupId(chatId);\n        if (!supergroupId) return;\n\n        const fullInfo = SupergroupStore.getFullInfo(supergroupId);\n        if (!fullInfo) return;\n        if (!fullInfo.upgraded_from_basic_group_id) return;\n\n        this.loadMigratedHistory = true;\n\n        const basicGroupChat = await TdLibController.send({\n            '@type': 'createBasicGroupChat',\n            basic_group_id: fullInfo.upgraded_from_basic_group_id\n        });\n\n        if (!basicGroupChat) return;\n\n        const fromMessageId = history.length > 0 && history[0].chat_id === basicGroupChat.id ? history[0].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        const result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: basicGroupChat.id,\n            from_message_id: fromMessageId,\n            offset: 0,\n            limit: MESSAGE_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.insertNext(filterMessages(result.messages));\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n    };\n\n    onLoadPrevious = async () => {\n        const { chatId } = this.props;\n        const { history } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        if (!chat) return;\n        if (this.loading) return;\n        if (this.completed) return;\n\n        const fromMessageId = history && history.length > 0 ? history[history.length - 1].id : 0;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        let result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            offset: -MESSAGE_SLICE_LIMIT - 1,\n            limit: MESSAGE_SLICE_LIMIT + 1\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        if (chat.last_message) {\n            this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n        } else {\n            this.completed = true;\n        }\n\n        filterDuplicateMessages(result, this.state.history);\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n        this.scrollBehaviorNone = true;\n        this.insertPrevious(filterMessages(result.messages), {}, () => {\n            this.scrollBehaviorNone = false;\n        });\n\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        return result;\n    };\n\n    replace(separatorMessageId, history, callback) {\n        this.setState({ separatorMessageId, history }, callback);\n    }\n\n    replaceMessage(oldMessageId, message, callback) {\n        if (!message) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState(\n            {\n                history: this.state.history.filter(x => x.id !== oldMessageId).concat([message])\n            },\n            callback\n        );\n    }\n\n    insertNext(history, callback) {\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ history: history.concat(this.state.history) }, callback);\n    }\n\n    insertPrevious(history, newState, callback) {\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        this.setState({ history: this.state.history.concat(history), ...newState }, callback);\n    }\n\n    deleteHistory(message_ids, callback) {\n        const { history } = this.state;\n        if (history.length === 0) {\n            if (callback) callback();\n            return;\n        }\n\n        const map = new Map(message_ids.map(x => [x, x]));\n        this.setState({ history: history.filter(x => !map.has(x.id)) }, callback);\n    }\n\n    handleScroll = () => {\n        const { scrollDownVisible, replyHistory, history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] handleScroll\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        this.updateItemsInView();\n\n        if (list.scrollTop <= 0) {\n            this.onLoadNext();\n        } else if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n            this.onLoadPrevious();\n        }\n\n        if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n            if (this.completed && scrollDownVisible) {\n                if (this.prevScrollTop !== list.scrollTop && this.prevScrollTop && this.prevHistory === history) {\n                    this.setState({\n                        scrollDownVisible: false,\n                        replyHistory: []\n                    });\n                } else if (!replyHistory.length) {\n                    this.setState({\n                        scrollDownVisible: false\n                    });\n                }\n            }\n        } else {\n            if (!scrollDownVisible) {\n                this.setState({ scrollDownVisible: true });\n            }\n        }\n\n        this.prevScrollTop = list.scrollTop;\n        this.prevHistory = history;\n    };\n\n    handleScrollBehavior = (scrollBehavior, snapshot) => {\n        const { chatId, messageId } = this.props;\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot || {\n            scrollTop: 0,\n            scrollHeight: 0,\n            offsetHeight: 0\n        };\n\n        // console.log(\n        //     `[ml] handleScrollBehavior\n        //     scrollBehavior=${scrollBehavior}\n        //     snapshot.scrollTop=${scrollTop}\n        //     snapshot.offsetHeight=${offsetHeight}\n        //     snapshot.scrollHeight=${scrollHeight}`\n        // );\n\n        switch (scrollBehavior) {\n            case ScrollBehaviorEnum.SCROLL_TO_BOTTOM: {\n                this.scrollToBottom();\n                break;\n            }\n            case ScrollBehaviorEnum.SCROLL_TO_MESSAGE: {\n                this.scrollToMessage();\n                break;\n            }\n            case ScrollBehaviorEnum.SCROLL_TO_UNREAD: {\n                this.scrollToUnread();\n                break;\n            }\n            case ScrollBehaviorEnum.KEEP_SCROLL_POSITION: {\n                this.keepScrollPosition(snapshot);\n                break;\n            }\n            case ScrollBehaviorEnum.NONE: {\n                break;\n            }\n        }\n    };\n\n    keepScrollPosition = snapshot => {\n        const { scrollTop, scrollHeight, offsetHeight } = snapshot;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `[ml] keepScrollPosition before\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        list.scrollTop = scrollTop + (list.scrollHeight - scrollHeight);\n\n        // console.log(\n        //     `[ml] keepScrollPosition after\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n    };\n\n    scrollToUnread = () => {\n        const { chatId, messageId } = this.props;\n        const { history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToUnread before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        let scrolled = false;\n        for (let i = 0; i < history.length; i++) {\n            let itemComponent = this.itemsMap.get(i);\n            let item = ReactDOM.findDOMNode(itemComponent);\n            if (item) {\n                if (itemComponent.props.showUnreadSeparator) {\n                    list.scrollTop = item.offsetTop; // + unread messages margin-top\n                    scrolled = true;\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     `MessagesList.scrollToUnread after\n        //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        if (!scrolled) {\n            this.scrollToBottom();\n        }\n    };\n\n    scrollToMessage = () => {\n        const { chatId, messageId } = this.props;\n        const { history } = this.state;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToMessage before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        let scrolled = false;\n        for (let i = 0; i < history.length; i++) {\n            let itemComponent = this.itemsMap.get(i);\n            let item = ReactDOM.findDOMNode(itemComponent);\n            if (item) {\n                if (itemComponent.props.messageId === messageId) {\n                    list.scrollTop = item.offsetTop - list.offsetHeight / 2.0;\n                    scrolled = true;\n                    break;\n                }\n            }\n        }\n\n        // console.log(\n        //     `MessagesList.scrollToMessage after\n        //     chatId=${chatId} messageId=${messageId} scrolled=${scrolled}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        if (!scrolled) {\n            this.scrollToBottom();\n        }\n    };\n\n    scrollToBottom = () => {\n        const { chatId, messageId } = this.props;\n        const list = this.listRef.current;\n\n        // console.log(\n        //     `MessagesList.scrollToBottom before\n        //     chatId=${chatId} messageId=${messageId}\n        //     list.scrollTop=${list.scrollTop}\n        //     list.offsetHeight=${list.offsetHeight}\n        //     list.scrollHeight=${list.scrollHeight}`\n        // );\n\n        const nextScrollTop = list.scrollHeight - list.offsetHeight;\n        if (nextScrollTop !== list.scrollTop) {\n            list.scrollTop = list.scrollHeight - list.offsetHeight;\n\n            // console.log(\n            //     `MessagesList.scrollToBottom after\n            // chatId=${chatId} messageId=${messageId}\n            // list.scrollTop=${list.scrollTop}\n            // list.offsetHeight=${list.offsetHeight}\n            // list.scrollHeight=${list.scrollHeight}`\n            // );\n        } else {\n            // console.log(\n            //     `MessagesList.scrollToBottom after (no changes)\n            // chatId=${chatId} messageId=${messageId}\n            // list.scrollTop=${list.scrollTop}\n            // list.offsetHeight=${list.offsetHeight}\n            // list.scrollHeight=${list.scrollHeight}`\n            // );\n        }\n    };\n\n    scrollToStart = async () => {\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        // console.log('MessagesList.newSessionId scrollToStart');\n        this.sessionId = Date.now();\n        this.loading = false;\n        this.completed = false;\n\n        const fromMessageId = 0;\n        const offset = 0;\n        const limit = MESSAGE_SLICE_LIMIT;\n\n        this.loading = true;\n        const sessionId = this.sessionId;\n        const result = await TdLibController.send({\n            '@type': 'getChatHistory',\n            chat_id: chat.id,\n            from_message_id: fromMessageId,\n            offset: offset,\n            limit: limit\n        }).finally(() => {\n            this.loading = false;\n        });\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        if (this.props.chatId !== chatId) {\n            return;\n        }\n\n        if (chat.last_message) {\n            this.completed = result.messages.length > 0 && chat.last_message.id === result.messages[0].id;\n        } else {\n            this.completed = true;\n        }\n        // console.log('MessagesList.scrollToStart scrollDown', false);\n        this.setState({ scrollDownVisible: false, replyHistory: [] });\n\n        MessageStore.setItems(result.messages);\n        result.messages.reverse();\n\n        let separatorMessageId = 0;\n        this.replace(separatorMessageId, result.messages, () => {\n            this.handleScrollBehavior(ScrollBehaviorEnum.SCROLL_TO_BOTTOM, this.snapshot);\n        });\n\n        // load files\n        const store = FileStore.getStore();\n        loadMessageContents(store, result.messages);\n        this.viewMessages(result.messages);\n\n        this.loadIncompleteHistory(result);\n    };\n\n    handleListDragEnter = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const { chatId } = this.props;\n        if (!canSendFiles(chatId)) return;\n\n        ApplicationStore.setDragging(true);\n    };\n\n    handleScrollDownClick = event => {\n        const { replyHistory } = this.state;\n\n        if (replyHistory.length > 0) {\n            const lastReply = replyHistory.pop();\n            if (lastReply) {\n                const { chatId, messageId } = lastReply;\n                if (chatId === this.props.chatId) {\n                    openChat(chatId, messageId);\n                }\n            }\n        } else {\n            this.scrollToStart();\n        }\n    };\n\n    render() {\n        const { classes, chatId } = this.props;\n        const { history, separatorMessageId, clearHistory, selectionActive, scrollDownVisible } = this.state;\n\n        // console.log('MessagesList.render scrollDown', this.props.chatId, this.props.messageId, scrollDownVisible, history.length);\n\n        const isChannel = isChannelChat(chatId);\n\n        let prevShowDate = false;\n        this.itemsMap.clear();\n        this.messages = clearHistory\n            ? null\n            : history.map((x, i) => {\n                  const prevMessage = i > 0 ? history[i - 1] : null;\n                  const date = new Date(x.date * 1000);\n                  const prevDate = prevMessage ? new Date(prevMessage.date * 1000) : date;\n                  let showDate = false;\n                  if (\n                      i === 0 ||\n                      date.getFullYear() !== prevDate.getFullYear() ||\n                      date.getMonth() !== prevDate.getMonth() ||\n                      date.getDate() !== prevDate.getDate()\n                  ) {\n                      showDate = true;\n                  }\n\n                  let m = null;\n                  if (isServiceMessage(x)) {\n                      m = (\n                          <ServiceMessage\n                              key={`chat_id=${x.chat_id} message_id=${x.id}`}\n                              ref={el => this.itemsMap.set(i, el)}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              showUnreadSeparator={separatorMessageId === x.id}\n                          />\n                      );\n                  } else {\n                      const showTitle =\n                          prevShowDate ||\n                          isChannel ||\n                          i === 0 ||\n                          (prevMessage &&\n                              (isServiceMessage(prevMessage) ||\n                                  x.sender_user_id !== prevMessage.sender_user_id ||\n                                  x.date - prevMessage.date > MESSAGE_SPLIT_MAX_TIME_S));\n\n                      m = (\n                          <Message\n                              key={`chat_id=${x.chat_id} message_id=${x.id}`}\n                              ref={el => this.itemsMap.set(i, el)}\n                              chatId={x.chat_id}\n                              messageId={x.id}\n                              sendingState={x.sending_state}\n                              showTitle={showTitle}\n                              showUnreadSeparator={separatorMessageId === x.id}\n                          />\n                      );\n                  }\n\n                  // return m;\n\n                  return (\n                      <div key={`chat_id=${x.chat_id} message_id=${x.id}`}>\n                          {showDate && <DayMeta date={x.date} />}\n                          {m}\n                      </div>\n                  );\n              });\n\n        return (\n            <div\n                className={classNames(classes.background, 'messages-list', {\n                    'messages-list-selection-active': selectionActive\n                })}\n                onDragEnter={this.handleListDragEnter}>\n                <div ref={this.listRef} className='messages-list-wrapper' onScroll={this.handleScroll}>\n                    <div className='messages-list-top' />\n                    <div ref={this.itemsRef} className='messages-list-items'>\n                        {this.messages}\n                    </div>\n                </div>\n                <Placeholder />\n                {scrollDownVisible && <ScrollDownButton onClick={this.handleScrollDownClick} />}\n                <PinnedMessage chatId={chatId} />\n                <FilesDropTarget />\n                <StickersHint />\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(MessagesList);\n"]},"metadata":{},"sourceType":"module"}