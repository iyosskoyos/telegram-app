{"ast":null,"code":"import _slicedToArray from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nclass ActionScheduler {\n  constructor(actionCallback, cancelCallback) {\n    this.add = (key, timeout, action, cancel) => {\n      if (this.actions.has(key)) {\n        return false;\n      }\n\n      let expire = new Date();\n      expire.setMilliseconds(expire.getMilliseconds() + timeout);\n      this.actions.set(key, {\n        expire: expire,\n        action: action,\n        cancel: cancel\n      });\n\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n\n      this.setTimeout();\n      return true;\n    };\n\n    this.invoke = async key => {\n      const item = this.actions.get(key);\n      if (!item) return;\n      this.actions.delete(key);\n      await this.actionCallback({\n        key: key,\n        action: item.action,\n        cancel: item.cancel\n      });\n      if (item.action) await item.action();\n\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n\n      this.setTimeout();\n    };\n\n    this.remove = key => {\n      const item = this.actions.get(key);\n      if (!item) return;\n      this.actions.delete(key);\n      this.cancelCallback({\n        key: key,\n        action: item.action,\n        cancel: item.cancel\n      });\n      if (item.cancel) item.cancel();\n\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n\n      this.setTimeout();\n    };\n\n    this.setTimeout = () => {\n      let now = new Date();\n      let timeout = 1000000;\n\n      for (let _ref of this.actions) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        let key = _ref2[0];\n        let value = _ref2[1];\n        let actionTimeout = value.expire - now;\n        if (actionTimeout < timeout) timeout = actionTimeout;\n        if (timeout < 0) timeout = 0;\n      }\n\n      if (timeout < 1000000) {\n        this.timerId = setTimeout(this.handleTimer, timeout);\n      }\n    };\n\n    this.handleTimer = () => {\n      let now = new Date();\n      let expired = [];\n\n      for (let _ref3 of this.actions) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        let key = _ref4[0];\n        let value = _ref4[1];\n        let actionTimeout = value.expire - now;\n        if (actionTimeout <= 0) expired.push({\n          key: key,\n          value: value\n        });\n      }\n\n      for (let item of expired) {\n        this.actions.delete(item.key);\n        this.actionCallback({\n          key: item.key,\n          action: item.value.action,\n          cancel: item.value.cancel\n        });\n        if (item.value.action) item.value.action();\n      }\n\n      this.setTimeout();\n    };\n\n    this.actions = new Map();\n    this.actionCallback = actionCallback;\n    this.cancelCallback = cancelCallback;\n  }\n\n}\n\nexport default ActionScheduler;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Utils/ActionScheduler.js"],"names":["ActionScheduler","constructor","actionCallback","cancelCallback","add","key","timeout","action","cancel","actions","has","expire","Date","setMilliseconds","getMilliseconds","set","timerId","clearTimeout","setTimeout","invoke","item","get","delete","remove","now","value","actionTimeout","handleTimer","expired","push","Map"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass ActionScheduler {\n    constructor(actionCallback, cancelCallback) {\n        this.actions = new Map();\n        this.actionCallback = actionCallback;\n        this.cancelCallback = cancelCallback;\n    }\n\n    add = (key, timeout, action, cancel) => {\n        if (this.actions.has(key)) {\n            return false;\n        }\n\n        let expire = new Date();\n        expire.setMilliseconds(expire.getMilliseconds() + timeout);\n\n        this.actions.set(key, { expire: expire, action: action, cancel: cancel });\n\n        if (this.timerId) {\n            clearTimeout(this.timerId);\n        }\n\n        this.setTimeout();\n\n        return true;\n    };\n\n    invoke = async key => {\n        const item = this.actions.get(key);\n        if (!item) return;\n\n        this.actions.delete(key);\n\n        await this.actionCallback({ key: key, action: item.action, cancel: item.cancel });\n        if (item.action) await item.action();\n\n        if (this.timerId) {\n            clearTimeout(this.timerId);\n        }\n\n        this.setTimeout();\n    };\n\n    remove = key => {\n        const item = this.actions.get(key);\n        if (!item) return;\n\n        this.actions.delete(key);\n\n        this.cancelCallback({ key: key, action: item.action, cancel: item.cancel });\n        if (item.cancel) item.cancel();\n\n        if (this.timerId) {\n            clearTimeout(this.timerId);\n        }\n\n        this.setTimeout();\n    };\n\n    setTimeout = () => {\n        let now = new Date();\n        let timeout = 1000000;\n        for (let [key, value] of this.actions) {\n            let actionTimeout = value.expire - now;\n            if (actionTimeout < timeout) timeout = actionTimeout;\n            if (timeout < 0) timeout = 0;\n        }\n\n        if (timeout < 1000000) {\n            this.timerId = setTimeout(this.handleTimer, timeout);\n        }\n    };\n\n    handleTimer = () => {\n        let now = new Date();\n        let expired = [];\n        for (let [key, value] of this.actions) {\n            let actionTimeout = value.expire - now;\n            if (actionTimeout <= 0) expired.push({ key: key, value: value });\n        }\n\n        for (let item of expired) {\n            this.actions.delete(item.key);\n            this.actionCallback({ key: item.key, action: item.value.action, cancel: item.value.cancel });\n            if (item.value.action) item.value.action();\n        }\n\n        this.setTimeout();\n    };\n}\n\nexport default ActionScheduler;\n"]},"metadata":{},"sourceType":"module"}