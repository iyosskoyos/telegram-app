{"ast":null,"code":"import _regeneratorRuntime from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import Dialog from'../Tile/Dialog';import DialogPlaceholder from'../Tile/DialogPlaceholder';import{CHAT_SLICE_LIMIT}from'../../Constants';import{loadChatsContent}from'../../Utils/File';import{orderCompare}from'../../Utils/Common';import ChatStore from'../../Stores/ChatStore';import BasicGroupStore from'../../Stores/BasicGroupStore';import SupergroupStore from'../../Stores/SupergroupStore';import ApplicationStore from'../../Stores/ApplicationStore';import FileStore from'../../Stores/FileStore';import TdLibController from'../../Controllers/TdLibController';import'./DialogsList.css';var DialogsList=/*#__PURE__*/function(_React$Component){_inherits(DialogsList,_React$Component);function DialogsList(props){var _this;_classCallCheck(this,DialogsList);_this=_possibleConstructorReturn(this,_getPrototypeOf(DialogsList).call(this,props));_this.onClientUpdateLeaveChat=function(update){if(update.inProgress){_this.hiddenChats.set(update.chatId,update.chatId);}else{_this.hiddenChats.delete(update.chatId);}_this.forceUpdate();};_this.onUpdateAuthorizationState=function(update){var authorization_state=update.authorization_state;_this.setState({authorizationState:authorization_state},function(){return _this.loadFirstSlice();});};_this.onFastUpdatingComplete=function(update){_this.onLoadNext(true);// this.setState({ chats: [] }, () => this.onLoadNext(true));\n};_this.onUpdateConnectionState=function(update){var newConnectionState=update.state;var connectionState=_this.state.connectionState;_this.setState({connectionState:newConnectionState});var updatingCompleted=connectionState&&connectionState['@type']==='connectionStateUpdating'&&newConnectionState['@type']!=='connectionStateUpdating';if(!updatingCompleted)return;var hasSkippedUpdates=ChatStore.skippedUpdates.length>0;if(!hasSkippedUpdates)return;ChatStore.skippedUpdates=[];_this.setState({chats:[]},function(){return _this.onLoadNext(true);});};_this.loadFirstSlice=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var authorizationState;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:authorizationState=_this.state.authorizationState;if(!(authorizationState&&authorizationState['@type']==='authorizationStateReady')){_context.next=4;break;}_context.next=4;return FileStore.initDB(function(){return _this.onLoadNext();});case 4:case\"end\":return _context.stop();}}},_callee);}));_this.onUpdateChatOrder=function(update){// NOTE: updateChatOrder is primary used to delete chats with order=0\n// In all other cases use updateChatLastMessage\nif(update.order!=='0')return;var chat=ChatStore.get(update.chat_id);if(!chat){return;}// unselect deleted chat\nif(update.chat_id===ApplicationStore.getChatId()){TdLibController.setChatId(0);ApplicationStore.changeChatDetailsVisibility(false);}var chatIds=[];for(var i=0;i<_this.state.chats.length;i++){var _chat=ChatStore.get(_this.state.chats[i]);if(_chat&&_chat.order!=='0'){switch(_chat.type['@type']){case'chatTypeBasicGroup':{var basicGroup=BasicGroupStore.get(_chat.type.basic_group_id);if(basicGroup.status['@type']!=='chatMemberStatusLeft'){chatIds.push(_chat.id);}break;}case'chatTypePrivate':{chatIds.push(_chat.id);break;}case'chatTypeSecret':{chatIds.push(_chat.id);break;}case'chatTypeSupergroup':{var supergroup=SupergroupStore.get(_chat.type.supergroup_id);if(supergroup.status['@type']!=='chatMemberStatusLeft'){chatIds.push(_chat.id);}break;}}}}_this.reorderChats(chatIds);};_this.onUpdate=function(update){var chat_id=update.chat_id,order=update.order;if(order==='0')return;var chat=ChatStore.get(chat_id);if(!chat||chat.order==='0'){return;}var chats=_this.state.chats;var newChatIds=[];if(chats.length>0){var existingChat=chats.find(function(x){return x===chat_id;});if(!existingChat){var minChatOrder=ChatStore.get(chats[chats.length-1]).order;if(orderCompare(minChatOrder,chat.order)===1){return;}newChatIds.push(chat.id);}}// get last chat.order values\nvar chatIds=[];for(var i=0;i<chats.length;i++){var _chat2=ChatStore.get(chats[i]);if(_chat2&&_chat2.order!=='0'){switch(_chat2.type['@type']){case'chatTypeBasicGroup':{var basicGroup=BasicGroupStore.get(_chat2.type.basic_group_id);if(basicGroup.status['@type']!=='chatMemberStatusLeft'){chatIds.push(_chat2.id);}break;}case'chatTypePrivate':{chatIds.push(_chat2.id);break;}case'chatTypeSecret':{chatIds.push(_chat2.id);break;}case'chatTypeSupergroup':{var supergroup=SupergroupStore.get(_chat2.type.supergroup_id);if(supergroup.status['@type']!=='chatMemberStatusLeft'){chatIds.push(_chat2.id);}break;}}}}_this.reorderChats(chatIds,newChatIds,function(){_this.loadChatContents(newChatIds);});};_this.handleScroll=function(){var list=_this.listRef.current;if(list&&list.scrollTop+list.offsetHeight>=list.scrollHeight){_this.onLoadNext();}};_this.onLoadNext=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var replace,chats,offsetOrder,offsetChatId,chat,result,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:replace=_args2.length>0&&_args2[0]!==undefined?_args2[0]:false;chats=_this.state.chats;if(!_this.loading){_context2.next=4;break;}return _context2.abrupt(\"return\");case 4:offsetOrder='9223372036854775807';// 2^63 - 1\noffsetChatId=0;if(!replace&&chats&&chats.length>0){chat=ChatStore.get(chats[chats.length-1]);if(chat){offsetOrder=chat.order;offsetChatId=chat.id;}}console.log('DialogsList.onLoadNext getChats start',offsetChatId,offsetOrder);_this.loading=true;_context2.next=11;return TdLibController.send({'@type':'getChats',offset_chat_id:offsetChatId,offset_order:offsetOrder,limit:CHAT_SLICE_LIMIT}).finally(function(){_this.loading=false;TdLibController.clientUpdate({'@type':'clientUpdateDialogsReady'});});case 11:result=_context2.sent;console.log('DialogsList.onLoadNext getChats stop',offsetChatId,offsetOrder);// TdLibController.send({\n//     '@type': 'getChats',\n//     offset_chat_id: offsetChatId,\n//     offset_order: offsetOrder,\n//     limit: CHAT_SLICE_LIMIT + 100\n// });\nif(result.chat_ids.length>0&&result.chat_ids[0]===offsetChatId){result.chat_ids.shift();}if(replace){_this.replaceChats(result.chat_ids,function(){_this.loadChatContents(result.chat_ids);});}else{console.log('DialogsList.onLoadNext setState start',offsetChatId,offsetOrder);_this.appendChats(result.chat_ids,function(){console.log('DialogsList.onLoadNext setState stop',offsetChatId,offsetOrder);_this.loadChatContents(result.chat_ids);});}case 15:case\"end\":return _context2.stop();}}},_callee2);}));_this.hiddenChats=new Map();_this.listRef=React.createRef();_this.state={chats:[],authorizationState:ApplicationStore.getAuthorizationState(),connectionState:ApplicationStore.getConnectionState(),fistSliceLoaded:false};return _this;}_createClass(DialogsList,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){if(nextState.chats!==this.state.chats){return true;}if(nextState.firstSliceLoaded!==this.state.firstSliceLoaded){return true;}return false;}},{key:\"getSnapshotBeforeUpdate\",value:function getSnapshotBeforeUpdate(prevProps,prevState){var list=this.listRef.current;return{scrollTop:list.scrollTop};}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){var list=this.listRef.current;var scrollTop=snapshot.scrollTop;list.scrollTop=scrollTop;}},{key:\"componentDidMount\",value:function componentDidMount(){this.loadFirstSlice();ApplicationStore.on('updateAuthorizationState',this.onUpdateAuthorizationState);// ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\nChatStore.on('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.on('updateChatDraftMessage',this.onUpdate);ChatStore.on('updateChatIsPinned',this.onUpdate);ChatStore.on('updateChatLastMessage',this.onUpdate);ChatStore.on('updateChatOrder',this.onUpdateChatOrder);ChatStore.on('clientUpdateLeaveChat',this.onClientUpdateLeaveChat);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){ApplicationStore.removeListener('updateAuthorizationState',this.onUpdateAuthorizationState);// ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\nChatStore.removeListener('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.removeListener('updateChatDraftMessage',this.onUpdate);ChatStore.removeListener('updateChatIsPinned',this.onUpdate);ChatStore.removeListener('updateChatLastMessage',this.onUpdate);ChatStore.removeListener('updateChatOrder',this.onUpdateChatOrder);ChatStore.removeListener('clientUpdateLeaveChat',this.onClientUpdateLeaveChat);}},{key:\"reorderChats\",value:function reorderChats(chatIds){var newChatIds=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var callback=arguments.length>2?arguments[2]:undefined;var orderedChatIds=chatIds.concat(newChatIds).sort(function(a,b){return orderCompare(ChatStore.get(b).order,ChatStore.get(a).order);});if(!DialogsList.isDifferentOrder(this.state.chats,orderedChatIds)){return;}this.setState({chats:orderedChatIds},callback);}},{key:\"loadChatContents\",value:function loadChatContents(chats){var store=FileStore.getStore();loadChatsContent(store,chats);}},{key:\"appendChats\",value:function appendChats(chats,callback){if(chats.length===0)return;this.setState({chats:this.state.chats.concat(chats),firstSliceLoaded:true},callback);}},{key:\"replaceChats\",value:function replaceChats(chats,callback){this.setState({chats:chats,firstSliceLoaded:true},callback);}},{key:\"scrollToTop\",value:function scrollToTop(){var list=this.listRef.current;list.scrollTop=0;}},{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,chats=_this$state.chats,firstSliceLoaded=_this$state.firstSliceLoaded;// const dialogs = chats.map((x, index) => <DialogPlaceholder key={x} chatId={x} index={index} showTitle/>);\nvar dialogs=firstSliceLoaded?chats.map(function(x){return React.createElement(Dialog,{key:x,chatId:x,hidden:_this2.hiddenChats.has(x)});}):Array.from(Array(10)).map(function(x,index){return React.createElement(DialogPlaceholder,{key:index,index:index});});return React.createElement(\"div\",{ref:this.listRef,className:\"dialogs-list\",onScroll:this.handleScroll},dialogs);}}],[{key:\"isDifferentOrder\",value:function isDifferentOrder(oldChatIds,newChatIds){if(oldChatIds.length===newChatIds.length){for(var i=0;i<oldChatIds.length;i++){if(oldChatIds[i]!==newChatIds[i])return true;}return false;}return true;}}]);return DialogsList;}(React.Component);export default DialogsList;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnLeft/DialogsList.js"],"names":["React","Dialog","DialogPlaceholder","CHAT_SLICE_LIMIT","loadChatsContent","orderCompare","ChatStore","BasicGroupStore","SupergroupStore","ApplicationStore","FileStore","TdLibController","DialogsList","props","onClientUpdateLeaveChat","update","inProgress","hiddenChats","set","chatId","delete","forceUpdate","onUpdateAuthorizationState","authorization_state","setState","authorizationState","loadFirstSlice","onFastUpdatingComplete","onLoadNext","onUpdateConnectionState","newConnectionState","state","connectionState","updatingCompleted","hasSkippedUpdates","skippedUpdates","length","chats","initDB","onUpdateChatOrder","order","chat","get","chat_id","getChatId","setChatId","changeChatDetailsVisibility","chatIds","i","type","basicGroup","basic_group_id","status","push","id","supergroup","supergroup_id","reorderChats","onUpdate","newChatIds","existingChat","find","x","minChatOrder","loadChatContents","handleScroll","list","listRef","current","scrollTop","offsetHeight","scrollHeight","replace","loading","offsetOrder","offsetChatId","console","log","send","offset_chat_id","offset_order","limit","finally","clientUpdate","result","chat_ids","shift","replaceChats","appendChats","Map","createRef","getAuthorizationState","getConnectionState","fistSliceLoaded","nextProps","nextState","firstSliceLoaded","prevProps","prevState","snapshot","on","removeListener","callback","orderedChatIds","concat","sort","a","b","isDifferentOrder","store","getStore","dialogs","map","has","Array","from","index","oldChatIds","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport Dialog from '../Tile/Dialog';\nimport DialogPlaceholder from '../Tile/DialogPlaceholder';\nimport { CHAT_SLICE_LIMIT } from '../../Constants';\nimport { loadChatsContent } from '../../Utils/File';\nimport { orderCompare } from '../../Utils/Common';\nimport ChatStore from '../../Stores/ChatStore';\nimport BasicGroupStore from '../../Stores/BasicGroupStore';\nimport SupergroupStore from '../../Stores/SupergroupStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './DialogsList.css';\n\nclass DialogsList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.hiddenChats = new Map();\n\n        this.listRef = React.createRef();\n\n        this.state = {\n            chats: [],\n            authorizationState: ApplicationStore.getAuthorizationState(),\n            connectionState: ApplicationStore.getConnectionState(),\n            fistSliceLoaded: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.chats !== this.state.chats) {\n            return true;\n        }\n\n        if (nextState.firstSliceLoaded !== this.state.firstSliceLoaded) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        const { current: list } = this.listRef;\n\n        return { scrollTop: list.scrollTop };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { current: list } = this.listRef;\n        const { scrollTop } = snapshot;\n\n        list.scrollTop = scrollTop;\n    }\n\n    componentDidMount() {\n        this.loadFirstSlice();\n\n        ApplicationStore.on('updateAuthorizationState', this.onUpdateAuthorizationState);\n        // ApplicationStore.on('updateConnectionState', this.onUpdateConnectionState);\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatIsPinned', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatOrder', this.onUpdateChatOrder);\n        ChatStore.on('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('updateAuthorizationState', this.onUpdateAuthorizationState);\n        // ApplicationStore.removeListener('updateConnectionState', this.onUpdateConnectionState);\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatIsPinned', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatOrder', this.onUpdateChatOrder);\n        ChatStore.removeListener('clientUpdateLeaveChat', this.onClientUpdateLeaveChat);\n    }\n\n    onClientUpdateLeaveChat = update => {\n        if (update.inProgress) {\n            this.hiddenChats.set(update.chatId, update.chatId);\n        } else {\n            this.hiddenChats.delete(update.chatId);\n        }\n\n        this.forceUpdate();\n    };\n\n    onUpdateAuthorizationState = update => {\n        const { authorization_state } = update;\n\n        this.setState({ authorizationState: authorization_state }, () => this.loadFirstSlice());\n    };\n\n    onFastUpdatingComplete = update => {\n        this.onLoadNext(true);\n        // this.setState({ chats: [] }, () => this.onLoadNext(true));\n    };\n\n    onUpdateConnectionState = update => {\n        const newConnectionState = update.state;\n        const { connectionState } = this.state;\n\n        this.setState({ connectionState: newConnectionState });\n\n        const updatingCompleted =\n            connectionState &&\n            connectionState['@type'] === 'connectionStateUpdating' &&\n            newConnectionState['@type'] !== 'connectionStateUpdating';\n        if (!updatingCompleted) return;\n\n        const hasSkippedUpdates = ChatStore.skippedUpdates.length > 0;\n        if (!hasSkippedUpdates) return;\n\n        ChatStore.skippedUpdates = [];\n        this.setState({ chats: [] }, () => this.onLoadNext(true));\n    };\n\n    loadFirstSlice = async () => {\n        const { authorizationState } = this.state;\n        if (authorizationState && authorizationState['@type'] === 'authorizationStateReady') {\n            await FileStore.initDB(() => this.onLoadNext());\n        }\n    };\n\n    onUpdateChatOrder = update => {\n        // NOTE: updateChatOrder is primary used to delete chats with order=0\n        // In all other cases use updateChatLastMessage\n\n        if (update.order !== '0') return;\n        const chat = ChatStore.get(update.chat_id);\n        if (!chat) {\n            return;\n        }\n\n        // unselect deleted chat\n        if (update.chat_id === ApplicationStore.getChatId()) {\n            TdLibController.setChatId(0);\n            ApplicationStore.changeChatDetailsVisibility(false);\n        }\n\n        let chatIds = [];\n        for (let i = 0; i < this.state.chats.length; i++) {\n            let chat = ChatStore.get(this.state.chats[i]);\n            if (chat && chat.order !== '0') {\n                switch (chat.type['@type']) {\n                    case 'chatTypeBasicGroup': {\n                        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n                        if (basicGroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                    case 'chatTypePrivate': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSecret': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSupergroup': {\n                        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                        if (supergroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.reorderChats(chatIds);\n    };\n\n    onUpdate = update => {\n        const { chat_id, order } = update;\n        if (order === '0') return;\n        const chat = ChatStore.get(chat_id);\n        if (!chat || chat.order === '0') {\n            return;\n        }\n\n        const { chats } = this.state;\n\n        let newChatIds = [];\n        if (chats.length > 0) {\n            const existingChat = chats.find(x => x === chat_id);\n            if (!existingChat) {\n                const minChatOrder = ChatStore.get(chats[chats.length - 1]).order;\n                if (orderCompare(minChatOrder, chat.order) === 1) {\n                    return;\n                }\n                newChatIds.push(chat.id);\n            }\n        }\n\n        // get last chat.order values\n        let chatIds = [];\n        for (let i = 0; i < chats.length; i++) {\n            let chat = ChatStore.get(chats[i]);\n            if (chat && chat.order !== '0') {\n                switch (chat.type['@type']) {\n                    case 'chatTypeBasicGroup': {\n                        const basicGroup = BasicGroupStore.get(chat.type.basic_group_id);\n                        if (basicGroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                    case 'chatTypePrivate': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSecret': {\n                        chatIds.push(chat.id);\n                        break;\n                    }\n                    case 'chatTypeSupergroup': {\n                        const supergroup = SupergroupStore.get(chat.type.supergroup_id);\n                        if (supergroup.status['@type'] !== 'chatMemberStatusLeft') {\n                            chatIds.push(chat.id);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.reorderChats(chatIds, newChatIds, () => {\n            this.loadChatContents(newChatIds);\n        });\n    };\n\n    reorderChats(chatIds, newChatIds = [], callback) {\n        const orderedChatIds = chatIds.concat(newChatIds).sort((a, b) => {\n            return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n        });\n\n        if (!DialogsList.isDifferentOrder(this.state.chats, orderedChatIds)) {\n            return;\n        }\n\n        this.setState({ chats: orderedChatIds }, callback);\n    }\n\n    static isDifferentOrder(oldChatIds, newChatIds) {\n        if (oldChatIds.length === newChatIds.length) {\n            for (let i = 0; i < oldChatIds.length; i++) {\n                if (oldChatIds[i] !== newChatIds[i]) return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n\n        if (list && list.scrollTop + list.offsetHeight >= list.scrollHeight) {\n            this.onLoadNext();\n        }\n    };\n\n    onLoadNext = async (replace = false) => {\n        const { chats } = this.state;\n\n        if (this.loading) return;\n\n        let offsetOrder = '9223372036854775807'; // 2^63 - 1\n        let offsetChatId = 0;\n        if (!replace && chats && chats.length > 0) {\n            const chat = ChatStore.get(chats[chats.length - 1]);\n            if (chat) {\n                offsetOrder = chat.order;\n                offsetChatId = chat.id;\n            }\n        }\n\n        console.log('DialogsList.onLoadNext getChats start', offsetChatId, offsetOrder);\n        this.loading = true;\n        const result = await TdLibController.send({\n            '@type': 'getChats',\n            offset_chat_id: offsetChatId,\n            offset_order: offsetOrder,\n            limit: CHAT_SLICE_LIMIT\n        }).finally(() => {\n            this.loading = false;\n            TdLibController.clientUpdate({ '@type': 'clientUpdateDialogsReady' });\n        });\n        console.log('DialogsList.onLoadNext getChats stop', offsetChatId, offsetOrder);\n        // TdLibController.send({\n        //     '@type': 'getChats',\n        //     offset_chat_id: offsetChatId,\n        //     offset_order: offsetOrder,\n        //     limit: CHAT_SLICE_LIMIT + 100\n        // });\n\n        if (result.chat_ids.length > 0 && result.chat_ids[0] === offsetChatId) {\n            result.chat_ids.shift();\n        }\n\n        if (replace) {\n            this.replaceChats(result.chat_ids, () => {\n                this.loadChatContents(result.chat_ids);\n            });\n        } else {\n            console.log('DialogsList.onLoadNext setState start', offsetChatId, offsetOrder);\n            this.appendChats(result.chat_ids, () => {\n                console.log('DialogsList.onLoadNext setState stop', offsetChatId, offsetOrder);\n                this.loadChatContents(result.chat_ids);\n            });\n        }\n    };\n\n    loadChatContents(chats) {\n        const store = FileStore.getStore();\n        loadChatsContent(store, chats);\n    }\n\n    appendChats(chats, callback) {\n        if (chats.length === 0) return;\n\n        this.setState({ chats: this.state.chats.concat(chats), firstSliceLoaded: true }, callback);\n    }\n\n    replaceChats(chats, callback) {\n        this.setState({ chats: chats, firstSliceLoaded: true }, callback);\n    }\n\n    scrollToTop() {\n        const list = this.listRef.current;\n        list.scrollTop = 0;\n    }\n\n    render() {\n        const { chats, firstSliceLoaded } = this.state;\n\n        // const dialogs = chats.map((x, index) => <DialogPlaceholder key={x} chatId={x} index={index} showTitle/>);\n\n        const dialogs = firstSliceLoaded\n            ? chats.map(x => <Dialog key={x} chatId={x} hidden={this.hiddenChats.has(x)} />)\n            : Array.from(Array(10)).map((x, index) => <DialogPlaceholder key={index} index={index} />);\n\n        return (\n            <div ref={this.listRef} className='dialogs-list' onScroll={this.handleScroll}>\n                {dialogs}\n            </div>\n        );\n    }\n}\n\nexport default DialogsList;\n"]},"metadata":{},"sourceType":"module"}