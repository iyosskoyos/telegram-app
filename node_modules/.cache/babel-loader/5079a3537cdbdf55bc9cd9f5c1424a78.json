{"ast":null,"code":"import _classCallCheck from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import classNames from'classnames';import{compose}from'recompose';import{withTranslation}from'react-i18next';import withStyles from'@material-ui/core/styles/withStyles';import{getChatTypingString,getChatDraft,getLastMessageSenderName,getLastMessageContent,showChatDraft}from'../../Utils/Chat';import ChatStore from'../../Stores/ChatStore';import'./DialogContent.css';var styles=function styles(theme){return{dialogContent:{color:theme.palette.text.secondary}};};var DialogContent=/*#__PURE__*/function(_React$Component){_inherits(DialogContent,_React$Component);function DialogContent(){var _getPrototypeOf2;var _this;_classCallCheck(this,DialogContent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DialogContent)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.onClientUpdateClearHistory=function(update){var chatId=_this.props.chatId;if(chatId===update.chatId){_this.clearHistory=update.inProgress;_this.forceUpdate();}};_this.onFastUpdatingComplete=function(update){_this.forceUpdate();};_this.onUpdate=function(update){var chatId=_this.props.chatId;if(chatId!==update.chat_id)return;_this.forceUpdate();};return _this;}_createClass(DialogContent,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){if(nextProps.chatId!==this.props.chatId){return true;}if(nextProps.t!==this.props.t){return true;}if(nextProps.theme!==this.props.theme){return true;}return false;}},{key:\"componentDidMount\",value:function componentDidMount(){ChatStore.on('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.on('clientUpdateClearHistory',this.onClientUpdateClearHistory);ChatStore.on('updateChatDraftMessage',this.onUpdate);ChatStore.on('updateChatLastMessage',this.onUpdate);ChatStore.on('updateChatReadInbox',this.onUpdate);ChatStore.on('updateUserChatAction',this.onUpdate);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){ChatStore.removeListener('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.removeListener('clientUpdateClearHistory',this.onClientUpdateClearHistory);ChatStore.removeListener('updateChatDraftMessage',this.onUpdate);ChatStore.removeListener('updateChatLastMessage',this.onUpdate);ChatStore.removeListener('updateChatReadInbox',this.onUpdate);ChatStore.removeListener('updateUserChatAction',this.onUpdate);}},{key:\"render\",value:function render(){var _this$props=this.props,chatId=_this$props.chatId,t=_this$props.t,classes=_this$props.classes;if(this.clearHistory)return React.createElement(\"div\",{className:classNames('dialog-content',classes.dialogContent)},\"\\xA0\");var chat=ChatStore.get(chatId);if(!chat)return React.createElement(\"div\",{className:classNames('dialog-content',classes.dialogContent)},\"\\xA0\");var contentControl=null;var typingString=getChatTypingString(chatId);if(typingString){contentControl=React.createElement(\"span\",{className:\"dialog-content-accent\"},typingString);}if(!contentControl){var draft=getChatDraft(chatId);if(showChatDraft(chatId)){var text=draft.text||\"\\xA0\";contentControl=React.createElement(React.Fragment,null,React.createElement(\"span\",{className:\"dialog-content-draft\"},t('Draft')+': '),text);}}if(!contentControl){var content=getLastMessageContent(chat,t)||\"\\xA0\";var senderName=getLastMessageSenderName(chat);contentControl=React.createElement(React.Fragment,null,senderName&&React.createElement(\"span\",{className:\"dialog-content-accent\"},senderName,\": \"),content);}return React.createElement(\"div\",{className:classNames('dialog-content',classes.dialogContent)},contentControl);}}]);return DialogContent;}(React.Component);var enhance=compose(withTranslation(),withStyles(styles,{withTheme:true}));export default enhance(DialogContent);","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Tile/DialogContent.js"],"names":["React","classNames","compose","withTranslation","withStyles","getChatTypingString","getChatDraft","getLastMessageSenderName","getLastMessageContent","showChatDraft","ChatStore","styles","theme","dialogContent","color","palette","text","secondary","DialogContent","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","nextProps","nextState","t","on","removeListener","classes","chat","get","contentControl","typingString","draft","content","senderName","Component","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    getChatTypingString,\n    getChatDraft,\n    getLastMessageSenderName,\n    getLastMessageContent,\n    showChatDraft\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogContent.css';\n\nconst styles = theme => ({\n    dialogContent: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass DialogContent extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== this.props.t) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateUserChatAction', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateUserChatAction', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        const { chatId, t, classes } = this.props;\n\n        if (this.clearHistory)\n            return <div className={classNames('dialog-content', classes.dialogContent)}>{'\\u00A0'}</div>;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return <div className={classNames('dialog-content', classes.dialogContent)}>{'\\u00A0'}</div>;\n\n        let contentControl = null;\n        const typingString = getChatTypingString(chatId);\n        if (typingString) {\n            contentControl = <span className='dialog-content-accent'>{typingString}</span>;\n        }\n\n        if (!contentControl) {\n            const draft = getChatDraft(chatId);\n            if (showChatDraft(chatId)) {\n                const text = draft.text || '\\u00A0';\n\n                contentControl = (\n                    <>\n                        <span className='dialog-content-draft'>{t('Draft') + ': '}</span>\n                        {text}\n                    </>\n                );\n            }\n        }\n\n        if (!contentControl) {\n            const content = getLastMessageContent(chat, t) || '\\u00A0';\n            const senderName = getLastMessageSenderName(chat);\n            contentControl = (\n                <>\n                    {senderName && <span className='dialog-content-accent'>{senderName}: </span>}\n                    {content}\n                </>\n            );\n        }\n\n        return <div className={classNames('dialog-content', classes.dialogContent)}>{contentControl}</div>;\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(DialogContent);\n"]},"metadata":{},"sourceType":"module"}