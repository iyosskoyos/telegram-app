{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Message/MessageStatus.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatStore from '../../Stores/ChatStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './MessageStatus.css';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  messageStatusFailed: {\n    background: theme.palette.error.light\n  },\n  messageStatusPending: {\n    background: theme.palette.primary.light\n  },\n  messageStatusSucceeded: {\n    background: theme.palette.primary.light\n  }\n});\n\nclass MessageStatus extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdateMessageSend = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const old_message_id = update.old_message_id,\n            message = update.message;\n      if (messageId !== old_message_id) return;\n      if (!message) return;\n      const chat_id = message.chat_id,\n            id = message.id,\n            sending_state = message.sending_state;\n      if (chatId !== chat_id) return;\n      this.newMessageId = id;\n      this.setState({\n        sendingState: sending_state\n      });\n    };\n\n    this.onUpdateChatReadOutbox = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n      const chat_id = update.chat_id,\n            last_read_outbox_message_id = update.last_read_outbox_message_id;\n      const newMessageId = this.newMessageId;\n      if (chatId !== chat_id) return;\n\n      if (newMessageId && newMessageId <= last_read_outbox_message_id || messageId <= last_read_outbox_message_id) {\n        this.setState({\n          sendingState: null,\n          unread: false\n        });\n      }\n    };\n\n    this.state = {\n      prevChatId: props.chatId,\n      prevMessageId: props.messageId,\n      sendingState: props.sendingState,\n      unread: true\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n      return {\n        prevChatId: props.chatId,\n        prevMessageId: props.messageId,\n        sendingState: props.sendingState\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    ChatStore.on('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n    MessageStore.on('updateMessageSendFailed', this.onUpdateMessageSend);\n    MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSend);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n    MessageStore.removeListener('updateMessageSendFailed', this.onUpdateMessageSend);\n    MessageStore.removeListener('updateMessageSendSucceeded', this.onUpdateMessageSend);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          sendingState = _this$state.sendingState,\n          unread = _this$state.unread;\n    let stateClassName = classNames('message-status-succeeded', classes.messageStatusSucceeded);\n\n    if (sendingState) {\n      stateClassName = sendingState['@type'] === 'messageSendingStateFailed' ? classNames('message-status-failed', classes.messageStatusFailed) : classNames('message-status-pending', classes.messageStatusPending);\n    }\n\n    return unread && React.createElement(\"i\", {\n      className: classNames('message-status-icon', stateClassName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }\n\n}\n\nMessageStatus.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  sendingState: PropTypes.object\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(MessageStatus);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Message/MessageStatus.js"],"names":["React","classNames","withStyles","ChatStore","MessageStore","PropTypes","styles","theme","messageStatusFailed","background","palette","error","light","messageStatusPending","primary","messageStatusSucceeded","MessageStatus","Component","constructor","props","onUpdateMessageSend","update","chatId","messageId","old_message_id","message","chat_id","id","sending_state","newMessageId","setState","sendingState","onUpdateChatReadOutbox","last_read_outbox_message_id","unread","state","prevChatId","prevMessageId","getDerivedStateFromProps","componentDidMount","on","componentWillUnmount","removeListener","render","classes","stateClassName","propTypes","number","isRequired","object","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatStore from '../../Stores/ChatStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './MessageStatus.css';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n    messageStatusFailed: {\n        background: theme.palette.error.light\n    },\n    messageStatusPending: {\n        background: theme.palette.primary.light\n    },\n    messageStatusSucceeded: {\n        background: theme.palette.primary.light\n    }\n});\n\nclass MessageStatus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            prevChatId: props.chatId,\n            prevMessageId: props.messageId,\n            sendingState: props.sendingState,\n            unread: true\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n            return {\n                prevChatId: props.chatId,\n                prevMessageId: props.messageId,\n                sendingState: props.sendingState\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        ChatStore.on('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n\n        MessageStore.on('updateMessageSendFailed', this.onUpdateMessageSend);\n        MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n\n        MessageStore.removeListener('updateMessageSendFailed', this.onUpdateMessageSend);\n        MessageStore.removeListener('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n\n    onUpdateMessageSend = update => {\n        const { chatId, messageId } = this.props;\n        const { old_message_id, message } = update;\n\n        if (messageId !== old_message_id) return;\n        if (!message) return;\n\n        const { chat_id, id, sending_state } = message;\n        if (chatId !== chat_id) return;\n\n        this.newMessageId = id;\n        this.setState({ sendingState: sending_state });\n    };\n\n    onUpdateChatReadOutbox = update => {\n        const { chatId, messageId } = this.props;\n        const { chat_id, last_read_outbox_message_id } = update;\n        const { newMessageId } = this;\n\n        if (chatId !== chat_id) return;\n\n        if ((newMessageId && newMessageId <= last_read_outbox_message_id) || messageId <= last_read_outbox_message_id) {\n            this.setState({ sendingState: null, unread: false });\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { sendingState, unread } = this.state;\n\n        let stateClassName = classNames('message-status-succeeded', classes.messageStatusSucceeded);\n        if (sendingState) {\n            stateClassName =\n                sendingState['@type'] === 'messageSendingStateFailed'\n                    ? classNames('message-status-failed', classes.messageStatusFailed)\n                    : classNames('message-status-pending', classes.messageStatusPending);\n        }\n\n        return unread && <i className={classNames('message-status-icon', stateClassName)} />;\n    }\n}\n\nMessageStatus.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    sendingState: PropTypes.object\n};\n\nexport default withStyles(styles, { withTheme: true })(MessageStatus);\n"]},"metadata":{},"sourceType":"module"}