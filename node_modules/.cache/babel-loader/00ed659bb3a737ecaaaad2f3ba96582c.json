{"ast":null,"code":"import _slicedToArray from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import classNames from'classnames';import FileProgress from'./FileProgress';import MediaCaption from'./MediaCaption';import{getViewerFile,getViewerThumbnail}from'../../Utils/File';import{isBlurredThumbnail}from'../../Utils/Media';import FileStore from'../../Stores/FileStore';import PlayerStore from'../../Stores/PlayerStore';import TdLibController from'../../Controllers/TdLibController';import Caption from'../InstantView/Blocks/Caption';import{isEmptyText}from'../../Utils/InstantView';import SafeLink from'../Additional/SafeLink';var InstantViewMediaViewerContent=/*#__PURE__*/function(_React$Component){_inherits(InstantViewMediaViewerContent,_React$Component);function InstantViewMediaViewerContent(props){var _this;_classCallCheck(this,InstantViewMediaViewerContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(InstantViewMediaViewerContent).call(this,props));_this.onClientUpdateMediaBlob=function(update){var fileId=update.fileId;var file=_this.state.file;if(file&&file.id===fileId){_this.forceUpdate();}};_this.onClientUpdateMediaThumbnailBlob=function(update){var fileId=update.fileId;var file=_this.state.thumbnail;if(file&&file.id===fileId){_this.forceUpdate();}};_this.videoRef=React.createRef();_this.state={};return _this;}_createClass(InstantViewMediaViewerContent,[{key:\"componentDidMount\",value:function componentDidMount(){FileStore.on('clientUpdatePhotoBlob',this.onClientUpdateMediaBlob);FileStore.on('clientUpdateVideoBlob',this.onClientUpdateMediaBlob);FileStore.on('clientUpdateAnimationBlob',this.onClientUpdateMediaBlob);FileStore.on('clientUpdateVideoThumbnailBlob',this.onClientUpdateMediaThumbnailBlob);FileStore.on('clientUpdateAnimationThumbnailBlob',this.onClientUpdateMediaThumbnailBlob);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){FileStore.removeListener('clientUpdatePhotoBlob',this.onClientUpdateMediaBlob);FileStore.removeListener('clientUpdateVideoBlob',this.onClientUpdateMediaBlob);FileStore.removeListener('clientUpdateAnimationBlob',this.onClientUpdateMediaBlob);FileStore.removeListener('clientUpdateVideoThumbnailBlob',this.onClientUpdateMediaThumbnailBlob);FileStore.removeListener('clientUpdateAnimationThumbnailBlob',this.onClientUpdateMediaThumbnailBlob);}},{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,media=_this$props.media,caption=_this$props.caption,url=_this$props.url;if(!media)return null;var _this$state=this.state,width=_this$state.width,height=_this$state.height,file=_this$state.file,thumbnailWidth=_this$state.thumbnailWidth,thumbnailHeight=_this$state.thumbnailHeight,thumbnail=_this$state.thumbnail,isPlaying=_this$state.isPlaying;if(!file)return null;var blob=FileStore.getBlob(file.id)||file.blob;var src=FileStore.getBlobUrl(blob)||'';var thumbnailBlob=thumbnail?FileStore.getBlob(thumbnail.id)||thumbnail.blob:null;var thumbnailSrc=FileStore.getBlobUrl(thumbnailBlob);var isBlurred=isBlurredThumbnail({width:thumbnailWidth,height:thumbnailHeight});var videoWidth=width;var videoHeight=height;if(Math.max(videoWidth,videoHeight)>640){var scale=640/Math.max(videoWidth,videoHeight);videoWidth=videoWidth>videoHeight?640:Math.floor(videoWidth*scale);videoHeight=videoHeight>videoWidth?640:Math.floor(videoHeight*scale);}var content=null;switch(media['@type']){case'video':{content=React.createElement(\"div\",{className:\"media-viewer-content-wrapper\"},React.createElement(\"video\",{ref:this.videoRef,className:\"media-viewer-content-video-player\",src:src,onClick:this.handleContentClick,controls:true,autoPlay:true,width:videoWidth,height:videoHeight,onPlay:function onPlay(){_this2.setState({isPlaying:true});TdLibController.clientUpdate({'@type':'clientUpdateMediaViewerPlay'});},onCanPlay:function onCanPlay(){var player=_this2.videoRef.current;if(player){player.volume=PlayerStore.volume;}},onPause:function onPause(){TdLibController.clientUpdate({'@type':'clientUpdateMediaViewerPause'});},onEnded:function onEnded(){TdLibController.clientUpdate({'@type':'clientUpdateMediaViewerEnded'});},onVolumeChange:function onVolumeChange(){var player=_this2.videoRef.current;if(player){TdLibController.clientUpdate({'@type':'clientUpdateMediaVolume',volume:player.volume});}}}),!isPlaying&&(!src&&thumbnailSrc?React.createElement(\"img\",{className:classNames('media-viewer-content-video-thumbnail',{'media-blurred':isBlurred}),src:thumbnailSrc,alt:\"\",width:videoWidth,height:videoHeight}):React.createElement(\"div\",{className:\"media-viewer-content-video-thumbnail\",style:{width:videoWidth,height:videoHeight}})));break;}case'animation':{content=React.createElement(\"div\",{className:\"media-viewer-content-wrapper\"},React.createElement(\"video\",{className:\"media-viewer-content-video-player\",src:src,onClick:this.handleContentClick,loop:true,autoPlay:true,width:videoWidth,height:videoHeight,onPlay:function onPlay(){_this2.setState({isPlaying:true});}}),!isPlaying&&(!src&&thumbnailSrc?React.createElement(\"img\",{className:classNames('media-viewer-content-video-thumbnail',{'media-blurred':isBlurred}),src:thumbnailSrc,alt:\"\",width:videoWidth,height:videoHeight}):React.createElement(\"div\",{className:\"media-viewer-content-video-thumbnail\",style:{width:videoWidth,height:videoHeight}})));break;}default:{content=React.createElement(\"img\",{className:\"media-viewer-content-image\",src:src,alt:\"\",onClick:this.handleContentClick});}}return React.createElement(\"div\",{className:\"media-viewer-content\"},content,React.createElement(FileProgress,{file:file,zIndex:2}),caption&&(!isEmptyText(caption.text)||!isEmptyText(caption.credit)||url)&&React.createElement(MediaCaption,{text:React.createElement(React.Fragment,null,React.createElement(Caption,{text:caption.text,credit:caption.credit}),React.createElement(SafeLink,{url:url}))}));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){var media=props.media,size=props.size,caption=props.caption,url=props.url;if(media!==state.prevMedia){var _getViewerFile=getViewerFile(media,size),_getViewerFile2=_slicedToArray(_getViewerFile,3),width=_getViewerFile2[0],height=_getViewerFile2[1],file=_getViewerFile2[2];file=FileStore.get(file.id)||file;var _getViewerThumbnail=getViewerThumbnail(media),_getViewerThumbnail2=_slicedToArray(_getViewerThumbnail,3),thumbnailWidth=_getViewerThumbnail2[0],thumbnailHeight=_getViewerThumbnail2[1],thumbnail=_getViewerThumbnail2[2];thumbnail=FileStore.get(thumbnail.id)||thumbnail;return{prevMedia:media,speed:1,isPlaying:false,width:width,height:height,file:file,thumbnailWidth:thumbnailWidth,thumbnailHeight:thumbnailHeight,thumbnail:thumbnail};}return null;}}]);return InstantViewMediaViewerContent;}(React.Component);export default InstantViewMediaViewerContent;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Viewer/InstantViewMediaViewerContent.js"],"names":["React","classNames","FileProgress","MediaCaption","getViewerFile","getViewerThumbnail","isBlurredThumbnail","FileStore","PlayerStore","TdLibController","Caption","isEmptyText","SafeLink","InstantViewMediaViewerContent","props","onClientUpdateMediaBlob","update","fileId","file","state","id","forceUpdate","onClientUpdateMediaThumbnailBlob","thumbnail","videoRef","createRef","on","removeListener","media","caption","url","width","height","thumbnailWidth","thumbnailHeight","isPlaying","blob","getBlob","src","getBlobUrl","thumbnailBlob","thumbnailSrc","isBlurred","videoWidth","videoHeight","Math","max","scale","floor","content","handleContentClick","setState","clientUpdate","player","current","volume","text","credit","size","prevMedia","get","speed","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getViewerFile, getViewerThumbnail } from '../../Utils/File';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport Caption from '../InstantView/Blocks/Caption';\nimport { isEmptyText } from '../../Utils/InstantView';\nimport SafeLink from '../Additional/SafeLink';\n\nclass InstantViewMediaViewerContent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { media, size, caption, url } = props;\n\n        if (media !== state.prevMedia) {\n            let [width, height, file] = getViewerFile(media, size);\n            file = FileStore.get(file.id) || file;\n\n            let [thumbnailWidth, thumbnailHeight, thumbnail] = getViewerThumbnail(media);\n            thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n\n            return {\n                prevMedia: media,\n\n                speed: 1,\n                isPlaying: false,\n                width,\n                height,\n                file,\n                thumbnailWidth,\n                thumbnailHeight,\n                thumbnail\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    }\n\n    onClientUpdateMediaBlob = update => {\n        const { fileId } = update;\n        const { file } = this.state;\n\n        if (file && file.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    onClientUpdateMediaThumbnailBlob = update => {\n        const { fileId } = update;\n        const { thumbnail: file } = this.state;\n\n        if (file && file.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    render() {\n        const { media, caption, url } = this.props;\n        if (!media) return null;\n\n        const { width, height, file, thumbnailWidth, thumbnailHeight, thumbnail, isPlaying } = this.state;\n        if (!file) return null;\n\n        const blob = FileStore.getBlob(file.id) || file.blob;\n        const src = FileStore.getBlobUrl(blob) || '';\n\n        const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n        const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n        const isBlurred = isBlurredThumbnail({ width: thumbnailWidth, height: thumbnailHeight });\n\n        let videoWidth = width;\n        let videoHeight = height;\n        if (Math.max(videoWidth, videoHeight) > 640) {\n            const scale = 640 / Math.max(videoWidth, videoHeight);\n            videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n            videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n        }\n\n        let content = null;\n        switch (media['@type']) {\n            case 'video': {\n                content = (\n                    <div className='media-viewer-content-wrapper'>\n                        <video\n                            ref={this.videoRef}\n                            className='media-viewer-content-video-player'\n                            src={src}\n                            onClick={this.handleContentClick}\n                            controls\n                            autoPlay\n                            width={videoWidth}\n                            height={videoHeight}\n                            onPlay={() => {\n                                this.setState({ isPlaying: true });\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerPlay'\n                                });\n                            }}\n                            onCanPlay={() => {\n                                const player = this.videoRef.current;\n                                if (player) {\n                                    player.volume = PlayerStore.volume;\n                                }\n                            }}\n                            onPause={() => {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerPause'\n                                });\n                            }}\n                            onEnded={() => {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaViewerEnded'\n                                });\n                            }}\n                            onVolumeChange={() => {\n                                const player = this.videoRef.current;\n                                if (player) {\n                                    TdLibController.clientUpdate({\n                                        '@type': 'clientUpdateMediaVolume',\n                                        volume: player.volume\n                                    });\n                                }\n                            }}\n                        />\n                        {!isPlaying &&\n                            (!src && thumbnailSrc ? (\n                                <img\n                                    className={classNames('media-viewer-content-video-thumbnail', {\n                                        'media-blurred': isBlurred\n                                    })}\n                                    src={thumbnailSrc}\n                                    alt=''\n                                    width={videoWidth}\n                                    height={videoHeight}\n                                />\n                            ) : (\n                                <div\n                                    className='media-viewer-content-video-thumbnail'\n                                    style={{\n                                        width: videoWidth,\n                                        height: videoHeight\n                                    }}\n                                />\n                            ))}\n                    </div>\n                );\n                break;\n            }\n            case 'animation': {\n                content = (\n                    <div className='media-viewer-content-wrapper'>\n                        <video\n                            className='media-viewer-content-video-player'\n                            src={src}\n                            onClick={this.handleContentClick}\n                            loop\n                            autoPlay\n                            width={videoWidth}\n                            height={videoHeight}\n                            onPlay={() => {\n                                this.setState({ isPlaying: true });\n                            }}\n                        />\n                        {!isPlaying &&\n                            (!src && thumbnailSrc ? (\n                                <img\n                                    className={classNames('media-viewer-content-video-thumbnail', {\n                                        'media-blurred': isBlurred\n                                    })}\n                                    src={thumbnailSrc}\n                                    alt=''\n                                    width={videoWidth}\n                                    height={videoHeight}\n                                />\n                            ) : (\n                                <div\n                                    className='media-viewer-content-video-thumbnail'\n                                    style={{\n                                        width: videoWidth,\n                                        height: videoHeight\n                                    }}\n                                />\n                            ))}\n                    </div>\n                );\n                break;\n            }\n            default: {\n                content = (\n                    <img className='media-viewer-content-image' src={src} alt='' onClick={this.handleContentClick} />\n                );\n            }\n        }\n\n        return (\n            <div className='media-viewer-content'>\n                {content}\n                <FileProgress file={file} zIndex={2} />\n                {caption && (!isEmptyText(caption.text) || !isEmptyText(caption.credit) || url) && (\n                    <MediaCaption\n                        text={\n                            <>\n                                <Caption text={caption.text} credit={caption.credit} />\n                                <SafeLink url={url} />\n                            </>\n                        }\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nInstantViewMediaViewerContent.propTypes = {\n    media: PropTypes.object.isRequired,\n    size: PropTypes.number.isRequired,\n    caption: PropTypes.object,\n    url: PropTypes.string\n};\n\nexport default InstantViewMediaViewerContent;\n"]},"metadata":{},"sourceType":"module"}