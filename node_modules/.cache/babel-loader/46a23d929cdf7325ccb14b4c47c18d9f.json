{"ast":null,"code":"import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import classNames from'classnames';import withStyles from'@material-ui/core/styles/withStyles';import{getLastMessageDate}from'../../Utils/Chat';import ChatStore from'../../Stores/ChatStore';import'./DialogMeta.css';var styles=function styles(theme){return{dialogMetaDate:{color:theme.palette.text.secondary}};};var DialogMeta=/*#__PURE__*/function(_React$Component){_inherits(DialogMeta,_React$Component);function DialogMeta(){var _getPrototypeOf2;var _this;_classCallCheck(this,DialogMeta);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DialogMeta)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.onClientUpdateClearHistory=function(update){var chatId=_this.props.chatId;if(chatId===update.chatId){_this.clearHistory=update.inProgress;_this.forceUpdate();}};_this.onFastUpdatingComplete=function(update){_this.forceUpdate();};_this.onUpdate=function(update){var chatId=_this.props.chatId;if(chatId!==update.chat_id)return;_this.forceUpdate();};return _this;}_createClass(DialogMeta,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){if(nextProps.chatId!==this.props.chatId){return true;}if(nextProps.theme!==this.props.theme){return true;}return false;}},{key:\"componentDidMount\",value:function componentDidMount(){ChatStore.on('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.on('clientUpdateClearHistory',this.onClientUpdateClearHistory);ChatStore.on('updateChatDraftMessage',this.onUpdate);ChatStore.on('updateChatLastMessage',this.onUpdate);ChatStore.on('updateChatReadInbox',this.onUpdate);ChatStore.on('updateChatUnreadMentionCount',this.onUpdate);ChatStore.on('updateMessageMentionRead',this.onUpdate);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){ChatStore.removeListener('clientUpdateFastUpdatingComplete',this.onFastUpdatingComplete);ChatStore.removeListener('clientUpdateClearHistory',this.onClientUpdateClearHistory);ChatStore.removeListener('updateChatDraftMessage',this.onUpdate);ChatStore.removeListener('updateChatLastMessage',this.onUpdate);ChatStore.removeListener('updateChatReadInbox',this.onUpdate);ChatStore.removeListener('updateChatUnreadMentionCount',this.onUpdate);ChatStore.removeListener('updateMessageMentionRead',this.onUpdate);}},{key:\"render\",value:function render(){if(this.clearHistory)return null;var _this$props=this.props,chatId=_this$props.chatId,classes=_this$props.classes;var chat=ChatStore.get(chatId);var date=getLastMessageDate(chat);return React.createElement(React.Fragment,null,date&&React.createElement(\"div\",{className:classNames('dialog-meta',classes.dialogMetaDate)},date));}}]);return DialogMeta;}(React.Component);export default withStyles(styles,{withTheme:true})(DialogMeta);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/DialogMeta.js"],"names":["React","classNames","withStyles","getLastMessageDate","ChatStore","styles","theme","dialogMetaDate","color","palette","text","secondary","DialogMeta","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","nextProps","nextState","on","removeListener","classes","chat","get","date","Component","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getLastMessageDate } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport './DialogMeta.css';\n\nconst styles = theme => ({\n    dialogMetaDate: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass DialogMeta extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chat_id) return;\n\n        this.forceUpdate();\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId, classes } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        const date = getLastMessageDate(chat);\n\n        return <>{date && <div className={classNames('dialog-meta', classes.dialogMetaDate)}>{date}</div>}</>;\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogMeta);\n"]},"metadata":{},"sourceType":"module"}