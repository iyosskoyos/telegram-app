{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport { getSearchMessagesFilter, openMedia } from '../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_NORMAL, PLAYER_VOLUME_NORMAL } from '../Constants';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\nimport { getRandomInt } from '../Utils/Common';\nconst RepeatEnum = Object.freeze({\n  NONE: 'NONE',\n  REPEAT: 'REPEAT',\n  REPEAT_ONE: 'REPEAT_ONE'\n});\nexport { RepeatEnum };\n\nclass PlayerStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.playlist = null;\n      this.message = null;\n      this.time = null;\n      this.videoStream = null;\n      this.instantView = null;\n      this.pageBlock = null;\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.onUpdate = async update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.close = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaClose'\n      });\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateMediaClose':\n          {\n            this.reset();\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaActive':\n          {\n            const chatId = update.chatId,\n                  messageId = update.messageId,\n                  instantView = update.instantView,\n                  pageBlock = update.pageBlock;\n            const message = MessageStore.get(chatId, messageId);\n\n            if (message) {\n              this.message = message;\n              this.emit(update['@type'], update);\n              this.getPlaylist(chatId, messageId);\n              return;\n            } else if (instantView && pageBlock) {\n              this.instantView = instantView;\n              this.pageBlock = pageBlock;\n              this.emit(update['@type'], update);\n            }\n\n            break;\n          }\n\n        case 'clientUpdateMediaVolume':\n          {\n            const volume = update.volume;\n            this.volume = volume;\n            const cookies = new Cookies();\n            cookies.set('volume', volume);\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaRepeat':\n          {\n            const repeat = update.repeat;\n            this.repeat = repeat;\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaShuffle':\n          {\n            const shuffle = update.shuffle;\n            this.shuffle = shuffle;\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPlaybackRate':\n          {\n            const playbackRate = update.playbackRate;\n            this.playbackRate = playbackRate;\n            const cookies = new Cookies();\n            cookies.set('playbackRate', playbackRate);\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPlay':\n          {\n            this.playing = true;\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaTitleMouseOver':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPause':\n          {\n            this.playing = false;\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaStop':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaNext':\n          {\n            this.emit(update['@type'], update);\n            this.moveToNextMedia(false);\n            break;\n          }\n\n        case 'clientUpdateMediaPrev':\n          {\n            this.emit(update['@type'], update);\n            this.moveToPrevMedia();\n            break;\n          }\n\n        case 'clientUpdateMediaEnding':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaEnd':\n          {\n            this.emit(update['@type'], update);\n\n            if (update.moveNext) {\n              if (this.moveToNextMedia(true)) {} else {\n                this.close();\n              }\n            } else {\n              this.close();\n            }\n\n            break;\n          }\n\n        case 'clientUpdateMediaTime':\n          {\n            const duration = update.duration,\n                  currentTime = update.currentTime,\n                  timestamp = update.timestamp;\n            this.time = {\n              currentTime: currentTime,\n              duration: duration,\n              timestamp: timestamp\n            };\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaCaptureStream':\n          {\n            this.videoStream = update.stream;\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaViewerPlay':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaViewerPause':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaViewerEnded':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylistLoading':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylistPrev':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylist':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'clientUpdateMediaPlaylistNext':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.moveToPrevMedia = () => {\n      if (!this.playlist) return;\n      if (!this.message) return;\n      const _this$message = this.message,\n            chat_id = _this$message.chat_id,\n            id = _this$message.id;\n      const messages = this.playlist.messages;\n      if (!messages) return;\n      const index = messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n      if (index === -1) return;\n\n      if (index + 1 < messages.length) {\n        const message = messages[index + 1];\n        openMedia(message.chat_id, message.id, false);\n      }\n    };\n\n    this.moveToNextMedia = useRepeatShuffle => {\n      if (!this.playlist) return false;\n      if (!this.message) return false;\n      const _this$message2 = this.message,\n            chat_id = _this$message2.chat_id,\n            id = _this$message2.id;\n      const messages = this.playlist.messages;\n      if (!messages) return false;\n      const index = messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n      if (index === -1) return false;\n      let nextIndex = -1;\n\n      if (!useRepeatShuffle) {\n        nextIndex = index - 1;\n      } else {\n        switch (this.repeat) {\n          case RepeatEnum.NONE:\n            {\n              if (this.shuffle) {\n                nextIndex = getRandomInt(0, messages.length);\n              } else {\n                nextIndex = index - 1;\n              }\n\n              break;\n            }\n\n          case RepeatEnum.REPEAT_ONE:\n            {\n              nextIndex = index;\n              break;\n            }\n\n          case RepeatEnum.REPEAT:\n            {\n              if (this.shuffle) {\n                nextIndex = getRandomInt(0, messages.length);\n              } else {\n                nextIndex = index - 1 >= 0 ? index - 1 : messages.length - 1;\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (nextIndex >= 0) {\n        const message = messages[nextIndex];\n        openMedia(message.chat_id, message.id, false);\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getPlaylist = async (chatId, messageId) => {\n      const currentPlaylist = this.playlist;\n\n      if (currentPlaylist) {\n        const messages = currentPlaylist.messages;\n\n        if (messages && messages.findIndex(x => x.chat_id === chatId && x.id === messageId) !== -1) {\n          return;\n        }\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPlaylistLoading',\n        chatId: chatId,\n        messageId: messageId\n      });\n      const filter = getSearchMessagesFilter(chatId, messageId);\n\n      if (!filter) {\n        this.playlist = {\n          chatId: chatId,\n          messageId: messageId,\n          totalCount: 1,\n          messages: [MessageStore.get(chatId, messageId)]\n        };\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaPlaylist',\n          playlist: this.playlist\n        });\n        return;\n      }\n\n      const result = await TdLibController.send({\n        '@type': 'searchChatMessages',\n        chat_id: chatId,\n        query: '',\n        sender_user_id: 0,\n        from_message_id: messageId,\n        offset: -50,\n        limit: 100,\n        filter: filter\n      });\n      MessageStore.setItems(result.messages);\n      const total_count = result.total_count,\n            messages = result.messages;\n      this.playlist = {\n        chatId: chatId,\n        messageId: messageId,\n        totalCount: total_count,\n        messages: messages\n      };\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPlaylist',\n        playlist: this.playlist\n      });\n    };\n\n    const _cookies = new Cookies();\n\n    let _playbackRate = _cookies.get('playbackRate');\n\n    let _volume = _cookies.get('volume');\n\n    _playbackRate = _playbackRate && Number(_playbackRate) >= 1 && Number(_playbackRate) <= 2 ? Number(_playbackRate) : PLAYER_PLAYBACKRATE_NORMAL;\n    _volume = _volume && Number(_volume) >= 0 && Number(_volume) <= 1 ? Number(_volume) : PLAYER_VOLUME_NORMAL;\n    this.playbackRate = _playbackRate;\n    this.volume = _volume;\n    this.repeat = RepeatEnum.NONE;\n    this.shuffle = false;\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n}\n\nconst store = new PlayerStore();\nwindow.player = store;\nexport default store;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Stores/PlayerStore.js"],"names":["EventEmitter","Cookies","getSearchMessagesFilter","openMedia","PLAYER_PLAYBACKRATE_NORMAL","PLAYER_VOLUME_NORMAL","MessageStore","TdLibController","getRandomInt","RepeatEnum","Object","freeze","NONE","REPEAT","REPEAT_ONE","PlayerStore","constructor","reset","playlist","message","time","videoStream","instantView","pageBlock","addTdLibListener","addListener","onUpdate","onClientUpdate","removeTdLibListener","removeListener","update","authorization_state","close","clientUpdate","emit","chatId","messageId","get","getPlaylist","volume","cookies","set","repeat","shuffle","playbackRate","playing","moveToNextMedia","moveToPrevMedia","moveNext","duration","currentTime","timestamp","stream","chat_id","id","messages","index","findIndex","x","length","useRepeatShuffle","nextIndex","currentPlaylist","filter","totalCount","result","send","query","sender_user_id","from_message_id","offset","limit","setItems","total_count","Number","setMaxListeners","Infinity","store","window","player"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport Cookies from 'universal-cookie';\nimport { getSearchMessagesFilter, openMedia } from '../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_NORMAL, PLAYER_VOLUME_NORMAL } from '../Constants';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\nimport { getRandomInt } from '../Utils/Common';\n\nconst RepeatEnum = Object.freeze({\n    NONE: 'NONE',\n    REPEAT: 'REPEAT',\n    REPEAT_ONE: 'REPEAT_ONE'\n});\n\nexport { RepeatEnum };\n\nclass PlayerStore extends EventEmitter {\n    constructor() {\n        super();\n\n        const cookies = new Cookies();\n        let playbackRate = cookies.get('playbackRate');\n        let volume = cookies.get('volume');\n        playbackRate =\n            playbackRate && Number(playbackRate) >= 1 && Number(playbackRate) <= 2\n                ? Number(playbackRate)\n                : PLAYER_PLAYBACKRATE_NORMAL;\n        volume = volume && Number(volume) >= 0 && Number(volume) <= 1 ? Number(volume) : PLAYER_VOLUME_NORMAL;\n\n        this.playbackRate = playbackRate;\n        this.volume = volume;\n        this.repeat = RepeatEnum.NONE;\n        this.shuffle = false;\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.playlist = null;\n        this.message = null;\n        this.time = null;\n        this.videoStream = null;\n        this.instantView = null;\n        this.pageBlock = null;\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    onUpdate = async update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    close = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaClose'\n        });\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateMediaClose': {\n                this.reset();\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaActive': {\n                const { chatId, messageId, instantView, pageBlock } = update;\n\n                const message = MessageStore.get(chatId, messageId);\n                if (message) {\n                    this.message = message;\n                    this.emit(update['@type'], update);\n                    this.getPlaylist(chatId, messageId);\n\n                    return;\n                } else if (instantView && pageBlock) {\n                    this.instantView = instantView;\n                    this.pageBlock = pageBlock;\n                    this.emit(update['@type'], update);\n                }\n\n                break;\n            }\n            case 'clientUpdateMediaVolume': {\n                const { volume } = update;\n\n                this.volume = volume;\n\n                const cookies = new Cookies();\n                cookies.set('volume', volume);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaRepeat': {\n                const { repeat } = update;\n\n                this.repeat = repeat;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaShuffle': {\n                const { shuffle } = update;\n\n                this.shuffle = shuffle;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaybackRate': {\n                const { playbackRate } = update;\n\n                this.playbackRate = playbackRate;\n\n                const cookies = new Cookies();\n                cookies.set('playbackRate', playbackRate);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlay': {\n                this.playing = true;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaTitleMouseOver': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPause': {\n                this.playing = false;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaStop': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaNext': {\n                this.emit(update['@type'], update);\n\n                this.moveToNextMedia(false);\n                break;\n            }\n            case 'clientUpdateMediaPrev': {\n                this.emit(update['@type'], update);\n\n                this.moveToPrevMedia();\n                break;\n            }\n            case 'clientUpdateMediaEnding': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaEnd': {\n                this.emit(update['@type'], update);\n\n                if (update.moveNext) {\n                    if (this.moveToNextMedia(true)) {\n                    } else {\n                        this.close();\n                    }\n                } else {\n                    this.close();\n                }\n                break;\n            }\n            case 'clientUpdateMediaTime': {\n                const { duration, currentTime, timestamp } = update;\n\n                this.time = {\n                    currentTime: currentTime,\n                    duration: duration,\n                    timestamp: timestamp\n                };\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaCaptureStream': {\n                this.videoStream = update.stream;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaViewerPlay': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaViewerPause': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaViewerEnded': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylistLoading': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylistPrev': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylist': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'clientUpdateMediaPlaylistNext': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    moveToPrevMedia = () => {\n        if (!this.playlist) return;\n        if (!this.message) return;\n\n        const { chat_id, id } = this.message;\n        const { messages } = this.playlist;\n        if (!messages) return;\n\n        const index = messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return;\n\n        if (index + 1 < messages.length) {\n            const message = messages[index + 1];\n\n            openMedia(message.chat_id, message.id, false);\n        }\n    };\n\n    moveToNextMedia = useRepeatShuffle => {\n        if (!this.playlist) return false;\n        if (!this.message) return false;\n\n        const { chat_id, id } = this.message;\n        const { messages } = this.playlist;\n        if (!messages) return false;\n\n        const index = messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return false;\n\n        let nextIndex = -1;\n        if (!useRepeatShuffle) {\n            nextIndex = index - 1;\n        } else {\n            switch (this.repeat) {\n                case RepeatEnum.NONE: {\n                    if (this.shuffle) {\n                        nextIndex = getRandomInt(0, messages.length);\n                    } else {\n                        nextIndex = index - 1;\n                    }\n                    break;\n                }\n                case RepeatEnum.REPEAT_ONE: {\n                    nextIndex = index;\n                    break;\n                }\n                case RepeatEnum.REPEAT: {\n                    if (this.shuffle) {\n                        nextIndex = getRandomInt(0, messages.length);\n                    } else {\n                        nextIndex = index - 1 >= 0 ? index - 1 : messages.length - 1;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (nextIndex >= 0) {\n            const message = messages[nextIndex];\n\n            openMedia(message.chat_id, message.id, false);\n            return true;\n        }\n\n        return false;\n    };\n\n    getPlaylist = async (chatId, messageId) => {\n        const { playlist: currentPlaylist } = this;\n\n        if (currentPlaylist) {\n            const { messages } = currentPlaylist;\n            if (messages && messages.findIndex(x => x.chat_id === chatId && x.id === messageId) !== -1) {\n                return;\n            }\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlaylistLoading',\n            chatId: chatId,\n            messageId: messageId\n        });\n\n        const filter = getSearchMessagesFilter(chatId, messageId);\n        if (!filter) {\n            this.playlist = {\n                chatId: chatId,\n                messageId: messageId,\n                totalCount: 1,\n                messages: [MessageStore.get(chatId, messageId)]\n            };\n\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateMediaPlaylist',\n                playlist: this.playlist\n            });\n\n            return;\n        }\n\n        const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: messageId,\n            offset: -50,\n            limit: 100,\n            filter: filter\n        });\n\n        MessageStore.setItems(result.messages);\n\n        const { total_count, messages } = result;\n\n        this.playlist = {\n            chatId: chatId,\n            messageId: messageId,\n            totalCount: total_count,\n            messages: messages\n        };\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlaylist',\n            playlist: this.playlist\n        });\n    };\n}\n\nconst store = new PlayerStore();\nwindow.player = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}