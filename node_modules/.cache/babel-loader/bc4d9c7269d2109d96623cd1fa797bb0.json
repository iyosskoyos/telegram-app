{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Theme.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport blue from '@material-ui/core/colors/blue';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport StylesProvider from '@material-ui/styles/StylesProvider';\nimport { getDisplayName } from './Utils/HOC';\nimport Cookies from 'universal-cookie';\nimport ApplicationStore from './Stores/ApplicationStore';\n\nfunction withTheme(WrappedComponent) {\n  class ThemeWrapper extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.onClientUpdateThemeChanging = update => {\n        const type = update.type,\n              primary = update.primary;\n        const theme = createMuiTheme({\n          palette: {\n            type: type,\n            primary: primary,\n            secondary: {\n              main: '#FF5555'\n            },\n            typography: {\n              useNextVariants: true\n            }\n          }\n        });\n        const cookies = new Cookies();\n        cookies.set('themeOptions', {\n          type: type,\n          primary: primary\n        });\n        this.setState({\n          theme: theme\n        }, () => ApplicationStore.emit('clientUpdateThemeChange'));\n      };\n\n      const _cookies = new Cookies();\n\n      const _ref = _cookies.get('themeOptions') || {\n        type: 'light',\n        primary: blue\n      },\n            _type = _ref.type,\n            _primary = _ref.primary;\n\n      let _theme = createMuiTheme({\n        palette: {\n          type: _type,\n          primary: _primary,\n          secondary: {\n            main: '#FF5555'\n          }\n        },\n        typography: {\n          useNextVariants: true\n        }\n      });\n\n      this.state = {\n        theme: _theme\n      };\n    }\n\n    componentDidMount() {\n      ApplicationStore.on('clientUpdateThemeChanging', this.onClientUpdateThemeChanging);\n    }\n\n    componentWillUnmount() {\n      ApplicationStore.removeListener('clientUpdateThemeChanging', this.onClientUpdateThemeChanging);\n    }\n\n    render() {\n      const theme = this.state.theme;\n      return React.createElement(StylesProvider, {\n        injectFirst: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(MuiThemeProvider, {\n        theme: theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }))));\n    }\n\n  }\n\n  ThemeWrapper.displayName = \"WithTheme(\".concat(getDisplayName(WrappedComponent), \")\");\n  return ThemeWrapper;\n}\n\nexport default withTheme;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Theme.js"],"names":["React","blue","createMuiTheme","MuiThemeProvider","StylesProvider","getDisplayName","Cookies","ApplicationStore","withTheme","WrappedComponent","ThemeWrapper","Component","constructor","props","onClientUpdateThemeChanging","update","type","primary","theme","palette","secondary","main","typography","useNextVariants","cookies","set","setState","emit","get","state","componentDidMount","on","componentWillUnmount","removeListener","render","displayName"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport blue from '@material-ui/core/colors/blue';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport StylesProvider from '@material-ui/styles/StylesProvider';\nimport { getDisplayName } from './Utils/HOC';\nimport Cookies from 'universal-cookie';\nimport ApplicationStore from './Stores/ApplicationStore';\n\nfunction withTheme(WrappedComponent) {\n    class ThemeWrapper extends React.Component {\n        constructor(props) {\n            super(props);\n\n            const cookies = new Cookies();\n            const { type, primary } = cookies.get('themeOptions') || { type: 'light', primary: blue };\n\n            let theme = createMuiTheme({\n                palette: {\n                    type: type,\n                    primary: primary,\n                    secondary: { main: '#FF5555' }\n                },\n                typography: {\n                    useNextVariants: true\n                }\n            });\n\n            this.state = {\n                theme: theme\n            };\n        }\n\n        componentDidMount() {\n            ApplicationStore.on('clientUpdateThemeChanging', this.onClientUpdateThemeChanging);\n        }\n\n        componentWillUnmount() {\n            ApplicationStore.removeListener('clientUpdateThemeChanging', this.onClientUpdateThemeChanging);\n        }\n\n        onClientUpdateThemeChanging = update => {\n            const { type, primary } = update;\n\n            const theme = createMuiTheme({\n                palette: {\n                    type: type,\n                    primary: primary,\n                    secondary: { main: '#FF5555' },\n                    typography: {\n                        useNextVariants: true\n                    }\n                }\n            });\n\n            const cookies = new Cookies();\n            cookies.set('themeOptions', { type: type, primary: primary });\n\n            this.setState({ theme: theme }, () => ApplicationStore.emit('clientUpdateThemeChange'));\n        };\n\n        render() {\n            const { theme } = this.state;\n\n            return (\n                <StylesProvider injectFirst>\n                    <MuiThemeProvider theme={theme}>\n                        <WrappedComponent {...this.props} />\n                    </MuiThemeProvider>\n                </StylesProvider>\n            );\n        }\n    }\n    ThemeWrapper.displayName = `WithTheme(${getDisplayName(WrappedComponent)})`;\n\n    return ThemeWrapper;\n}\n\nexport default withTheme;\n"]},"metadata":{},"sourceType":"module"}