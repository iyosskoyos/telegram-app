{"ast":null,"code":"import _slicedToArray from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import{EventEmitter}from'events';import{isMessageMuted}from'../Utils/Message';import{APP_NAME,NOTIFICATION_AUDIO_DELAY_MS}from'../Constants';import ChatStore from'./ChatStore';import MessageStore from'./MessageStore';import TdLibController from'../Controllers/TdLibController';var NotificationStore=/*#__PURE__*/function(_EventEmitter){_inherits(NotificationStore,_EventEmitter);function NotificationStore(){var _this;_classCallCheck(this,NotificationStore);_this=_possibleConstructorReturn(this,_getPrototypeOf(NotificationStore).call(this));_this.reset=function(){// depends on ChatStore and MessageStore updates\n_this.chatStore=ChatStore;_this.messageStore=MessageStore;_this.newMessages=new Map();_this.settings=new Map();_this.windowFocused=true;_this.timerHandler=null;_this.nextSoundAt=new Date();};_this.onTimer=function(){// console.log('[ns] onTimer');\nvar unreadCount=_this.getUnreadCount();var showBadge=document.title===APP_NAME&&unreadCount>0;if(showBadge){var title='+99 notifications';if(unreadCount===1){title='1 notification';}else if(unreadCount<99){title=\"\".concat(unreadCount,\" notifications\");}document.title=title;document.getElementById('favicon').href='favicon_unread.ico';}else{document.title=APP_NAME;document.getElementById('favicon').href='favicon.ico';}};_this.onUpdate=function(update){switch(update['@type']){case'updateChatReadInbox':{var _assertThisInitialize=_assertThisInitialized(_this),windowFocused=_assertThisInitialize.windowFocused;if(!windowFocused){var chat_id=update.chat_id,last_read_inbox_message_id=update.last_read_inbox_message_id;var chatMap=_this.newMessages.get(chat_id);if(chatMap){var newChatMap=new Map(_toConsumableArray(chatMap).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),id=_ref2[0],m=_ref2[1];return m.id>last_read_inbox_message_id;}));if(newChatMap.size<chatMap.size){_this.newMessages.set(chat_id,newChatMap);_this.updateTimer();}}}break;}case'updateChatNotificationSettings':{var _assertThisInitialize2=_assertThisInitialized(_this),_windowFocused=_assertThisInitialize2.windowFocused;if(!_windowFocused){_this.updateTimer();}break;}case'updateDeleteMessages':{var _assertThisInitialize3=_assertThisInitialized(_this),_windowFocused2=_assertThisInitialize3.windowFocused;if(!_windowFocused2){var _chat_id=update.chat_id,message_ids=update.message_ids,is_permanent=update.is_permanent;if(is_permanent&&message_ids.length>0){var _chatMap=_this.newMessages.get(_chat_id);if(_chatMap){var filterMap=new Map(message_ids.map(function(id){return[id,id];}));var _newChatMap=new Map(_toConsumableArray(_chatMap).filter(function(_ref3){var _ref4=_slicedToArray(_ref3,2),id=_ref4[0],m=_ref4[1];return!filterMap.has(id);}));if(_newChatMap.size<_chatMap.size){_this.newMessages.set(_chat_id,_newChatMap);_this.updateTimer();}}}}break;}case'updateNewMessage':{var _assertThisInitialize4=_assertThisInitialized(_this),_windowFocused3=_assertThisInitialize4.windowFocused;// console.log('[ns] updateNewMessage', windowFocused);\nif(!_windowFocused3){var message=update.message;var _chat_id2=message.chat_id,id=message.id;var _chatMap2=_this.newMessages.get(_chat_id2)||new Map();_chatMap2.set(id,message);_this.newMessages.set(_chat_id2,_chatMap2);_this.updateTimer();if(!isMessageMuted(message)){var now=new Date();if(now>_this.nextSoundAt){// console.log('[ns] audio play');\nvar audio=new Audio('sound_a.mp3');audio.play();var nextSoundAt=new Date();nextSoundAt.setMilliseconds(nextSoundAt.getMilliseconds()+NOTIFICATION_AUDIO_DELAY_MS);_this.nextSoundAt=nextSoundAt;}}}break;}case'updateScopeNotificationSettings':{var scope=update.scope,notification_settings=update.notification_settings;_this.settings.set(scope['@type'],notification_settings);var _assertThisInitialize5=_assertThisInitialized(_this),_windowFocused4=_assertThisInitialize5.windowFocused;if(!_windowFocused4){_this.updateTimer();}_this.emit('updateScopeNotificationSettings',update);break;}default:break;}};_this.onClientUpdate=function(update){switch(update['@type']){case'clientUpdateFocusWindow':{var focused=update.focused;// console.log('[ns] clientUpdateFocusWindow', update);\n_this.windowFocused=focused;if(focused){_this.newMessages=new Map();_this.updateTimer();}break;}default:break;}};_this.addTdLibListener=function(){TdLibController.addListener('update',_this.onUpdate);TdLibController.addListener('clientUpdate',_this.onClientUpdate);};_this.removeTdLibListener=function(){TdLibController.removeListener('update',_this.onUpdate);TdLibController.removeListener('clientUpdate',_this.onClientUpdate);};_this.reset();_this.addTdLibListener();_this.setMaxListeners(Infinity);return _this;}_createClass(NotificationStore,[{key:\"getUnreadCount\",value:function getUnreadCount(){var unreadCount=0;this.newMessages.forEach(function(chat){chat.forEach(function(m){if(!isMessageMuted(m)){unreadCount++;}});});return unreadCount;}},{key:\"updateTimer\",value:function updateTimer(){var unreadCount=this.getUnreadCount();// console.log('[ns] updateTimer', unreadCount, this.newMessages);\nif(unreadCount>0){if(!this.timerHandler){// console.log('[ns] setInterval');\nthis.onTimer();this.timerHandler=setInterval(this.onTimer,1000);}}else{if(this.timerHandler){// console.log('[ns] clearInterval');\nclearInterval(this.timerHandler);this.timerHandler=null;this.onTimer();}}}}]);return NotificationStore;}(EventEmitter);var store=new NotificationStore();window.notifications=store;export default store;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Stores/NotificationStore.js"],"names":["EventEmitter","isMessageMuted","APP_NAME","NOTIFICATION_AUDIO_DELAY_MS","ChatStore","MessageStore","TdLibController","NotificationStore","reset","chatStore","messageStore","newMessages","Map","settings","windowFocused","timerHandler","nextSoundAt","Date","onTimer","unreadCount","getUnreadCount","showBadge","document","title","getElementById","href","onUpdate","update","chat_id","last_read_inbox_message_id","chatMap","get","newChatMap","filter","id","m","size","set","updateTimer","message_ids","is_permanent","length","filterMap","map","has","message","now","audio","Audio","play","setMilliseconds","getMilliseconds","scope","notification_settings","emit","onClientUpdate","focused","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","forEach","chat","setInterval","clearInterval","store","window","notifications"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport { isMessageMuted } from '../Utils/Message';\nimport { APP_NAME, NOTIFICATION_AUDIO_DELAY_MS } from '../Constants';\nimport ChatStore from './ChatStore';\nimport MessageStore from './MessageStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass NotificationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        // depends on ChatStore and MessageStore updates\n        this.chatStore = ChatStore;\n        this.messageStore = MessageStore;\n\n        this.newMessages = new Map();\n        this.settings = new Map();\n        this.windowFocused = true;\n        this.timerHandler = null;\n        this.nextSoundAt = new Date();\n    };\n\n    getUnreadCount() {\n        let unreadCount = 0;\n        this.newMessages.forEach(chat => {\n            chat.forEach(m => {\n                if (!isMessageMuted(m)) {\n                    unreadCount++;\n                }\n            });\n        });\n\n        return unreadCount;\n    }\n\n    updateTimer() {\n        const unreadCount = this.getUnreadCount();\n        // console.log('[ns] updateTimer', unreadCount, this.newMessages);\n\n        if (unreadCount > 0) {\n            if (!this.timerHandler) {\n                // console.log('[ns] setInterval');\n\n                this.onTimer();\n                this.timerHandler = setInterval(this.onTimer, 1000);\n            }\n        } else {\n            if (this.timerHandler) {\n                // console.log('[ns] clearInterval');\n\n                clearInterval(this.timerHandler);\n                this.timerHandler = null;\n                this.onTimer();\n            }\n        }\n    }\n\n    onTimer = () => {\n        // console.log('[ns] onTimer');\n\n        const unreadCount = this.getUnreadCount();\n        const showBadge = document.title === APP_NAME && unreadCount > 0;\n\n        if (showBadge) {\n            let title = '+99 notifications';\n            if (unreadCount === 1) {\n                title = '1 notification';\n            } else if (unreadCount < 99) {\n                title = `${unreadCount} notifications`;\n            }\n            document.title = title;\n            document.getElementById('favicon').href = 'favicon_unread.ico';\n        } else {\n            document.title = APP_NAME;\n            document.getElementById('favicon').href = 'favicon.ico';\n        }\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateChatReadInbox': {\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    const { chat_id, last_read_inbox_message_id } = update;\n\n                    const chatMap = this.newMessages.get(chat_id);\n                    if (chatMap) {\n                        const newChatMap = new Map([...chatMap].filter(([id, m]) => m.id > last_read_inbox_message_id));\n                        if (newChatMap.size < chatMap.size) {\n                            this.newMessages.set(chat_id, newChatMap);\n                            this.updateTimer();\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'updateChatNotificationSettings': {\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    this.updateTimer();\n                }\n\n                break;\n            }\n            case 'updateDeleteMessages': {\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    const { chat_id, message_ids, is_permanent } = update;\n                    if (is_permanent && message_ids.length > 0) {\n                        const chatMap = this.newMessages.get(chat_id);\n                        if (chatMap) {\n                            const filterMap = new Map(message_ids.map(id => [id, id]));\n\n                            const newChatMap = new Map([...chatMap].filter(([id, m]) => !filterMap.has(id)));\n                            if (newChatMap.size < chatMap.size) {\n                                this.newMessages.set(chat_id, newChatMap);\n                                this.updateTimer();\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'updateNewMessage': {\n                const { windowFocused } = this;\n                // console.log('[ns] updateNewMessage', windowFocused);\n                if (!windowFocused) {\n                    const { message } = update;\n                    const { chat_id, id } = message;\n\n                    const chatMap = this.newMessages.get(chat_id) || new Map();\n                    chatMap.set(id, message);\n                    this.newMessages.set(chat_id, chatMap);\n                    this.updateTimer();\n\n                    if (!isMessageMuted(message)) {\n                        const now = new Date();\n                        if (now > this.nextSoundAt) {\n                            // console.log('[ns] audio play');\n                            const audio = new Audio('sound_a.mp3');\n                            audio.play();\n\n                            const nextSoundAt = new Date();\n                            nextSoundAt.setMilliseconds(nextSoundAt.getMilliseconds() + NOTIFICATION_AUDIO_DELAY_MS);\n                            this.nextSoundAt = nextSoundAt;\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'updateScopeNotificationSettings': {\n                const { scope, notification_settings } = update;\n\n                this.settings.set(scope['@type'], notification_settings);\n\n                const { windowFocused } = this;\n                if (!windowFocused) {\n                    this.updateTimer();\n                }\n\n                this.emit('updateScopeNotificationSettings', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateFocusWindow': {\n                const { focused } = update;\n                // console.log('[ns] clientUpdateFocusWindow', update);\n\n                this.windowFocused = focused;\n                if (focused) {\n                    this.newMessages = new Map();\n                    this.updateTimer();\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n}\n\nconst store = new NotificationStore();\nwindow.notifications = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}