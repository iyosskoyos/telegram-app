{"ast":null,"code":"import _defineProperty from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport TdLibController from '../Controllers/TdLibController';\nimport ChatStore from '../Stores/ChatStore';\nimport { isChatMuted } from '../Utils/Chat';\nimport { MUTED_VALUE_MAX, MUTED_VALUE_MIN } from '../Constants';\nexport function toggleChatIsPinned(chatId, isPinned) {\n  TdLibController.send({\n    '@type': 'toggleChatIsPinned',\n    chat_id: chatId,\n    is_pinned: isPinned\n  });\n}\nexport function toggleChatIsMarkedAsUnread(chatId, isMarkedAsUnread) {\n  TdLibController.send({\n    '@type': 'toggleChatIsMarkedAsUnread',\n    chat_id: chatId,\n    is_marked_as_unread: isMarkedAsUnread\n  });\n}\nexport function toggleChatNotificationSettings(chatId, isMuted) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return;\n  const notification_settings = chat.notification_settings;\n  if (!notification_settings) return;\n  const isMutedPrev = isChatMuted(chatId);\n\n  if (isMutedPrev === isMuted) {\n    return;\n  }\n\n  const muteFor = isMuted ? MUTED_VALUE_MAX : MUTED_VALUE_MIN;\n\n  const newNotificationSettings = _objectSpread({}, chat.notification_settings, {\n    use_default_mute_for: false,\n    mute_for: muteFor\n  });\n\n  TdLibController.send({\n    '@type': 'setChatNotificationSettings',\n    chat_id: chatId,\n    notification_settings: newNotificationSettings\n  });\n}\nexport async function getChatCounters(chatId) {\n  const chat = ChatStore.get(chatId);\n  if (!chat) return;\n  const promises = [];\n  const photoCounter = TdLibController.send({\n    '@type': 'getChatMessageCount',\n    chat_id: chatId,\n    filter: {\n      '@type': 'searchMessagesFilterPhoto'\n    },\n    return_local: false\n  }).then(result => {\n    return result ? result.count : 0;\n  }).catch(() => {\n    return 0;\n  });\n  promises.push(photoCounter);\n  const videoCounter = TdLibController.send({\n    '@type': 'getChatMessageCount',\n    chat_id: chatId,\n    filter: {\n      '@type': 'searchMessagesFilterVideo'\n    },\n    return_local: false\n  }).then(result => {\n    return result ? result.count : 0;\n  }).catch(() => {\n    return 0;\n  });\n  promises.push(videoCounter);\n  const documentCounter = TdLibController.send({\n    '@type': 'getChatMessageCount',\n    chat_id: chatId,\n    filter: {\n      '@type': 'searchMessagesFilterDocument'\n    },\n    return_local: false\n  }).then(result => {\n    return result ? result.count : 0;\n  }).catch(() => {\n    return 0;\n  });\n  promises.push(documentCounter);\n  const audioCounter = TdLibController.send({\n    '@type': 'getChatMessageCount',\n    chat_id: chatId,\n    filter: {\n      '@type': 'searchMessagesFilterAudio'\n    },\n    return_local: false\n  }).then(result => {\n    return result ? result.count : 0;\n  }).catch(() => {\n    return 0;\n  });\n  promises.push(audioCounter);\n  const urlCounter = TdLibController.send({\n    '@type': 'getChatMessageCount',\n    chat_id: chatId,\n    filter: {\n      '@type': 'searchMessagesFilterUrl'\n    },\n    return_local: false\n  }).then(result => {\n    return result ? result.count : 0;\n  }).catch(() => {\n    return 0;\n  });\n  promises.push(urlCounter);\n  const voiceAndVideoNoteCounter = TdLibController.send({\n    '@type': 'getChatMessageCount',\n    chat_id: chatId,\n    filter: {\n      '@type': 'searchMessagesFilterVoiceNote'\n    },\n    return_local: false\n  }).then(result => {\n    return result ? result.count : 0;\n  }).catch(() => {\n    return 0;\n  });\n  promises.push(voiceAndVideoNoteCounter);\n  return await Promise.all(promises);\n}","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Actions/Chat.js"],"names":["TdLibController","ChatStore","isChatMuted","MUTED_VALUE_MAX","MUTED_VALUE_MIN","toggleChatIsPinned","chatId","isPinned","send","chat_id","is_pinned","toggleChatIsMarkedAsUnread","isMarkedAsUnread","is_marked_as_unread","toggleChatNotificationSettings","isMuted","chat","get","notification_settings","isMutedPrev","muteFor","newNotificationSettings","use_default_mute_for","mute_for","getChatCounters","promises","photoCounter","filter","return_local","then","result","count","catch","push","videoCounter","documentCounter","audioCounter","urlCounter","voiceAndVideoNoteCounter","Promise","all"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport TdLibController from '../Controllers/TdLibController';\nimport ChatStore from '../Stores/ChatStore';\nimport { isChatMuted } from '../Utils/Chat';\nimport { MUTED_VALUE_MAX, MUTED_VALUE_MIN } from '../Constants';\n\nexport function toggleChatIsPinned(chatId, isPinned) {\n    TdLibController.send({\n        '@type': 'toggleChatIsPinned',\n        chat_id: chatId,\n        is_pinned: isPinned\n    });\n}\n\nexport function toggleChatIsMarkedAsUnread(chatId, isMarkedAsUnread) {\n    TdLibController.send({\n        '@type': 'toggleChatIsMarkedAsUnread',\n        chat_id: chatId,\n        is_marked_as_unread: isMarkedAsUnread\n    });\n}\n\nexport function toggleChatNotificationSettings(chatId, isMuted) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return;\n\n    const { notification_settings } = chat;\n    if (!notification_settings) return;\n\n    const isMutedPrev = isChatMuted(chatId);\n    if (isMutedPrev === isMuted) {\n        return;\n    }\n\n    const muteFor = isMuted ? MUTED_VALUE_MAX : MUTED_VALUE_MIN;\n    const newNotificationSettings = {\n        ...chat.notification_settings,\n        use_default_mute_for: false,\n        mute_for: muteFor\n    };\n\n    TdLibController.send({\n        '@type': 'setChatNotificationSettings',\n        chat_id: chatId,\n        notification_settings: newNotificationSettings\n    });\n}\n\nexport async function getChatCounters(chatId) {\n    const chat = ChatStore.get(chatId);\n    if (!chat) return;\n\n    const promises = [];\n\n    const photoCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterPhoto' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(photoCounter);\n\n    const videoCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterVideo' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(videoCounter);\n\n    const documentCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterDocument' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(documentCounter);\n\n    const audioCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterAudio' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(audioCounter);\n\n    const urlCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterUrl' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(urlCounter);\n\n    const voiceAndVideoNoteCounter = TdLibController.send({\n        '@type': 'getChatMessageCount',\n        chat_id: chatId,\n        filter: { '@type': 'searchMessagesFilterVoiceNote' },\n        return_local: false\n    })\n        .then(result => {\n            return result ? result.count : 0;\n        })\n        .catch(() => {\n            return 0;\n        });\n    promises.push(voiceAndVideoNoteCounter);\n\n    return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}