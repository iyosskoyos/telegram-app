{"ast":null,"code":"import _slicedToArray from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Viewer/MediaViewer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport InvertColorsIcon from '@material-ui/icons/InvertColors';\nimport SlowMotionVideoIcon from '@material-ui/icons/SlowMotionVideo';\nimport MediaViewerControl from '../Tile/MediaViewerControl';\nimport MediaViewerContent from './MediaViewerContent';\nimport MediaViewerButton from './MediaViewerButton';\nimport MediaViewerFooterText from './MediaViewerFooterText';\nimport MediaViewerFooterButton from './MediaViewerFooterButton';\nimport MediaViewerDownloadButton from './MediaViewerDownloadButton';\nimport { setMediaViewerContent } from '../../Actions/Client';\nimport { getSize } from '../../Utils/Common';\nimport { cancelPreloadMediaViewerContent, getMediaFile, loadMediaViewerContent, preloadMediaViewerContent, saveMedia } from '../../Utils/File';\nimport { filterDuplicateMessages, isAnimationMessage, isLottieMessage, isMediaContent, isVideoMessage } from '../../Utils/Message';\nimport { between } from '../../Utils/Common';\nimport { PHOTO_BIG_SIZE, MEDIA_SLICE_LIMIT } from '../../Constants';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MediaViewer.css';\nconst forwardIconStyle = {\n  padding: 20,\n  transform: 'scaleX(-1)'\n};\nconst iconStyle = {\n  padding: 20\n};\n\nclass MediaViewer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onKeyDown = event => {\n      if (event.keyCode === 27) {\n        const deleteConfirmationOpened = this.state.deleteConfirmationOpened;\n        if (deleteConfirmationOpened) return;\n        this.handleClose();\n      } else if (event.keyCode === 39) {\n        this.handleNext();\n      } else if (event.keyCode === 37) {\n        this.handlePrevious();\n      }\n    };\n\n    this.onUpdateMessageContent = update => {\n      const chat_id = update.chat_id,\n            message_id = update.message_id,\n            new_content = update.new_content,\n            old_content = update.old_content;\n      const chatId = this.props.chatId;\n      const _this$state = this.state,\n            currentMessageId = _this$state.currentMessageId,\n            totalCount = _this$state.totalCount;\n      if (chatId !== chat_id) return;\n      const message = MessageStore.get(chat_id, message_id);\n      if (!message) return;\n      loadMediaViewerContent([message]);\n      const addMessage = isMediaContent(new_content) && !isMediaContent(old_content);\n\n      if (addMessage) {\n        if (this.history.length >= 2 && (this.firstSliceLoaded || between(message_id, this.history[0].id, this.history[this.history.length - 1].id))) {\n          let inserted = false;\n          let history = [];\n\n          for (let i = 0; i < this.history.length; i++) {\n            if (this.history[i].id > message_id) {\n              history.push(this.history[i]);\n            } else {\n              if (!inserted) {\n                inserted = true;\n                history.push(message);\n              }\n\n              history.push(this.history[i]);\n            }\n          }\n\n          this.history = history;\n        }\n\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n        this.setState({\n          hasNextMedia: this.hasNextMedia(index),\n          hasPreviousMedia: this.hasPreviousMedia(index),\n          totalCount: totalCount + 1\n        });\n      }\n\n      const removeMessage = !isMediaContent(new_content) && isMediaContent(old_content);\n\n      if (removeMessage) {\n        let oldHistory = this.history;\n        this.history = this.history.filter(x => x.id !== message_id);\n\n        if (currentMessageId === message_id) {\n          const filterMap = new Map();\n          filterMap.set(message_id, message_id);\n          this.moveToNextMedia(oldHistory, filterMap);\n          this.setState({\n            totalCount: Math.max(totalCount - 1, 0)\n          });\n        } else {\n          const index = this.history.findIndex(x => x.id === currentMessageId);\n          this.setState({\n            hasNextMedia: this.hasNextMedia(index),\n            hasPreviousMedia: this.hasPreviousMedia(index),\n            totalCount: Math.max(totalCount - 1, 0)\n          });\n        }\n      }\n    };\n\n    this.onUpdateDeleteMessages = update => {\n      const chat_id = update.chat_id,\n            message_ids = update.message_ids,\n            is_permanent = update.is_permanent;\n      const chatId = this.props.chatId;\n      const _this$state2 = this.state,\n            currentMessageId = _this$state2.currentMessageId,\n            totalCount = _this$state2.totalCount;\n      if (!is_permanent) return;\n      if (chatId !== chat_id) return;\n      const filterMap = message_ids.reduce((accumulator, currentId) => {\n        accumulator.set(currentId, currentId);\n        return accumulator;\n      }, new Map());\n      const oldHistory = this.history;\n      let deletedCount = oldHistory.length;\n      this.history = this.history.filter(x => !filterMap.has(x.id));\n      deletedCount -= this.history.length;\n      this.setState({\n        totalCount: Math.max(totalCount - deletedCount, 0)\n      });\n\n      if (!this.history.length) {\n        setMediaViewerContent(null);\n        return;\n      }\n\n      if (filterMap.has(currentMessageId)) {\n        this.moveToNextMedia(oldHistory, filterMap);\n      }\n    };\n\n    this.onUpdateNewMessage = update => {\n      const chatId = this.props.chatId;\n      const _this$state3 = this.state,\n            currentMessageId = _this$state3.currentMessageId,\n            totalCount = _this$state3.totalCount;\n      const message = update.message;\n      if (!message) return;\n      if (!isMediaContent(message.content)) return;\n      if (message.chat_id !== chatId) return;\n      if (!this.firstSliceLoaded) return;\n      this.history = [message].concat(this.history);\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n      this.setState({\n        hasNextMedia: this.hasNextMedia(index),\n        hasPreviousMedia: this.hasPreviousMedia(index),\n        totalCount: totalCount + 1\n      });\n    };\n\n    this.getFilter = (chatId, messageId) => {\n      const message = MessageStore.get(chatId, messageId);\n      if (!message) return null;\n      const content = message.content;\n      if (!content) return null;\n\n      switch (content['@type']) {\n        case 'messageChatChangePhoto':\n          {\n            return {\n              '@type': 'searchMessagesFilterChatPhoto'\n            };\n          }\n\n        case 'messagePhoto':\n          {\n            return {\n              '@type': 'searchMessagesFilterPhotoAndVideo'\n            };\n          }\n\n        case 'messageVideo':\n          {\n            return {\n              '@type': 'searchMessagesFilterPhotoAndVideo'\n            };\n          }\n\n        default:\n          {\n            return null;\n          }\n      }\n    };\n\n    this.loadHistory = async () => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const filter = this.getFilter(chatId, messageId);\n      let result = {\n        '@type': 'messages',\n        messages: [],\n        total_count: 0\n      };\n\n      if (filter) {\n        result = await TdLibController.send({\n          '@type': 'searchChatMessages',\n          chat_id: chatId,\n          query: '',\n          sender_user_id: 0,\n          from_message_id: messageId,\n          offset: -MEDIA_SLICE_LIMIT,\n          limit: 2 * MEDIA_SLICE_LIMIT,\n          filter: filter\n        });\n      }\n\n      filterDuplicateMessages(result, this.history);\n      MessageStore.setItems(result.messages);\n      this.history = result.messages;\n      this.firstSliceLoaded = result.messages.length === 0;\n      const currentMessageId = this.state.currentMessageId;\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n      this.setState({\n        hasNextMedia: this.hasNextMedia(index),\n        hasPreviousMedia: this.hasPreviousMedia(index)\n      });\n\n      if (index === -1) {\n        this.history = [MessageStore.get(chatId, currentMessageId)];\n        preloadMediaViewerContent(0, this.history);\n      } else {\n        preloadMediaViewerContent(index, this.history);\n        const filter = this.getFilter(chatId, messageId);\n        if (!filter) return;\n        const maxCount = 1500;\n        let count = 0;\n\n        while (!this.firstSliceLoaded && count < maxCount) {\n          const result = await TdLibController.send({\n            '@type': 'searchChatMessages',\n            chat_id: chatId,\n            query: '',\n            sender_user_id: 0,\n            from_message_id: this.history.length > 0 ? this.history[0].id : 0,\n            offset: -99,\n            limit: 99 + 1,\n            filter: filter\n          });\n          count += result.messages.length;\n          filterDuplicateMessages(result, this.history);\n          MessageStore.setItems(result.messages);\n          this.history = result.messages.concat(this.history);\n          this.firstSliceLoaded = result.messages.length === 0;\n          const currentMessageId = this.state.currentMessageId;\n          const index = this.history.findIndex(x => x.id === currentMessageId);\n          this.setState({\n            hasNextMedia: this.hasNextMedia(index),\n            hasPreviousMedia: this.hasPreviousMedia(index),\n            firstSliceLoaded: this.firstSliceLoaded,\n            totalCount: result.total_count\n          });\n        }\n      }\n    };\n\n    this.handleClose = () => {\n      setMediaViewerContent(null);\n      const currentMessageId = this.state.currentMessageId;\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n\n      if (index !== -1) {\n        cancelPreloadMediaViewerContent(index, this.history);\n      }\n    };\n\n    this.handleSave = () => {\n      const chatId = this.props.chatId;\n      const currentMessageId = this.state.currentMessageId;\n      const message = MessageStore.get(chatId, currentMessageId);\n      if (!message) return;\n      const content = message.content;\n      if (!content) return;\n      let media = null;\n\n      switch (content['@type']) {\n        case 'messageAnimation':\n          {\n            const animation = content.animation;\n            media = animation;\n            break;\n          }\n\n        case 'messageChatChangePhoto':\n          {\n            const photo = content.photo;\n            media = photo;\n            break;\n          }\n\n        case 'messageDocument':\n          {\n            const document = content.document;\n            media = document;\n            break;\n          }\n\n        case 'messagePhoto':\n          {\n            const photo = content.photo;\n            media = photo;\n            break;\n          }\n\n        case 'messageText':\n          {\n            const web_page = content.web_page;\n            if (!web_page) return;\n            const animation = web_page.animation,\n                  document = web_page.document,\n                  photo = web_page.photo,\n                  video = web_page.video;\n\n            if (animation) {\n              media = animation;\n              break;\n            }\n\n            if (document) {\n              media = document;\n              break;\n            }\n\n            if (photo) {\n              media = photo;\n              break;\n            }\n\n            if (video) {\n              media = video;\n              break;\n            }\n\n            break;\n          }\n\n        case 'messageVideo':\n          {\n            const video = content.video;\n            media = video;\n            break;\n          }\n      }\n\n      saveMedia(media, message);\n    };\n\n    this.handleForward = () => {\n      const chatId = this.props.chatId;\n      const currentMessageId = this.state.currentMessageId;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateForward',\n        info: {\n          chatId: chatId,\n          messageIds: [currentMessageId]\n        }\n      });\n    };\n\n    this.handleDelete = () => {\n      this.handleDialogOpen();\n    };\n\n    this.hasPreviousMedia = index => {\n      if (index === -1) return false;\n      const nextIndex = index + 1;\n      return nextIndex < this.history.length;\n    };\n\n    this.handlePrevious = event => {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      const currentMessageId = this.state.currentMessageId;\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n      const nextIndex = index + 1;\n      return this.loadMedia(nextIndex, () => {\n        if (nextIndex === this.history.length - 1) {\n          this.loadPrevious();\n        }\n      });\n    };\n\n    this.loadPrevious = async () => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n      const currentMessageId = this.state.currentMessageId;\n      const filter = this.getFilter(chatId, messageId);\n      let result = {\n        '@type': 'messages',\n        messages: [],\n        total_count: 0\n      };\n\n      if (filter) {\n        result = await TdLibController.send({\n          '@type': 'searchChatMessages',\n          chat_id: chatId,\n          query: '',\n          sender_user_id: 0,\n          from_message_id: currentMessageId,\n          offset: 0,\n          limit: MEDIA_SLICE_LIMIT,\n          filter: filter\n        });\n      }\n\n      filterDuplicateMessages(result, this.history);\n      MessageStore.setItems(result.messages);\n      this.history = this.history.concat(result.messages);\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n      this.setState({\n        hasNextMedia: this.hasNextMedia(index),\n        hasPreviousMedia: this.hasPreviousMedia(index),\n        totalCount: result.total_count\n      });\n    };\n\n    this.hasNextMedia = index => {\n      if (index === -1) return false;\n      const nextIndex = index - 1;\n      return nextIndex >= 0;\n    };\n\n    this.handleNext = event => {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      const currentMessageId = this.state.currentMessageId;\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n      const nextIndex = index - 1;\n      return this.loadMedia(nextIndex, () => {\n        if (nextIndex === 0) {\n          this.loadNext();\n        }\n      });\n    };\n\n    this.loadNext = async () => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n      const currentMessageId = this.state.currentMessageId;\n      const filter = this.getFilter(chatId, messageId);\n      let result = {\n        '@type': 'messages',\n        messages: [],\n        total_count: 0\n      };\n\n      if (filter) {\n        result = await TdLibController.send({\n          '@type': 'searchChatMessages',\n          chat_id: chatId,\n          query: '',\n          sender_user_id: 0,\n          from_message_id: currentMessageId,\n          offset: -MEDIA_SLICE_LIMIT,\n          limit: MEDIA_SLICE_LIMIT + 1,\n          filter: filter\n        });\n      }\n\n      filterDuplicateMessages(result, this.history);\n      MessageStore.setItems(result.messages);\n      this.firstSliceLoaded = result.messages.length === 0;\n      this.history = result.messages.concat(this.history);\n      const index = this.history.findIndex(x => x.id === currentMessageId);\n      this.setState({\n        hasNextMedia: this.hasNextMedia(index),\n        hasPreviousMedia: this.hasPreviousMedia(index),\n        firstSliceLoaded: this.firstSliceLoaded,\n        totalCount: result.total_count\n      });\n    };\n\n    this.loadMedia = (index, callback) => {\n      if (index < 0) return false;\n      if (index >= this.history.length) return false;\n      this.setState({\n        currentMessageId: this.history[index].id,\n        hasNextMedia: this.hasNextMedia(index),\n        hasPreviousMedia: this.hasPreviousMedia(index)\n      }, callback);\n      preloadMediaViewerContent(index, this.history);\n      return true;\n    };\n\n    this.moveToNextMedia = (oldHistory, filterMap) => {\n      const currentMessageId = this.state.currentMessageId;\n      const index = oldHistory.findIndex(x => x.id === currentMessageId);\n      let nextId = 0;\n\n      for (let i = index - 1; i >= 0; i--) {\n        if (filterMap && !filterMap.has(oldHistory[i].id)) {\n          nextId = oldHistory[i].id;\n          break;\n        }\n      }\n\n      if (!nextId) {\n        for (let i = index + 1; i < oldHistory.length; i++) {\n          if (filterMap && !filterMap.has(oldHistory[i].id)) {\n            nextId = oldHistory[i].id;\n            break;\n          }\n        }\n      }\n\n      if (!nextId) return;\n      const nextIndex = this.history.findIndex(x => x.id === nextId);\n      return this.loadMedia(nextIndex, () => {\n        if (nextIndex === 0) {\n          this.loadNext();\n        } else if (nextIndex === this.history.length - 1) {\n          this.loadPrevious();\n        }\n      });\n    };\n\n    this.handleDialogOpen = () => {\n      this.setState({\n        deleteConfirmationOpened: true\n      });\n    };\n\n    this.handleDialogClose = () => {\n      this.setState({\n        deleteConfirmationOpened: false\n      });\n    };\n\n    this.handleDone = () => {\n      this.setState({\n        deleteConfirmationOpened: false\n      });\n      const chatId = this.props.chatId;\n      const _this$state4 = this.state,\n            currentMessageId = _this$state4.currentMessageId,\n            deleteForAll = _this$state4.deleteForAll;\n      const message = MessageStore.get(chatId, currentMessageId);\n      if (!message) return;\n      const can_be_deleted_only_for_self = message.can_be_deleted_only_for_self,\n            can_be_deleted_for_all_users = message.can_be_deleted_for_all_users;\n      const canBeDeleted = can_be_deleted_only_for_self || can_be_deleted_for_all_users;\n      if (!canBeDeleted) return;\n      TdLibController.send({\n        '@type': 'deleteMessages',\n        chat_id: chatId,\n        message_ids: [currentMessageId],\n        revoke: can_be_deleted_for_all_users && deleteForAll\n      });\n    };\n\n    this.handleChangeDeleteForAll = event => {\n      this.setState({\n        deleteForAll: event.target.checked\n      });\n    };\n\n    this.handleInvertColors = () => {\n      const background = this.state.background;\n      let nextBackground = 'media-viewer-default';\n\n      switch (background) {\n        case 'media-viewer-default':\n          {\n            nextBackground = 'media-viewer-dark';\n            break;\n          }\n\n        case 'media-viewer-dark':\n          {\n            nextBackground = 'media-viewer-light';\n            break;\n          }\n\n        case 'media-viewer-light':\n          {\n            nextBackground = 'media-viewer-default';\n            break;\n          }\n      }\n\n      this.setState({\n        background: nextBackground\n      });\n    };\n\n    this.handleChangeSpeed = () => {\n      if (!this.contentRef) return;\n      const current = this.contentRef.current;\n      if (!current) return;\n      const speed = this.state.speed;\n      const nextSpeed = speed < 1 ? 1 : 0.1;\n      this.setState({\n        speed: nextSpeed\n      });\n      current.changeSpeed(nextSpeed);\n    };\n\n    this.canBeForwarded = (chatId, messageId) => {\n      const message = MessageStore.get(chatId, messageId);\n      if (!message) return false;\n      const can_be_forwarded = message.can_be_forwarded,\n            content = message.content;\n      if (!content) return false;\n\n      switch (content['@type']) {\n        case 'messageChatChangePhoto':\n          {\n            return true;\n          }\n\n        default:\n          {\n            return can_be_forwarded;\n          }\n      }\n    };\n\n    this.contentRef = React.createRef();\n    this.history = [];\n    const _this$props4 = this.props,\n          _chatId = _this$props4.chatId,\n          _messageId = _this$props4.messageId;\n    this.state = {\n      speed: 1,\n      background: 'media-viewer-default',\n      prevChatId: _chatId,\n      prevMessageId: _messageId,\n      currentMessageId: _messageId,\n      hasNextMedia: false,\n      hasPreviousMedia: false,\n      deleteConfirmationOpened: false,\n      deleteForAll: true\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props5 = this.props,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId;\n    const _this$state5 = this.state,\n          background = _this$state5.background,\n          currentMessageId = _this$state5.currentMessageId,\n          deleteConfirmationOpened = _this$state5.deleteConfirmationOpened,\n          firstSliceLoaded = _this$state5.firstSliceLoaded,\n          hasNextMedia = _this$state5.hasNextMedia,\n          hasPreviousMedia = _this$state5.hasPreviousMedia,\n          speed = _this$state5.speed,\n          totalCount = _this$state5.totalCount;\n\n    if (nextState.background !== background) {\n      return true;\n    }\n\n    if (nextProps.chatId !== chatId) {\n      return true;\n    }\n\n    if (nextProps.messageId !== messageId) {\n      return true;\n    }\n\n    if (nextState.currentMessageId !== currentMessageId) {\n      return true;\n    }\n\n    if (nextState.hasPrevousMedia !== hasPreviousMedia) {\n      return true;\n    }\n\n    if (nextState.hasNextMedia !== hasNextMedia) {\n      return true;\n    }\n\n    if (nextState.firstSliceLoaded !== firstSliceLoaded) {\n      return true;\n    }\n\n    if (nextState.totalCount !== totalCount) {\n      return true;\n    }\n\n    if (nextState.deleteConfirmationOpened !== deleteConfirmationOpened) {\n      return true;\n    }\n\n    if (nextState.speed !== speed) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    this.loadHistory();\n    document.addEventListener('keydown', this.onKeyDown, false);\n    MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n    MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n    MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown, false);\n    MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n    MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n    MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n  }\n\n  render() {\n    const _this$props6 = this.props,\n          chatId = _this$props6.chatId,\n          t = _this$props6.t;\n    const _this$state6 = this.state,\n          background = _this$state6.background,\n          currentMessageId = _this$state6.currentMessageId,\n          deleteConfirmationOpened = _this$state6.deleteConfirmationOpened,\n          deleteForAll = _this$state6.deleteForAll,\n          firstSliceLoaded = _this$state6.firstSliceLoaded,\n          hasNextMedia = _this$state6.hasNextMedia,\n          hasPreviousMedia = _this$state6.hasPreviousMedia,\n          speed = _this$state6.speed,\n          totalCount = _this$state6.totalCount;\n    let index = -1;\n\n    if (totalCount && firstSliceLoaded) {\n      index = this.history.findIndex(x => x.id === currentMessageId);\n    }\n\n    const maxCount = Math.max(this.history.length, totalCount);\n    const message = MessageStore.get(chatId, currentMessageId);\n    const can_be_deleted_for_all_users = message.can_be_deleted_for_all_users,\n          can_be_deleted_only_for_self = message.can_be_deleted_only_for_self;\n    const canBeDeleted = can_be_deleted_for_all_users || can_be_deleted_only_for_self;\n    const canBeForwarded = this.canBeForwarded(chatId, currentMessageId);\n    let deleteConfirmationContent = '';\n\n    if (isVideoMessage(chatId, currentMessageId)) {\n      deleteConfirmationContent = t('AreYouSureDeleteVideo');\n    } else if (isAnimationMessage(chatId, currentMessageId)) {\n      deleteConfirmationContent = t('AreYouSureDeleteGIF');\n    } else {\n      deleteConfirmationContent = t('AreYouSureDeletePhoto');\n    }\n\n    const deleteConfirmation = deleteConfirmationOpened ? React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: deleteConfirmationOpened,\n      onClose: this.handleDialogClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, t('AppName')), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, deleteConfirmationContent), can_be_deleted_for_all_users && React.createElement(FormControlLabel, {\n      label: t('DeleteForAll'),\n      control: React.createElement(Checkbox, {\n        color: \"primary\",\n        value: \"deleteAll\",\n        onChange: this.handleChangeDeleteForAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809\n        },\n        __self: this\n      }),\n      checked: deleteForAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleDialogClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, t('Cancel')), React.createElement(Button, {\n      onClick: this.handleDone,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, t('Ok')))) : null;\n\n    const _getMediaFile = getMediaFile(chatId, currentMessageId, PHOTO_BIG_SIZE),\n          _getMediaFile2 = _slicedToArray(_getMediaFile, 3),\n          width = _getMediaFile2[0],\n          height = _getMediaFile2[1],\n          file = _getMediaFile2[2];\n\n    const fileId = file ? file.id : 0;\n    let title = t('AttachPhoto');\n\n    if (isVideoMessage(chatId, currentMessageId)) {\n      title = t('AttachVideo');\n    } else if (isAnimationMessage(chatId, currentMessageId)) {\n      title = t('AttachGif');\n    } else if (isLottieMessage(chatId, currentMessageId)) {\n      title = '';\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames('media-viewer', background),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, deleteConfirmation, React.createElement(\"div\", {\n      className: \"media-viewer-wrapper\",\n      onClick: this.handlePrevious,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"media-viewer-left-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"media-viewer-button-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }), React.createElement(MediaViewerButton, {\n      disabled: !hasPreviousMedia,\n      grow: true,\n      onClick: this.handlePrevious,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, React.createElement(NavigateBeforeIcon, {\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"media-viewer-content-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849\n      },\n      __self: this\n    }, React.createElement(MediaViewerContent, {\n      ref: this.contentRef,\n      chatId: chatId,\n      messageId: currentMessageId,\n      size: PHOTO_BIG_SIZE,\n      onClick: this.handlePrevious,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"media-viewer-right-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(MediaViewerButton, {\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861\n      },\n      __self: this\n    })), React.createElement(MediaViewerButton, {\n      disabled: !hasNextMedia,\n      grow: true,\n      onClick: this.handleNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    }, React.createElement(NavigateNextIcon, {\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"media-viewer-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, React.createElement(MediaViewerControl, {\n      chatId: chatId,\n      messageId: currentMessageId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }), React.createElement(MediaViewerFooterText, {\n      title: title,\n      subtitle: maxCount && index >= 0 ? \"\".concat(maxCount - index, \" of \").concat(maxCount) : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }), isLottieMessage(chatId, currentMessageId) && React.createElement(React.Fragment, null, React.createElement(MediaViewerFooterButton, {\n      title: t('ChangeSpeed'),\n      checked: speed < 1,\n      onClick: this.handleChangeSpeed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, React.createElement(SlowMotionVideoIcon, {\n      style: iconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    })), React.createElement(MediaViewerFooterButton, {\n      title: t('InvertBackgroundColor'),\n      onClick: this.handleInvertColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, React.createElement(InvertColorsIcon, {\n      style: iconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }))), React.createElement(MediaViewerDownloadButton, {\n      title: t('Save'),\n      fileId: fileId,\n      onClick: this.handleSave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }), React.createElement(MediaViewerFooterButton, {\n      title: t('Forward'),\n      disabled: !canBeForwarded,\n      onClick: this.handleForward,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, React.createElement(ReplyIcon, {\n      style: forwardIconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    })), React.createElement(MediaViewerFooterButton, {\n      title: t('Delete'),\n      disabled: !canBeDeleted,\n      onClick: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      style: iconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nMediaViewer.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired\n};\nexport default withTranslation()(MediaViewer);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Viewer/MediaViewer.js"],"names":["React","PropTypes","classNames","withTranslation","Button","Checkbox","CloseIcon","DeleteIcon","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControlLabel","NavigateNextIcon","NavigateBeforeIcon","ReplyIcon","InvertColorsIcon","SlowMotionVideoIcon","MediaViewerControl","MediaViewerContent","MediaViewerButton","MediaViewerFooterText","MediaViewerFooterButton","MediaViewerDownloadButton","setMediaViewerContent","getSize","cancelPreloadMediaViewerContent","getMediaFile","loadMediaViewerContent","preloadMediaViewerContent","saveMedia","filterDuplicateMessages","isAnimationMessage","isLottieMessage","isMediaContent","isVideoMessage","between","PHOTO_BIG_SIZE","MEDIA_SLICE_LIMIT","MessageStore","TdLibController","forwardIconStyle","padding","transform","iconStyle","MediaViewer","Component","constructor","props","onKeyDown","event","keyCode","deleteConfirmationOpened","state","handleClose","handleNext","handlePrevious","onUpdateMessageContent","update","chat_id","message_id","new_content","old_content","chatId","currentMessageId","totalCount","message","get","addMessage","history","length","firstSliceLoaded","id","inserted","i","push","index","findIndex","x","setState","hasNextMedia","hasPreviousMedia","removeMessage","oldHistory","filter","filterMap","Map","set","moveToNextMedia","Math","max","onUpdateDeleteMessages","message_ids","is_permanent","reduce","accumulator","currentId","deletedCount","has","onUpdateNewMessage","content","concat","getFilter","messageId","loadHistory","result","messages","total_count","send","query","sender_user_id","from_message_id","offset","limit","setItems","maxCount","count","handleSave","media","animation","photo","document","web_page","video","handleForward","clientUpdate","info","messageIds","handleDelete","handleDialogOpen","nextIndex","stopPropagation","loadMedia","loadPrevious","loadNext","callback","nextId","handleDialogClose","handleDone","deleteForAll","can_be_deleted_only_for_self","can_be_deleted_for_all_users","canBeDeleted","revoke","handleChangeDeleteForAll","target","checked","handleInvertColors","background","nextBackground","handleChangeSpeed","contentRef","current","speed","nextSpeed","changeSpeed","canBeForwarded","can_be_forwarded","createRef","prevChatId","prevMessageId","shouldComponentUpdate","nextProps","nextState","hasPrevousMedia","componentDidMount","addEventListener","on","componentWillUnmount","removeEventListener","removeListener","render","t","deleteConfirmationContent","deleteConfirmation","width","height","file","fileId","title","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport InvertColorsIcon from '@material-ui/icons/InvertColors';\nimport SlowMotionVideoIcon from '@material-ui/icons/SlowMotionVideo';\nimport MediaViewerControl from '../Tile/MediaViewerControl';\nimport MediaViewerContent from './MediaViewerContent';\nimport MediaViewerButton from './MediaViewerButton';\nimport MediaViewerFooterText from './MediaViewerFooterText';\nimport MediaViewerFooterButton from './MediaViewerFooterButton';\nimport MediaViewerDownloadButton from './MediaViewerDownloadButton';\nimport { setMediaViewerContent } from '../../Actions/Client';\nimport { getSize } from '../../Utils/Common';\nimport {\n    cancelPreloadMediaViewerContent,\n    getMediaFile,\n    loadMediaViewerContent,\n    preloadMediaViewerContent,\n    saveMedia\n} from '../../Utils/File';\nimport {\n    filterDuplicateMessages,\n    isAnimationMessage,\n    isLottieMessage,\n    isMediaContent,\n    isVideoMessage\n} from '../../Utils/Message';\nimport { between } from '../../Utils/Common';\nimport { PHOTO_BIG_SIZE, MEDIA_SLICE_LIMIT } from '../../Constants';\nimport MessageStore from '../../Stores/MessageStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MediaViewer.css';\n\nconst forwardIconStyle = {\n    padding: 20,\n    transform: 'scaleX(-1)'\n};\n\nconst iconStyle = {\n    padding: 20\n};\n\nclass MediaViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.contentRef = React.createRef();\n        this.history = [];\n\n        const { chatId, messageId } = this.props;\n\n        this.state = {\n            speed: 1,\n            background: 'media-viewer-default',\n            prevChatId: chatId,\n            prevMessageId: messageId,\n            currentMessageId: messageId,\n            hasNextMedia: false,\n            hasPreviousMedia: false,\n            deleteConfirmationOpened: false,\n            deleteForAll: true\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId } = this.props;\n        const {\n            background,\n            currentMessageId,\n            deleteConfirmationOpened,\n            firstSliceLoaded,\n            hasNextMedia,\n            hasPreviousMedia,\n            speed,\n            totalCount\n        } = this.state;\n\n        if (nextState.background !== background) {\n            return true;\n        }\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            return true;\n        }\n\n        if (nextState.currentMessageId !== currentMessageId) {\n            return true;\n        }\n\n        if (nextState.hasPrevousMedia !== hasPreviousMedia) {\n            return true;\n        }\n\n        if (nextState.hasNextMedia !== hasNextMedia) {\n            return true;\n        }\n\n        if (nextState.firstSliceLoaded !== firstSliceLoaded) {\n            return true;\n        }\n\n        if (nextState.totalCount !== totalCount) {\n            return true;\n        }\n\n        if (nextState.deleteConfirmationOpened !== deleteConfirmationOpened) {\n            return true;\n        }\n\n        if (nextState.speed !== speed) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        this.loadHistory();\n\n        document.addEventListener('keydown', this.onKeyDown, false);\n        MessageStore.on('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.on('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown, false);\n        MessageStore.removeListener('updateDeleteMessages', this.onUpdateDeleteMessages);\n        MessageStore.removeListener('updateNewMessage', this.onUpdateNewMessage);\n        MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n    }\n\n    onKeyDown = event => {\n        if (event.keyCode === 27) {\n            const { deleteConfirmationOpened } = this.state;\n            if (deleteConfirmationOpened) return;\n\n            this.handleClose();\n        } else if (event.keyCode === 39) {\n            this.handleNext();\n        } else if (event.keyCode === 37) {\n            this.handlePrevious();\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chat_id, message_id, new_content, old_content } = update;\n        const { chatId } = this.props;\n        const { currentMessageId, totalCount } = this.state;\n\n        if (chatId !== chat_id) return;\n\n        const message = MessageStore.get(chat_id, message_id);\n        if (!message) return;\n\n        loadMediaViewerContent([message]);\n\n        const addMessage = isMediaContent(new_content) && !isMediaContent(old_content);\n        if (addMessage) {\n            if (\n                this.history.length >= 2 &&\n                (this.firstSliceLoaded ||\n                    between(message_id, this.history[0].id, this.history[this.history.length - 1].id))\n            ) {\n                let inserted = false;\n                let history = [];\n                for (let i = 0; i < this.history.length; i++) {\n                    if (this.history[i].id > message_id) {\n                        history.push(this.history[i]);\n                    } else {\n                        if (!inserted) {\n                            inserted = true;\n                            history.push(message);\n                        }\n                        history.push(this.history[i]);\n                    }\n                }\n                this.history = history;\n            }\n\n            const index = this.history.findIndex(x => x.id === currentMessageId);\n            this.setState({\n                hasNextMedia: this.hasNextMedia(index),\n                hasPreviousMedia: this.hasPreviousMedia(index),\n                totalCount: totalCount + 1\n            });\n        }\n\n        const removeMessage = !isMediaContent(new_content) && isMediaContent(old_content);\n        if (removeMessage) {\n            let oldHistory = this.history;\n            this.history = this.history.filter(x => x.id !== message_id);\n\n            if (currentMessageId === message_id) {\n                const filterMap = new Map();\n                filterMap.set(message_id, message_id);\n\n                this.moveToNextMedia(oldHistory, filterMap);\n                this.setState({\n                    totalCount: Math.max(totalCount - 1, 0)\n                });\n            } else {\n                const index = this.history.findIndex(x => x.id === currentMessageId);\n                this.setState({\n                    hasNextMedia: this.hasNextMedia(index),\n                    hasPreviousMedia: this.hasPreviousMedia(index),\n                    totalCount: Math.max(totalCount - 1, 0)\n                });\n            }\n        }\n    };\n\n    onUpdateDeleteMessages = update => {\n        const { chat_id, message_ids, is_permanent } = update;\n        const { chatId } = this.props;\n        const { currentMessageId, totalCount } = this.state;\n\n        if (!is_permanent) return;\n        if (chatId !== chat_id) return;\n\n        const filterMap = message_ids.reduce((accumulator, currentId) => {\n            accumulator.set(currentId, currentId);\n            return accumulator;\n        }, new Map());\n\n        const oldHistory = this.history;\n        let deletedCount = oldHistory.length;\n\n        this.history = this.history.filter(x => !filterMap.has(x.id));\n        deletedCount -= this.history.length;\n\n        this.setState({ totalCount: Math.max(totalCount - deletedCount, 0) });\n\n        if (!this.history.length) {\n            setMediaViewerContent(null);\n            return;\n        }\n\n        if (filterMap.has(currentMessageId)) {\n            this.moveToNextMedia(oldHistory, filterMap);\n        }\n    };\n\n    onUpdateNewMessage = update => {\n        const { chatId } = this.props;\n        const { currentMessageId, totalCount } = this.state;\n\n        const { message } = update;\n        if (!message) return;\n        if (!isMediaContent(message.content)) return;\n\n        if (message.chat_id !== chatId) return;\n        if (!this.firstSliceLoaded) return;\n\n        this.history = [message].concat(this.history);\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n\n        this.setState({\n            hasNextMedia: this.hasNextMedia(index),\n            hasPreviousMedia: this.hasPreviousMedia(index),\n            totalCount: totalCount + 1\n        });\n    };\n\n    getFilter = (chatId, messageId) => {\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const { content } = message;\n        if (!content) return null;\n\n        switch (content['@type']) {\n            case 'messageChatChangePhoto': {\n                return {\n                    '@type': 'searchMessagesFilterChatPhoto'\n                };\n            }\n            case 'messagePhoto': {\n                return {\n                    '@type': 'searchMessagesFilterPhotoAndVideo'\n                };\n            }\n            case 'messageVideo': {\n                return {\n                    '@type': 'searchMessagesFilterPhotoAndVideo'\n                };\n            }\n            default: {\n                return null;\n            }\n        }\n    };\n\n    loadHistory = async () => {\n        const { chatId, messageId } = this.props;\n\n        const filter = this.getFilter(chatId, messageId);\n\n        let result = {\n            '@type': 'messages',\n            messages: [],\n            total_count: 0\n        };\n        if (filter) {\n            result = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: '',\n                sender_user_id: 0,\n                from_message_id: messageId,\n                offset: -MEDIA_SLICE_LIMIT,\n                limit: 2 * MEDIA_SLICE_LIMIT,\n                filter: filter\n            });\n        }\n\n        filterDuplicateMessages(result, this.history);\n        MessageStore.setItems(result.messages);\n\n        this.history = result.messages;\n        this.firstSliceLoaded = result.messages.length === 0;\n\n        const { currentMessageId } = this.state;\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n\n        this.setState({\n            hasNextMedia: this.hasNextMedia(index),\n            hasPreviousMedia: this.hasPreviousMedia(index)\n        });\n\n        if (index === -1) {\n            this.history = [MessageStore.get(chatId, currentMessageId)];\n            preloadMediaViewerContent(0, this.history);\n        } else {\n            preloadMediaViewerContent(index, this.history);\n\n            const filter = this.getFilter(chatId, messageId);\n            if (!filter) return;\n\n            const maxCount = 1500;\n            let count = 0;\n            while (!this.firstSliceLoaded && count < maxCount) {\n                const result = await TdLibController.send({\n                    '@type': 'searchChatMessages',\n                    chat_id: chatId,\n                    query: '',\n                    sender_user_id: 0,\n                    from_message_id: this.history.length > 0 ? this.history[0].id : 0,\n                    offset: -99,\n                    limit: 99 + 1,\n                    filter: filter\n                });\n                count += result.messages.length;\n\n                filterDuplicateMessages(result, this.history);\n                MessageStore.setItems(result.messages);\n\n                this.history = result.messages.concat(this.history);\n                this.firstSliceLoaded = result.messages.length === 0;\n\n                const { currentMessageId } = this.state;\n                const index = this.history.findIndex(x => x.id === currentMessageId);\n\n                this.setState({\n                    hasNextMedia: this.hasNextMedia(index),\n                    hasPreviousMedia: this.hasPreviousMedia(index),\n                    firstSliceLoaded: this.firstSliceLoaded,\n                    totalCount: result.total_count\n                });\n            }\n        }\n    };\n\n    handleClose = () => {\n        setMediaViewerContent(null);\n\n        const { currentMessageId } = this.state;\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n        if (index !== -1) {\n            cancelPreloadMediaViewerContent(index, this.history);\n        }\n    };\n\n    handleSave = () => {\n        const { chatId } = this.props;\n        const { currentMessageId } = this.state;\n\n        const message = MessageStore.get(chatId, currentMessageId);\n        if (!message) return;\n\n        const { content } = message;\n        if (!content) return;\n\n        let media = null;\n        switch (content['@type']) {\n            case 'messageAnimation': {\n                const { animation } = content;\n\n                media = animation;\n                break;\n            }\n            case 'messageChatChangePhoto': {\n                const { photo } = content;\n\n                media = photo;\n                break;\n            }\n            case 'messageDocument': {\n                const { document } = content;\n\n                media = document;\n                break;\n            }\n            case 'messagePhoto': {\n                const { photo } = content;\n\n                media = photo;\n                break;\n            }\n            case 'messageText': {\n                const { web_page } = content;\n                if (!web_page) return;\n\n                const { animation, document, photo, video } = web_page;\n\n                if (animation) {\n                    media = animation;\n                    break;\n                }\n\n                if (document) {\n                    media = document;\n                    break;\n                }\n\n                if (photo) {\n                    media = photo;\n                    break;\n                }\n\n                if (video) {\n                    media = video;\n                    break;\n                }\n                break;\n            }\n            case 'messageVideo': {\n                const { video } = content;\n\n                media = video;\n                break;\n            }\n        }\n\n        saveMedia(media, message);\n    };\n\n    handleForward = () => {\n        const { chatId } = this.props;\n        const { currentMessageId } = this.state;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateForward',\n            info: {\n                chatId: chatId,\n                messageIds: [currentMessageId]\n            }\n        });\n    };\n\n    handleDelete = () => {\n        this.handleDialogOpen();\n    };\n\n    hasPreviousMedia = index => {\n        if (index === -1) return false;\n\n        const nextIndex = index + 1;\n        return nextIndex < this.history.length;\n    };\n\n    handlePrevious = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        const { currentMessageId } = this.state;\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n        const nextIndex = index + 1;\n\n        return this.loadMedia(nextIndex, () => {\n            if (nextIndex === this.history.length - 1) {\n                this.loadPrevious();\n            }\n        });\n    };\n\n    loadPrevious = async () => {\n        const { chatId, messageId } = this.props;\n        const { currentMessageId } = this.state;\n\n        const filter = this.getFilter(chatId, messageId);\n\n        let result = {\n            '@type': 'messages',\n            messages: [],\n            total_count: 0\n        };\n        if (filter) {\n            result = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: '',\n                sender_user_id: 0,\n                from_message_id: currentMessageId,\n                offset: 0,\n                limit: MEDIA_SLICE_LIMIT,\n                filter: filter\n            });\n        }\n\n        filterDuplicateMessages(result, this.history);\n        MessageStore.setItems(result.messages);\n\n        this.history = this.history.concat(result.messages);\n\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n\n        this.setState({\n            hasNextMedia: this.hasNextMedia(index),\n            hasPreviousMedia: this.hasPreviousMedia(index),\n            totalCount: result.total_count\n        });\n    };\n\n    hasNextMedia = index => {\n        if (index === -1) return false;\n\n        const nextIndex = index - 1;\n        return nextIndex >= 0;\n    };\n\n    handleNext = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        const { currentMessageId } = this.state;\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n        const nextIndex = index - 1;\n\n        return this.loadMedia(nextIndex, () => {\n            if (nextIndex === 0) {\n                this.loadNext();\n            }\n        });\n    };\n\n    loadNext = async () => {\n        const { chatId, messageId } = this.props;\n        const { currentMessageId } = this.state;\n\n        const filter = this.getFilter(chatId, messageId);\n\n        let result = {\n            '@type': 'messages',\n            messages: [],\n            total_count: 0\n        };\n        if (filter) {\n            result = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: '',\n                sender_user_id: 0,\n                from_message_id: currentMessageId,\n                offset: -MEDIA_SLICE_LIMIT,\n                limit: MEDIA_SLICE_LIMIT + 1,\n                filter: filter\n            });\n        }\n\n        filterDuplicateMessages(result, this.history);\n        MessageStore.setItems(result.messages);\n\n        this.firstSliceLoaded = result.messages.length === 0;\n        this.history = result.messages.concat(this.history);\n\n        const index = this.history.findIndex(x => x.id === currentMessageId);\n\n        this.setState({\n            hasNextMedia: this.hasNextMedia(index),\n            hasPreviousMedia: this.hasPreviousMedia(index),\n            firstSliceLoaded: this.firstSliceLoaded,\n            totalCount: result.total_count\n        });\n    };\n\n    loadMedia = (index, callback) => {\n        if (index < 0) return false;\n        if (index >= this.history.length) return false;\n\n        this.setState(\n            {\n                currentMessageId: this.history[index].id,\n                hasNextMedia: this.hasNextMedia(index),\n                hasPreviousMedia: this.hasPreviousMedia(index)\n            },\n            callback\n        );\n\n        preloadMediaViewerContent(index, this.history);\n        return true;\n    };\n\n    moveToNextMedia = (oldHistory, filterMap) => {\n        const { currentMessageId } = this.state;\n\n        const index = oldHistory.findIndex(x => x.id === currentMessageId);\n        let nextId = 0;\n        for (let i = index - 1; i >= 0; i--) {\n            if (filterMap && !filterMap.has(oldHistory[i].id)) {\n                nextId = oldHistory[i].id;\n                break;\n            }\n        }\n        if (!nextId) {\n            for (let i = index + 1; i < oldHistory.length; i++) {\n                if (filterMap && !filterMap.has(oldHistory[i].id)) {\n                    nextId = oldHistory[i].id;\n                    break;\n                }\n            }\n        }\n\n        if (!nextId) return;\n\n        const nextIndex = this.history.findIndex(x => x.id === nextId);\n\n        return this.loadMedia(nextIndex, () => {\n            if (nextIndex === 0) {\n                this.loadNext();\n            } else if (nextIndex === this.history.length - 1) {\n                this.loadPrevious();\n            }\n        });\n    };\n\n    handleDialogOpen = () => {\n        this.setState({ deleteConfirmationOpened: true });\n    };\n\n    handleDialogClose = () => {\n        this.setState({ deleteConfirmationOpened: false });\n    };\n\n    handleDone = () => {\n        this.setState({ deleteConfirmationOpened: false });\n\n        const { chatId } = this.props;\n        const { currentMessageId, deleteForAll } = this.state;\n\n        const message = MessageStore.get(chatId, currentMessageId);\n        if (!message) return;\n\n        const { can_be_deleted_only_for_self, can_be_deleted_for_all_users } = message;\n        const canBeDeleted = can_be_deleted_only_for_self || can_be_deleted_for_all_users;\n        if (!canBeDeleted) return;\n\n        TdLibController.send({\n            '@type': 'deleteMessages',\n            chat_id: chatId,\n            message_ids: [currentMessageId],\n            revoke: can_be_deleted_for_all_users && deleteForAll\n        });\n    };\n\n    handleChangeDeleteForAll = event => {\n        this.setState({ deleteForAll: event.target.checked });\n    };\n\n    handleInvertColors = () => {\n        const { background } = this.state;\n\n        let nextBackground = 'media-viewer-default';\n        switch (background) {\n            case 'media-viewer-default': {\n                nextBackground = 'media-viewer-dark';\n                break;\n            }\n            case 'media-viewer-dark': {\n                nextBackground = 'media-viewer-light';\n                break;\n            }\n            case 'media-viewer-light': {\n                nextBackground = 'media-viewer-default';\n                break;\n            }\n        }\n\n        this.setState({\n            background: nextBackground\n        });\n    };\n\n    handleChangeSpeed = () => {\n        if (!this.contentRef) return;\n\n        const { current } = this.contentRef;\n        if (!current) return;\n\n        const { speed } = this.state;\n        const nextSpeed = speed < 1 ? 1 : 0.1;\n\n        this.setState({ speed: nextSpeed });\n\n        current.changeSpeed(nextSpeed);\n    };\n\n    canBeForwarded = (chatId, messageId) => {\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return false;\n\n        const { can_be_forwarded, content } = message;\n        if (!content) return false;\n\n        switch (content['@type']) {\n            case 'messageChatChangePhoto': {\n                return true;\n            }\n            default: {\n                return can_be_forwarded;\n            }\n        }\n    };\n\n    render() {\n        const { chatId, t } = this.props;\n        const {\n            background,\n            currentMessageId,\n            deleteConfirmationOpened,\n            deleteForAll,\n            firstSliceLoaded,\n            hasNextMedia,\n            hasPreviousMedia,\n            speed,\n            totalCount\n        } = this.state;\n\n        let index = -1;\n        if (totalCount && firstSliceLoaded) {\n            index = this.history.findIndex(x => x.id === currentMessageId);\n        }\n        const maxCount = Math.max(this.history.length, totalCount);\n\n        const message = MessageStore.get(chatId, currentMessageId);\n        const { can_be_deleted_for_all_users, can_be_deleted_only_for_self } = message;\n\n        const canBeDeleted = can_be_deleted_for_all_users || can_be_deleted_only_for_self;\n        const canBeForwarded = this.canBeForwarded(chatId, currentMessageId);\n\n        let deleteConfirmationContent = '';\n        if (isVideoMessage(chatId, currentMessageId)) {\n            deleteConfirmationContent = t('AreYouSureDeleteVideo');\n        } else if (isAnimationMessage(chatId, currentMessageId)) {\n            deleteConfirmationContent = t('AreYouSureDeleteGIF');\n        } else {\n            deleteConfirmationContent = t('AreYouSureDeletePhoto');\n        }\n        const deleteConfirmation = deleteConfirmationOpened ? (\n            <Dialog\n                transitionDuration={0}\n                open={deleteConfirmationOpened}\n                onClose={this.handleDialogClose}\n                aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>{t('AppName')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{deleteConfirmationContent}</DialogContentText>\n                    {can_be_deleted_for_all_users && (\n                        <FormControlLabel\n                            label={t('DeleteForAll')}\n                            control={\n                                <Checkbox color='primary' value='deleteAll' onChange={this.handleChangeDeleteForAll} />\n                            }\n                            checked={deleteForAll}\n                        />\n                    )}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.handleDialogClose} color='primary'>\n                        {t('Cancel')}\n                    </Button>\n                    <Button onClick={this.handleDone} color='primary'>\n                        {t('Ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ) : null;\n\n        const [width, height, file] = getMediaFile(chatId, currentMessageId, PHOTO_BIG_SIZE);\n\n        const fileId = file ? file.id : 0;\n        let title = t('AttachPhoto');\n        if (isVideoMessage(chatId, currentMessageId)) {\n            title = t('AttachVideo');\n        } else if (isAnimationMessage(chatId, currentMessageId)) {\n            title = t('AttachGif');\n        } else if (isLottieMessage(chatId, currentMessageId)) {\n            title = '';\n        }\n\n        return (\n            <div className={classNames('media-viewer', background)}>\n                {deleteConfirmation}\n                <div className='media-viewer-wrapper' onClick={this.handlePrevious}>\n                    <div className='media-viewer-left-column'>\n                        <div className='media-viewer-button-placeholder' />\n                        <MediaViewerButton disabled={!hasPreviousMedia} grow onClick={this.handlePrevious}>\n                            <NavigateBeforeIcon fontSize='large' />\n                        </MediaViewerButton>\n                    </div>\n\n                    <div className='media-viewer-content-column'>\n                        <MediaViewerContent\n                            ref={this.contentRef}\n                            chatId={chatId}\n                            messageId={currentMessageId}\n                            size={PHOTO_BIG_SIZE}\n                            onClick={this.handlePrevious}\n                        />\n                    </div>\n\n                    <div className='media-viewer-right-column'>\n                        <MediaViewerButton onClick={this.handleClose}>\n                            <CloseIcon fontSize='large' />\n                        </MediaViewerButton>\n                        <MediaViewerButton disabled={!hasNextMedia} grow onClick={this.handleNext}>\n                            <NavigateNextIcon fontSize='large' />\n                        </MediaViewerButton>\n                    </div>\n                </div>\n                <div className='media-viewer-footer'>\n                    <MediaViewerControl chatId={chatId} messageId={currentMessageId} />\n                    <MediaViewerFooterText\n                        title={title}\n                        subtitle={maxCount && index >= 0 ? `${maxCount - index} of ${maxCount}` : null}\n                    />\n                    {isLottieMessage(chatId, currentMessageId) && (\n                        <>\n                            <MediaViewerFooterButton\n                                title={t('ChangeSpeed')}\n                                checked={speed < 1}\n                                onClick={this.handleChangeSpeed}>\n                                <SlowMotionVideoIcon style={iconStyle} />\n                            </MediaViewerFooterButton>\n                            <MediaViewerFooterButton\n                                title={t('InvertBackgroundColor')}\n                                onClick={this.handleInvertColors}>\n                                <InvertColorsIcon style={iconStyle} />\n                            </MediaViewerFooterButton>\n                        </>\n                    )}\n                    <MediaViewerDownloadButton title={t('Save')} fileId={fileId} onClick={this.handleSave} />\n                    <MediaViewerFooterButton\n                        title={t('Forward')}\n                        disabled={!canBeForwarded}\n                        onClick={this.handleForward}>\n                        <ReplyIcon style={forwardIconStyle} />\n                    </MediaViewerFooterButton>\n                    <MediaViewerFooterButton title={t('Delete')} disabled={!canBeDeleted} onClick={this.handleDelete}>\n                        <DeleteIcon style={iconStyle} />\n                    </MediaViewerFooterButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nMediaViewer.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired\n};\n\nexport default withTranslation()(MediaViewer);\n"]},"metadata":{},"sourceType":"module"}