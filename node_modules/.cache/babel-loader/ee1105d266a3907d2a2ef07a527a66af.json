{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport OptionStore from '../Stores/OptionStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass UserStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.items = new Map();\n      this.fullInfoItems = new Map();\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateUser':\n          {\n            this.set(update.user);\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'updateUserFullInfo':\n          this.setFullInfo(update.user_id, update.user_full_info);\n          this.emit(update['@type'], update);\n          break;\n\n        case 'updateUserStatus':\n          {\n            let user = this.get(update.user_id);\n\n            if (user) {\n              this.assign(user, {\n                status: update.status\n              });\n            }\n\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateOpenUser':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  assign(source1, source2) {\n    Object.assign(source1, source2); //this.set(Object.assign({}, source1, source2));\n  }\n\n  getMyId() {\n    const myId = OptionStore.get('my_id');\n    if (!myId) return null;\n    if (!myId.value) return null;\n    return myId.value;\n  }\n\n  get(userId) {\n    return this.items.get(userId);\n  }\n\n  set(user) {\n    this.items.set(user.id, user);\n  }\n\n  getFullInfo(id) {\n    return this.fullInfoItems.get(id);\n  }\n\n  setFullInfo(id, fullInfo) {\n    this.fullInfoItems.set(id, fullInfo);\n  }\n\n}\n\nconst store = new UserStore();\nwindow.user = store;\nexport default store;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Stores/UserStore.js"],"names":["EventEmitter","OptionStore","TdLibController","UserStore","constructor","reset","items","Map","fullInfoItems","onUpdate","update","authorization_state","set","user","emit","setFullInfo","user_id","user_full_info","get","assign","status","onClientUpdate","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","source1","source2","Object","getMyId","myId","value","userId","id","getFullInfo","fullInfo","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport OptionStore from '../Stores/OptionStore';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass UserStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.fullInfoItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateUser': {\n                this.set(update.user);\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateUserFullInfo':\n                this.setFullInfo(update.user_id, update.user_full_info);\n\n                this.emit(update['@type'], update);\n                break;\n            case 'updateUserStatus': {\n                let user = this.get(update.user_id);\n                if (user) {\n                    this.assign(user, { status: update.status });\n                }\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateOpenUser': {\n                this.emit(update['@type'], update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        Object.assign(source1, source2);\n        //this.set(Object.assign({}, source1, source2));\n    }\n\n    getMyId() {\n        const myId = OptionStore.get('my_id');\n        if (!myId) return null;\n        if (!myId.value) return null;\n\n        return myId.value;\n    }\n\n    get(userId) {\n        return this.items.get(userId);\n    }\n\n    set(user) {\n        this.items.set(user.id, user);\n    }\n\n    getFullInfo(id) {\n        return this.fullInfoItems.get(id);\n    }\n\n    setFullInfo(id, fullInfo) {\n        this.fullInfoItems.set(id, fullInfo);\n    }\n}\n\nconst store = new UserStore();\nwindow.user = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}