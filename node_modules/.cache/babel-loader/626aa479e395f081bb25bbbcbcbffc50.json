{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/InstantView/InstantViewer.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport Article from './Article';\nimport InstantViewMediaViewer from '../Viewer/InstantViewMediaViewer';\nimport IVContext from './IVContext';\nimport MediaViewerButton from '../Viewer/MediaViewerButton';\nimport { openInstantView } from '../../Actions/InstantView';\nimport { setInstantViewContent, setInstantViewViewerContent } from '../../Actions/Client';\nimport { IV_PHOTO_SIZE } from '../../Constants';\nimport InstantViewStore from '../../Stores/InstantViewStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InstantViewer.css';\nimport { itemsInView, throttle } from '../../Utils/Common';\nimport { getInnerBlocks } from '../../Utils/InstantView';\n\nconst styles = theme => ({\n  instantViewer: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n    color: theme.palette.text.primary\n  },\n  leftButton: {\n    color: theme.palette.text.secondary,\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0\n  },\n  closeButton: {\n    color: theme.palette.text.secondary,\n    position: 'fixed',\n    top: 0,\n    right: 0\n  }\n});\n\nclass InstantViewer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateInstantViewViewerContent = update => {\n      const content = update.content;\n\n      if (!content) {\n        this.setState({\n          media: null,\n          caption: null,\n          url: null\n        });\n        return;\n      }\n\n      const media = content.media,\n            caption = content.caption,\n            url = content.url,\n            instantView = content.instantView;\n      if (this.props.instantView !== instantView) return;\n      this.setState({\n        media,\n        caption,\n        url\n      });\n    };\n\n    this.onClientUpdateInstantViewUrl = async update => {\n      console.log('[IV] clientUpdateInstantViewUrl', update);\n      const url = update.url;\n      const active = InstantViewStore.getCurrent();\n      const instantView = this.props.instantView;\n      if (active !== instantView) return;\n\n      if (instantView && url.startsWith(instantView.url)) {\n        const hash = new URL(url).hash;\n\n        if (url.indexOf('#') === url.length - 1) {\n          this.scrollTop('smooth');\n          return;\n        } else if (hash && this.scrollToHash(hash, 'smooth')) {\n          return;\n        }\n      }\n\n      openInstantView(url);\n    };\n\n    this.onKeyDown = event => {\n      if (event.keyCode === 27) {\n        const media = this.state.media;\n\n        if (media) {\n          setInstantViewViewerContent(null);\n          return;\n        }\n\n        this.handleClose();\n      }\n    };\n\n    this.handleBack = () => {\n      const _this$state = this.state,\n            hasPrev = _this$state.hasPrev,\n            hasScroll = _this$state.hasScroll;\n\n      if (hasScroll) {\n        this.scrollTop('smooth');\n        return;\n      }\n\n      if (hasPrev) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdatePrevInstantView'\n        });\n        return;\n      }\n\n      this.handleClose();\n    };\n\n    this.handleScroll = () => {\n      const element = this.instantViewerRef.current;\n      this.setState({\n        hasScroll: element.scrollTop > 50\n      });\n      this.updateItemsInView();\n    };\n\n    this.articleRef = React.createRef();\n    this.instantViewerRef = React.createRef();\n    this.state = {};\n    this.updateItemsInView = throttle(this.updateItemsInView, 500);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.instantView !== state.prevInstantView) {\n      return {\n        prevInstantView: props.instantView,\n        hasPrev: InstantViewStore.hasPrev(),\n        hasScroll: false,\n        media: null,\n        caption: null,\n        url: null\n      };\n    }\n\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const instantView = this.props.instantView;\n    const _this$state2 = this.state,\n          hasScroll = _this$state2.hasScroll,\n          hasPrev = _this$state2.hasPrev,\n          media = _this$state2.media,\n          caption = _this$state2.caption,\n          url = _this$state2.url;\n\n    if (instantView !== nextProps.instantView) {\n      return true;\n    }\n\n    if (hasScroll !== nextState.hasScroll) {\n      return true;\n    }\n\n    if (hasPrev !== nextState.hasPrev) {\n      return true;\n    }\n\n    if (media !== nextState.media) {\n      return true;\n    }\n\n    if (caption !== nextState.caption) {\n      return true;\n    }\n\n    if (url !== nextState.url) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.handleScroll();\n    document.addEventListener('keydown', this.onKeyDown, false);\n    InstantViewStore.on('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n    InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n    document.removeEventListener('keydown', this.onKeyDown, false);\n    InstantViewStore.removeListener('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n    InstantViewStore.removeListener('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n  }\n\n  scrollToHash(hash, behavior) {\n    if (!hash) return false;\n    const hiddenElement = document.getElementById(hash.substr(1));\n\n    if (hiddenElement) {\n      const details = [];\n      let finished = false;\n      let currentElement = hiddenElement;\n\n      do {\n        currentElement = currentElement.parentNode;\n\n        if (currentElement) {\n          if (currentElement.nodeName === 'DETAILS') {\n            details.push(currentElement);\n          } else if (currentElement.nodeName === 'ARTICLE') {\n            finished = true;\n          }\n        } else {\n          finished = true;\n        }\n      } while (!finished);\n\n      details.forEach(x => x.open = true);\n      hiddenElement.scrollIntoView({\n        block: 'center',\n        behavior\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  scrollTop(behavior) {\n    const element = this.instantViewerRef.current;\n\n    switch (behavior) {\n      case 'smooth':\n        {\n          element.scrollTop = Math.min(element.scrollTop, 100);\n          setTimeout(() => {\n            element.scrollTo({\n              top: 0,\n              behavior: 'smooth'\n            });\n          }, 50);\n          break;\n        }\n\n      default:\n        {\n          element.scrollTo({\n            top: 0,\n            behavior\n          });\n        }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const _this$props = this.props,\n          instantView = _this$props.instantView,\n          url = _this$props.url;\n    console.log('[IV] componentDidUpdate', instantView.url, instantView.url === prevProps.instantView.url);\n    const hash = new URL(instantView.url).hash;\n\n    if (prevProps.instantView !== instantView) {\n      if (prevProps.instantView.url !== instantView.url) {\n        if (instantView.url.indexOf('#') === instantView.url.length - 1) {\n          console.log('[IV] componentDidUpdate scrollTop auto');\n          this.scrollTop('auto');\n        } else if (hash) {\n          console.log('[IV] componentDidUpdate scrollToHash', hash);\n          this.scrollToHash(hash, 'auto');\n        } else {\n          console.log('[IV] componentDidUpdate scrollTop auto');\n          this.scrollTop('auto');\n        }\n      } else {\n        if (hash) {\n          console.log('[IV] componentDidUpdate scrollToHash', hash);\n          this.scrollToHash(hash, 'auto');\n        } else {\n          console.log('[IV] componentDidUpdate scrollTop smooth');\n          this.scrollTop('smooth');\n        }\n      }\n\n      this.handleScroll();\n    }\n  }\n\n  handleClose() {\n    setInstantViewContent(null);\n  }\n\n  updateItemsInView() {\n    if (!this.mounted) return;\n    const instantView = this.props.instantView;\n    if (!instantView) return;\n    const page_blocks = instantView.page_blocks;\n    const blocks = new Map();\n    const items = itemsInView(this.instantViewerRef, this.articleRef);\n\n    for (let i = 0; i < items.length; i++) {\n      const block = page_blocks[items[i]];\n      blocks.set(block, block);\n      const innerBlocks = getInnerBlocks(block);\n      innerBlocks.forEach(x => blocks.set(x, x));\n    }\n\n    TdLibController.clientUpdate({\n      '@type': 'clientUpdateBlocksInView',\n      blocks\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          classes = _this$props2.classes,\n          instantView = _this$props2.instantView;\n    const _this$state3 = this.state,\n          hasPrev = _this$state3.hasPrev,\n          hasScroll = _this$state3.hasScroll,\n          media = _this$state3.media,\n          caption = _this$state3.caption,\n          url = _this$state3.url;\n    if (!instantView) return null;\n    return React.createElement(IVContext.Provider, {\n      value: instantView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.instantViewerRef,\n      className: classNames('instant-viewer', classes.instantViewer),\n      onScroll: this.handleScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"instant-viewer-left-column\",\n      onClick: this.handleBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(MediaViewerButton, {\n      className: classes.leftButton,\n      style: {\n        alignItems: 'flex-start'\n      },\n      onClick: this.handleBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, hasScroll ? React.createElement(ExpandLessIcon, {\n      className: \"media-viewer-button-icon\",\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }) : React.createElement(ChevronLeftIcon, {\n      className: \"media-viewer-button-icon\",\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"instant-viewer-content-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(Article, {\n      ref: this.articleRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"instant-viewer-right-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(MediaViewerButton, {\n      className: classes.closeButton,\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: \"media-viewer-button-icon\",\n      fontSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })))), media && React.createElement(InstantViewMediaViewer, {\n      media: media,\n      size: IV_PHOTO_SIZE,\n      caption: caption,\n      url: url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }));\n  }\n\n}\n\nInstantViewer.propTypes = {\n  instantView: PropTypes.object.isRequired\n};\nconst enhance = compose(withStyles(styles), withTranslation());\nexport default enhance(InstantViewer);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/InstantView/InstantViewer.js"],"names":["React","PropTypes","classNames","compose","withStyles","withTranslation","CloseIcon","ChevronLeftIcon","ExpandLessIcon","Article","InstantViewMediaViewer","IVContext","MediaViewerButton","openInstantView","setInstantViewContent","setInstantViewViewerContent","IV_PHOTO_SIZE","InstantViewStore","TdLibController","itemsInView","throttle","getInnerBlocks","styles","theme","instantViewer","background","palette","type","default","color","text","primary","leftButton","secondary","position","top","left","bottom","closeButton","right","InstantViewer","Component","constructor","props","onClientUpdateInstantViewViewerContent","update","content","setState","media","caption","url","instantView","onClientUpdateInstantViewUrl","console","log","active","getCurrent","startsWith","hash","URL","indexOf","length","scrollTop","scrollToHash","onKeyDown","event","keyCode","state","handleClose","handleBack","hasPrev","hasScroll","clientUpdate","handleScroll","element","instantViewerRef","current","updateItemsInView","articleRef","createRef","getDerivedStateFromProps","prevInstantView","shouldComponentUpdate","nextProps","nextState","nextContext","componentDidMount","mounted","document","addEventListener","on","componentWillUnmount","removeEventListener","removeListener","behavior","hiddenElement","getElementById","substr","details","finished","currentElement","parentNode","nodeName","push","forEach","x","open","scrollIntoView","block","Math","min","setTimeout","scrollTo","componentDidUpdate","prevProps","prevState","snapshot","page_blocks","blocks","Map","items","i","set","innerBlocks","render","classes","alignItems","propTypes","object","isRequired","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport Article from './Article';\nimport InstantViewMediaViewer from '../Viewer/InstantViewMediaViewer';\nimport IVContext from './IVContext';\nimport MediaViewerButton from '../Viewer/MediaViewerButton';\nimport { openInstantView } from '../../Actions/InstantView';\nimport { setInstantViewContent, setInstantViewViewerContent } from '../../Actions/Client';\nimport { IV_PHOTO_SIZE } from '../../Constants';\nimport InstantViewStore from '../../Stores/InstantViewStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './InstantViewer.css';\nimport { itemsInView, throttle } from '../../Utils/Common';\nimport { getInnerBlocks } from '../../Utils/InstantView';\n\nconst styles = theme => ({\n    instantViewer: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n        color: theme.palette.text.primary\n    },\n    leftButton: {\n        color: theme.palette.text.secondary,\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        bottom: 0\n    },\n    closeButton: {\n        color: theme.palette.text.secondary,\n        position: 'fixed',\n        top: 0,\n        right: 0\n    }\n});\n\nclass InstantViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.articleRef = React.createRef();\n        this.instantViewerRef = React.createRef();\n\n        this.state = {};\n\n        this.updateItemsInView = throttle(this.updateItemsInView, 500);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.instantView !== state.prevInstantView) {\n            return {\n                prevInstantView: props.instantView,\n                hasPrev: InstantViewStore.hasPrev(),\n                hasScroll: false,\n                media: null,\n                caption: null,\n                url: null\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { instantView } = this.props;\n        const { hasScroll, hasPrev, media, caption, url } = this.state;\n\n        if (instantView !== nextProps.instantView) {\n            return true;\n        }\n\n        if (hasScroll !== nextState.hasScroll) {\n            return true;\n        }\n\n        if (hasPrev !== nextState.hasPrev) {\n            return true;\n        }\n\n        if (media !== nextState.media) {\n            return true;\n        }\n\n        if (caption !== nextState.caption) {\n            return true;\n        }\n\n        if (url !== nextState.url) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.handleScroll();\n\n        document.addEventListener('keydown', this.onKeyDown, false);\n        InstantViewStore.on('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n        InstantViewStore.on('clientUpdateInstantViewViewerContent', this.onClientUpdateInstantViewViewerContent);\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        document.removeEventListener('keydown', this.onKeyDown, false);\n        InstantViewStore.removeListener('clientUpdateInstantViewUrl', this.onClientUpdateInstantViewUrl);\n        InstantViewStore.removeListener(\n            'clientUpdateInstantViewViewerContent',\n            this.onClientUpdateInstantViewViewerContent\n        );\n    }\n\n    onClientUpdateInstantViewViewerContent = update => {\n        const { content } = update;\n        if (!content) {\n            this.setState({ media: null, caption: null, url: null });\n            return;\n        }\n\n        const { media, caption, url, instantView } = content;\n\n        if (this.props.instantView !== instantView) return;\n\n        this.setState({ media, caption, url });\n    };\n\n    onClientUpdateInstantViewUrl = async update => {\n        console.log('[IV] clientUpdateInstantViewUrl', update);\n        const { url } = update;\n        const active = InstantViewStore.getCurrent();\n        const { instantView } = this.props;\n\n        if (active !== instantView) return;\n\n        if (instantView && url.startsWith(instantView.url)) {\n            const hash = new URL(url).hash;\n            if (url.indexOf('#') === url.length - 1) {\n                this.scrollTop('smooth');\n\n                return;\n            } else if (hash && this.scrollToHash(hash, 'smooth')) {\n                return;\n            }\n        }\n\n        openInstantView(url);\n    };\n\n    scrollToHash(hash, behavior) {\n        if (!hash) return false;\n\n        const hiddenElement = document.getElementById(hash.substr(1));\n        if (hiddenElement) {\n            const details = [];\n            let finished = false;\n            let currentElement = hiddenElement;\n            do {\n                currentElement = currentElement.parentNode;\n                if (currentElement) {\n                    if (currentElement.nodeName === 'DETAILS') {\n                        details.push(currentElement);\n                    } else if (currentElement.nodeName === 'ARTICLE') {\n                        finished = true;\n                    }\n                } else {\n                    finished = true;\n                }\n            } while (!finished);\n\n            details.forEach(x => (x.open = true));\n\n            hiddenElement.scrollIntoView({\n                block: 'center',\n                behavior\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    scrollTop(behavior) {\n        const element = this.instantViewerRef.current;\n\n        switch (behavior) {\n            case 'smooth': {\n                element.scrollTop = Math.min(element.scrollTop, 100);\n                setTimeout(() => {\n                    element.scrollTo({\n                        top: 0,\n                        behavior: 'smooth'\n                    });\n                }, 50);\n                break;\n            }\n            default: {\n                element.scrollTo({\n                    top: 0,\n                    behavior\n                });\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { instantView, url } = this.props;\n        console.log('[IV] componentDidUpdate', instantView.url, instantView.url === prevProps.instantView.url);\n\n        const hash = new URL(instantView.url).hash;\n        if (prevProps.instantView !== instantView) {\n            if (prevProps.instantView.url !== instantView.url) {\n                if (instantView.url.indexOf('#') === instantView.url.length - 1) {\n                    console.log('[IV] componentDidUpdate scrollTop auto');\n                    this.scrollTop('auto');\n                } else if (hash) {\n                    console.log('[IV] componentDidUpdate scrollToHash', hash);\n                    this.scrollToHash(hash, 'auto');\n                } else {\n                    console.log('[IV] componentDidUpdate scrollTop auto');\n                    this.scrollTop('auto');\n                }\n            } else {\n                if (hash) {\n                    console.log('[IV] componentDidUpdate scrollToHash', hash);\n                    this.scrollToHash(hash, 'auto');\n                } else {\n                    console.log('[IV] componentDidUpdate scrollTop smooth');\n                    this.scrollTop('smooth');\n                }\n            }\n\n            this.handleScroll();\n        }\n    }\n\n    onKeyDown = event => {\n        if (event.keyCode === 27) {\n            const { media } = this.state;\n\n            if (media) {\n                setInstantViewViewerContent(null);\n                return;\n            }\n\n            this.handleClose();\n        }\n    };\n\n    handleClose() {\n        setInstantViewContent(null);\n    }\n\n    handleBack = () => {\n        const { hasPrev, hasScroll } = this.state;\n        if (hasScroll) {\n            this.scrollTop('smooth');\n            return;\n        }\n\n        if (hasPrev) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdatePrevInstantView'\n            });\n            return;\n        }\n\n        this.handleClose();\n    };\n\n    handleScroll = () => {\n        const element = this.instantViewerRef.current;\n        this.setState({\n            hasScroll: element.scrollTop > 50\n        });\n\n        this.updateItemsInView();\n    };\n\n    updateItemsInView() {\n        if (!this.mounted) return;\n\n        const { instantView } = this.props;\n        if (!instantView) return;\n\n        const { page_blocks } = instantView;\n\n        const blocks = new Map();\n        const items = itemsInView(this.instantViewerRef, this.articleRef);\n\n        for (let i = 0; i < items.length; i++) {\n            const block = page_blocks[items[i]];\n            blocks.set(block, block);\n\n            const innerBlocks = getInnerBlocks(block);\n            innerBlocks.forEach(x => blocks.set(x, x));\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateBlocksInView',\n            blocks\n        });\n    }\n\n    render() {\n        const { classes, instantView } = this.props;\n        const { hasPrev, hasScroll, media, caption, url } = this.state;\n        if (!instantView) return null;\n\n        return (\n            <IVContext.Provider value={instantView}>\n                <div\n                    ref={this.instantViewerRef}\n                    className={classNames('instant-viewer', classes.instantViewer)}\n                    onScroll={this.handleScroll}>\n                    <div className='instant-viewer-left-column' onClick={this.handleBack}>\n                        <MediaViewerButton\n                            className={classes.leftButton}\n                            style={{ alignItems: 'flex-start' }}\n                            onClick={this.handleBack}>\n                            {hasScroll ? (\n                                <ExpandLessIcon className='media-viewer-button-icon' fontSize='large' />\n                            ) : (\n                                <ChevronLeftIcon className='media-viewer-button-icon' fontSize='large' />\n                            )}\n                        </MediaViewerButton>\n                    </div>\n                    <div className='instant-viewer-content-column'>\n                        <div>\n                            <Article ref={this.articleRef} />\n                        </div>\n                    </div>\n                    <div className='instant-viewer-right-column'>\n                        <MediaViewerButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon className='media-viewer-button-icon' fontSize='large' />\n                        </MediaViewerButton>\n                    </div>\n                </div>\n                {media && <InstantViewMediaViewer media={media} size={IV_PHOTO_SIZE} caption={caption} url={url} />}\n            </IVContext.Provider>\n        );\n    }\n}\n\nInstantViewer.propTypes = {\n    instantView: PropTypes.object.isRequired\n};\n\nconst enhance = compose(\n    withStyles(styles),\n    withTranslation()\n);\n\nexport default enhance(InstantViewer);\n"]},"metadata":{},"sourceType":"module"}