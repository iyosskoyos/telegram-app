{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/ServiceMessage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport UnreadSeparator from './UnreadSeparator';\nimport Photo from './Media/Photo';\nimport { openMedia } from '../../Utils/Message';\nimport { getServiceMessageContent } from '../../Utils/ServiceMessage';\nimport MessageStore from '../../Stores/MessageStore';\nimport './ServiceMessage.css';\nconst chatPhotoStyle = {\n  width: 64,\n  height: 64,\n  borderRadius: '50%',\n  margin: '-8px auto 16px auto'\n};\n\nconst styles = theme => ({\n  '@keyframes highlighted': {\n    from: {\n      backgroundColor: theme.palette.primary.main + '22'\n    },\n    to: {\n      backgroundColor: 'transparent'\n    }\n  },\n  messageHighlighted: {\n    animation: 'highlighted 4s ease-out'\n  },\n  serviceMessageContent: {\n    color: theme.palette.text.secondary\n  }\n});\n\nclass ServiceMessage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateMessageHighlighted = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const _this$state = this.state,\n            selected = _this$state.selected,\n            highlighted = _this$state.highlighted;\n      if (selected) return;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (highlighted) {\n          this.setState({\n            highlighted: false\n          }, () => {\n            setTimeout(() => {\n              this.setState({\n                highlighted: true\n              });\n            }, 0);\n          });\n        } else {\n          this.setState({\n            highlighted: true\n          });\n        }\n      } else if (highlighted) {\n        this.setState({\n          highlighted: false\n        });\n      }\n    };\n\n    this.handleAnimationEnd = () => {\n      this.setState({\n        highlighted: false\n      });\n    };\n\n    this.openMedia = event => {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n      openMedia(chatId, messageId);\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n      this.state = {\n        message: MessageStore.get(chatId, messageId),\n        highlighted: false\n      };\n    } else {\n      this.state = {\n        highlighted: false\n      };\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props4 = this.props,\n          chatId = _this$props4.chatId,\n          messageId = _this$props4.messageId,\n          sendingState = _this$props4.sendingState,\n          showUnreadSeparator = _this$props4.showUnreadSeparator,\n          theme = _this$props4.theme;\n    const highlighted = this.state.highlighted;\n\n    if (nextProps.chatId !== chatId) {\n      return true;\n    }\n\n    if (nextProps.messageId !== messageId) {\n      return true;\n    }\n\n    if (nextProps.sendingState !== sendingState) {\n      return true;\n    }\n\n    if (nextProps.showUnreadSeparator !== showUnreadSeparator) {\n      return true;\n    }\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    if (nextState.highlighted !== highlighted) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    MessageStore.on('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n  }\n\n  componentWillUnmount() {\n    MessageStore.removeListener('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          classes = _this$props5.classes,\n          chatId = _this$props5.chatId,\n          messageId = _this$props5.messageId,\n          showUnreadSeparator = _this$props5.showUnreadSeparator;\n    const highlighted = this.state.highlighted;\n    const message = MessageStore.get(chatId, messageId);\n    if (!message) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"[empty service message]\");\n    const content = message.content;\n    if (!content) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"[empty service message]\");\n    const photo = content.photo;\n    const text = getServiceMessageContent(message, true);\n    const messageClassName = classNames('service-message', {\n      [classes.messageHighlighted]: highlighted\n    });\n    return React.createElement(\"div\", {\n      className: messageClassName,\n      onAnimationEnd: this.handleAnimationEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, showUnreadSeparator && React.createElement(UnreadSeparator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"service-message-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames('service-message-content', classes.serviceMessageContent),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, text)), photo && React.createElement(Photo, {\n      chatId: chatId,\n      messageId: messageId,\n      photo: photo,\n      style: chatPhotoStyle,\n      openMedia: this.openMedia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(ServiceMessage);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Message/ServiceMessage.js"],"names":["React","classNames","withStyles","UnreadSeparator","Photo","openMedia","getServiceMessageContent","MessageStore","chatPhotoStyle","width","height","borderRadius","margin","styles","theme","from","backgroundColor","palette","primary","main","to","messageHighlighted","animation","serviceMessageContent","color","text","secondary","ServiceMessage","Component","constructor","props","onClientUpdateMessageHighlighted","update","chatId","messageId","state","selected","highlighted","setState","setTimeout","handleAnimationEnd","event","preventDefault","stopPropagation","process","env","NODE_ENV","message","get","shouldComponentUpdate","nextProps","nextState","sendingState","showUnreadSeparator","componentDidMount","on","componentWillUnmount","removeListener","render","classes","content","photo","messageClassName","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport UnreadSeparator from './UnreadSeparator';\nimport Photo from './Media/Photo';\nimport { openMedia } from '../../Utils/Message';\nimport { getServiceMessageContent } from '../../Utils/ServiceMessage';\nimport MessageStore from '../../Stores/MessageStore';\nimport './ServiceMessage.css';\n\nconst chatPhotoStyle = {\n    width: 64,\n    height: 64,\n    borderRadius: '50%',\n    margin: '-8px auto 16px auto'\n};\n\nconst styles = theme => ({\n    '@keyframes highlighted': {\n        from: { backgroundColor: theme.palette.primary.main + '22' },\n        to: { backgroundColor: 'transparent' }\n    },\n    messageHighlighted: {\n        animation: 'highlighted 4s ease-out'\n    },\n    serviceMessageContent: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass ServiceMessage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (process.env.NODE_ENV !== 'production') {\n            const { chatId, messageId } = this.props;\n            this.state = {\n                message: MessageStore.get(chatId, messageId),\n                highlighted: false\n            };\n        } else {\n            this.state = {\n                highlighted: false\n            };\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, messageId, sendingState, showUnreadSeparator, theme } = this.props;\n        const { highlighted } = this.state;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.messageId !== messageId) {\n            return true;\n        }\n\n        if (nextProps.sendingState !== sendingState) {\n            return true;\n        }\n\n        if (nextProps.showUnreadSeparator !== showUnreadSeparator) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextState.highlighted !== highlighted) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        MessageStore.on('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    }\n\n    componentWillUnmount() {\n        MessageStore.removeListener('clientUpdateMessageHighlighted', this.onClientUpdateMessageHighlighted);\n    }\n\n    onClientUpdateMessageHighlighted = update => {\n        const { chatId, messageId } = this.props;\n        const { selected, highlighted } = this.state;\n\n        if (selected) return;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (highlighted) {\n                this.setState({ highlighted: false }, () => {\n                    setTimeout(() => {\n                        this.setState({ highlighted: true });\n                    }, 0);\n                });\n            } else {\n                this.setState({ highlighted: true });\n            }\n        } else if (highlighted) {\n            this.setState({ highlighted: false });\n        }\n    };\n\n    handleAnimationEnd = () => {\n        this.setState({ highlighted: false });\n    };\n\n    openMedia = event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        const { chatId, messageId } = this.props;\n\n        openMedia(chatId, messageId);\n    };\n\n    render() {\n        const { classes, chatId, messageId, showUnreadSeparator } = this.props;\n        const { highlighted } = this.state;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return <div>[empty service message]</div>;\n\n        const { content } = message;\n        if (!content) return <div>[empty service message]</div>;\n\n        const { photo } = content;\n\n        const text = getServiceMessageContent(message, true);\n\n        const messageClassName = classNames('service-message', { [classes.messageHighlighted]: highlighted });\n\n        return (\n            <div className={messageClassName} onAnimationEnd={this.handleAnimationEnd}>\n                {showUnreadSeparator && <UnreadSeparator />}\n                <div className='service-message-wrapper'>\n                    <div className={classNames('service-message-content', classes.serviceMessageContent)}>{text}</div>\n                </div>\n                {photo && (\n                    <Photo\n                        chatId={chatId}\n                        messageId={messageId}\n                        photo={photo}\n                        style={chatPhotoStyle}\n                        openMedia={this.openMedia}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(ServiceMessage);\n"]},"metadata":{},"sourceType":"module"}