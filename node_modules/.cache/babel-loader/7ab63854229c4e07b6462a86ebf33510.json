{"ast":null,"code":"var _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/ChatStatus.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { isUserOnline } from '../../Utils/User';\nimport { getChatUserId } from '../../Utils/Chat';\nimport UserStore from './../../Stores/UserStore';\nimport './ChatStatus.css';\n\nconst styles = theme => ({\n  root: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n    borderRadius: '50%',\n    overflow: 'hidden'\n  },\n  icon: {\n    background: 'transparent',\n    width: '100%',\n    height: '100%',\n    boxSizing: 'border-box'\n  },\n  iconIndicator: {\n    width: '100%',\n    height: '100%',\n    borderRadius: '50%',\n    background: '#80d066'\n  }\n});\n\nclass ChatStatus extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdateUserStatus = update => {\n      const userId = this.state.userId;\n      const user_id = update.user_id;\n      if (user_id !== userId) return;\n      const user = UserStore.get(userId);\n      if (!user) return;\n      this.setState({\n        online: isUserOnline(user)\n      });\n    };\n\n    const _userId = getChatUserId(props.chatId);\n\n    const _user = UserStore.get(_userId);\n\n    this.state = {\n      userId: _userId,\n      online: isUserOnline(_user)\n    };\n  }\n\n  componentDidMount() {\n    UserStore.on('updateUserStatus', this.onUpdateUserStatus);\n  }\n\n  componentWillUnmount() {\n    UserStore.removeListener('updateUserStatus', this.onUpdateUserStatus);\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          size = _this$props.size,\n          borderSize = _this$props.borderSize,\n          className = _this$props.className;\n    const online = this.state.online;\n    if (!online) return null;\n    return React.createElement(\"div\", {\n      className: classNames(className, classes.root),\n      style: {\n        width: size,\n        height: size\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.icon,\n      style: {\n        padding: borderSize\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.iconIndicator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  }\n\n}\n\nChatStatus.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  size: PropTypes.number,\n  borderSize: PropTypes.number\n};\nChatStatus.defaultProps = {\n  size: 12,\n  borderSize: 2\n};\nexport default withStyles(styles)(ChatStatus);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Tile/ChatStatus.js"],"names":["React","PropTypes","classNames","withStyles","isUserOnline","getChatUserId","UserStore","styles","theme","root","background","palette","type","default","borderRadius","overflow","icon","width","height","boxSizing","iconIndicator","ChatStatus","Component","constructor","props","onUpdateUserStatus","update","userId","state","user_id","user","get","setState","online","chatId","componentDidMount","on","componentWillUnmount","removeListener","render","classes","size","borderSize","className","padding","propTypes","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { isUserOnline } from '../../Utils/User';\nimport { getChatUserId } from '../../Utils/Chat';\nimport UserStore from './../../Stores/UserStore';\nimport './ChatStatus.css';\n\nconst styles = theme => ({\n    root: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n        borderRadius: '50%',\n        overflow: 'hidden'\n    },\n    icon: {\n        background: 'transparent',\n        width: '100%',\n        height: '100%',\n        boxSizing: 'border-box'\n    },\n    iconIndicator: {\n        width: '100%',\n        height: '100%',\n        borderRadius: '50%',\n        background: '#80d066'\n    }\n});\n\nclass ChatStatus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const userId = getChatUserId(props.chatId);\n        const user = UserStore.get(userId);\n\n        this.state = {\n            userId: userId,\n            online: isUserOnline(user)\n        };\n    }\n\n    componentDidMount() {\n        UserStore.on('updateUserStatus', this.onUpdateUserStatus);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener('updateUserStatus', this.onUpdateUserStatus);\n    }\n\n    onUpdateUserStatus = update => {\n        const { userId } = this.state;\n        const { user_id } = update;\n        if (user_id !== userId) return;\n\n        const user = UserStore.get(userId);\n        if (!user) return;\n\n        this.setState({ online: isUserOnline(user) });\n    };\n\n    render() {\n        const { classes, size, borderSize, className } = this.props;\n        const { online } = this.state;\n        if (!online) return null;\n\n        return (\n            <div className={classNames(className, classes.root)} style={{ width: size, height: size }}>\n                <div className={classes.icon} style={{ padding: borderSize }}>\n                    <div className={classes.iconIndicator} />\n                </div>\n            </div>\n        );\n    }\n}\n\nChatStatus.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    size: PropTypes.number,\n    borderSize: PropTypes.number\n};\n\nChatStatus.defaultProps = {\n    size: 12,\n    borderSize: 2\n};\n\nexport default withStyles(styles)(ChatStatus);\n"]},"metadata":{},"sourceType":"module"}