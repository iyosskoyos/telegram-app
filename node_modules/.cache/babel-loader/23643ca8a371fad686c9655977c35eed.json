{"ast":null,"code":"import _defineProperty from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\nimport { isValidPoll } from '../Utils/Poll';\n\nclass PollStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.poll = null;\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateNewPoll':\n          {\n            this.set({\n              id: Date.now(),\n              question: '',\n              options: []\n            });\n            this.emit('clientUpdateNewPoll', update);\n            break;\n          }\n\n        case 'clientUpdatePollQuestion':\n          {\n            const question = update.question;\n            this.assign(this.poll, {\n              question\n            });\n            this.emit('clientUpdatePollQuestion', update);\n            break;\n          }\n\n        case 'clientUpdatePollOption':\n          {\n            const id = update.id,\n                  text = update.text;\n            const options = this.poll.options;\n            this.assign(this.poll, {\n              options: options.map(x => x.id === id ? _objectSpread({}, x, {\n                text\n              }) : _objectSpread({}, x))\n            });\n            this.emit('clientUpdatePollOption', update);\n            break;\n          }\n\n        case 'clientUpdateNewPollOption':\n          {\n            const option = update.option;\n            const options = this.poll.options;\n            this.assign(this.poll, {\n              options: [...options, option]\n            });\n            this.emit('clientUpdateNewPollOption', update);\n            break;\n          }\n\n        case 'clientUpdateDeletePollOption':\n          {\n            const id = update.id;\n            const options = this.poll.options;\n            this.assign(this.poll, {\n              options: options.filter(x => x.id !== id)\n            });\n            this.emit('clientUpdateDeletePollOption', update);\n            break;\n          }\n\n        case 'clientUpdateDeletePoll':\n          {\n            this.set(null);\n            this.emit('clientUpdateDeletePoll', update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  assign(source1, source2) {\n    this.set(Object.assign({}, source1, source2));\n  }\n\n  set(poll) {\n    this.poll = poll;\n  }\n\n  getInputMessagePoll() {\n    if (!this.poll) return null;\n    if (!isValidPoll(this.poll)) return null;\n    const _this$poll = this.poll,\n          question = _this$poll.question,\n          options = _this$poll.options;\n    return {\n      '@type': 'inputMessagePoll',\n      question,\n      options: options.filter(x => Boolean(x.text)).map(x => x.text)\n    };\n  }\n\n}\n\nconst store = new PollStore();\nwindow.poll = store;\nexport default store;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Stores/PollStore.js"],"names":["EventEmitter","TdLibController","isValidPoll","PollStore","constructor","reset","poll","onUpdate","update","authorization_state","onClientUpdate","set","id","Date","now","question","options","emit","assign","text","map","x","option","filter","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","source1","source2","Object","getInputMessagePoll","Boolean","store","window"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\nimport { isValidPoll } from '../Utils/Poll';\n\nclass PollStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.poll = null;\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateNewPoll': {\n                this.set({\n                    id: Date.now(),\n                    question: '',\n                    options: []\n                });\n\n                this.emit('clientUpdateNewPoll', update);\n                break;\n            }\n            case 'clientUpdatePollQuestion': {\n                const { question } = update;\n\n                this.assign(this.poll, { question });\n\n                this.emit('clientUpdatePollQuestion', update);\n                break;\n            }\n            case 'clientUpdatePollOption': {\n                const { id, text } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: options.map(x => (x.id === id ? { ...x, text } : { ...x })) });\n\n                this.emit('clientUpdatePollOption', update);\n                break;\n            }\n            case 'clientUpdateNewPollOption': {\n                const { option } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: [...options, option] });\n                this.emit('clientUpdateNewPollOption', update);\n                break;\n            }\n            case 'clientUpdateDeletePollOption': {\n                const { id } = update;\n                const { options } = this.poll;\n\n                this.assign(this.poll, { options: options.filter(x => x.id !== id) });\n                this.emit('clientUpdateDeletePollOption', update);\n                break;\n            }\n            case 'clientUpdateDeletePoll': {\n                this.set(null);\n\n                this.emit('clientUpdateDeletePoll', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    assign(source1, source2) {\n        this.set(Object.assign({}, source1, source2));\n    }\n\n    set(poll) {\n        this.poll = poll;\n    }\n\n    getInputMessagePoll() {\n        if (!this.poll) return null;\n        if (!isValidPoll(this.poll)) return null;\n        const { question, options } = this.poll;\n\n        return {\n            '@type': 'inputMessagePoll',\n            question,\n            options: options.filter(x => Boolean(x.text)).map(x => x.text)\n        };\n    }\n}\n\nconst store = new PollStore();\nwindow.poll = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}