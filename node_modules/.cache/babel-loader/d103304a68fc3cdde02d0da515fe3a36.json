{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/InstantView/RichText/Icon.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Document from '../../Message/Media/Document';\nimport RichText from './RichText';\nimport ArrowDownwardIcon from '@material-ui/core/SvgIcon/SvgIcon';\nimport DocumentTile from '../../Tile/DocumentTile';\nimport { getSrc } from '../../../Utils/File';\nimport FileStore from '../../../Stores/FileStore';\n\nclass Icon extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClientUpdateDocumentThumbnailBlob = update => {\n      const document = this.props.document;\n      if (!document) return;\n      const thumbnail = document.thumbnail;\n      if (!thumbnail) return;\n      const file = thumbnail.photo;\n      if (!file) return;\n      const fileId = update.fileId;\n\n      if (file.id !== fileId) {\n        return;\n      }\n\n      this.forceUpdate();\n    };\n\n    this.onClientUpdateDocumentBlob = update => {\n      const document = this.props.document;\n      if (!document) return;\n      const file = document.document;\n      if (!file) return;\n      const fileId = update.fileId;\n\n      if (file.id !== fileId) {\n        return;\n      }\n\n      this.forceUpdate();\n    };\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n    FileStore.removeListener('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n  }\n\n  emptyPlaceholderSrc(width, height) {\n    return \"data:image/svg+xml,%3Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 \".concat(width, \" \").concat(height, \"\\\"%3E%3C/svg%3E\");\n  }\n\n  render() {\n    const _this$props = this.props,\n          document = _this$props.document,\n          height = _this$props.height,\n          width = _this$props.width;\n    if (!document) return null;\n    const thumbnail = document.thumbnail,\n          file = document.document;\n    const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n    const src = getSrc(file);\n    return React.createElement(\"img\", {\n      src: src || thumbnailSrc || this.emptyPlaceholderSrc(1, 1),\n      width: width > 0 ? width : null,\n      height: height > 0 ? height : null,\n      draggable: false,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }\n\n}\n\nIcon.propTypes = {\n  document: PropTypes.object.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n};\nexport default Icon;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/InstantView/RichText/Icon.js"],"names":["React","PropTypes","Document","RichText","ArrowDownwardIcon","DocumentTile","getSrc","FileStore","Icon","Component","onClientUpdateDocumentThumbnailBlob","update","document","props","thumbnail","file","photo","fileId","id","forceUpdate","onClientUpdateDocumentBlob","componentDidMount","on","componentWillUnmount","removeListener","emptyPlaceholderSrc","width","height","render","thumbnailSrc","src","propTypes","object","isRequired","number"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Document from '../../Message/Media/Document';\nimport RichText from './RichText';\nimport ArrowDownwardIcon from '@material-ui/core/SvgIcon/SvgIcon';\nimport DocumentTile from '../../Tile/DocumentTile';\nimport { getSrc } from '../../../Utils/File';\nimport FileStore from '../../../Stores/FileStore';\n\nclass Icon extends React.Component {\n    componentDidMount() {\n        FileStore.on('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n        FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateDocumentThumbnailBlob', this.onClientUpdateDocumentThumbnailBlob);\n        FileStore.removeListener('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    }\n\n    onClientUpdateDocumentThumbnailBlob = update => {\n        const { document } = this.props;\n        if (!document) return;\n\n        const { thumbnail } = document;\n        if (!thumbnail) return;\n\n        const file = thumbnail.photo;\n        if (!file) return;\n\n        const { fileId } = update;\n\n        if (file.id !== fileId) {\n            return;\n        }\n\n        this.forceUpdate();\n    };\n\n    onClientUpdateDocumentBlob = update => {\n        const { document } = this.props;\n        if (!document) return;\n\n        const file = document.document;\n        if (!file) return;\n\n        const { fileId } = update;\n\n        if (file.id !== fileId) {\n            return;\n        }\n\n        this.forceUpdate();\n    };\n\n    emptyPlaceholderSrc(width, height) {\n        return `data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\"%3E%3C/svg%3E`;\n    }\n\n    render() {\n        const { document, height, width } = this.props;\n        if (!document) return null;\n\n        const { thumbnail, document: file } = document;\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const src = getSrc(file);\n\n        return (\n            <img\n                src={src || thumbnailSrc || this.emptyPlaceholderSrc(1, 1)}\n                width={width > 0 ? width : null}\n                height={height > 0 ? height : null}\n                draggable={false}\n                alt=''\n            />\n        );\n    }\n}\n\nIcon.propTypes = {\n    document: PropTypes.object.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired\n};\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}