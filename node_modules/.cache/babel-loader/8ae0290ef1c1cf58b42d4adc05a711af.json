{"ast":null,"code":"import _slicedToArray from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Popup/ForwardDialog.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ForwardTargetChat from '../Tile/ForwardTargetChat';\nimport { canSendMessages, getChatTitle, getChatUsername, isSupergroup } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { getCyrillicInput, getLatinInput } from '../../Utils/Language';\nimport { getInputMediaContent } from '../../Utils/Media';\nimport { borderStyle } from '../Theme';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ForwardDialog.css';\n\nconst styles = theme => _objectSpread({\n  close: {\n    padding: theme.spacing.unit / 2\n  },\n  dialog: {\n    color: theme.palette.text.primary\n  },\n  dialogContent: {\n    padding: 0,\n    display: 'flex',\n    position: 'relative'\n  },\n  searchList: {\n    background: theme.palette.background.paper\n  }\n}, borderStyle(theme));\n\nclass ForwardDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadContent = async () => {\n      this.getPublicMessageLink();\n      const promises = [];\n      const getChatsPromise = TdLibController.send({\n        '@type': 'getChats',\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 100\n      });\n      promises.push(getChatsPromise);\n      const savedMessagesPromise = TdLibController.send({\n        '@type': 'createPrivateChat',\n        user_id: UserStore.getMyId(),\n        force: true\n      });\n      promises.push(savedMessagesPromise);\n\n      const _ref = await Promise.all(promises.map(x => x.catch(e => null))),\n            _ref2 = _slicedToArray(_ref, 2),\n            chats = _ref2[0],\n            savedMessages = _ref2[1];\n\n      this.setState({\n        chatIds: chats.chat_ids,\n        savedMessages: savedMessages\n      });\n      const store = FileStore.getStore();\n      loadChatsContent(store, chats.chat_ids);\n    };\n\n    this.getPublicMessageLink = async () => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageIds = _this$props.messageIds;\n      if (!chatId) return;\n      if (!messageIds) return;\n      if (messageIds.length > 1) return;\n      if (!isSupergroup(chatId)) return;\n      if (!getChatUsername(chatId)) return;\n      const result = await TdLibController.send({\n        '@type': 'getPublicMessageLink',\n        chat_id: chatId,\n        message_id: messageIds[0],\n        for_album: false\n      });\n      this.setState({\n        publicMessageLink: result\n      });\n    };\n\n    this.handleClose = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateForward',\n        info: null\n      });\n    };\n\n    this.handleCopyLink = () => {\n      const t = this.props.t;\n      const publicMessageLink = this.state.publicMessageLink;\n      if (!publicMessageLink) return;\n      if (!publicMessageLink.link) return;\n      const key = \"copy_link_\".concat(publicMessageLink.link);\n      const message = t('LinkCopied');\n      const action = null;\n      copy(publicMessageLink.link);\n      this.handleScheduledAction(key, message, action);\n    };\n\n    this.handleScheduledAction = (key, message, action) => {\n      if (!key) return;\n      const _this$props2 = this.props,\n            enqueueSnackbar = _this$props2.enqueueSnackbar,\n            classes = _this$props2.classes;\n      if (!enqueueSnackbar) return;\n      const TRANSITION_DELAY = 150;\n\n      if (ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)) {\n        enqueueSnackbar(message, {\n          autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n          action: [React.createElement(IconButton, {\n            key: \"close\",\n            \"aria-label\": \"Close\",\n            color: \"inherit\",\n            className: classes.close,\n            onClick: () => ApplicationStore.removeScheduledAction(key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }))]\n        });\n      }\n    };\n\n    this.getForwardPhotoSize = (chatId, messageIds) => {\n      if (messageIds.length !== 1) return null;\n      const message = MessageStore.get(chatId, messageIds[0]);\n      if (!message) return null;\n      const can_be_forwarded = message.can_be_forwarded,\n            content = message.content;\n\n      if (!can_be_forwarded && content['@type'] === 'messageChatChangePhoto') {\n        const photo = content.photo;\n        if (!photo) return null;\n        const sizes = photo.sizes;\n\n        if (sizes && sizes.length) {\n          return sizes[sizes.length - 1];\n        }\n      }\n\n      return null;\n    };\n\n    this.handleSend = () => {\n      this.handleClose();\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageIds = _this$props3.messageIds,\n            photoSize = _this$props3.photoSize,\n            media = _this$props3.media,\n            link = _this$props3.link;\n      if (!chatId && !messageIds && !messageIds && !photoSize && !media && !link) return;\n      const text = this.getInnerText(this.messageRef.current);\n      this.targetChats.forEach(targetChatId => {\n        if (media) {\n          const content = getInputMediaContent(media, text);\n\n          if (content) {\n            TdLibController.send({\n              '@type': 'sendMessage',\n              chat_id: targetChatId,\n              reply_to_message_id: 0,\n              disable_notifications: false,\n              from_background: false,\n              reply_markup: null,\n              input_message_content: content\n            });\n          }\n\n          return;\n        }\n\n        if (link) {\n          if (text) {\n            TdLibController.send({\n              '@type': 'sendMessage',\n              chat_id: targetChatId,\n              reply_to_message_id: 0,\n              disable_notifications: false,\n              from_background: false,\n              reply_markup: null,\n              input_message_content: {\n                '@type': 'inputMessageText',\n                text: {\n                  '@type': 'formattedText',\n                  text: text,\n                  entities: null\n                },\n                disable_web_page_preview: true,\n                clear_draft: false\n              }\n            });\n          }\n\n          TdLibController.send({\n            '@type': 'sendMessage',\n            chat_id: targetChatId,\n            reply_to_message_id: 0,\n            disable_notifications: false,\n            from_background: false,\n            reply_markup: null,\n            input_message_content: {\n              '@type': 'inputMessageText',\n              text: {\n                '@type': 'formattedText',\n                text: link,\n                entities: null\n              },\n              disable_web_page_preview: true,\n              clear_draft: false\n            }\n          });\n          return;\n        }\n\n        const size = photoSize || this.getForwardPhotoSize(chatId, messageIds);\n\n        if (size) {\n          const width = size.width,\n                height = size.height,\n                photo = size.photo;\n          TdLibController.send({\n            '@type': 'sendMessage',\n            chat_id: targetChatId,\n            reply_to_message_id: 0,\n            disable_notifications: false,\n            from_background: false,\n            reply_markup: null,\n            input_message_content: {\n              '@type': 'inputMessagePhoto',\n              photo: {\n                '@type': 'inputFileId',\n                id: photo.id\n              },\n              thumbnail: null,\n              added_sticker_file_ids: [],\n              width: width,\n              height: height,\n              caption: {\n                '@type': 'formattedText',\n                text: text,\n                entities: null\n              },\n              ttl: 0\n            }\n          });\n          return;\n        }\n\n        if (text) {\n          TdLibController.send({\n            '@type': 'sendMessage',\n            chat_id: targetChatId,\n            reply_to_message_id: 0,\n            disable_notifications: false,\n            from_background: false,\n            reply_markup: null,\n            input_message_content: {\n              '@type': 'inputMessageText',\n              text: {\n                '@type': 'formattedText',\n                text: text,\n                entities: null\n              },\n              disable_web_page_preview: true,\n              clear_draft: false\n            }\n          });\n        }\n\n        TdLibController.send({\n          '@type': 'forwardMessages',\n          chat_id: targetChatId,\n          from_chat_id: chatId,\n          message_ids: messageIds,\n          disable_notifications: false,\n          from_background: false,\n          as_album: false\n        });\n      });\n    };\n\n    this.handleChangeSelection = chatId => {\n      if (this.targetChats.has(chatId)) {\n        this.targetChats.delete(chatId);\n      } else {\n        this.targetChats.set(chatId, chatId);\n      }\n\n      console.log(this.targetChats);\n      this.forceUpdate();\n    };\n\n    this.getInnerText = div => {\n      const innerText = div.innerText;\n      const innerHTML = div.innerHTML;\n\n      if (innerText && innerText === '\\n' && innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n        div.innerHTML = '';\n      }\n\n      return innerText;\n    };\n\n    this.handleSearchKeyDown = event => {\n      if (event.keyCode === 13) {\n        event.preventDefault();\n      }\n    };\n\n    this.handleSearchKeyUp = () => {\n      const _this$state = this.state,\n            chatIds = _this$state.chatIds,\n            savedMessages = _this$state.savedMessages;\n      const innerHTML = this.searchRef.current.innerHTML;\n\n      if (innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n        this.searchRef.current.innerHTML = '';\n      }\n\n      const innerText = this.getInnerText(this.searchRef.current).trim();\n\n      if (!innerText) {\n        this.setState({\n          searchText: null,\n          searchResults: []\n        });\n        return;\n      }\n\n      const latinText = getLatinInput(innerText);\n      const cyrillicText = getCyrillicInput(innerText);\n      const chatsSource = savedMessages ? [savedMessages.id].concat(chatIds.filter(x => x !== savedMessages.id)).filter(x => canSendMessages(x)) : chatIds;\n      const searchResults = chatsSource.filter(x => this.hasSearchText(x, innerText) || latinText && this.hasSearchText(x, latinText) || cyrillicText && this.hasSearchText(x, cyrillicText));\n      this.setState({\n        searchText: innerText,\n        searchResults: searchResults\n      });\n    };\n\n    this.handleSearchPaste = event => {\n      const plainText = event.clipboardData.getData('text/plain');\n\n      if (plainText) {\n        event.preventDefault();\n        document.execCommand('insertHTML', false, plainText);\n      }\n    };\n\n    this.handleMessageKeyUp = () => {\n      const innerHTML = this.messageRef.current.innerHTML;\n\n      if (innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n        this.messageRef.current.innerHTML = '';\n      }\n    };\n\n    this.handleMessagePaste = event => {\n      const plainText = event.clipboardData.getData('text/plain');\n\n      if (plainText) {\n        event.preventDefault();\n        document.execCommand('insertHTML', false, plainText);\n      }\n    };\n\n    this.hasSearchText = (chatId, searchText) => {\n      const t = this.props.t;\n      const savedMessages = this.state.savedMessages;\n\n      if (savedMessages && chatId === savedMessages.id) {\n        const title = getChatTitle(chatId, true, t) || '';\n\n        if (title.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n          return true;\n        }\n      }\n\n      const title1 = getChatTitle(chatId, false, t) || '';\n\n      if (title1.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n        return true;\n      }\n\n      const username = getChatUsername(chatId) || '';\n\n      if (username.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.setSearchFocus = () => {\n      setTimeout(() => {\n        if (this.searchRef.current) {\n          const element = this.searchRef.current;\n          element.focus();\n        }\n      }, 100);\n    };\n\n    this.state = {\n      chatIds: [],\n      savedMessages: null\n    };\n    this.searchRef = React.createRef();\n    this.messageRef = React.createRef();\n    this.targetChats = new Map();\n  }\n\n  componentDidMount() {\n    this.loadContent();\n    this.setSearchFocus();\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          classes = _this$props4.classes,\n          t = _this$props4.t;\n    const _this$state2 = this.state,\n          chatIds = _this$state2.chatIds,\n          searchText = _this$state2.searchText,\n          searchResults = _this$state2.searchResults,\n          savedMessages = _this$state2.savedMessages,\n          publicMessageLink = _this$state2.publicMessageLink;\n    const chatsSource = savedMessages ? [savedMessages.id].concat(chatIds.filter(x => x !== savedMessages.id)).filter(x => canSendMessages(x)) : chatIds;\n    const chats = chatsSource.map(x => React.createElement(ForwardTargetChat, {\n      key: x,\n      chatId: x,\n      selected: this.targetChats.has(x),\n      onSelect: () => this.handleChangeSelection(x),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }));\n    const foundChats = (searchResults || []).map(x => React.createElement(ForwardTargetChat, {\n      key: x,\n      chatId: x,\n      selected: this.targetChats.has(x),\n      onSelect: () => this.handleChangeSelection(x),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }));\n    return React.createElement(Dialog, {\n      open: true,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"forward-dialog-title\",\n      \"aria-describedby\": \"forward-dialog-description\",\n      className: classes.dialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"forward-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, t('ShareSendTo')), React.createElement(\"div\", {\n      ref: this.searchRef,\n      id: \"forward-dialog-search\",\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      placeholder: t('Search'),\n      onKeyDown: this.handleSearchKeyDown,\n      onKeyUp: this.handleSearchKeyUp,\n      onPaste: this.handleSearchPaste,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classNames(classes.borderColor, 'forward-dialog-content'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forward-dialog-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, chats), searchText && React.createElement(\"div\", {\n      className: classNames(classes.searchList, 'forward-dialog-search-list'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, foundChats)), this.targetChats.size > 0 && React.createElement(\"div\", {\n      ref: this.messageRef,\n      id: \"forward-dialog-message\",\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      placeholder: t('ShareComment'),\n      onKeyUp: this.handleMessageKeyUp,\n      onPaste: this.handleMessagePaste,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, t('Cancel')), this.targetChats.size > 0 && React.createElement(Button, {\n      onClick: this.handleSend,\n      color: \"primary\",\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, t('Send')), !this.targetChats.size && publicMessageLink && React.createElement(Button, {\n      onClick: this.handleCopyLink,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, t('CopyLink'))));\n  }\n\n}\n\nForwardDialog.propTypes = {\n  chatId: PropTypes.number,\n  messageIds: PropTypes.array,\n  photoSize: PropTypes.object,\n  media: PropTypes.object\n};\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation(), withSnackbar);\nexport default enhance(ForwardDialog);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Popup/ForwardDialog.js"],"names":["React","PropTypes","copy","classNames","compose","withStyles","withTranslation","withSnackbar","Button","IconButton","Dialog","DialogActions","DialogTitle","CloseIcon","ForwardTargetChat","canSendMessages","getChatTitle","getChatUsername","isSupergroup","loadChatsContent","getCyrillicInput","getLatinInput","getInputMediaContent","borderStyle","NOTIFICATION_AUTO_HIDE_DURATION_MS","ApplicationStore","FileStore","MessageStore","UserStore","TdLibController","styles","theme","close","padding","spacing","unit","dialog","color","palette","text","primary","dialogContent","display","position","searchList","background","paper","ForwardDialog","Component","constructor","props","loadContent","getPublicMessageLink","promises","getChatsPromise","send","offset_order","offset_chat_id","limit","push","savedMessagesPromise","user_id","getMyId","force","Promise","all","map","x","catch","e","chats","savedMessages","setState","chatIds","chat_ids","store","getStore","chatId","messageIds","length","result","chat_id","message_id","for_album","publicMessageLink","handleClose","clientUpdate","info","handleCopyLink","t","state","link","key","message","action","handleScheduledAction","enqueueSnackbar","classes","TRANSITION_DELAY","addScheduledAction","autoHideDuration","removeScheduledAction","getForwardPhotoSize","get","can_be_forwarded","content","photo","sizes","handleSend","photoSize","media","getInnerText","messageRef","current","targetChats","forEach","targetChatId","reply_to_message_id","disable_notifications","from_background","reply_markup","input_message_content","entities","disable_web_page_preview","clear_draft","size","width","height","id","thumbnail","added_sticker_file_ids","caption","ttl","from_chat_id","message_ids","as_album","handleChangeSelection","has","delete","set","console","log","forceUpdate","div","innerText","innerHTML","handleSearchKeyDown","event","keyCode","preventDefault","handleSearchKeyUp","searchRef","trim","searchText","searchResults","latinText","cyrillicText","chatsSource","concat","filter","hasSearchText","handleSearchPaste","plainText","clipboardData","getData","document","execCommand","handleMessageKeyUp","handleMessagePaste","title","toLocaleLowerCase","indexOf","toLowerCase","title1","username","setSearchFocus","setTimeout","element","focus","createRef","Map","componentDidMount","render","foundChats","borderColor","propTypes","number","array","object","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport { withSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ForwardTargetChat from '../Tile/ForwardTargetChat';\nimport { canSendMessages, getChatTitle, getChatUsername, isSupergroup } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { getCyrillicInput, getLatinInput } from '../../Utils/Language';\nimport { getInputMediaContent } from '../../Utils/Media';\nimport { borderStyle } from '../Theme';\nimport { NOTIFICATION_AUTO_HIDE_DURATION_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport UserStore from '../../Stores/UserStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './ForwardDialog.css';\n\nconst styles = theme => ({\n    close: {\n        padding: theme.spacing.unit / 2\n    },\n    dialog: {\n        color: theme.palette.text.primary\n    },\n    dialogContent: {\n        padding: 0,\n        display: 'flex',\n        position: 'relative'\n    },\n    searchList: {\n        background: theme.palette.background.paper\n    },\n    ...borderStyle(theme)\n});\n\nclass ForwardDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatIds: [],\n            savedMessages: null\n        };\n\n        this.searchRef = React.createRef();\n        this.messageRef = React.createRef();\n\n        this.targetChats = new Map();\n    }\n\n    componentDidMount() {\n        this.loadContent();\n\n        this.setSearchFocus();\n    }\n\n    loadContent = async () => {\n        this.getPublicMessageLink();\n\n        const promises = [];\n        const getChatsPromise = TdLibController.send({\n            '@type': 'getChats',\n            offset_order: '9223372036854775807',\n            offset_chat_id: 0,\n            limit: 100\n        });\n        promises.push(getChatsPromise);\n\n        const savedMessagesPromise = TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: UserStore.getMyId(),\n            force: true\n        });\n        promises.push(savedMessagesPromise);\n\n        const [chats, savedMessages] = await Promise.all(promises.map(x => x.catch(e => null)));\n\n        this.setState({\n            chatIds: chats.chat_ids,\n            savedMessages: savedMessages\n        });\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, chats.chat_ids);\n    };\n\n    getPublicMessageLink = async () => {\n        const { chatId, messageIds } = this.props;\n        if (!chatId) return;\n        if (!messageIds) return;\n        if (messageIds.length > 1) return;\n        if (!isSupergroup(chatId)) return;\n        if (!getChatUsername(chatId)) return;\n\n        const result = await TdLibController.send({\n            '@type': 'getPublicMessageLink',\n            chat_id: chatId,\n            message_id: messageIds[0],\n            for_album: false\n        });\n\n        this.setState({\n            publicMessageLink: result\n        });\n    };\n\n    handleClose = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateForward',\n            info: null\n        });\n    };\n\n    handleCopyLink = () => {\n        const { t } = this.props;\n        const { publicMessageLink } = this.state;\n\n        if (!publicMessageLink) return;\n        if (!publicMessageLink.link) return;\n\n        const key = `copy_link_${publicMessageLink.link}`;\n        const message = t('LinkCopied');\n        const action = null;\n\n        copy(publicMessageLink.link);\n\n        this.handleScheduledAction(key, message, action);\n    };\n\n    handleScheduledAction = (key, message, action) => {\n        if (!key) return;\n\n        const { enqueueSnackbar, classes } = this.props;\n        if (!enqueueSnackbar) return;\n\n        const TRANSITION_DELAY = 150;\n        if (\n            ApplicationStore.addScheduledAction(key, NOTIFICATION_AUTO_HIDE_DURATION_MS + 2 * TRANSITION_DELAY, action)\n        ) {\n            enqueueSnackbar(message, {\n                autoHideDuration: NOTIFICATION_AUTO_HIDE_DURATION_MS,\n                action: [\n                    <IconButton\n                        key='close'\n                        aria-label='Close'\n                        color='inherit'\n                        className={classes.close}\n                        onClick={() => ApplicationStore.removeScheduledAction(key)}>\n                        <CloseIcon />\n                    </IconButton>\n                ]\n            });\n        }\n    };\n\n    getForwardPhotoSize = (chatId, messageIds) => {\n        if (messageIds.length !== 1) return null;\n\n        const message = MessageStore.get(chatId, messageIds[0]);\n        if (!message) return null;\n\n        const { can_be_forwarded, content } = message;\n        if (!can_be_forwarded && content['@type'] === 'messageChatChangePhoto') {\n            const { photo } = content;\n            if (!photo) return null;\n\n            const { sizes } = photo;\n            if (sizes && sizes.length) {\n                return sizes[sizes.length - 1];\n            }\n        }\n\n        return null;\n    };\n\n    handleSend = () => {\n        this.handleClose();\n\n        const { chatId, messageIds, photoSize, media, link } = this.props;\n        if (!chatId && !messageIds && !messageIds && !photoSize && !media && !link) return;\n\n        const text = this.getInnerText(this.messageRef.current);\n\n        this.targetChats.forEach(targetChatId => {\n            if (media) {\n                const content = getInputMediaContent(media, text);\n                if (content) {\n                    TdLibController.send({\n                        '@type': 'sendMessage',\n                        chat_id: targetChatId,\n                        reply_to_message_id: 0,\n                        disable_notifications: false,\n                        from_background: false,\n                        reply_markup: null,\n                        input_message_content: content\n                    });\n                }\n\n                return;\n            }\n\n            if (link) {\n                if (text) {\n                    TdLibController.send({\n                        '@type': 'sendMessage',\n                        chat_id: targetChatId,\n                        reply_to_message_id: 0,\n                        disable_notifications: false,\n                        from_background: false,\n                        reply_markup: null,\n                        input_message_content: {\n                            '@type': 'inputMessageText',\n                            text: {\n                                '@type': 'formattedText',\n                                text: text,\n                                entities: null\n                            },\n                            disable_web_page_preview: true,\n                            clear_draft: false\n                        }\n                    });\n                }\n\n                TdLibController.send({\n                    '@type': 'sendMessage',\n                    chat_id: targetChatId,\n                    reply_to_message_id: 0,\n                    disable_notifications: false,\n                    from_background: false,\n                    reply_markup: null,\n                    input_message_content: {\n                        '@type': 'inputMessageText',\n                        text: {\n                            '@type': 'formattedText',\n                            text: link,\n                            entities: null\n                        },\n                        disable_web_page_preview: true,\n                        clear_draft: false\n                    }\n                });\n\n                return;\n            }\n\n            const size = photoSize || this.getForwardPhotoSize(chatId, messageIds);\n            if (size) {\n                const { width, height, photo } = size;\n\n                TdLibController.send({\n                    '@type': 'sendMessage',\n                    chat_id: targetChatId,\n                    reply_to_message_id: 0,\n                    disable_notifications: false,\n                    from_background: false,\n                    reply_markup: null,\n                    input_message_content: {\n                        '@type': 'inputMessagePhoto',\n                        photo: {\n                            '@type': 'inputFileId',\n                            id: photo.id\n                        },\n                        thumbnail: null,\n                        added_sticker_file_ids: [],\n                        width: width,\n                        height: height,\n                        caption: {\n                            '@type': 'formattedText',\n                            text: text,\n                            entities: null\n                        },\n                        ttl: 0\n                    }\n                });\n\n                return;\n            }\n\n            if (text) {\n                TdLibController.send({\n                    '@type': 'sendMessage',\n                    chat_id: targetChatId,\n                    reply_to_message_id: 0,\n                    disable_notifications: false,\n                    from_background: false,\n                    reply_markup: null,\n                    input_message_content: {\n                        '@type': 'inputMessageText',\n                        text: {\n                            '@type': 'formattedText',\n                            text: text,\n                            entities: null\n                        },\n                        disable_web_page_preview: true,\n                        clear_draft: false\n                    }\n                });\n            }\n\n            TdLibController.send({\n                '@type': 'forwardMessages',\n                chat_id: targetChatId,\n                from_chat_id: chatId,\n                message_ids: messageIds,\n                disable_notifications: false,\n                from_background: false,\n                as_album: false\n            });\n        });\n    };\n\n    handleChangeSelection = chatId => {\n        if (this.targetChats.has(chatId)) {\n            this.targetChats.delete(chatId);\n        } else {\n            this.targetChats.set(chatId, chatId);\n        }\n\n        console.log(this.targetChats);\n\n        this.forceUpdate();\n    };\n\n    getInnerText = div => {\n        const innerText = div.innerText;\n        const innerHTML = div.innerHTML;\n\n        if (innerText && innerText === '\\n' && innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n            div.innerHTML = '';\n        }\n\n        return innerText;\n    };\n\n    handleSearchKeyDown = event => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n        }\n    };\n\n    handleSearchKeyUp = () => {\n        const { chatIds, savedMessages } = this.state;\n\n        const innerHTML = this.searchRef.current.innerHTML;\n        if (innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n            this.searchRef.current.innerHTML = '';\n        }\n\n        const innerText = this.getInnerText(this.searchRef.current).trim();\n        if (!innerText) {\n            this.setState({ searchText: null, searchResults: [] });\n            return;\n        }\n\n        const latinText = getLatinInput(innerText);\n        const cyrillicText = getCyrillicInput(innerText);\n\n        const chatsSource = savedMessages\n            ? [savedMessages.id].concat(chatIds.filter(x => x !== savedMessages.id)).filter(x => canSendMessages(x))\n            : chatIds;\n\n        const searchResults = chatsSource.filter(\n            x =>\n                this.hasSearchText(x, innerText) ||\n                (latinText && this.hasSearchText(x, latinText)) ||\n                (cyrillicText && this.hasSearchText(x, cyrillicText))\n        );\n\n        this.setState({ searchText: innerText, searchResults: searchResults });\n    };\n\n    handleSearchPaste = event => {\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            document.execCommand('insertHTML', false, plainText);\n        }\n    };\n\n    handleMessageKeyUp = () => {\n        const innerHTML = this.messageRef.current.innerHTML;\n        if (innerHTML && (innerHTML === '<br>' || innerHTML === '<div><br></div>')) {\n            this.messageRef.current.innerHTML = '';\n        }\n    };\n\n    handleMessagePaste = event => {\n        const plainText = event.clipboardData.getData('text/plain');\n        if (plainText) {\n            event.preventDefault();\n            document.execCommand('insertHTML', false, plainText);\n        }\n    };\n\n    hasSearchText = (chatId, searchText) => {\n        const { t } = this.props;\n        const { savedMessages } = this.state;\n\n        if (savedMessages && chatId === savedMessages.id) {\n            const title = getChatTitle(chatId, true, t) || '';\n            if (title.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n                return true;\n            }\n        }\n\n        const title1 = getChatTitle(chatId, false, t) || '';\n        if (title1.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n            return true;\n        }\n\n        const username = getChatUsername(chatId) || '';\n        if (username.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n            return true;\n        }\n\n        return false;\n    };\n\n    setSearchFocus = () => {\n        setTimeout(() => {\n            if (this.searchRef.current) {\n                const element = this.searchRef.current;\n\n                element.focus();\n            }\n        }, 100);\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { chatIds, searchText, searchResults, savedMessages, publicMessageLink } = this.state;\n\n        const chatsSource = savedMessages\n            ? [savedMessages.id].concat(chatIds.filter(x => x !== savedMessages.id)).filter(x => canSendMessages(x))\n            : chatIds;\n\n        const chats = chatsSource.map(x => (\n            <ForwardTargetChat\n                key={x}\n                chatId={x}\n                selected={this.targetChats.has(x)}\n                onSelect={() => this.handleChangeSelection(x)}\n            />\n        ));\n\n        const foundChats = (searchResults || []).map(x => (\n            <ForwardTargetChat\n                key={x}\n                chatId={x}\n                selected={this.targetChats.has(x)}\n                onSelect={() => this.handleChangeSelection(x)}\n            />\n        ));\n\n        return (\n            <Dialog\n                open\n                onClose={this.handleClose}\n                aria-labelledby='forward-dialog-title'\n                aria-describedby='forward-dialog-description'\n                className={classes.dialog}>\n                <DialogTitle id='forward-dialog-title'>{t('ShareSendTo')}</DialogTitle>\n                <div\n                    ref={this.searchRef}\n                    id='forward-dialog-search'\n                    contentEditable\n                    suppressContentEditableWarning\n                    placeholder={t('Search')}\n                    onKeyDown={this.handleSearchKeyDown}\n                    onKeyUp={this.handleSearchKeyUp}\n                    onPaste={this.handleSearchPaste}\n                />\n                <div className={classNames(classes.borderColor, 'forward-dialog-content')}>\n                    <div className='forward-dialog-list'>{chats}</div>\n                    {searchText && (\n                        <div className={classNames(classes.searchList, 'forward-dialog-search-list')}>{foundChats}</div>\n                    )}\n                </div>\n                {this.targetChats.size > 0 && (\n                    <div\n                        ref={this.messageRef}\n                        id='forward-dialog-message'\n                        contentEditable\n                        suppressContentEditableWarning\n                        placeholder={t('ShareComment')}\n                        onKeyUp={this.handleMessageKeyUp}\n                        onPaste={this.handleMessagePaste}\n                    />\n                )}\n                <DialogActions>\n                    <Button onClick={this.handleClose} color='primary'>\n                        {t('Cancel')}\n                    </Button>\n                    {this.targetChats.size > 0 && (\n                        <Button onClick={this.handleSend} color='primary' autoFocus>\n                            {t('Send')}\n                        </Button>\n                    )}\n                    {!this.targetChats.size && publicMessageLink && (\n                        <Button onClick={this.handleCopyLink} color='primary'>\n                            {t('CopyLink')}\n                        </Button>\n                    )}\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nForwardDialog.propTypes = {\n    chatId: PropTypes.number,\n    messageIds: PropTypes.array,\n    photoSize: PropTypes.object,\n    media: PropTypes.object\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation(),\n    withSnackbar\n);\n\nexport default enhance(ForwardDialog);\n"]},"metadata":{},"sourceType":"module"}