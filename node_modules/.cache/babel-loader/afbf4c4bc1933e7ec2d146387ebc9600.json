{"ast":null,"code":"import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import React from'react';import classNames from'classnames';import withStyles from'@material-ui/core/styles/withStyles';import ChatStore from'../../Stores/ChatStore';import MessageStore from'../../Stores/MessageStore';import'./MessageStatus.css';var styles=function styles(theme){return{messageStatusFailed:{background:theme.palette.error.light},messageStatusPending:{background:theme.palette.primary.light},messageStatusSucceeded:{background:theme.palette.primary.light}};};var MessageStatus=/*#__PURE__*/function(_React$Component){_inherits(MessageStatus,_React$Component);function MessageStatus(props){var _this;_classCallCheck(this,MessageStatus);_this=_possibleConstructorReturn(this,_getPrototypeOf(MessageStatus).call(this,props));_this.onUpdateMessageSend=function(update){var _this$props=_this.props,chatId=_this$props.chatId,messageId=_this$props.messageId;var old_message_id=update.old_message_id,message=update.message;if(messageId!==old_message_id)return;if(!message)return;var chat_id=message.chat_id,id=message.id,sending_state=message.sending_state;if(chatId!==chat_id)return;_this.newMessageId=id;_this.setState({sendingState:sending_state});};_this.onUpdateChatReadOutbox=function(update){var _this$props2=_this.props,chatId=_this$props2.chatId,messageId=_this$props2.messageId;var chat_id=update.chat_id,last_read_outbox_message_id=update.last_read_outbox_message_id;var _assertThisInitialize=_assertThisInitialized(_this),newMessageId=_assertThisInitialize.newMessageId;if(chatId!==chat_id)return;if(newMessageId&&newMessageId<=last_read_outbox_message_id||messageId<=last_read_outbox_message_id){_this.setState({sendingState:null,unread:false});}};_this.state={prevChatId:props.chatId,prevMessageId:props.messageId,sendingState:props.sendingState,unread:true};return _this;}_createClass(MessageStatus,[{key:\"componentDidMount\",value:function componentDidMount(){ChatStore.on('updateChatReadOutbox',this.onUpdateChatReadOutbox);MessageStore.on('updateMessageSendFailed',this.onUpdateMessageSend);MessageStore.on('updateMessageSendSucceeded',this.onUpdateMessageSend);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){ChatStore.removeListener('updateChatReadOutbox',this.onUpdateChatReadOutbox);MessageStore.removeListener('updateMessageSendFailed',this.onUpdateMessageSend);MessageStore.removeListener('updateMessageSendSucceeded',this.onUpdateMessageSend);}},{key:\"render\",value:function render(){var classes=this.props.classes;var _this$state=this.state,sendingState=_this$state.sendingState,unread=_this$state.unread;var stateClassName=classNames('message-status-succeeded',classes.messageStatusSucceeded);if(sendingState){stateClassName=sendingState['@type']==='messageSendingStateFailed'?classNames('message-status-failed',classes.messageStatusFailed):classNames('message-status-pending',classes.messageStatusPending);}return unread&&React.createElement(\"i\",{className:classNames('message-status-icon',stateClassName)});}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.chatId!==state.prevChatId||props.messageId!==state.prevMessageId){return{prevChatId:props.chatId,prevMessageId:props.messageId,sendingState:props.sendingState};}return null;}}]);return MessageStatus;}(React.Component);export default withStyles(styles,{withTheme:true})(MessageStatus);","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Message/MessageStatus.js"],"names":["React","classNames","withStyles","ChatStore","MessageStore","styles","theme","messageStatusFailed","background","palette","error","light","messageStatusPending","primary","messageStatusSucceeded","MessageStatus","props","onUpdateMessageSend","update","chatId","messageId","old_message_id","message","chat_id","id","sending_state","newMessageId","setState","sendingState","onUpdateChatReadOutbox","last_read_outbox_message_id","unread","state","prevChatId","prevMessageId","on","removeListener","classes","stateClassName","Component","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport ChatStore from '../../Stores/ChatStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport './MessageStatus.css';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n    messageStatusFailed: {\n        background: theme.palette.error.light\n    },\n    messageStatusPending: {\n        background: theme.palette.primary.light\n    },\n    messageStatusSucceeded: {\n        background: theme.palette.primary.light\n    }\n});\n\nclass MessageStatus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            prevChatId: props.chatId,\n            prevMessageId: props.messageId,\n            sendingState: props.sendingState,\n            unread: true\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.chatId !== state.prevChatId || props.messageId !== state.prevMessageId) {\n            return {\n                prevChatId: props.chatId,\n                prevMessageId: props.messageId,\n                sendingState: props.sendingState\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        ChatStore.on('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n\n        MessageStore.on('updateMessageSendFailed', this.onUpdateMessageSend);\n        MessageStore.on('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('updateChatReadOutbox', this.onUpdateChatReadOutbox);\n\n        MessageStore.removeListener('updateMessageSendFailed', this.onUpdateMessageSend);\n        MessageStore.removeListener('updateMessageSendSucceeded', this.onUpdateMessageSend);\n    }\n\n    onUpdateMessageSend = update => {\n        const { chatId, messageId } = this.props;\n        const { old_message_id, message } = update;\n\n        if (messageId !== old_message_id) return;\n        if (!message) return;\n\n        const { chat_id, id, sending_state } = message;\n        if (chatId !== chat_id) return;\n\n        this.newMessageId = id;\n        this.setState({ sendingState: sending_state });\n    };\n\n    onUpdateChatReadOutbox = update => {\n        const { chatId, messageId } = this.props;\n        const { chat_id, last_read_outbox_message_id } = update;\n        const { newMessageId } = this;\n\n        if (chatId !== chat_id) return;\n\n        if ((newMessageId && newMessageId <= last_read_outbox_message_id) || messageId <= last_read_outbox_message_id) {\n            this.setState({ sendingState: null, unread: false });\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { sendingState, unread } = this.state;\n\n        let stateClassName = classNames('message-status-succeeded', classes.messageStatusSucceeded);\n        if (sendingState) {\n            stateClassName =\n                sendingState['@type'] === 'messageSendingStateFailed'\n                    ? classNames('message-status-failed', classes.messageStatusFailed)\n                    : classNames('message-status-pending', classes.messageStatusPending);\n        }\n\n        return unread && <i className={classNames('message-status-icon', stateClassName)} />;\n    }\n}\n\nMessageStatus.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    sendingState: PropTypes.object\n};\n\nexport default withStyles(styles, { withTheme: true })(MessageStatus);\n"]},"metadata":{},"sourceType":"module"}