{"ast":null,"code":"import _slicedToArray from \"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Viewer/MediaViewerContent.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getAnimationData, getMediaFile, getMediaPreviewFile } from '../../Utils/File';\nimport { getText, isAnimationMessage, isLottieMessage, isVideoMessage } from '../../Utils/Message';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MediaViewerContent.css';\nconst Lottie = React.lazy(() => import('./Lottie'));\n\nclass MediaViewerContent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateDocumentBlob = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.updateAnimationData();\n      }\n    };\n\n    this.updateAnimationData = async () => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n\n      if (!isLottieMessage(chatId, messageId)) {\n        return;\n      }\n\n      const file = this.state.file;\n      const animationData = await getAnimationData(file);\n      this.setState({\n        animationData\n      });\n    };\n\n    this.onClientUpdateMediaBlob = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId,\n            size = _this$props3.size;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        const _getMediaFile = getMediaFile(chatId, messageId, size),\n              _getMediaFile2 = _slicedToArray(_getMediaFile, 3),\n              width = _getMediaFile2[0],\n              height = _getMediaFile2[1],\n              file = _getMediaFile2[2];\n\n        this.setState({\n          width,\n          height,\n          file\n        });\n      }\n    };\n\n    this.onClientUpdateMediaThumbnailBlob = update => {\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        const _getMediaPreviewFile = getMediaPreviewFile(chatId, messageId),\n              _getMediaPreviewFile2 = _slicedToArray(_getMediaPreviewFile, 3),\n              width = _getMediaPreviewFile2[0],\n              height = _getMediaPreviewFile2[1],\n              file = _getMediaPreviewFile2[2];\n\n        this.setState({\n          thumbnailWidth: width,\n          thumbnailHeight: height,\n          thumbnail: file\n        });\n      }\n    };\n\n    this.onUpdateMessageContent = update => {\n      const _this$props5 = this.props,\n            chatId = _this$props5.chatId,\n            messageId = _this$props5.messageId,\n            size = _this$props5.size;\n      const chat_id = update.chat_id,\n            message_id = update.message_id;\n\n      if (chatId === chat_id && messageId === message_id) {\n        const _getMediaFile3 = getMediaFile(chatId, messageId, size),\n              _getMediaFile4 = _slicedToArray(_getMediaFile3, 3),\n              width = _getMediaFile4[0],\n              height = _getMediaFile4[1],\n              file = _getMediaFile4[2];\n\n        const message = MessageStore.get(chatId, messageId);\n        const text = getText(message);\n        this.setState({\n          width: width,\n          height: height,\n          file: file,\n          text: text\n        });\n      }\n    };\n\n    this.handleContentClick = event => {\n      if (event) event.stopPropagation();\n    };\n\n    this.changeSpeed = speed => {\n      this.setState({\n        speed\n      });\n    };\n\n    this.state = {};\n    this.videoRef = React.createRef();\n    this.lottieRef = React.createRef();\n    this.updateAnimationData();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const chatId = props.chatId,\n          messageId = props.messageId,\n          size = props.size;\n\n    if (chatId !== state.prevChatId || messageId !== state.prevMessageId) {\n      let _getMediaFile5 = getMediaFile(chatId, messageId, size),\n          _getMediaFile6 = _slicedToArray(_getMediaFile5, 3),\n          width = _getMediaFile6[0],\n          height = _getMediaFile6[1],\n          file = _getMediaFile6[2];\n\n      file = FileStore.get(file.id) || file;\n\n      let _getMediaPreviewFile3 = getMediaPreviewFile(chatId, messageId),\n          _getMediaPreviewFile4 = _slicedToArray(_getMediaPreviewFile3, 3),\n          thumbnailWidth = _getMediaPreviewFile4[0],\n          thumbnailHeight = _getMediaPreviewFile4[1],\n          thumbnail = _getMediaPreviewFile4[2];\n\n      thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n      const message = MessageStore.get(chatId, messageId);\n      const text = getText(message);\n      return {\n        prevChatId: chatId,\n        prevMessageId: messageId,\n        speed: 1,\n        isPlaying: false,\n        width,\n        height,\n        file,\n        text,\n        thumbnailWidth,\n        thumbnailHeight,\n        thumbnail\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n    FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n    MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const _this$props6 = this.props,\n          chatId = _this$props6.chatId,\n          messageId = _this$props6.messageId;\n\n    if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n      this.updateAnimationData();\n    }\n  }\n\n  render() {\n    const _this$props7 = this.props,\n          chatId = _this$props7.chatId,\n          messageId = _this$props7.messageId;\n    const _this$state = this.state,\n          animationData = _this$state.animationData,\n          width = _this$state.width,\n          height = _this$state.height,\n          file = _this$state.file,\n          text = _this$state.text,\n          thumbnailWidth = _this$state.thumbnailWidth,\n          thumbnailHeight = _this$state.thumbnailHeight,\n          thumbnail = _this$state.thumbnail,\n          isPlaying = _this$state.isPlaying;\n    if (!file) return null;\n    const blob = FileStore.getBlob(file.id) || file.blob;\n    const src = FileStore.getBlobUrl(blob) || '';\n    const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n    const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n    const isBlurred = isBlurredThumbnail({\n      width: thumbnailWidth,\n      height: thumbnailHeight\n    });\n    const isVideo = isVideoMessage(chatId, messageId);\n    const isAnimation = isAnimationMessage(chatId, messageId);\n    const isLottie = isLottieMessage(chatId, messageId);\n    let videoWidth = width;\n    let videoHeight = height;\n\n    if (Math.max(videoWidth, videoHeight) > 640) {\n      const scale = 640 / Math.max(videoWidth, videoHeight);\n      videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n      videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n    }\n\n    let content = null;\n\n    if (isVideo) {\n      content = React.createElement(\"div\", {\n        className: \"media-viewer-content-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        className: \"media-viewer-content-video-player\",\n        src: src,\n        onClick: this.handleContentClick,\n        controls: true,\n        autoPlay: true,\n        width: videoWidth,\n        height: videoHeight,\n        onPlay: () => {\n          this.setState({\n            isPlaying: true\n          });\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaViewerPlay'\n          });\n        },\n        onCanPlay: () => {\n          const player = this.videoRef.current;\n\n          if (player) {\n            player.volume = PlayerStore.volume;\n          }\n        },\n        onPause: () => {\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaViewerPause'\n          });\n        },\n        onEnded: () => {\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaViewerEnded'\n          });\n        },\n        onVolumeChange: () => {\n          const player = this.videoRef.current;\n\n          if (player) {\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateMediaVolume',\n              volume: player.volume\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n        className: classNames('media-viewer-content-video-thumbnail', {\n          'media-blurred': isBlurred\n        }),\n        src: thumbnailSrc,\n        alt: \"\",\n        width: videoWidth,\n        height: videoHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"media-viewer-content-video-thumbnail\",\n        style: {\n          width: videoWidth,\n          height: videoHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      })));\n    } else if (isAnimation) {\n      content = React.createElement(\"div\", {\n        className: \"media-viewer-content-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        className: \"media-viewer-content-video-player\",\n        src: src,\n        onClick: this.handleContentClick,\n        loop: true,\n        autoPlay: true,\n        width: videoWidth,\n        height: videoHeight,\n        onPlay: () => {\n          this.setState({\n            isPlaying: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }), !isPlaying && (!src && thumbnailSrc ? React.createElement(\"img\", {\n        className: classNames('media-viewer-content-video-thumbnail', {\n          'media-blurred': isBlurred\n        }),\n        src: thumbnailSrc,\n        alt: \"\",\n        width: videoWidth,\n        height: videoHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"media-viewer-content-video-thumbnail\",\n        style: {\n          width: videoWidth,\n          height: videoHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      })));\n    } else if (isLottie) {\n      const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        //path: src,\n        animationData: animationData,\n        rendererSettings: {\n          preserveAspectRatio: 'xMidYMid slice'\n        }\n      };\n      const speed = this.state.speed;\n      content = React.createElement(Lottie, {\n        ref: this.lottieRef,\n        speed: speed,\n        options: defaultOptions,\n        height: \"auto\",\n        width: 400,\n        isStopped: false,\n        isPaused: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      });\n    } else {\n      content = React.createElement(\"img\", {\n        className: \"media-viewer-content-image\",\n        src: src,\n        alt: \"\",\n        onClick: this.handleContentClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"media-viewer-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(React.Suspense, {\n      fallback: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, content), React.createElement(FileProgress, {\n      file: file,\n      zIndex: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), text && text.length > 0 && React.createElement(MediaCaption, {\n      text: text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }));\n  }\n\n}\n\nMediaViewerContent.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired\n};\nexport default MediaViewerContent;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/Viewer/MediaViewerContent.js"],"names":["React","PropTypes","classNames","FileProgress","MediaCaption","getAnimationData","getMediaFile","getMediaPreviewFile","getText","isAnimationMessage","isLottieMessage","isVideoMessage","isBlurredThumbnail","FileStore","MessageStore","PlayerStore","TdLibController","Lottie","lazy","MediaViewerContent","Component","constructor","props","onClientUpdateDocumentBlob","update","chatId","messageId","updateAnimationData","file","state","animationData","setState","onClientUpdateMediaBlob","size","width","height","onClientUpdateMediaThumbnailBlob","thumbnailWidth","thumbnailHeight","thumbnail","onUpdateMessageContent","chat_id","message_id","message","get","text","handleContentClick","event","stopPropagation","changeSpeed","speed","videoRef","createRef","lottieRef","getDerivedStateFromProps","prevChatId","prevMessageId","id","isPlaying","componentDidMount","on","componentWillUnmount","removeListener","componentDidUpdate","prevProps","prevState","snapshot","render","blob","getBlob","src","getBlobUrl","thumbnailBlob","thumbnailSrc","isBlurred","isVideo","isAnimation","isLottie","videoWidth","videoHeight","Math","max","scale","floor","content","clientUpdate","player","current","volume","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","length","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FileProgress from './FileProgress';\nimport MediaCaption from './MediaCaption';\nimport { getAnimationData, getMediaFile, getMediaPreviewFile } from '../../Utils/File';\nimport { getText, isAnimationMessage, isLottieMessage, isVideoMessage } from '../../Utils/Message';\nimport { isBlurredThumbnail } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport MessageStore from '../../Stores/MessageStore';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './MediaViewerContent.css';\n\nconst Lottie = React.lazy(() => import('./Lottie'));\n\nclass MediaViewerContent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.videoRef = React.createRef();\n        this.lottieRef = React.createRef();\n\n        this.updateAnimationData();\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { chatId, messageId, size } = props;\n\n        if (chatId !== state.prevChatId || messageId !== state.prevMessageId) {\n            let [width, height, file] = getMediaFile(chatId, messageId, size);\n            file = FileStore.get(file.id) || file;\n\n            let [thumbnailWidth, thumbnailHeight, thumbnail] = getMediaPreviewFile(chatId, messageId);\n            thumbnail = FileStore.get(thumbnail.id) || thumbnail;\n\n            const message = MessageStore.get(chatId, messageId);\n            const text = getText(message);\n\n            return {\n                prevChatId: chatId,\n                prevMessageId: messageId,\n\n                speed: 1,\n                isPlaying: false,\n                width,\n                height,\n                file,\n                text,\n                thumbnailWidth,\n                thumbnailHeight,\n                thumbnail\n            };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n        FileStore.on('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.on('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        MessageStore.on('updateMessageContent', this.onUpdateMessageContent);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateDocumentBlob', this.onClientUpdateDocumentBlob);\n        FileStore.removeListener('clientUpdatePhotoBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateAnimationBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        FileStore.removeListener('clientUpdateAnimationThumbnailBlob', this.onClientUpdateMediaThumbnailBlob);\n        MessageStore.removeListener('updateMessageContent', this.onUpdateMessageContent);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { chatId, messageId } = this.props;\n\n        if (prevProps.chatId !== chatId || prevProps.messageId !== messageId) {\n            this.updateAnimationData();\n        }\n    }\n\n    onClientUpdateDocumentBlob = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.updateAnimationData();\n        }\n    };\n\n    updateAnimationData = async () => {\n        const { chatId, messageId } = this.props;\n\n        if (!isLottieMessage(chatId, messageId)) {\n            return;\n        }\n\n        const { file } = this.state;\n        const animationData = await getAnimationData(file);\n\n        this.setState({ animationData });\n    };\n\n    onClientUpdateMediaBlob = update => {\n        const { chatId, messageId, size } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const [width, height, file] = getMediaFile(chatId, messageId, size);\n            this.setState({\n                width,\n                height,\n                file\n            });\n        }\n    };\n\n    onClientUpdateMediaThumbnailBlob = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const [width, height, file] = getMediaPreviewFile(chatId, messageId);\n            this.setState({\n                thumbnailWidth: width,\n                thumbnailHeight: height,\n                thumbnail: file\n            });\n        }\n    };\n\n    onUpdateMessageContent = update => {\n        const { chatId, messageId, size } = this.props;\n        const { chat_id, message_id } = update;\n\n        if (chatId === chat_id && messageId === message_id) {\n            const [width, height, file] = getMediaFile(chatId, messageId, size);\n            const message = MessageStore.get(chatId, messageId);\n            const text = getText(message);\n            this.setState({\n                width: width,\n                height: height,\n                file: file,\n                text: text\n            });\n        }\n    };\n\n    handleContentClick = event => {\n        if (event) event.stopPropagation();\n    };\n\n    changeSpeed = speed => {\n        this.setState({\n            speed\n        });\n    };\n\n    render() {\n        const { chatId, messageId } = this.props;\n        const {\n            animationData,\n            width,\n            height,\n            file,\n            text,\n            thumbnailWidth,\n            thumbnailHeight,\n            thumbnail,\n            isPlaying\n        } = this.state;\n        if (!file) return null;\n\n        const blob = FileStore.getBlob(file.id) || file.blob;\n        const src = FileStore.getBlobUrl(blob) || '';\n\n        const thumbnailBlob = thumbnail ? FileStore.getBlob(thumbnail.id) || thumbnail.blob : null;\n        const thumbnailSrc = FileStore.getBlobUrl(thumbnailBlob);\n        const isBlurred = isBlurredThumbnail({ width: thumbnailWidth, height: thumbnailHeight });\n\n        const isVideo = isVideoMessage(chatId, messageId);\n        const isAnimation = isAnimationMessage(chatId, messageId);\n        const isLottie = isLottieMessage(chatId, messageId);\n\n        let videoWidth = width;\n        let videoHeight = height;\n        if (Math.max(videoWidth, videoHeight) > 640) {\n            const scale = 640 / Math.max(videoWidth, videoHeight);\n            videoWidth = videoWidth > videoHeight ? 640 : Math.floor(videoWidth * scale);\n            videoHeight = videoHeight > videoWidth ? 640 : Math.floor(videoHeight * scale);\n        }\n\n        let content = null;\n        if (isVideo) {\n            content = (\n                <div className='media-viewer-content-wrapper'>\n                    <video\n                        ref={this.videoRef}\n                        className='media-viewer-content-video-player'\n                        src={src}\n                        onClick={this.handleContentClick}\n                        controls\n                        autoPlay\n                        width={videoWidth}\n                        height={videoHeight}\n                        onPlay={() => {\n                            this.setState({ isPlaying: true });\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateMediaViewerPlay'\n                            });\n                        }}\n                        onCanPlay={() => {\n                            const player = this.videoRef.current;\n                            if (player) {\n                                player.volume = PlayerStore.volume;\n                            }\n                        }}\n                        onPause={() => {\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateMediaViewerPause'\n                            });\n                        }}\n                        onEnded={() => {\n                            TdLibController.clientUpdate({\n                                '@type': 'clientUpdateMediaViewerEnded'\n                            });\n                        }}\n                        onVolumeChange={() => {\n                            const player = this.videoRef.current;\n                            if (player) {\n                                TdLibController.clientUpdate({\n                                    '@type': 'clientUpdateMediaVolume',\n                                    volume: player.volume\n                                });\n                            }\n                        }}\n                    />\n                    {!isPlaying &&\n                        (!src && thumbnailSrc ? (\n                            <img\n                                className={classNames('media-viewer-content-video-thumbnail', {\n                                    'media-blurred': isBlurred\n                                })}\n                                src={thumbnailSrc}\n                                alt=''\n                                width={videoWidth}\n                                height={videoHeight}\n                            />\n                        ) : (\n                            <div\n                                className='media-viewer-content-video-thumbnail'\n                                style={{\n                                    width: videoWidth,\n                                    height: videoHeight\n                                }}\n                            />\n                        ))}\n                </div>\n            );\n        } else if (isAnimation) {\n            content = (\n                <div className='media-viewer-content-wrapper'>\n                    <video\n                        className='media-viewer-content-video-player'\n                        src={src}\n                        onClick={this.handleContentClick}\n                        loop\n                        autoPlay\n                        width={videoWidth}\n                        height={videoHeight}\n                        onPlay={() => {\n                            this.setState({ isPlaying: true });\n                        }}\n                    />\n                    {!isPlaying &&\n                        (!src && thumbnailSrc ? (\n                            <img\n                                className={classNames('media-viewer-content-video-thumbnail', {\n                                    'media-blurred': isBlurred\n                                })}\n                                src={thumbnailSrc}\n                                alt=''\n                                width={videoWidth}\n                                height={videoHeight}\n                            />\n                        ) : (\n                            <div\n                                className='media-viewer-content-video-thumbnail'\n                                style={{\n                                    width: videoWidth,\n                                    height: videoHeight\n                                }}\n                            />\n                        ))}\n                </div>\n            );\n        } else if (isLottie) {\n            const defaultOptions = {\n                loop: true,\n                autoplay: true,\n                //path: src,\n                animationData: animationData,\n                rendererSettings: {\n                    preserveAspectRatio: 'xMidYMid slice'\n                }\n            };\n            const { speed } = this.state;\n\n            content = (\n                <Lottie\n                    ref={this.lottieRef}\n                    speed={speed}\n                    options={defaultOptions}\n                    height='auto'\n                    width={400}\n                    isStopped={false}\n                    isPaused={false}\n                />\n            );\n        } else {\n            content = <img className='media-viewer-content-image' src={src} alt='' onClick={this.handleContentClick} />;\n        }\n\n        return (\n            <div className='media-viewer-content'>\n                <React.Suspense fallback=''>{content}</React.Suspense>\n                {/*<img className='media-viewer-content-image-preview' src={previewSrc} alt='' />*/}\n                <FileProgress file={file} zIndex={2} />\n                {text && text.length > 0 && <MediaCaption text={text} />}\n            </div>\n        );\n    }\n}\n\nMediaViewerContent.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired\n};\n\nexport default MediaViewerContent;\n"]},"metadata":{},"sourceType":"module"}