{"ast":null,"code":"import _classCallCheck from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yosuahalim/Documents/Projects/telegram-app/node_modules/@babel/runtime/helpers/esm/inherits\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import{EventEmitter}from'events';import TdLibController from'../Controllers/TdLibController';var InstantViewStore=/*#__PURE__*/function(_EventEmitter){_inherits(InstantViewStore,_EventEmitter);function InstantViewStore(){var _this;_classCallCheck(this,InstantViewStore);_this=_possibleConstructorReturn(this,_getPrototypeOf(InstantViewStore).call(this));_this.reset=function(){_this.items=[];};_this.onUpdate=function(update){};_this.onClientUpdate=function(update){switch(update['@type']){case'clientUpdateBlocksInView':{_this.emit('clientUpdateBlocksInView',update);break;}case'clientUpdateInstantViewContent':{var content=update.content;if(content){_this.items.push(content.instantView);}else{_this.items=[];}_this.emit('clientUpdateInstantViewContent',update);break;}case'clientUpdateInstantViewUrl':{_this.emit('clientUpdateInstantViewUrl',update);break;}case'clientUpdateInstantViewViewerContent':{var _content=update.content;_this.viewerContent=_content;_this.emit('clientUpdateInstantViewViewerContent',update);break;}case'clientUpdatePrevInstantView':{if(_this.items.length<=1)return;_this.items.pop();var prevInstantView=_this.items.pop();TdLibController.clientUpdate({'@type':'clientUpdateInstantViewContent',content:{instantView:prevInstantView}});break;}default:break;}};_this.addTdLibListener=function(){TdLibController.addListener('update',_this.onUpdate);TdLibController.addListener('clientUpdate',_this.onClientUpdate);};_this.removeTdLibListener=function(){TdLibController.removeListener('update',_this.onUpdate);TdLibController.removeListener('clientUpdate',_this.onClientUpdate);};_this.reset();_this.addTdLibListener();_this.setMaxListeners(Infinity);return _this;}_createClass(InstantViewStore,[{key:\"hasPrev\",value:function hasPrev(){return this.items.length>1;}},{key:\"getCurrent\",value:function getCurrent(){return this.items.length>0?this.items[this.items.length-1]:null;}}]);return InstantViewStore;}(EventEmitter);var store=new InstantViewStore();window.instantView=store;export default store;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Stores/InstantViewStore.js"],"names":["EventEmitter","TdLibController","InstantViewStore","reset","items","onUpdate","update","onClientUpdate","emit","content","push","instantView","viewerContent","length","pop","prevInstantView","clientUpdate","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","store","window"],"mappings":"kqBAAA;;;;;GAOA,OAASA,YAAT,KAA6B,QAA7B,CACA,MAAOC,CAAAA,eAAP,KAA4B,gCAA5B,C,GAEMC,CAAAA,gB,gFACF,2BAAc,kDACV,oFADU,MASdC,KATc,CASN,UAAM,CACV,MAAKC,KAAL,CAAa,EAAb,CACH,CAXa,OAadC,QAbc,CAaH,SAAAC,MAAM,CAAI,CAAE,CAbT,OAedC,cAfc,CAeG,SAAAD,MAAM,CAAI,CACvB,OAAQA,MAAM,CAAC,OAAD,CAAd,EACI,IAAK,0BAAL,CAAiC,CAC7B,MAAKE,IAAL,CAAU,0BAAV,CAAsCF,MAAtC,EACA,MACH,CACD,IAAK,gCAAL,CAAuC,IAC3BG,CAAAA,OAD2B,CACfH,MADe,CAC3BG,OAD2B,CAGnC,GAAIA,OAAJ,CAAa,CACT,MAAKL,KAAL,CAAWM,IAAX,CAAgBD,OAAO,CAACE,WAAxB,EACH,CAFD,IAEO,CACH,MAAKP,KAAL,CAAa,EAAb,CACH,CAED,MAAKI,IAAL,CAAU,gCAAV,CAA4CF,MAA5C,EAEA,MACH,CACD,IAAK,4BAAL,CAAmC,CAC/B,MAAKE,IAAL,CAAU,4BAAV,CAAwCF,MAAxC,EACA,MACH,CACD,IAAK,sCAAL,CAA6C,IACjCG,CAAAA,QADiC,CACrBH,MADqB,CACjCG,OADiC,CAGzC,MAAKG,aAAL,CAAqBH,QAArB,CAEA,MAAKD,IAAL,CAAU,sCAAV,CAAkDF,MAAlD,EACA,MACH,CACD,IAAK,6BAAL,CAAoC,CAChC,GAAI,MAAKF,KAAL,CAAWS,MAAX,EAAqB,CAAzB,CAA4B,OAE5B,MAAKT,KAAL,CAAWU,GAAX,GACA,GAAMC,CAAAA,eAAe,CAAG,MAAKX,KAAL,CAAWU,GAAX,EAAxB,CAEAb,eAAe,CAACe,YAAhB,CAA6B,CACzB,QAAS,gCADgB,CAEzBP,OAAO,CAAE,CACLE,WAAW,CAAEI,eADR,CAFgB,CAA7B,EAOA,MACH,CACD,QACI,MA9CR,CAgDH,CAhEa,OAkEdE,gBAlEc,CAkEK,UAAM,CACrBhB,eAAe,CAACiB,WAAhB,CAA4B,QAA5B,CAAsC,MAAKb,QAA3C,EACAJ,eAAe,CAACiB,WAAhB,CAA4B,cAA5B,CAA4C,MAAKX,cAAjD,EACH,CArEa,OAuEdY,mBAvEc,CAuEQ,UAAM,CACxBlB,eAAe,CAACmB,cAAhB,CAA+B,QAA/B,CAAyC,MAAKf,QAA9C,EACAJ,eAAe,CAACmB,cAAhB,CAA+B,cAA/B,CAA+C,MAAKb,cAApD,EACH,CA1Ea,CAGV,MAAKJ,KAAL,GAEA,MAAKc,gBAAL,GACA,MAAKI,eAAL,CAAqBC,QAArB,EANU,aAOb,C,sEAqES,CACN,MAAO,MAAKlB,KAAL,CAAWS,MAAX,CAAoB,CAA3B,CACH,C,+CAEY,CACT,MAAO,MAAKT,KAAL,CAAWS,MAAX,CAAoB,CAApB,CAAwB,KAAKT,KAAL,CAAW,KAAKA,KAAL,CAAWS,MAAX,CAAoB,CAA/B,CAAxB,CAA4D,IAAnE,CACH,C,8BAnF0Bb,Y,EAsF/B,GAAMuB,CAAAA,KAAK,CAAG,GAAIrB,CAAAA,gBAAJ,EAAd,CACAsB,MAAM,CAACb,WAAP,CAAqBY,KAArB,CACA,cAAeA,CAAAA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass InstantViewStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = [];\n    };\n\n    onUpdate = update => {};\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateBlocksInView': {\n                this.emit('clientUpdateBlocksInView', update);\n                break;\n            }\n            case 'clientUpdateInstantViewContent': {\n                const { content } = update;\n\n                if (content) {\n                    this.items.push(content.instantView);\n                } else {\n                    this.items = [];\n                }\n\n                this.emit('clientUpdateInstantViewContent', update);\n\n                break;\n            }\n            case 'clientUpdateInstantViewUrl': {\n                this.emit('clientUpdateInstantViewUrl', update);\n                break;\n            }\n            case 'clientUpdateInstantViewViewerContent': {\n                const { content } = update;\n\n                this.viewerContent = content;\n\n                this.emit('clientUpdateInstantViewViewerContent', update);\n                break;\n            }\n            case 'clientUpdatePrevInstantView': {\n                if (this.items.length <= 1) return;\n\n                this.items.pop();\n                const prevInstantView = this.items.pop();\n\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateInstantViewContent',\n                    content: {\n                        instantView: prevInstantView\n                    }\n                });\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    hasPrev() {\n        return this.items.length > 1;\n    }\n\n    getCurrent() {\n        return this.items.length > 0 ? this.items[this.items.length - 1] : null;\n    }\n}\n\nconst store = new InstantViewStore();\nwindow.instantView = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}