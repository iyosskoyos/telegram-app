{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/VoiceNoteTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport DocumentTile from './DocumentTile';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport './VoiceNoteTile.css';\n\nclass VoiceNoteTile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateMediaEnd = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          active: false,\n          playing: false,\n          currentTime: 0\n        });\n      }\n    };\n\n    this.onClientUpdateMediaPlay = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          playing: true\n        });\n      } else {\n        this.setState({\n          playing: false\n        });\n      }\n    };\n\n    this.onClientUpdateMediaPause = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          playing: false\n        });\n      }\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (!this.state.active) {\n          this.setState({\n            active: true,\n            currentTime: 0,\n            playing: true\n          });\n        }\n      } else if (this.state.active) {\n        this.setState({\n          active: false,\n          currentTime: 0,\n          playing: false\n        });\n      }\n    };\n\n    const _chatId = props.chatId,\n          _messageId = props.messageId;\n    const time = PlayerStore.time,\n          message = PlayerStore.message,\n          playing = PlayerStore.playing;\n    const active = message && message.chat_id === _chatId && message.id === _messageId;\n    this.state = {\n      active: active,\n      playing: active ? playing : false,\n      currentTime: active && time ? time.currentTime : 0,\n      duration: active && time ? time.duration : 0\n    };\n  }\n\n  componentDidMount() {\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n    PlayerStore.on('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n    PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  componentWillUnmount() {\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n    PlayerStore.removeListener('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n    PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          file = _this$props5.file,\n          openMedia = _this$props5.openMedia;\n    const playing = this.state.playing;\n    return React.createElement(DocumentTile, {\n      thumbnail: null,\n      file: file,\n      openMedia: openMedia,\n      icon: React.createElement(ArrowDownwardIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }),\n      completeIcon: playing ? React.createElement(PauseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }) : React.createElement(PlayArrowIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  }\n\n}\n\nVoiceNoteTile.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  file: PropTypes.object.isRequired,\n  openMedia: PropTypes.func\n};\nexport default VoiceNoteTile;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/VoiceNoteTile.js"],"names":["React","PropTypes","ArrowDownwardIcon","PlayArrowIcon","PauseIcon","DocumentTile","PlayerStore","VoiceNoteTile","Component","constructor","props","onClientUpdateMediaEnd","update","chatId","messageId","setState","active","playing","currentTime","onClientUpdateMediaPlay","onClientUpdateMediaPause","onClientUpdateMediaActive","state","time","message","chat_id","id","duration","componentDidMount","on","componentWillUnmount","removeListener","render","file","openMedia","propTypes","number","isRequired","object","func"],"mappings":";;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,qBAAP;;AAEA,MAAMC,aAAN,SAA4BP,KAAK,CAACQ,SAAlC,CAA4C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA8BnBC,sBA9BmB,GA8BMC,MAAM,IAAI;AAAA,0BACD,KAAKF,KADJ;AAAA,YACvBG,MADuB,eACvBA,MADuB;AAAA,YACfC,SADe,eACfA,SADe;;AAG/B,UAAID,MAAM,KAAKD,MAAM,CAACC,MAAlB,IAA4BC,SAAS,KAAKF,MAAM,CAACE,SAArD,EAAgE;AAC5D,aAAKC,QAAL,CAAc;AACVC,UAAAA,MAAM,EAAE,KADE;AAEVC,UAAAA,OAAO,EAAE,KAFC;AAGVC,UAAAA,WAAW,EAAE;AAHH,SAAd;AAKH;AACJ,KAxCkB;;AAAA,SA0CnBC,uBA1CmB,GA0COP,MAAM,IAAI;AAAA,2BACF,KAAKF,KADH;AAAA,YACxBG,MADwB,gBACxBA,MADwB;AAAA,YAChBC,SADgB,gBAChBA,SADgB;;AAGhC,UAAID,MAAM,KAAKD,MAAM,CAACC,MAAlB,IAA4BC,SAAS,KAAKF,MAAM,CAACE,SAArD,EAAgE;AAC5D,aAAKC,QAAL,CAAc;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACH,OAFD,MAEO;AACH,aAAKF,QAAL,CAAc;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACH;AACJ,KAlDkB;;AAAA,SAoDnBG,wBApDmB,GAoDQR,MAAM,IAAI;AAAA,2BACH,KAAKF,KADF;AAAA,YACzBG,MADyB,gBACzBA,MADyB;AAAA,YACjBC,SADiB,gBACjBA,SADiB;;AAGjC,UAAID,MAAM,KAAKD,MAAM,CAACC,MAAlB,IAA4BC,SAAS,KAAKF,MAAM,CAACE,SAArD,EAAgE;AAC5D,aAAKC,QAAL,CAAc;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACH;AACJ,KA1DkB;;AAAA,SA4DnBI,yBA5DmB,GA4DST,MAAM,IAAI;AAAA,2BACJ,KAAKF,KADD;AAAA,YAC1BG,MAD0B,gBAC1BA,MAD0B;AAAA,YAClBC,SADkB,gBAClBA,SADkB;;AAGlC,UAAID,MAAM,KAAKD,MAAM,CAACC,MAAlB,IAA4BC,SAAS,KAAKF,MAAM,CAACE,SAArD,EAAgE;AAC5D,YAAI,CAAC,KAAKQ,KAAL,CAAWN,MAAhB,EAAwB;AACpB,eAAKD,QAAL,CAAc;AACVC,YAAAA,MAAM,EAAE,IADE;AAEVE,YAAAA,WAAW,EAAE,CAFH;AAGVD,YAAAA,OAAO,EAAE;AAHC,WAAd;AAKH;AACJ,OARD,MAQO,IAAI,KAAKK,KAAL,CAAWN,MAAf,EAAuB;AAC1B,aAAKD,QAAL,CAAc;AACVC,UAAAA,MAAM,EAAE,KADE;AAEVE,UAAAA,WAAW,EAAE,CAFH;AAGVD,UAAAA,OAAO,EAAE;AAHC,SAAd;AAKH;AACJ,KA9EkB;;AAAA,UAGPJ,OAHO,GAGeH,KAHf,CAGPG,MAHO;AAAA,UAGCC,UAHD,GAGeJ,KAHf,CAGCI,SAHD;AAAA,UAKPS,IALO,GAKoBjB,WALpB,CAKPiB,IALO;AAAA,UAKDC,OALC,GAKoBlB,WALpB,CAKDkB,OALC;AAAA,UAKQP,OALR,GAKoBX,WALpB,CAKQW,OALR;AAMf,UAAMD,MAAM,GAAGQ,OAAO,IAAIA,OAAO,CAACC,OAAR,KAAoBZ,OAA/B,IAAyCW,OAAO,CAACE,EAAR,KAAeZ,UAAvE;AAEA,SAAKQ,KAAL,GAAa;AACTN,MAAAA,MAAM,EAAEA,MADC;AAETC,MAAAA,OAAO,EAAED,MAAM,GAAGC,OAAH,GAAa,KAFnB;AAGTC,MAAAA,WAAW,EAAEF,MAAM,IAAIO,IAAV,GAAiBA,IAAI,CAACL,WAAtB,GAAoC,CAHxC;AAITS,MAAAA,QAAQ,EAAEX,MAAM,IAAIO,IAAV,GAAiBA,IAAI,CAACI,QAAtB,GAAiC;AAJlC,KAAb;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBtB,IAAAA,WAAW,CAACuB,EAAZ,CAAe,yBAAf,EAA0C,KAAKR,yBAA/C;AACAf,IAAAA,WAAW,CAACuB,EAAZ,CAAe,uBAAf,EAAwC,KAAKV,uBAA7C;AACAb,IAAAA,WAAW,CAACuB,EAAZ,CAAe,wBAAf,EAAyC,KAAKT,wBAA9C;AACAd,IAAAA,WAAW,CAACuB,EAAZ,CAAe,sBAAf,EAAuC,KAAKlB,sBAA5C;AACH;;AAEDmB,EAAAA,oBAAoB,GAAG;AACnBxB,IAAAA,WAAW,CAACyB,cAAZ,CAA2B,yBAA3B,EAAsD,KAAKV,yBAA3D;AACAf,IAAAA,WAAW,CAACyB,cAAZ,CAA2B,uBAA3B,EAAoD,KAAKZ,uBAAzD;AACAb,IAAAA,WAAW,CAACyB,cAAZ,CAA2B,wBAA3B,EAAqD,KAAKX,wBAA1D;AACAd,IAAAA,WAAW,CAACyB,cAAZ,CAA2B,sBAA3B,EAAmD,KAAKpB,sBAAxD;AACH;;AAoDDqB,EAAAA,MAAM,GAAG;AAAA,yBACuB,KAAKtB,KAD5B;AAAA,UACGuB,IADH,gBACGA,IADH;AAAA,UACSC,SADT,gBACSA,SADT;AAAA,UAEGjB,OAFH,GAEe,KAAKK,KAFpB,CAEGL,OAFH;AAIL,WACI,oBAAC,YAAD;AACI,MAAA,SAAS,EAAE,IADf;AAEI,MAAA,IAAI,EAAEgB,IAFV;AAGI,MAAA,SAAS,EAAEC,SAHf;AAII,MAAA,IAAI,EAAE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJV;AAKI,MAAA,YAAY,EAAEjB,OAAO,GAAG,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAmB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAL5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AASH;;AA9FuC;;AAiG5CV,aAAa,CAAC4B,SAAd,GAA0B;AACtBtB,EAAAA,MAAM,EAAEZ,SAAS,CAACmC,MAAV,CAAiBC,UADH;AAEtBvB,EAAAA,SAAS,EAAEb,SAAS,CAACmC,MAAV,CAAiBC,UAFN;AAGtBJ,EAAAA,IAAI,EAAEhC,SAAS,CAACqC,MAAV,CAAiBD,UAHD;AAItBH,EAAAA,SAAS,EAAEjC,SAAS,CAACsC;AAJC,CAA1B;AAOA,eAAehC,aAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport DocumentTile from './DocumentTile';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport './VoiceNoteTile.css';\n\nclass VoiceNoteTile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { chatId, messageId } = props;\n\n        const { time, message, playing } = PlayerStore;\n        const active = message && message.chat_id === chatId && message.id === messageId;\n\n        this.state = {\n            active: active,\n            playing: active ? playing : false,\n            currentTime: active && time ? time.currentTime : 0,\n            duration: active && time ? time.duration : 0\n        };\n    }\n\n    componentDidMount() {\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n        PlayerStore.on('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaPlay', this.onClientUpdateMediaPlay);\n        PlayerStore.removeListener('clientUpdateMediaPause', this.onClientUpdateMediaPause);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                active: false,\n                playing: false,\n                currentTime: 0\n            });\n        }\n    };\n\n    onClientUpdateMediaPlay = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({ playing: true });\n        } else {\n            this.setState({ playing: false });\n        }\n    };\n\n    onClientUpdateMediaPause = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({ playing: false });\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (!this.state.active) {\n                this.setState({\n                    active: true,\n                    currentTime: 0,\n                    playing: true\n                });\n            }\n        } else if (this.state.active) {\n            this.setState({\n                active: false,\n                currentTime: 0,\n                playing: false\n            });\n        }\n    };\n\n    render() {\n        const { file, openMedia } = this.props;\n        const { playing } = this.state;\n\n        return (\n            <DocumentTile\n                thumbnail={null}\n                file={file}\n                openMedia={openMedia}\n                icon={<ArrowDownwardIcon />}\n                completeIcon={playing ? <PauseIcon /> : <PlayArrowIcon />}\n            />\n        );\n    }\n}\n\nVoiceNoteTile.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    file: PropTypes.object.isRequired,\n    openMedia: PropTypes.func\n};\n\nexport default VoiceNoteTile;\n"]},"metadata":{},"sourceType":"module"}