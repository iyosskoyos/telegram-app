{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/InstantView/Blocks/TableCell.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RichText from '../RichText/RichText';\nimport { getHorizontalAlignment, getVerticalAlignment, isEmptyText } from '../../../Utils/InstantView';\n\nfunction TableCell(props) {\n  const text = props.text,\n        isHeader = props.isHeader,\n        colspan = props.colspan,\n        rowspan = props.rowspan,\n        align = props.align,\n        valign = props.valign;\n  if (isEmptyText(text)) return null;\n  const attributes = {\n    colSpan: colspan,\n    rowSpan: rowspan,\n    align: getHorizontalAlignment(align),\n    valign: getVerticalAlignment(valign)\n  };\n  const content = React.createElement(RichText, {\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n  return isHeader ? React.createElement(\"th\", Object.assign({}, attributes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), content) : React.createElement(\"td\", Object.assign({}, attributes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), content);\n}\n\nTableCell.propTypes = {\n  text: PropTypes.object.isRequired,\n  isHeader: PropTypes.bool.isRequired,\n  colspan: PropTypes.number.isRequired,\n  rowspan: PropTypes.number.isRequired,\n  align: PropTypes.object.isRequired,\n  valign: PropTypes.object.isRequired\n};\nexport default TableCell;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/InstantView/Blocks/TableCell.js"],"names":["React","PropTypes","RichText","getHorizontalAlignment","getVerticalAlignment","isEmptyText","TableCell","props","text","isHeader","colspan","rowspan","align","valign","attributes","colSpan","rowSpan","content","propTypes","object","isRequired","bool","number"],"mappings":";;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,sBAAT,EAAiCC,oBAAjC,EAAuDC,WAAvD,QAA0E,4BAA1E;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,QACdC,IADc,GACsCD,KADtC,CACdC,IADc;AAAA,QACRC,QADQ,GACsCF,KADtC,CACRE,QADQ;AAAA,QACEC,OADF,GACsCH,KADtC,CACEG,OADF;AAAA,QACWC,OADX,GACsCJ,KADtC,CACWI,OADX;AAAA,QACoBC,KADpB,GACsCL,KADtC,CACoBK,KADpB;AAAA,QAC2BC,MAD3B,GACsCN,KADtC,CAC2BM,MAD3B;AAEtB,MAAIR,WAAW,CAACG,IAAD,CAAf,EAAuB,OAAO,IAAP;AAEvB,QAAMM,UAAU,GAAG;AACfC,IAAAA,OAAO,EAAEL,OADM;AAEfM,IAAAA,OAAO,EAAEL,OAFM;AAGfC,IAAAA,KAAK,EAAET,sBAAsB,CAACS,KAAD,CAHd;AAIfC,IAAAA,MAAM,EAAET,oBAAoB,CAACS,MAAD;AAJb,GAAnB;AAOA,QAAMI,OAAO,GAAG,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAET,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB;AAEA,SAAOC,QAAQ,GAAG,4CAAQK,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqBG,OAArB,CAAH,GAAwC,4CAAQH,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqBG,OAArB,CAAvD;AACH;;AAEDX,SAAS,CAACY,SAAV,GAAsB;AAClBV,EAAAA,IAAI,EAAEP,SAAS,CAACkB,MAAV,CAAiBC,UADL;AAElBX,EAAAA,QAAQ,EAAER,SAAS,CAACoB,IAAV,CAAeD,UAFP;AAGlBV,EAAAA,OAAO,EAAET,SAAS,CAACqB,MAAV,CAAiBF,UAHR;AAIlBT,EAAAA,OAAO,EAAEV,SAAS,CAACqB,MAAV,CAAiBF,UAJR;AAKlBR,EAAAA,KAAK,EAAEX,SAAS,CAACkB,MAAV,CAAiBC,UALN;AAMlBP,EAAAA,MAAM,EAAEZ,SAAS,CAACkB,MAAV,CAAiBC;AANP,CAAtB;AASA,eAAed,SAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RichText from '../RichText/RichText';\nimport { getHorizontalAlignment, getVerticalAlignment, isEmptyText } from '../../../Utils/InstantView';\n\nfunction TableCell(props) {\n    const { text, isHeader, colspan, rowspan, align, valign } = props;\n    if (isEmptyText(text)) return null;\n\n    const attributes = {\n        colSpan: colspan,\n        rowSpan: rowspan,\n        align: getHorizontalAlignment(align),\n        valign: getVerticalAlignment(valign)\n    };\n\n    const content = <RichText text={text} />;\n\n    return isHeader ? <th {...attributes}>{content}</th> : <td {...attributes}>{content}</td>;\n}\n\nTableCell.propTypes = {\n    text: PropTypes.object.isRequired,\n    isHeader: PropTypes.bool.isRequired,\n    colspan: PropTypes.number.isRequired,\n    rowspan: PropTypes.number.isRequired,\n    align: PropTypes.object.isRequired,\n    valign: PropTypes.object.isRequired\n};\n\nexport default TableCell;\n"]},"metadata":{},"sourceType":"module"}