{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport ActionScheduler from '../Utils/ActionScheduler';\nimport { closeChat } from '../Actions/Client';\nimport { subscribeNotifications } from '../registerServiceWorker';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ApplicationStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.dialogsReady = false;\n      this.setPhoneNumberRequest = null;\n      this.chatId = 0;\n      this.dialogChatId = 0;\n      this.messageId = null;\n      this.statistics = new Map();\n      this.authorizationState = null;\n      this.defaultPhone = \"+62\";\n      this.connectionState = null;\n      this.isChatDetailsVisible = false;\n      this.mediaViewerContent = null;\n      this.profileMediaViewerContent = null;\n      this.dragging = false;\n      this.actionScheduler = new ActionScheduler(this.handleScheduledAction, this.handleCancelScheduledAction);\n    };\n\n    this.addScheduledAction = (key, timeout, action, cancel) => {\n      return this.actionScheduler.add(key, timeout, action, cancel);\n    };\n\n    this.invokeScheduledAction = async key => {\n      await this.actionScheduler.invoke(key);\n    };\n\n    this.removeScheduledAction = key => {\n      this.actionScheduler.remove(key);\n    };\n\n    this.handleScheduledAction = item => {\n      console.log('Invoked scheduled action key=', item.key);\n    };\n\n    this.handleCancelScheduledAction = item => {\n      console.log('Cancel scheduled action key=', item.key);\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            this.authorizationState = update.authorization_state;\n\n            switch (update.authorization_state['@type']) {\n              case 'authorizationStateLoggingOut':\n                this.loggingOut = true;\n                break;\n\n              case 'authorizationStateWaitTdlibParameters':\n                TdLibController.sendTdParameters();\n                break;\n\n              case 'authorizationStateWaitEncryptionKey':\n                TdLibController.send({\n                  '@type': 'checkDatabaseEncryptionKey'\n                });\n                break;\n\n              case 'authorizationStateWaitPhoneNumber':\n                {\n                  if (this.setPhoneNumberRequest) {\n                    this.setPhoneNumberRequest();\n                    this.setPhoneNumberRequest = null;\n                  }\n\n                  break;\n                }\n\n              case 'authorizationStateWaitCode':\n                break;\n\n              case 'authorizationStateWaitPassword':\n                break;\n\n              case 'authorizationStateReady':\n                this.loggingOut = false;\n                this.setPhoneNumberRequest = null;\n                subscribeNotifications();\n                break;\n\n              case 'authorizationStateClosing':\n                break;\n\n              case 'authorizationStateClosed':\n                this.reset();\n\n                if (!this.loggingOut) {\n                  document.title += ': Zzzâ€¦';\n                  this.emit('clientUpdateAppInactive');\n                } else {\n                  TdLibController.init();\n                }\n\n                break;\n\n              default:\n                break;\n            }\n\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'updateChatIsMarkedAsUnread':\n          {\n            const chat_id = update.chat_id,\n                  is_marked_as_unread = update.is_marked_as_unread;\n\n            if (chat_id === this.chatId && is_marked_as_unread) {\n              closeChat();\n            }\n\n            break;\n          }\n\n        case 'updateConnectionState':\n          {\n            this.connectionState = update.state;\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'updateFatalError':\n          {\n            this.emit(update['@type'], update);\n            break;\n          }\n\n        case 'updateServiceNotification':\n          {\n            const type = update.type,\n                  content = update.content;\n            if (!content) return;\n\n            if (content['@type'] === 'messageText') {\n              const text = content.text;\n              if (!text) return;\n\n              if (text['@type'] === 'formattedText' && text.text) {\n                switch (type) {\n                  case 'AUTH_KEY_DROP_DUPLICATE':\n                    let result = window.confirm(text.text);\n\n                    if (result) {\n                      TdLibController.logOut();\n                    }\n\n                    break;\n\n                  default:\n                    alert(text.text);\n                    break;\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateChatId':\n          {\n            const extendedUpdate = {\n              '@type': 'clientUpdateChatId',\n              nextChatId: update.chatId,\n              nextMessageId: update.messageId,\n              previousChatId: this.chatId,\n              previousMessageId: this.messageId\n            };\n            this.chatId = update.chatId;\n            this.messageId = update.messageId;\n            this.emit('clientUpdateChatId', extendedUpdate);\n            break;\n          }\n\n        case 'clientUpdateDatabaseExists':\n          {\n            this.emit('clientUpdateDatabaseExists', update);\n            break;\n          }\n\n        case 'clientUpdateDialogsReady':\n          {\n            this.dialogsReady = true;\n            this.emit('clientUpdateDialogsReady', update);\n            break;\n          }\n\n        case 'clientUpdateMediaViewerContent':\n          {\n            const content = update.content;\n            this.mediaViewerContent = content;\n            this.emit('clientUpdateMediaViewerContent', update);\n            break;\n          }\n\n        case 'clientUpdateProfileMediaViewerContent':\n          {\n            const content = update.content;\n            this.profileMediaViewerContent = content;\n            this.emit('clientUpdateProfileMediaViewerContent', update);\n            break;\n          }\n\n        case 'clientUpdateSearchChat':\n          {\n            this.emit('clientUpdateSearchChat', update);\n            break;\n          }\n\n        case 'clientUpdateSetPhone':\n          {\n            const phone = update.phone;\n            this.defaultPhone = phone;\n\n            if (!phone) {\n              this.setPhoneNumberRequest = null;\n              TdLibController.clientUpdate({\n                '@type': 'clientUpdateSetPhoneCanceled'\n              });\n            } else {\n              if (this.authorizationState && this.authorizationState['@type'] === 'authorizationStateWaitPhoneNumber') {\n                this.setPhoneNumber(phone);\n              } else {\n                this.setPhoneNumberRequest = () => this.setPhoneNumber(phone);\n              }\n            }\n\n            this.emit('clientUpdateSetPhone', update);\n            break;\n          }\n\n        case 'clientUpdateSetPhoneResult':\n          {\n            this.emit('clientUpdateSetPhoneResult', update);\n            break;\n          }\n\n        case 'clientUpdateSetPhoneError':\n          {\n            this.emit('clientUpdateSetPhoneError', update);\n            break;\n          }\n\n        case 'clientUpdateDialogChatId':\n          {\n            const chatId = update.chatId;\n            this.dialogChatId = chatId;\n            this.emit('clientUpdateDialogChatId', update);\n            break;\n          }\n\n        case 'clientUpdateFocusWindow':\n          {\n            if (!this.authorizationState) {\n              break;\n            }\n\n            TdLibController.send({\n              '@type': 'setOption',\n              name: 'online',\n              value: {\n                '@type': 'optionValueBoolean',\n                value: update.focused\n              }\n            });\n            this.emit('clientUpdateFocusWindow', update);\n            break;\n          }\n\n        case 'clientUpdateForward':\n          {\n            this.emit('clientUpdateForward', update);\n            break;\n          }\n\n        case 'clientUpdateLeaveChat':\n          {\n            if (update.inProgress && this.chatId === update.chatId) {\n              TdLibController.setChatId(0);\n            }\n\n            break;\n          }\n      }\n    };\n\n    this.setPhoneNumber = phone => {\n      TdLibController.send({\n        '@type': 'setAuthenticationPhoneNumber',\n        phone_number: phone\n      }).then(result => {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateSetPhoneResult',\n          result\n        });\n      }).catch(error => {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateSetPhoneError',\n          error\n        });\n      });\n    };\n\n    this.onUpdateStatistics = update => {\n      if (!update) return;\n\n      if (this.statistics.has(update['@type'])) {\n        const count = this.statistics.get(update['@type']);\n        this.statistics.set(update['@type'], count + 1);\n      } else {\n        this.statistics.set(update['@type'], 1);\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.addStatistics = () => {\n      TdLibController.addListener('update', this.onUpdateStatistics);\n    };\n\n    this.setChatId = (chatId, messageId = null) => {\n      const update = {\n        '@type': 'clientUpdateChatId',\n        nextChatId: chatId,\n        nextMessageId: messageId,\n        previousChatId: this.chatId,\n        previousMessageId: this.messageId\n      };\n      this.chatId = chatId;\n      this.messageId = messageId;\n      this.emit(update['@type'], update);\n    };\n\n    this.getDragging = () => {\n      return this.dragging;\n    };\n\n    this.setDragging = value => {\n      this.dragging = value;\n      this.emit('clientUpdateDragging', value);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.addStatistics();\n    this.setMaxListeners(Infinity);\n  }\n\n  getChatId() {\n    return this.chatId;\n  }\n\n  getMessageId() {\n    return this.messageId;\n  }\n\n  changeChatDetailsVisibility(visibility) {\n    this.isChatDetailsVisible = visibility;\n    this.emit('clientUpdateChatDetailsVisibility', visibility);\n  }\n\n  getConnectionState() {\n    return this.connectionState;\n  }\n\n  getAuthorizationState() {\n    return this.authorizationState;\n  }\n\n  assign(source1, source2) {\n    Object.assign(source1, source2); //this.set(Object.assign({}, source1, source2));\n  }\n\n}\n\nconst store = new ApplicationStore();\nwindow.app = store;\nexport default store;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Stores/ApplicationStore.js"],"names":["EventEmitter","ActionScheduler","closeChat","subscribeNotifications","TdLibController","ApplicationStore","constructor","reset","dialogsReady","setPhoneNumberRequest","chatId","dialogChatId","messageId","statistics","Map","authorizationState","defaultPhone","connectionState","isChatDetailsVisible","mediaViewerContent","profileMediaViewerContent","dragging","actionScheduler","handleScheduledAction","handleCancelScheduledAction","addScheduledAction","key","timeout","action","cancel","add","invokeScheduledAction","invoke","removeScheduledAction","remove","item","console","log","onUpdate","update","authorization_state","loggingOut","sendTdParameters","send","document","title","emit","init","chat_id","is_marked_as_unread","state","type","content","text","result","window","confirm","logOut","alert","onClientUpdate","extendedUpdate","nextChatId","nextMessageId","previousChatId","previousMessageId","phone","clientUpdate","setPhoneNumber","name","value","focused","inProgress","setChatId","phone_number","then","catch","error","onUpdateStatistics","has","count","get","set","addTdLibListener","addListener","removeTdLibListener","removeListener","addStatistics","getDragging","setDragging","setMaxListeners","Infinity","getChatId","getMessageId","changeChatDetailsVisibility","visibility","getConnectionState","getAuthorizationState","assign","source1","source2","Object","store","app"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport ActionScheduler from '../Utils/ActionScheduler';\nimport { closeChat } from '../Actions/Client';\nimport { subscribeNotifications } from '../registerServiceWorker';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass ApplicationStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.addStatistics();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.dialogsReady = false;\n        this.setPhoneNumberRequest = null;\n        this.chatId = 0;\n        this.dialogChatId = 0;\n        this.messageId = null;\n        this.statistics = new Map();\n        this.authorizationState = null;\n        this.defaultPhone = \"+62\";\n        this.connectionState = null;\n        this.isChatDetailsVisible = false;\n        this.mediaViewerContent = null;\n        this.profileMediaViewerContent = null;\n        this.dragging = false;\n        this.actionScheduler = new ActionScheduler(this.handleScheduledAction, this.handleCancelScheduledAction);\n    };\n\n    addScheduledAction = (key, timeout, action, cancel) => {\n        return this.actionScheduler.add(key, timeout, action, cancel);\n    };\n\n    invokeScheduledAction = async key => {\n        await this.actionScheduler.invoke(key);\n    };\n\n    removeScheduledAction = key => {\n        this.actionScheduler.remove(key);\n    };\n\n    handleScheduledAction = item => {\n        console.log('Invoked scheduled action key=', item.key);\n    };\n\n    handleCancelScheduledAction = item => {\n        console.log('Cancel scheduled action key=', item.key);\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                this.authorizationState = update.authorization_state;\n\n                switch (update.authorization_state['@type']) {\n                    case 'authorizationStateLoggingOut':\n                        this.loggingOut = true;\n                        break;\n                    case 'authorizationStateWaitTdlibParameters':\n                        TdLibController.sendTdParameters();\n                        break;\n                    case 'authorizationStateWaitEncryptionKey':\n                        TdLibController.send({ '@type': 'checkDatabaseEncryptionKey' });\n                        break;\n                    case 'authorizationStateWaitPhoneNumber': {\n                        if (this.setPhoneNumberRequest) {\n                            this.setPhoneNumberRequest();\n\n                            this.setPhoneNumberRequest = null;\n                        }\n\n                        break;\n                    }\n                    case 'authorizationStateWaitCode':\n                        break;\n                    case 'authorizationStateWaitPassword':\n                        break;\n                    case 'authorizationStateReady':\n                        this.loggingOut = false;\n                        this.setPhoneNumberRequest = null;\n                        subscribeNotifications();\n                        break;\n                    case 'authorizationStateClosing':\n                        break;\n                    case 'authorizationStateClosed':\n                        this.reset();\n\n                        if (!this.loggingOut) {\n                            document.title += ': Zzzâ€¦';\n                            this.emit('clientUpdateAppInactive');\n                        } else {\n                            TdLibController.init();\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateChatIsMarkedAsUnread': {\n                const { chat_id, is_marked_as_unread } = update;\n                if (chat_id === this.chatId && is_marked_as_unread) {\n                    closeChat();\n                }\n\n                break;\n            }\n            case 'updateConnectionState': {\n                this.connectionState = update.state;\n\n                this.emit(update['@type'], update);\n                break;\n            }\n            case 'updateFatalError': {\n                this.emit(update['@type'], update);\n\n                break;\n            }\n            case 'updateServiceNotification': {\n                const { type, content } = update;\n\n                if (!content) return;\n                if (content['@type'] === 'messageText') {\n                    const { text } = content;\n                    if (!text) return;\n\n                    if (text['@type'] === 'formattedText' && text.text) {\n                        switch (type) {\n                            case 'AUTH_KEY_DROP_DUPLICATE':\n                                let result = window.confirm(text.text);\n                                if (result) {\n                                    TdLibController.logOut();\n                                }\n                                break;\n                            default:\n                                alert(text.text);\n                                break;\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateChatId': {\n                const extendedUpdate = {\n                    '@type': 'clientUpdateChatId',\n                    nextChatId: update.chatId,\n                    nextMessageId: update.messageId,\n                    previousChatId: this.chatId,\n                    previousMessageId: this.messageId\n                };\n\n                this.chatId = update.chatId;\n                this.messageId = update.messageId;\n\n                this.emit('clientUpdateChatId', extendedUpdate);\n                break;\n            }\n            case 'clientUpdateDatabaseExists': {\n                this.emit('clientUpdateDatabaseExists', update);\n                break;\n            }\n            case 'clientUpdateDialogsReady': {\n                this.dialogsReady = true;\n                this.emit('clientUpdateDialogsReady', update);\n                break;\n            }\n            case 'clientUpdateMediaViewerContent': {\n                const { content } = update;\n                this.mediaViewerContent = content;\n\n                this.emit('clientUpdateMediaViewerContent', update);\n                break;\n            }\n            case 'clientUpdateProfileMediaViewerContent': {\n                const { content } = update;\n                this.profileMediaViewerContent = content;\n\n                this.emit('clientUpdateProfileMediaViewerContent', update);\n                break;\n            }\n            case 'clientUpdateSearchChat': {\n                this.emit('clientUpdateSearchChat', update);\n                break;\n            }\n            case 'clientUpdateSetPhone': {\n                const { phone } = update;\n\n                this.defaultPhone = phone;\n\n                if (!phone) {\n                    this.setPhoneNumberRequest = null;\n                    TdLibController.clientUpdate({\n                        '@type': 'clientUpdateSetPhoneCanceled'\n                    });\n                } else {\n                    if (\n                        this.authorizationState &&\n                        this.authorizationState['@type'] === 'authorizationStateWaitPhoneNumber'\n                    ) {\n                        this.setPhoneNumber(phone);\n                    } else {\n                        this.setPhoneNumberRequest = () => this.setPhoneNumber(phone);\n                    }\n                }\n\n                this.emit('clientUpdateSetPhone', update);\n                break;\n            }\n            case 'clientUpdateSetPhoneResult': {\n                this.emit('clientUpdateSetPhoneResult', update);\n                break;\n            }\n            case 'clientUpdateSetPhoneError': {\n                this.emit('clientUpdateSetPhoneError', update);\n                break;\n            }\n            case 'clientUpdateDialogChatId': {\n                const { chatId } = update;\n                this.dialogChatId = chatId;\n\n                this.emit('clientUpdateDialogChatId', update);\n                break;\n            }\n            case 'clientUpdateFocusWindow': {\n                if (!this.authorizationState) {\n                    break;\n                }\n\n                TdLibController.send({\n                    '@type': 'setOption',\n                    name: 'online',\n                    value: { '@type': 'optionValueBoolean', value: update.focused }\n                });\n\n                this.emit('clientUpdateFocusWindow', update);\n                break;\n            }\n            case 'clientUpdateForward': {\n                this.emit('clientUpdateForward', update);\n                break;\n            }\n            case 'clientUpdateLeaveChat': {\n                if (update.inProgress && this.chatId === update.chatId) {\n                    TdLibController.setChatId(0);\n                }\n\n                break;\n            }\n        }\n    };\n\n    setPhoneNumber = phone => {\n        TdLibController.send({\n            '@type': 'setAuthenticationPhoneNumber',\n            phone_number: phone\n        })\n            .then(result => {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateSetPhoneResult',\n                    result\n                });\n            })\n            .catch(error => {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateSetPhoneError',\n                    error\n                });\n            });\n    };\n\n    onUpdateStatistics = update => {\n        if (!update) return;\n\n        if (this.statistics.has(update['@type'])) {\n            const count = this.statistics.get(update['@type']);\n\n            this.statistics.set(update['@type'], count + 1);\n        } else {\n            this.statistics.set(update['@type'], 1);\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    addStatistics = () => {\n        TdLibController.addListener('update', this.onUpdateStatistics);\n    };\n\n    setChatId = (chatId, messageId = null) => {\n        const update = {\n            '@type': 'clientUpdateChatId',\n            nextChatId: chatId,\n            nextMessageId: messageId,\n            previousChatId: this.chatId,\n            previousMessageId: this.messageId\n        };\n\n        this.chatId = chatId;\n        this.messageId = messageId;\n        this.emit(update['@type'], update);\n    };\n\n    getChatId() {\n        return this.chatId;\n    }\n\n    getMessageId() {\n        return this.messageId;\n    }\n\n    changeChatDetailsVisibility(visibility) {\n        this.isChatDetailsVisible = visibility;\n        this.emit('clientUpdateChatDetailsVisibility', visibility);\n    }\n\n    getConnectionState() {\n        return this.connectionState;\n    }\n\n    getAuthorizationState() {\n        return this.authorizationState;\n    }\n\n    getDragging = () => {\n        return this.dragging;\n    };\n\n    setDragging = value => {\n        this.dragging = value;\n        this.emit('clientUpdateDragging', value);\n    };\n\n    assign(source1, source2) {\n        Object.assign(source1, source2);\n        //this.set(Object.assign({}, source1, source2));\n    }\n}\n\nconst store = new ApplicationStore();\nwindow.app = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}