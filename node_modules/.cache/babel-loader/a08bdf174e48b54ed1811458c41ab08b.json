{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnLeft/LanguagePicker.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport TdLibController from '../../Controllers/TdLibController';\nimport LocalizationStore from '../../Stores/LocalizationStore';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit * 3\n  },\n  group: {\n    margin: \"\".concat(theme.spacing.unit, \"px 0\")\n  }\n});\n\nclass LanguagePicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        language: event.target.value\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateLanguageChange',\n        language: event.target.value\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.open = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    const i18n = props.i18n;\n    const language = i18n ? i18n.language : null;\n    this.state = {\n      open: false,\n      language: language || 'en'\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          t = _this$props.t;\n    const _this$state = this.state,\n          open = _this$state.open,\n          language = _this$state.language;\n    const info = LocalizationStore.info || {\n      language_packs: []\n    };\n    const languages = info.language_packs.map(x => React.createElement(FormControlLabel, {\n      key: x.id,\n      value: x.id,\n      control: React.createElement(Radio, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }),\n      label: \"\".concat(x.name, \"\\xA0(\").concat(x.native_name, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n    return React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"language-dialog-title\",\n      \"aria-describedby\": \"language-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"language-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, t('Language')), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      component: \"fieldset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(RadioGroup, {\n      \"aria-label\": \"language\",\n      name: \"language1\",\n      value: language,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, languages))));\n  }\n\n}\n\nLanguagePicker.propTypes = {};\nconst enhance = compose(withSaveRef(), withTranslation(), withStyles(styles, {\n  withTheme: true\n}), withRestoreRef());\nexport default enhance(LanguagePicker);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnLeft/LanguagePicker.js"],"names":["React","PropTypes","compose","withStyles","withTranslation","Dialog","DialogContent","DialogTitle","Radio","RadioGroup","FormControlLabel","FormControl","withRestoreRef","withSaveRef","TdLibController","LocalizationStore","styles","theme","formControl","margin","spacing","unit","group","LanguagePicker","Component","constructor","props","handleChange","event","setState","language","target","value","clientUpdate","handleClose","open","i18n","state","render","classes","t","info","language_packs","languages","map","x","id","name","native_name","propTypes","enhance","withTheme"],"mappings":";;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,iBAA5C;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACrBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,GAAqB;AADpB,GADQ;AAIrBC,EAAAA,KAAK,EAAE;AACHH,IAAAA,MAAM,YAAKF,KAAK,CAACG,OAAN,CAAcC,IAAnB;AADH;AAJc,CAAL,CAApB;;AASA,MAAME,cAAN,SAA6BvB,KAAK,CAACwB,SAAnC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAYnBC,YAZmB,GAYJC,KAAK,IAAI;AACpB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAzB,OAAd;AAEAlB,MAAAA,eAAe,CAACmB,YAAhB,CAA6B;AAAE,iBAAS,4BAAX;AAAyCH,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAhE,OAA7B;AACH,KAhBkB;;AAAA,SAkBnBE,WAlBmB,GAkBL,MAAM;AAChB,WAAKL,QAAL,CAAc;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAd;AACH,KApBkB;;AAAA,SAsBnBA,IAtBmB,GAsBZ,MAAM;AACT,WAAKN,QAAL,CAAc;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAd;AACH,KAxBkB;;AAAA,UAGPC,IAHO,GAGEV,KAHF,CAGPU,IAHO;AAIf,UAAMN,QAAQ,GAAGM,IAAI,GAAGA,IAAI,CAACN,QAAR,GAAmB,IAAxC;AAEA,SAAKO,KAAL,GAAa;AACTF,MAAAA,IAAI,EAAE,KADG;AAETL,MAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAFb,KAAb;AAIH;;AAgBDQ,EAAAA,MAAM,GAAG;AAAA,wBACkB,KAAKZ,KADvB;AAAA,UACGa,OADH,eACGA,OADH;AAAA,UACYC,CADZ,eACYA,CADZ;AAAA,wBAEsB,KAAKH,KAF3B;AAAA,UAEGF,IAFH,eAEGA,IAFH;AAAA,UAESL,QAFT,eAESA,QAFT;AAGL,UAAMW,IAAI,GAAG1B,iBAAiB,CAAC0B,IAAlB,IAA0B;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAvC;AAEA,UAAMC,SAAS,GAAGF,IAAI,CAACC,cAAL,CAAoBE,GAApB,CAAwBC,CAAC,IACvC,oBAAC,gBAAD;AACI,MAAA,GAAG,EAAEA,CAAC,CAACC,EADX;AAEI,MAAA,KAAK,EAAED,CAAC,CAACC,EAFb;AAGI,MAAA,OAAO,EAAE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHb;AAII,MAAA,KAAK,YAAKD,CAAC,CAACE,IAAP,kBAAmBF,CAAC,CAACG,WAArB,MAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc,CAAlB;AASA,WACI,oBAAC,MAAD;AACI,MAAA,kBAAkB,EAAE,CADxB;AAEI,MAAA,IAAI,EAAEb,IAFV;AAGI,MAAA,OAAO,EAAE,KAAKD,WAHlB;AAII,yBAAgB,uBAJpB;AAKI,0BAAiB,6BALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCM,CAAC,CAAC,UAAD,CAA1C,CANJ,EAOI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,oBAAW,UADf;AAEI,MAAA,IAAI,EAAC,WAFT;AAGI,MAAA,KAAK,EAAEV,QAHX;AAII,MAAA,QAAQ,EAAE,KAAKH,YAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKKgB,SALL,CADJ,CADJ,CAPJ,CADJ;AAqBH;;AA9DwC;;AAiE7CpB,cAAc,CAAC0B,SAAf,GAA2B,EAA3B;AAEA,MAAMC,OAAO,GAAGhD,OAAO,CACnBW,WAAW,EADQ,EAEnBT,eAAe,EAFI,EAGnBD,UAAU,CAACa,MAAD,EAAS;AAAEmC,EAAAA,SAAS,EAAE;AAAb,CAAT,CAHS,EAInBvC,cAAc,EAJK,CAAvB;AAOA,eAAesC,OAAO,CAAC3B,cAAD,CAAtB","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport TdLibController from '../../Controllers/TdLibController';\nimport LocalizationStore from '../../Stores/LocalizationStore';\n\nconst styles = theme => ({\n    formControl: {\n        margin: theme.spacing.unit * 3\n    },\n    group: {\n        margin: `${theme.spacing.unit}px 0`\n    }\n});\n\nclass LanguagePicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { i18n } = props;\n        const language = i18n ? i18n.language : null;\n\n        this.state = {\n            open: false,\n            language: language || 'en'\n        };\n    }\n\n    handleChange = event => {\n        this.setState({ language: event.target.value });\n\n        TdLibController.clientUpdate({ '@type': 'clientUpdateLanguageChange', language: event.target.value });\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n    open = () => {\n        this.setState({ open: true });\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { open, language } = this.state;\n        const info = LocalizationStore.info || { language_packs: [] };\n\n        const languages = info.language_packs.map(x => (\n            <FormControlLabel\n                key={x.id}\n                value={x.id}\n                control={<Radio color='primary' />}\n                label={`${x.name}\\xa0(${x.native_name})`}\n            />\n        ));\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                open={open}\n                onClose={this.handleClose}\n                aria-labelledby='language-dialog-title'\n                aria-describedby='language-dialog-description'>\n                <DialogTitle id='language-dialog-title'>{t('Language')}</DialogTitle>\n                <DialogContent>\n                    <FormControl component='fieldset'>\n                        <RadioGroup\n                            aria-label='language'\n                            name='language1'\n                            value={language}\n                            onChange={this.handleChange}>\n                            {languages}\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nLanguagePicker.propTypes = {};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withStyles(styles, { withTheme: true }),\n    withRestoreRef()\n);\n\nexport default enhance(LanguagePicker);\n"]},"metadata":{},"sourceType":"module"}