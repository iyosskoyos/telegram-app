{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Popup/CreatePollDialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport CreatePollOption from './CreatePollOption';\nimport { focusNode } from '../../Utils/Component';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { utils } from '../../Utils/Key';\nimport { hasPollData, isValidPoll } from '../../Utils/Poll';\nimport { POLL_OPTIONS_MAX_COUNT, POLL_QUESTION_HINT_LENGTH, POLL_QUESTION_LENGTH, POLL_QUESTION_MAX_LENGTH } from '../../Constants';\nimport PollStore from '../../Stores/PollStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './CreatePollDialog.css';\n\nconst styles = theme => ({\n  dialogRoot: {\n    color: theme.palette.text.primary\n  },\n  contentRoot: {\n    width: 300\n  },\n  dividerRoot: {\n    margin: '8px -24px'\n  },\n  listRoot: {\n    margin: '0 -24px'\n  },\n  listItem: {\n    padding: '11px 24px',\n    color: '#8e9396',\n    height: 48\n  },\n  typographyRoot: {}\n});\n\nclass CreatePollDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClientUpdateNewPoll = update => {\n      const poll = PollStore.poll;\n      this.setState({\n        confirm: false,\n        remainLength: POLL_QUESTION_MAX_LENGTH,\n        poll\n      });\n    };\n\n    this.handleClientUpdatePollQuestion = update => {\n      const poll = PollStore.poll;\n      const node = this.questionRef.current;\n      const length = node.dataset.length;\n      const innerText = node.innerText;\n      this.setState({\n        remainLength: length - innerText.length,\n        poll\n      });\n    };\n\n    this.handleClientUpdatePoll = update => {\n      const poll = PollStore.poll;\n      this.setState({\n        poll\n      });\n    };\n\n    this.handleClientUpdateNewPollOption = update => {\n      const poll = PollStore.poll;\n      this.setState({\n        poll\n      }, () => {\n        setTimeout(() => {\n          const node = this.optionsRefMap.get(poll.options.length - 1);\n          node.focus(true);\n        });\n      });\n    };\n\n    this.handleKeyDown = event => {\n      const node = this.questionRef.current;\n      const maxLength = node.dataset.maxLength;\n      const innerText = node.innerText;\n      const length = innerText.length;\n      let hasSelection = false;\n      const selection = window.getSelection();\n      const isSpecial = utils.isSpecial(event);\n      const isNavigational = utils.isNavigational(event);\n\n      if (selection) {\n        hasSelection = !!selection.toString();\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          {\n            if (!event.shiftKey) {\n              this.handleFocusNextOption(0);\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n\n        case 'ArrowDown':\n          {\n            const selection = window.getSelection();\n            if (!selection) break;\n            if (!selection.isCollapsed) break;\n            const lastChild = node.childNodes && node.childNodes.length > 0 ? node.childNodes[node.childNodes.length - 1] : null;\n\n            if (!lastChild || selection.anchorNode === lastChild && selection.anchorOffset === lastChild.length) {\n              this.handleFocusNextOption(0);\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n      }\n\n      if (isSpecial || isNavigational) {\n        return true;\n      }\n\n      if (length >= maxLength && !hasSelection) {\n        event.preventDefault();\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handlePaste = event => {\n      event.preventDefault();\n      const node = this.questionRef.current;\n      const maxLength = node.dataset.maxLength;\n      const selection = window.getSelection();\n      const selectionString = selection ? selection.toString() : '';\n      const innerText = node.innerText;\n      if (innerText.length - selection.length >= maxLength) return;\n      let pasteText = event.clipboardData.getData('text/plain');\n      if (!pasteText) return;\n\n      if (innerText.length - selectionString.length + pasteText.length > maxLength) {\n        pasteText = pasteText.substr(0, maxLength - innerText.length + selectionString.length);\n      }\n\n      document.execCommand('insertHTML', false, pasteText);\n    };\n\n    this.handleInput = event => {\n      event.preventDefault();\n      const node = this.questionRef.current; //const length = node.dataset.length;\n\n      const innerText = node.innerText;\n      const innerHtml = node.innerHTML;\n\n      if (innerHtml === '<br>') {\n        node.innerText = '';\n      } // this.setState({\n      //     remainLength: length - innerText.length\n      // });\n\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdatePollQuestion',\n        question: innerText\n      });\n    };\n\n    this.handleAddOption = () => {\n      const poll = this.state.poll;\n      if (!poll) return;\n      const options = poll.options;\n      if (options.length >= POLL_OPTIONS_MAX_COUNT) return;\n      const option = {\n        id: Date.now(),\n        text: ''\n      };\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateNewPollOption',\n        option\n      });\n    };\n\n    this.handleDeleteOption = (id, backspace = false) => {\n      if (backspace) {\n        this.handleDeleteByBackspace(id);\n      } else {\n        this.handleDelete(id);\n      }\n    };\n\n    this.handleDelete = id => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateDeletePollOption',\n        id\n      });\n    };\n\n    this.handleDeleteByBackspace = id => {\n      const poll = this.state.poll;\n      if (!poll) return;\n      const options = poll.options;\n      const index = options.findIndex(x => x.id === id);\n      const prevIndex = index - 1;\n      let deleteOption = true;\n\n      for (let i = index; i < options.length; i++) {\n        const text = options[i].text;\n\n        if (text) {\n          deleteOption = false;\n          break;\n        }\n      }\n\n      if (deleteOption) {\n        this.handleDeleteOption(id);\n      }\n\n      const prevNode = this.optionsRefMap.get(prevIndex);\n\n      if (!prevNode) {\n        const element = this.questionRef.current;\n        focusNode(element, true);\n        return;\n      }\n\n      prevNode.focus(true);\n    };\n\n    this.handleFocusPrevOption = id => {\n      const poll = this.state.poll;\n      if (!poll) return;\n      const options = poll.options;\n      const index = options.findIndex(x => x.id === id);\n      const prevIndex = index - 1;\n      const prevNode = this.optionsRefMap.get(prevIndex);\n\n      if (!prevNode) {\n        const element = this.questionRef.current;\n        focusNode(element, false);\n        return;\n      }\n\n      prevNode.focus(false);\n    };\n\n    this.handleFocusNextOption = id => {\n      const poll = this.state.poll;\n      if (!poll) return;\n      const options = poll.options;\n      const index = options.findIndex(x => x.id === id);\n      const nextIndex = index + 1;\n      const nextNode = this.optionsRefMap.get(nextIndex);\n\n      if (!nextNode) {\n        const text = index >= 0 && index < options.length ? options[index].text : '';\n\n        if (options.length && !text) {\n          return;\n        }\n\n        this.handleAddOption();\n        return;\n      }\n\n      nextNode.focus(nextNode, true);\n    };\n\n    this.getHint = () => {\n      const poll = this.state.poll;\n      if (!poll) return;\n      const options = poll.options;\n      const addCount = POLL_OPTIONS_MAX_COUNT - options.length;\n\n      if (addCount <= 0) {\n        return 'You have added the maximum number of options.';\n      }\n\n      if (addCount === 1) {\n        return 'You can add 1 more option.';\n      }\n\n      return \"You can add \".concat(POLL_OPTIONS_MAX_COUNT - options.length, \" more options.\");\n    };\n\n    this.handleClose = () => {\n      const poll = this.state.poll;\n\n      if (hasPollData(poll)) {\n        this.setState({\n          confirm: true\n        });\n      } else {\n        this.handleConfirmationDone();\n      }\n    };\n\n    this.handleSend = () => {\n      const onSend = this.props.onSend;\n      const inputMessagePoll = PollStore.getInputMessagePoll();\n      if (!inputMessagePoll) return;\n      onSend(inputMessagePoll);\n      this.handleConfirmationDone();\n    };\n\n    this.handleConfirmationClose = () => {\n      this.setState({\n        confirm: false\n      });\n    };\n\n    this.handleConfirmationDone = () => {\n      this.handleConfirmationClose();\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateDeletePoll'\n      });\n    };\n\n    this.questionRef = React.createRef();\n    this.optionsRefMap = new Map();\n    this.state = {\n      poll: null,\n      confirm: false,\n      remainLength: POLL_QUESTION_MAX_LENGTH\n    };\n  }\n\n  componentDidMount() {\n    PollStore.on('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n    PollStore.on('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n    PollStore.on('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n    PollStore.on('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n    PollStore.on('clientUpdatePollOption', this.handleClientUpdatePoll);\n    PollStore.on('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n  }\n\n  componentWillUnmount() {\n    PollStore.removeListener('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n    PollStore.removeListener('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n    PollStore.removeListener('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n    PollStore.removeListener('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n    PollStore.removeListener('clientUpdatePollOption', this.handleClientUpdatePoll);\n    PollStore.removeListener('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const poll = this.state.poll;\n\n    if (poll && !prevState.poll) {\n      setTimeout(() => {\n        focusNode(this.questionRef.current, true);\n      }, 0);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          t = _this$props.t;\n    const _this$state = this.state,\n          remainLength = _this$state.remainLength,\n          confirm = _this$state.confirm,\n          poll = _this$state.poll;\n    if (!poll) return null;\n    const options = poll ? poll.options : [];\n    this.optionsRefMap.clear();\n    const items = options.map((x, i) => React.createElement(CreatePollOption, {\n      ref: el => this.optionsRefMap.set(i, el),\n      key: x.id,\n      option: x,\n      onDelete: this.handleDeleteOption,\n      onFocusPrev: this.handleFocusPrevOption,\n      onFocusNext: this.handleFocusNextOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }));\n    const canAddOption = POLL_OPTIONS_MAX_COUNT - options.length > 0;\n    const hint = this.getHint();\n    return React.createElement(React.Fragment, null, React.createElement(Dialog, {\n      className: classes.dialogRoot,\n      open: true,\n      transitionDuration: 0,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, t('NewPoll')), React.createElement(DialogContent, {\n      classes: {\n        root: classes.contentRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"create-poll-dialog-question-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      color: \"primary\",\n      variant: \"subtitle1\",\n      style: {\n        flexGrow: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, t('Question')), remainLength <= POLL_QUESTION_LENGTH - POLL_QUESTION_HINT_LENGTH && React.createElement(Typography, {\n      color: remainLength >= 0 ? 'textSecondary' : 'error',\n      variant: \"subtitle1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, remainLength)), React.createElement(\"div\", {\n      ref: this.questionRef,\n      id: \"create-poll-dialog-question\",\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      placeholder: t('QuestionHint'),\n      \"data-length\": POLL_QUESTION_LENGTH,\n      \"data-max-length\": POLL_QUESTION_MAX_LENGTH,\n      onPaste: this.handlePaste,\n      onKeyDown: this.handleKeyDown,\n      onInput: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      className: classes.dividerRoot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      color: \"primary\",\n      variant: \"subtitle1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, t('PollOptions')), React.createElement(List, {\n      classes: {\n        root: classes.listRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, items, canAddOption && React.createElement(ListItem, {\n      selected: false,\n      className: classes.listItem,\n      button: true,\n      onClick: this.handleAddOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      disableTypography: true,\n      primary: t('AddAnOption'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }))), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, hint)), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, t('Cancel')), isValidPoll(poll) && React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, t('Send')))), React.createElement(Dialog, {\n      className: classes.dialogRoot,\n      open: confirm,\n      transitionDuration: 0,\n      onClose: this.handleConfirmationClose,\n      \"aria-labelledby\": \"dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, t('CancelPollAlertTitle')), React.createElement(DialogContent, {\n      classes: {\n        root: classes.contentRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, t('CancelPollAlertText')), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleConfirmationClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, t('Cancel')), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleConfirmationDone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, t('Ok')))));\n  }\n\n}\n\nCreatePollDialog.propTypes = {\n  onSend: PropTypes.func.isRequired\n};\nconst enhance = compose(withSaveRef(), withStyles(styles), withTranslation(), withRestoreRef());\nexport default enhance(CreatePollDialog);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Popup/CreatePollDialog.js"],"names":["React","PropTypes","compose","withStyles","withTranslation","Button","Dialog","DialogActions","DialogContent","DialogTitle","Divider","List","ListItem","ListItemText","Typography","CreatePollOption","focusNode","withRestoreRef","withSaveRef","utils","hasPollData","isValidPoll","POLL_OPTIONS_MAX_COUNT","POLL_QUESTION_HINT_LENGTH","POLL_QUESTION_LENGTH","POLL_QUESTION_MAX_LENGTH","PollStore","TdLibController","styles","theme","dialogRoot","color","palette","text","primary","contentRoot","width","dividerRoot","margin","listRoot","listItem","padding","height","typographyRoot","CreatePollDialog","Component","constructor","props","handleClientUpdateNewPoll","update","poll","setState","confirm","remainLength","handleClientUpdatePollQuestion","node","questionRef","current","length","dataset","innerText","handleClientUpdatePoll","handleClientUpdateNewPollOption","setTimeout","optionsRefMap","get","options","focus","handleKeyDown","event","maxLength","hasSelection","selection","window","getSelection","isSpecial","isNavigational","toString","key","shiftKey","handleFocusNextOption","preventDefault","isCollapsed","lastChild","childNodes","anchorNode","anchorOffset","handlePaste","selectionString","pasteText","clipboardData","getData","substr","document","execCommand","handleInput","innerHtml","innerHTML","clientUpdate","question","handleAddOption","state","option","id","Date","now","handleDeleteOption","backspace","handleDeleteByBackspace","handleDelete","index","findIndex","x","prevIndex","deleteOption","i","prevNode","element","handleFocusPrevOption","nextIndex","nextNode","getHint","addCount","handleClose","handleConfirmationDone","handleSend","onSend","inputMessagePoll","getInputMessagePoll","handleConfirmationClose","createRef","Map","componentDidMount","on","componentWillUnmount","removeListener","componentDidUpdate","prevProps","prevState","snapshot","render","classes","t","clear","items","map","el","set","canAddOption","hint","root","flexGrow","propTypes","func","isRequired","enhance"],"mappings":";;AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,iBAA5C;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SACIC,sBADJ,EAEIC,yBAFJ,EAGIC,oBAHJ,EAIIC,wBAJJ,QAKO,iBALP;AAMA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAO,wBAAP;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACrBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmBC;AADlB,GADS;AAIrBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,KAAK,EAAE;AADE,GAJQ;AAOrBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC,GAPQ;AAUrBC,EAAAA,QAAQ,EAAE;AACND,IAAAA,MAAM,EAAE;AADF,GAVW;AAarBE,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,WADH;AAENV,IAAAA,KAAK,EAAE,SAFD;AAGNW,IAAAA,MAAM,EAAE;AAHF,GAbW;AAkBrBC,EAAAA,cAAc,EAAE;AAlBK,CAAL,CAApB;;AAqBA,MAAMC,gBAAN,SAA+B5C,KAAK,CAAC6C,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA+BnBC,yBA/BmB,GA+BSC,MAAM,IAAI;AAAA,YAC1BC,IAD0B,GACjBxB,SADiB,CAC1BwB,IAD0B;AAGlC,WAAKC,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,YAAY,EAAE5B,wBAFJ;AAGVyB,QAAAA;AAHU,OAAd;AAKH,KAvCkB;;AAAA,SAyCnBI,8BAzCmB,GAyCcL,MAAM,IAAI;AAAA,YAC/BC,IAD+B,GACtBxB,SADsB,CAC/BwB,IAD+B;AAGvC,YAAMK,IAAI,GAAG,KAAKC,WAAL,CAAiBC,OAA9B;AACA,YAAMC,MAAM,GAAGH,IAAI,CAACI,OAAL,CAAaD,MAA5B;AACA,YAAME,SAAS,GAAGL,IAAI,CAACK,SAAvB;AAEA,WAAKT,QAAL,CAAc;AACVE,QAAAA,YAAY,EAAEK,MAAM,GAAGE,SAAS,CAACF,MADvB;AAEVR,QAAAA;AAFU,OAAd;AAIH,KApDkB;;AAAA,SAsDnBW,sBAtDmB,GAsDMZ,MAAM,IAAI;AAAA,YACvBC,IADuB,GACdxB,SADc,CACvBwB,IADuB;AAG/B,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACH,KA1DkB;;AAAA,SA4DnBY,+BA5DmB,GA4Deb,MAAM,IAAI;AAAA,YAChCC,IADgC,GACvBxB,SADuB,CAChCwB,IADgC;AAGxC,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd,EAAwB,MAAM;AAC1Ba,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAMR,IAAI,GAAG,KAAKS,aAAL,CAAmBC,GAAnB,CAAuBf,IAAI,CAACgB,OAAL,CAAaR,MAAb,GAAsB,CAA7C,CAAb;AAEAH,UAAAA,IAAI,CAACY,KAAL,CAAW,IAAX;AACH,SAJS,CAAV;AAKH,OAND;AAOH,KAtEkB;;AAAA,SAkFnBC,aAlFmB,GAkFHC,KAAK,IAAI;AACrB,YAAMd,IAAI,GAAG,KAAKC,WAAL,CAAiBC,OAA9B;AACA,YAAMa,SAAS,GAAGf,IAAI,CAACI,OAAL,CAAaW,SAA/B;AACA,YAAMV,SAAS,GAAGL,IAAI,CAACK,SAAvB;AACA,YAAMF,MAAM,GAAGE,SAAS,CAACF,MAAzB;AAEA,UAAIa,YAAY,GAAG,KAAnB;AACA,YAAMC,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;AACA,YAAMC,SAAS,GAAGxD,KAAK,CAACwD,SAAN,CAAgBN,KAAhB,CAAlB;AACA,YAAMO,cAAc,GAAGzD,KAAK,CAACyD,cAAN,CAAqBP,KAArB,CAAvB;;AAEA,UAAIG,SAAJ,EAAe;AACXD,QAAAA,YAAY,GAAG,CAAC,CAACC,SAAS,CAACK,QAAV,EAAjB;AACH;;AAED,cAAQR,KAAK,CAACS,GAAd;AACI,aAAK,OAAL;AAAc;AACV,gBAAI,CAACT,KAAK,CAACU,QAAX,EAAqB;AACjB,mBAAKC,qBAAL,CAA2B,CAA3B;AAEAX,cAAAA,KAAK,CAACY,cAAN;AACA,qBAAO,KAAP;AACH;;AAED;AACH;;AACD,aAAK,WAAL;AAAkB;AACd,kBAAMT,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;AACA,gBAAI,CAACF,SAAL,EAAgB;AAChB,gBAAI,CAACA,SAAS,CAACU,WAAf,EAA4B;AAE5B,kBAAMC,SAAS,GACX5B,IAAI,CAAC6B,UAAL,IAAmB7B,IAAI,CAAC6B,UAAL,CAAgB1B,MAAhB,GAAyB,CAA5C,GAAgDH,IAAI,CAAC6B,UAAL,CAAgB7B,IAAI,CAAC6B,UAAL,CAAgB1B,MAAhB,GAAyB,CAAzC,CAAhD,GAA8F,IADlG;;AAGA,gBAAI,CAACyB,SAAD,IAAeX,SAAS,CAACa,UAAV,KAAyBF,SAAzB,IAAsCX,SAAS,CAACc,YAAV,KAA2BH,SAAS,CAACzB,MAA9F,EAAuG;AACnG,mBAAKsB,qBAAL,CAA2B,CAA3B;AAEAX,cAAAA,KAAK,CAACY,cAAN;AACA,qBAAO,KAAP;AACH;;AAED;AACH;AA3BL;;AA8BA,UAAIN,SAAS,IAAIC,cAAjB,EAAiC;AAC7B,eAAO,IAAP;AACH;;AAED,UAAIlB,MAAM,IAAIY,SAAV,IAAuB,CAACC,YAA5B,EAA0C;AACtCF,QAAAA,KAAK,CAACY,cAAN;AACA,eAAO,KAAP;AACH;;AAED,aAAO,IAAP;AACH,KAzIkB;;AAAA,SA2InBM,WA3ImB,GA2ILlB,KAAK,IAAI;AACnBA,MAAAA,KAAK,CAACY,cAAN;AAEA,YAAM1B,IAAI,GAAG,KAAKC,WAAL,CAAiBC,OAA9B;AACA,YAAMa,SAAS,GAAGf,IAAI,CAACI,OAAL,CAAaW,SAA/B;AAEA,YAAME,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;AACA,YAAMc,eAAe,GAAGhB,SAAS,GAAGA,SAAS,CAACK,QAAV,EAAH,GAA0B,EAA3D;AAEA,YAAMjB,SAAS,GAAGL,IAAI,CAACK,SAAvB;AACA,UAAIA,SAAS,CAACF,MAAV,GAAmBc,SAAS,CAACd,MAA7B,IAAuCY,SAA3C,EAAsD;AAEtD,UAAImB,SAAS,GAAGpB,KAAK,CAACqB,aAAN,CAAoBC,OAApB,CAA4B,YAA5B,CAAhB;AACA,UAAI,CAACF,SAAL,EAAgB;;AAEhB,UAAI7B,SAAS,CAACF,MAAV,GAAmB8B,eAAe,CAAC9B,MAAnC,GAA4C+B,SAAS,CAAC/B,MAAtD,GAA+DY,SAAnE,EAA8E;AAC1EmB,QAAAA,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,CAAjB,EAAoBtB,SAAS,GAAGV,SAAS,CAACF,MAAtB,GAA+B8B,eAAe,CAAC9B,MAAnE,CAAZ;AACH;;AACDmC,MAAAA,QAAQ,CAACC,WAAT,CAAqB,YAArB,EAAmC,KAAnC,EAA0CL,SAA1C;AACH,KA9JkB;;AAAA,SAgKnBM,WAhKmB,GAgKL1B,KAAK,IAAI;AACnBA,MAAAA,KAAK,CAACY,cAAN;AAEA,YAAM1B,IAAI,GAAG,KAAKC,WAAL,CAAiBC,OAA9B,CAHmB,CAInB;;AAEA,YAAMG,SAAS,GAAGL,IAAI,CAACK,SAAvB;AACA,YAAMoC,SAAS,GAAGzC,IAAI,CAAC0C,SAAvB;;AAEA,UAAID,SAAS,KAAK,MAAlB,EAA0B;AACtBzC,QAAAA,IAAI,CAACK,SAAL,GAAiB,EAAjB;AACH,OAXkB,CAanB;AACA;AACA;;;AAEAjC,MAAAA,eAAe,CAACuE,YAAhB,CAA6B;AACzB,iBAAS,0BADgB;AAEzBC,QAAAA,QAAQ,EAAEvC;AAFe,OAA7B;AAIH,KArLkB;;AAAA,SAuLnBwC,eAvLmB,GAuLD,MAAM;AAAA,YACZlD,IADY,GACH,KAAKmD,KADF,CACZnD,IADY;AAEpB,UAAI,CAACA,IAAL,EAAW;AAFS,YAIZgB,OAJY,GAIAhB,IAJA,CAIZgB,OAJY;AAKpB,UAAIA,OAAO,CAACR,MAAR,IAAkBpC,sBAAtB,EAA8C;AAE9C,YAAMgF,MAAM,GAAG;AACXC,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADO;AAEXxE,QAAAA,IAAI,EAAE;AAFK,OAAf;AAKAN,MAAAA,eAAe,CAACuE,YAAhB,CAA6B;AACzB,iBAAS,2BADgB;AAEzBI,QAAAA;AAFyB,OAA7B;AAIH,KAvMkB;;AAAA,SAyMnBI,kBAzMmB,GAyME,CAACH,EAAD,EAAKI,SAAS,GAAG,KAAjB,KAA2B;AAC5C,UAAIA,SAAJ,EAAe;AACX,aAAKC,uBAAL,CAA6BL,EAA7B;AACH,OAFD,MAEO;AACH,aAAKM,YAAL,CAAkBN,EAAlB;AACH;AACJ,KA/MkB;;AAAA,SAiNnBM,YAjNmB,GAiNJN,EAAE,IAAI;AACjB5E,MAAAA,eAAe,CAACuE,YAAhB,CAA6B;AACzB,iBAAS,8BADgB;AAEzBK,QAAAA;AAFyB,OAA7B;AAIH,KAtNkB;;AAAA,SAwNnBK,uBAxNmB,GAwNOL,EAAE,IAAI;AAAA,YACpBrD,IADoB,GACX,KAAKmD,KADM,CACpBnD,IADoB;AAE5B,UAAI,CAACA,IAAL,EAAW;AAFiB,YAIpBgB,OAJoB,GAIRhB,IAJQ,CAIpBgB,OAJoB;AAM5B,YAAM4C,KAAK,GAAG5C,OAAO,CAAC6C,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAACT,EAAF,KAASA,EAAhC,CAAd;AACA,YAAMU,SAAS,GAAGH,KAAK,GAAG,CAA1B;AACA,UAAII,YAAY,GAAG,IAAnB;;AACA,WAAK,IAAIC,CAAC,GAAGL,KAAb,EAAoBK,CAAC,GAAGjD,OAAO,CAACR,MAAhC,EAAwCyD,CAAC,EAAzC,EAA6C;AAAA,cACjClF,IADiC,GACxBiC,OAAO,CAACiD,CAAD,CADiB,CACjClF,IADiC;;AAEzC,YAAIA,IAAJ,EAAU;AACNiF,UAAAA,YAAY,GAAG,KAAf;AACA;AACH;AACJ;;AAED,UAAIA,YAAJ,EAAkB;AACd,aAAKR,kBAAL,CAAwBH,EAAxB;AACH;;AAED,YAAMa,QAAQ,GAAG,KAAKpD,aAAL,CAAmBC,GAAnB,CAAuBgD,SAAvB,CAAjB;;AACA,UAAI,CAACG,QAAL,EAAe;AACX,cAAMC,OAAO,GAAG,KAAK7D,WAAL,CAAiBC,OAAjC;AAEAzC,QAAAA,SAAS,CAACqG,OAAD,EAAU,IAAV,CAAT;AACA;AACH;;AAEDD,MAAAA,QAAQ,CAACjD,KAAT,CAAe,IAAf;AACH,KAtPkB;;AAAA,SAwPnBmD,qBAxPmB,GAwPKf,EAAE,IAAI;AAAA,YAClBrD,IADkB,GACT,KAAKmD,KADI,CAClBnD,IADkB;AAE1B,UAAI,CAACA,IAAL,EAAW;AAFe,YAIlBgB,OAJkB,GAINhB,IAJM,CAIlBgB,OAJkB;AAM1B,YAAM4C,KAAK,GAAG5C,OAAO,CAAC6C,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAACT,EAAF,KAASA,EAAhC,CAAd;AACA,YAAMU,SAAS,GAAGH,KAAK,GAAG,CAA1B;AAEA,YAAMM,QAAQ,GAAG,KAAKpD,aAAL,CAAmBC,GAAnB,CAAuBgD,SAAvB,CAAjB;;AACA,UAAI,CAACG,QAAL,EAAe;AACX,cAAMC,OAAO,GAAG,KAAK7D,WAAL,CAAiBC,OAAjC;AAEAzC,QAAAA,SAAS,CAACqG,OAAD,EAAU,KAAV,CAAT;AACA;AACH;;AAEDD,MAAAA,QAAQ,CAACjD,KAAT,CAAe,KAAf;AACH,KA1QkB;;AAAA,SA4QnBa,qBA5QmB,GA4QKuB,EAAE,IAAI;AAAA,YAClBrD,IADkB,GACT,KAAKmD,KADI,CAClBnD,IADkB;AAE1B,UAAI,CAACA,IAAL,EAAW;AAFe,YAIlBgB,OAJkB,GAINhB,IAJM,CAIlBgB,OAJkB;AAM1B,YAAM4C,KAAK,GAAG5C,OAAO,CAAC6C,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAACT,EAAF,KAASA,EAAhC,CAAd;AACA,YAAMgB,SAAS,GAAGT,KAAK,GAAG,CAA1B;AAEA,YAAMU,QAAQ,GAAG,KAAKxD,aAAL,CAAmBC,GAAnB,CAAuBsD,SAAvB,CAAjB;;AACA,UAAI,CAACC,QAAL,EAAe;AACX,cAAMvF,IAAI,GAAG6E,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG5C,OAAO,CAACR,MAA9B,GAAuCQ,OAAO,CAAC4C,KAAD,CAAP,CAAe7E,IAAtD,GAA6D,EAA1E;;AACA,YAAIiC,OAAO,CAACR,MAAR,IAAkB,CAACzB,IAAvB,EAA6B;AACzB;AACH;;AAED,aAAKmE,eAAL;AACA;AACH;;AAEDoB,MAAAA,QAAQ,CAACrD,KAAT,CAAeqD,QAAf,EAAyB,IAAzB;AACH,KAjSkB;;AAAA,SAmSnBC,OAnSmB,GAmST,MAAM;AAAA,YACJvE,IADI,GACK,KAAKmD,KADV,CACJnD,IADI;AAEZ,UAAI,CAACA,IAAL,EAAW;AAFC,YAIJgB,OAJI,GAIQhB,IAJR,CAIJgB,OAJI;AAMZ,YAAMwD,QAAQ,GAAGpG,sBAAsB,GAAG4C,OAAO,CAACR,MAAlD;;AAEA,UAAIgE,QAAQ,IAAI,CAAhB,EAAmB;AACf,eAAO,+CAAP;AACH;;AACD,UAAIA,QAAQ,KAAK,CAAjB,EAAoB;AAChB,eAAO,4BAAP;AACH;;AAED,mCAAsBpG,sBAAsB,GAAG4C,OAAO,CAACR,MAAvD;AACH,KAnTkB;;AAAA,SAqTnBiE,WArTmB,GAqTL,MAAM;AAAA,YACRzE,IADQ,GACC,KAAKmD,KADN,CACRnD,IADQ;;AAGhB,UAAI9B,WAAW,CAAC8B,IAAD,CAAf,EAAuB;AACnB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd;AACH,OAFD,MAEO;AACH,aAAKwE,sBAAL;AACH;AACJ,KA7TkB;;AAAA,SA+TnBC,UA/TmB,GA+TN,MAAM;AAAA,YACPC,MADO,GACI,KAAK/E,KADT,CACP+E,MADO;AAGf,YAAMC,gBAAgB,GAAGrG,SAAS,CAACsG,mBAAV,EAAzB;AACA,UAAI,CAACD,gBAAL,EAAuB;AAEvBD,MAAAA,MAAM,CAACC,gBAAD,CAAN;AAEA,WAAKH,sBAAL;AACH,KAxUkB;;AAAA,SA0UnBK,uBA1UmB,GA0UO,MAAM;AAC5B,WAAK9E,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KA5UkB;;AAAA,SA8UnBwE,sBA9UmB,GA8UM,MAAM;AAC3B,WAAKK,uBAAL;AAEAtG,MAAAA,eAAe,CAACuE,YAAhB,CAA6B;AACzB,iBAAS;AADgB,OAA7B;AAGH,KApVkB;;AAGf,SAAK1C,WAAL,GAAmBxD,KAAK,CAACkI,SAAN,EAAnB;AACA,SAAKlE,aAAL,GAAqB,IAAImE,GAAJ,EAArB;AAEA,SAAK9B,KAAL,GAAa;AACTnD,MAAAA,IAAI,EAAE,IADG;AAETE,MAAAA,OAAO,EAAE,KAFA;AAGTC,MAAAA,YAAY,EAAE5B;AAHL,KAAb;AAKH;;AAED2G,EAAAA,iBAAiB,GAAG;AAChB1G,IAAAA,SAAS,CAAC2G,EAAV,CAAa,wBAAb,EAAuC,KAAKxE,sBAA5C;AACAnC,IAAAA,SAAS,CAAC2G,EAAV,CAAa,8BAAb,EAA6C,KAAKxE,sBAAlD;AACAnC,IAAAA,SAAS,CAAC2G,EAAV,CAAa,qBAAb,EAAoC,KAAKrF,yBAAzC;AACAtB,IAAAA,SAAS,CAAC2G,EAAV,CAAa,2BAAb,EAA0C,KAAKvE,+BAA/C;AACApC,IAAAA,SAAS,CAAC2G,EAAV,CAAa,wBAAb,EAAuC,KAAKxE,sBAA5C;AACAnC,IAAAA,SAAS,CAAC2G,EAAV,CAAa,0BAAb,EAAyC,KAAK/E,8BAA9C;AACH;;AAEDgF,EAAAA,oBAAoB,GAAG;AACnB5G,IAAAA,SAAS,CAAC6G,cAAV,CAAyB,wBAAzB,EAAmD,KAAK1E,sBAAxD;AACAnC,IAAAA,SAAS,CAAC6G,cAAV,CAAyB,8BAAzB,EAAyD,KAAK1E,sBAA9D;AACAnC,IAAAA,SAAS,CAAC6G,cAAV,CAAyB,qBAAzB,EAAgD,KAAKvF,yBAArD;AACAtB,IAAAA,SAAS,CAAC6G,cAAV,CAAyB,2BAAzB,EAAsD,KAAKzE,+BAA3D;AACApC,IAAAA,SAAS,CAAC6G,cAAV,CAAyB,wBAAzB,EAAmD,KAAK1E,sBAAxD;AACAnC,IAAAA,SAAS,CAAC6G,cAAV,CAAyB,0BAAzB,EAAqD,KAAKjF,8BAA1D;AACH;;AA2CDkF,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAAA,UACvCzF,IADuC,GAC9B,KAAKmD,KADyB,CACvCnD,IADuC;;AAG/C,QAAIA,IAAI,IAAI,CAACwF,SAAS,CAACxF,IAAvB,EAA6B;AACzBa,MAAAA,UAAU,CAAC,MAAM;AACb/C,QAAAA,SAAS,CAAC,KAAKwC,WAAL,CAAiBC,OAAlB,EAA2B,IAA3B,CAAT;AACH,OAFS,EAEP,CAFO,CAAV;AAGH;AACJ;;AAsQDmF,EAAAA,MAAM,GAAG;AAAA,wBACkB,KAAK7F,KADvB;AAAA,UACG8F,OADH,eACGA,OADH;AAAA,UACYC,CADZ,eACYA,CADZ;AAAA,wBAEmC,KAAKzC,KAFxC;AAAA,UAEGhD,YAFH,eAEGA,YAFH;AAAA,UAEiBD,OAFjB,eAEiBA,OAFjB;AAAA,UAE0BF,IAF1B,eAE0BA,IAF1B;AAGL,QAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AAEX,UAAMgB,OAAO,GAAGhB,IAAI,GAAGA,IAAI,CAACgB,OAAR,GAAkB,EAAtC;AAEA,SAAKF,aAAL,CAAmB+E,KAAnB;AACA,UAAMC,KAAK,GAAG9E,OAAO,CAAC+E,GAAR,CAAY,CAACjC,CAAD,EAAIG,CAAJ,KACtB,oBAAC,gBAAD;AACI,MAAA,GAAG,EAAE+B,EAAE,IAAI,KAAKlF,aAAL,CAAmBmF,GAAnB,CAAuBhC,CAAvB,EAA0B+B,EAA1B,CADf;AAEI,MAAA,GAAG,EAAElC,CAAC,CAACT,EAFX;AAGI,MAAA,MAAM,EAAES,CAHZ;AAII,MAAA,QAAQ,EAAE,KAAKN,kBAJnB;AAKI,MAAA,WAAW,EAAE,KAAKY,qBALtB;AAMI,MAAA,WAAW,EAAE,KAAKtC,qBANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADU,CAAd;AAWA,UAAMoE,YAAY,GAAG9H,sBAAsB,GAAG4C,OAAO,CAACR,MAAjC,GAA0C,CAA/D;AACA,UAAM2F,IAAI,GAAG,KAAK5B,OAAL,EAAb;AAEA,WACI,0CACI,oBAAC,MAAD;AACI,MAAA,SAAS,EAAEoB,OAAO,CAAC/G,UADvB;AAEI,MAAA,IAAI,MAFR;AAGI,MAAA,kBAAkB,EAAE,CAHxB;AAII,MAAA,OAAO,EAAE,KAAK6F,WAJlB;AAKI,yBAAgB,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCmB,CAAC,CAAC,SAAD,CAAjC,CANJ,EAOI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE;AAAEQ,QAAAA,IAAI,EAAET,OAAO,CAAC1G;AAAhB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAC,WAApC;AAAgD,MAAA,KAAK,EAAE;AAAEoH,QAAAA,QAAQ,EAAE;AAAZ,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,CAAC,CAAC,UAAD,CADN,CADJ,EAIKzF,YAAY,IAAI7B,oBAAoB,GAAGD,yBAAvC,IACG,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE8B,YAAY,IAAI,CAAhB,GAAoB,eAApB,GAAsC,OAAzD;AAAkE,MAAA,OAAO,EAAC,WAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,YADL,CALR,CADJ,EAWI;AACI,MAAA,GAAG,EAAE,KAAKG,WADd;AAEI,MAAA,EAAE,EAAC,6BAFP;AAGI,MAAA,eAAe,MAHnB;AAII,MAAA,8BAA8B,MAJlC;AAKI,MAAA,WAAW,EAAEsF,CAAC,CAAC,cAAD,CALlB;AAMI,qBAAatH,oBANjB;AAOI,yBAAiBC,wBAPrB;AAQI,MAAA,OAAO,EAAE,KAAK8D,WARlB;AASI,MAAA,SAAS,EAAE,KAAKnB,aATpB;AAUI,MAAA,OAAO,EAAE,KAAK2B,WAVlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAuBI,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE8C,OAAO,CAACxG,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBJ,EAwBI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKyG,CAAC,CAAC,aAAD,CADN,CAxBJ,EA2BI,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE;AAAEQ,QAAAA,IAAI,EAAET,OAAO,CAACtG;AAAhB,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKyG,KADL,EAEKI,YAAY,IACT,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAE,KADd;AAEI,MAAA,SAAS,EAAEP,OAAO,CAACrG,QAFvB;AAGI,MAAA,MAAM,MAHV;AAII,MAAA,OAAO,EAAE,KAAK4D,eAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,YAAD;AAAc,MAAA,iBAAiB,MAA/B;AAAgC,MAAA,OAAO,EAAE0C,CAAC,CAAC,aAAD,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAHR,CA3BJ,EAuCI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaO,IAAb,CAvCJ,CAPJ,EAgDI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE,KAAK1B,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKmB,CAAC,CAAC,QAAD,CADN,CADJ,EAIKzH,WAAW,CAAC6B,IAAD,CAAX,IACG,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE,KAAK2E,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKiB,CAAC,CAAC,MAAD,CADN,CALR,CAhDJ,CADJ,EA4DI,oBAAC,MAAD;AACI,MAAA,SAAS,EAAED,OAAO,CAAC/G,UADvB;AAEI,MAAA,IAAI,EAAEsB,OAFV;AAGI,MAAA,kBAAkB,EAAE,CAHxB;AAII,MAAA,OAAO,EAAE,KAAK6E,uBAJlB;AAKI,yBAAgB,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCa,CAAC,CAAC,sBAAD,CAAjC,CANJ,EAOI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE;AAAEQ,QAAAA,IAAI,EAAET,OAAO,CAAC1G;AAAhB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwD2G,CAAC,CAAC,qBAAD,CAAzD,CAPJ,EAQI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE,KAAKb,uBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKa,CAAC,CAAC,QAAD,CADN,CADJ,EAII,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE,KAAKlB,sBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKkB,CAAC,CAAC,IAAD,CADN,CAJJ,CARJ,CA5DJ,CADJ;AAgFH;;AA7b0C;;AAgc/ClG,gBAAgB,CAAC4G,SAAjB,GAA6B;AACzB1B,EAAAA,MAAM,EAAE7H,SAAS,CAACwJ,IAAV,CAAeC;AADE,CAA7B;AAIA,MAAMC,OAAO,GAAGzJ,OAAO,CACnBgB,WAAW,EADQ,EAEnBf,UAAU,CAACyB,MAAD,CAFS,EAGnBxB,eAAe,EAHI,EAInBa,cAAc,EAJK,CAAvB;AAOA,eAAe0I,OAAO,CAAC/G,gBAAD,CAAtB","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport CreatePollOption from './CreatePollOption';\nimport { focusNode } from '../../Utils/Component';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { utils } from '../../Utils/Key';\nimport { hasPollData, isValidPoll } from '../../Utils/Poll';\nimport {\n    POLL_OPTIONS_MAX_COUNT,\n    POLL_QUESTION_HINT_LENGTH,\n    POLL_QUESTION_LENGTH,\n    POLL_QUESTION_MAX_LENGTH\n} from '../../Constants';\nimport PollStore from '../../Stores/PollStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './CreatePollDialog.css';\n\nconst styles = theme => ({\n    dialogRoot: {\n        color: theme.palette.text.primary\n    },\n    contentRoot: {\n        width: 300\n    },\n    dividerRoot: {\n        margin: '8px -24px'\n    },\n    listRoot: {\n        margin: '0 -24px'\n    },\n    listItem: {\n        padding: '11px 24px',\n        color: '#8e9396',\n        height: 48\n    },\n    typographyRoot: {}\n});\n\nclass CreatePollDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.questionRef = React.createRef();\n        this.optionsRefMap = new Map();\n\n        this.state = {\n            poll: null,\n            confirm: false,\n            remainLength: POLL_QUESTION_MAX_LENGTH\n        };\n    }\n\n    componentDidMount() {\n        PollStore.on('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n        PollStore.on('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n        PollStore.on('clientUpdatePollOption', this.handleClientUpdatePoll);\n        PollStore.on('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n    }\n\n    componentWillUnmount() {\n        PollStore.removeListener('clientUpdateDeletePoll', this.handleClientUpdatePoll);\n        PollStore.removeListener('clientUpdateDeletePollOption', this.handleClientUpdatePoll);\n        PollStore.removeListener('clientUpdateNewPoll', this.handleClientUpdateNewPoll);\n        PollStore.removeListener('clientUpdateNewPollOption', this.handleClientUpdateNewPollOption);\n        PollStore.removeListener('clientUpdatePollOption', this.handleClientUpdatePoll);\n        PollStore.removeListener('clientUpdatePollQuestion', this.handleClientUpdatePollQuestion);\n    }\n\n    handleClientUpdateNewPoll = update => {\n        const { poll } = PollStore;\n\n        this.setState({\n            confirm: false,\n            remainLength: POLL_QUESTION_MAX_LENGTH,\n            poll\n        });\n    };\n\n    handleClientUpdatePollQuestion = update => {\n        const { poll } = PollStore;\n\n        const node = this.questionRef.current;\n        const length = node.dataset.length;\n        const innerText = node.innerText;\n\n        this.setState({\n            remainLength: length - innerText.length,\n            poll\n        });\n    };\n\n    handleClientUpdatePoll = update => {\n        const { poll } = PollStore;\n\n        this.setState({ poll });\n    };\n\n    handleClientUpdateNewPollOption = update => {\n        const { poll } = PollStore;\n\n        this.setState({ poll }, () => {\n            setTimeout(() => {\n                const node = this.optionsRefMap.get(poll.options.length - 1);\n\n                node.focus(true);\n            });\n        });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { poll } = this.state;\n\n        if (poll && !prevState.poll) {\n            setTimeout(() => {\n                focusNode(this.questionRef.current, true);\n            }, 0);\n        }\n    }\n\n    handleKeyDown = event => {\n        const node = this.questionRef.current;\n        const maxLength = node.dataset.maxLength;\n        const innerText = node.innerText;\n        const length = innerText.length;\n\n        let hasSelection = false;\n        const selection = window.getSelection();\n        const isSpecial = utils.isSpecial(event);\n        const isNavigational = utils.isNavigational(event);\n\n        if (selection) {\n            hasSelection = !!selection.toString();\n        }\n\n        switch (event.key) {\n            case 'Enter': {\n                if (!event.shiftKey) {\n                    this.handleFocusNextOption(0);\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n            case 'ArrowDown': {\n                const selection = window.getSelection();\n                if (!selection) break;\n                if (!selection.isCollapsed) break;\n\n                const lastChild =\n                    node.childNodes && node.childNodes.length > 0 ? node.childNodes[node.childNodes.length - 1] : null;\n\n                if (!lastChild || (selection.anchorNode === lastChild && selection.anchorOffset === lastChild.length)) {\n                    this.handleFocusNextOption(0);\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n        }\n\n        if (isSpecial || isNavigational) {\n            return true;\n        }\n\n        if (length >= maxLength && !hasSelection) {\n            event.preventDefault();\n            return false;\n        }\n\n        return true;\n    };\n\n    handlePaste = event => {\n        event.preventDefault();\n\n        const node = this.questionRef.current;\n        const maxLength = node.dataset.maxLength;\n\n        const selection = window.getSelection();\n        const selectionString = selection ? selection.toString() : '';\n\n        const innerText = node.innerText;\n        if (innerText.length - selection.length >= maxLength) return;\n\n        let pasteText = event.clipboardData.getData('text/plain');\n        if (!pasteText) return;\n\n        if (innerText.length - selectionString.length + pasteText.length > maxLength) {\n            pasteText = pasteText.substr(0, maxLength - innerText.length + selectionString.length);\n        }\n        document.execCommand('insertHTML', false, pasteText);\n    };\n\n    handleInput = event => {\n        event.preventDefault();\n\n        const node = this.questionRef.current;\n        //const length = node.dataset.length;\n\n        const innerText = node.innerText;\n        const innerHtml = node.innerHTML;\n\n        if (innerHtml === '<br>') {\n            node.innerText = '';\n        }\n\n        // this.setState({\n        //     remainLength: length - innerText.length\n        // });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdatePollQuestion',\n            question: innerText\n        });\n    };\n\n    handleAddOption = () => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n        if (options.length >= POLL_OPTIONS_MAX_COUNT) return;\n\n        const option = {\n            id: Date.now(),\n            text: ''\n        };\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateNewPollOption',\n            option\n        });\n    };\n\n    handleDeleteOption = (id, backspace = false) => {\n        if (backspace) {\n            this.handleDeleteByBackspace(id);\n        } else {\n            this.handleDelete(id);\n        }\n    };\n\n    handleDelete = id => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateDeletePollOption',\n            id\n        });\n    };\n\n    handleDeleteByBackspace = id => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const index = options.findIndex(x => x.id === id);\n        const prevIndex = index - 1;\n        let deleteOption = true;\n        for (let i = index; i < options.length; i++) {\n            const { text } = options[i];\n            if (text) {\n                deleteOption = false;\n                break;\n            }\n        }\n\n        if (deleteOption) {\n            this.handleDeleteOption(id);\n        }\n\n        const prevNode = this.optionsRefMap.get(prevIndex);\n        if (!prevNode) {\n            const element = this.questionRef.current;\n\n            focusNode(element, true);\n            return;\n        }\n\n        prevNode.focus(true);\n    };\n\n    handleFocusPrevOption = id => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const index = options.findIndex(x => x.id === id);\n        const prevIndex = index - 1;\n\n        const prevNode = this.optionsRefMap.get(prevIndex);\n        if (!prevNode) {\n            const element = this.questionRef.current;\n\n            focusNode(element, false);\n            return;\n        }\n\n        prevNode.focus(false);\n    };\n\n    handleFocusNextOption = id => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const index = options.findIndex(x => x.id === id);\n        const nextIndex = index + 1;\n\n        const nextNode = this.optionsRefMap.get(nextIndex);\n        if (!nextNode) {\n            const text = index >= 0 && index < options.length ? options[index].text : '';\n            if (options.length && !text) {\n                return;\n            }\n\n            this.handleAddOption();\n            return;\n        }\n\n        nextNode.focus(nextNode, true);\n    };\n\n    getHint = () => {\n        const { poll } = this.state;\n        if (!poll) return;\n\n        const { options } = poll;\n\n        const addCount = POLL_OPTIONS_MAX_COUNT - options.length;\n\n        if (addCount <= 0) {\n            return 'You have added the maximum number of options.';\n        }\n        if (addCount === 1) {\n            return 'You can add 1 more option.';\n        }\n\n        return `You can add ${POLL_OPTIONS_MAX_COUNT - options.length} more options.`;\n    };\n\n    handleClose = () => {\n        const { poll } = this.state;\n\n        if (hasPollData(poll)) {\n            this.setState({ confirm: true });\n        } else {\n            this.handleConfirmationDone();\n        }\n    };\n\n    handleSend = () => {\n        const { onSend } = this.props;\n\n        const inputMessagePoll = PollStore.getInputMessagePoll();\n        if (!inputMessagePoll) return;\n\n        onSend(inputMessagePoll);\n\n        this.handleConfirmationDone();\n    };\n\n    handleConfirmationClose = () => {\n        this.setState({ confirm: false });\n    };\n\n    handleConfirmationDone = () => {\n        this.handleConfirmationClose();\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateDeletePoll'\n        });\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { remainLength, confirm, poll } = this.state;\n        if (!poll) return null;\n\n        const options = poll ? poll.options : [];\n\n        this.optionsRefMap.clear();\n        const items = options.map((x, i) => (\n            <CreatePollOption\n                ref={el => this.optionsRefMap.set(i, el)}\n                key={x.id}\n                option={x}\n                onDelete={this.handleDeleteOption}\n                onFocusPrev={this.handleFocusPrevOption}\n                onFocusNext={this.handleFocusNextOption}\n            />\n        ));\n\n        const canAddOption = POLL_OPTIONS_MAX_COUNT - options.length > 0;\n        const hint = this.getHint();\n\n        return (\n            <>\n                <Dialog\n                    className={classes.dialogRoot}\n                    open\n                    transitionDuration={0}\n                    onClose={this.handleClose}\n                    aria-labelledby='dialog-title'>\n                    <DialogTitle id='dialog-title'>{t('NewPoll')}</DialogTitle>\n                    <DialogContent classes={{ root: classes.contentRoot }}>\n                        <div className='create-poll-dialog-question-title'>\n                            <Typography color='primary' variant='subtitle1' style={{ flexGrow: 1 }}>\n                                {t('Question')}\n                            </Typography>\n                            {remainLength <= POLL_QUESTION_LENGTH - POLL_QUESTION_HINT_LENGTH && (\n                                <Typography color={remainLength >= 0 ? 'textSecondary' : 'error'} variant='subtitle1'>\n                                    {remainLength}\n                                </Typography>\n                            )}\n                        </div>\n                        <div\n                            ref={this.questionRef}\n                            id='create-poll-dialog-question'\n                            contentEditable\n                            suppressContentEditableWarning\n                            placeholder={t('QuestionHint')}\n                            data-length={POLL_QUESTION_LENGTH}\n                            data-max-length={POLL_QUESTION_MAX_LENGTH}\n                            onPaste={this.handlePaste}\n                            onKeyDown={this.handleKeyDown}\n                            onInput={this.handleInput}\n                        />\n                        <Divider className={classes.dividerRoot} />\n                        <Typography color='primary' variant='subtitle1'>\n                            {t('PollOptions')}\n                        </Typography>\n                        <List classes={{ root: classes.listRoot }}>\n                            {items}\n                            {canAddOption && (\n                                <ListItem\n                                    selected={false}\n                                    className={classes.listItem}\n                                    button\n                                    onClick={this.handleAddOption}>\n                                    <ListItemText disableTypography primary={t('AddAnOption')} />\n                                </ListItem>\n                            )}\n                        </List>\n                        <Typography>{hint}</Typography>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color='primary' onClick={this.handleClose}>\n                            {t('Cancel')}\n                        </Button>\n                        {isValidPoll(poll) && (\n                            <Button color='primary' onClick={this.handleSend}>\n                                {t('Send')}\n                            </Button>\n                        )}\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    className={classes.dialogRoot}\n                    open={confirm}\n                    transitionDuration={0}\n                    onClose={this.handleConfirmationClose}\n                    aria-labelledby='dialog-title'>\n                    <DialogTitle id='dialog-title'>{t('CancelPollAlertTitle')}</DialogTitle>\n                    <DialogContent classes={{ root: classes.contentRoot }}>{t('CancelPollAlertText')}</DialogContent>\n                    <DialogActions>\n                        <Button color='primary' onClick={this.handleConfirmationClose}>\n                            {t('Cancel')}\n                        </Button>\n                        <Button color='primary' onClick={this.handleConfirmationDone}>\n                            {t('Ok')}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nCreatePollDialog.propTypes = {\n    onSend: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withStyles(styles),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(CreatePollDialog);\n"]},"metadata":{},"sourceType":"module"}