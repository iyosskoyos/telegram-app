{"ast":null,"code":"var _jsxFileName = \"/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnMiddle/FilesDropTarget.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport FileStore from '../../Stores/FileStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './FilesDropTarget.css';\n\nclass FilesDropTarget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateDragging = update => {\n      this.setState({\n        dragging: ApplicationStore.getDragging()\n      });\n    };\n\n    this.handleDragEnter = event => {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    this.handleDrop = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      ApplicationStore.setDragging(false);\n      this.handleAttachDocumentComplete(event.dataTransfer.files);\n    };\n\n    this.handleDragLeave = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      ApplicationStore.setDragging(false);\n    };\n\n    this.handleAttachDocumentComplete = files => {\n      if (files.length === 0) return;\n\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i];\n        const content = {\n          '@type': 'inputMessageDocument',\n          document: {\n            '@type': 'inputFileBlob',\n            name: file.name,\n            data: file\n          }\n        };\n        this.onSendInternal(content, result => FileStore.uploadFile(result.content.document.document.id, result));\n      }\n    };\n\n    this.onSendInternal = async (content, callback) => {\n      const currentChatId = ApplicationStore.getChatId();\n      if (!currentChatId) return;\n      if (!content) return;\n\n      try {\n        ApplicationStore.invokeScheduledAction(\"clientUpdateClearHistory chatId=\".concat(currentChatId));\n        let result = await TdLibController.send({\n          '@type': 'sendMessage',\n          chat_id: currentChatId,\n          reply_to_message_id: 0,\n          input_message_content: content\n        }); //MessageStore.set(result);\n\n        TdLibController.send({\n          '@type': 'viewMessages',\n          chat_id: currentChatId,\n          message_ids: [result.id]\n        });\n        callback(result);\n      } catch (error) {\n        alert('sendMessage error ' + JSON.stringify(error));\n      }\n    };\n\n    this.state = {\n      dragging: ApplicationStore.getDragging()\n    };\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('clientUpdateDragging', this.onClientUpdateDragging);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateDragging', this.onClientUpdateDragging);\n  }\n\n  render() {\n    const dragging = this.state.dragging;\n    return React.createElement(React.Fragment, null, dragging && React.createElement(\"div\", {\n      className: \"files-drop-target\",\n      onDragEnter: this.handleDragEnter,\n      onDragLeave: this.handleDragLeave,\n      onDrop: this.handleDrop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"files-drop-target-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"files-drop-target-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"files-drop-target-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Drop files here\"), React.createElement(\"div\", {\n      className: \"files-drop-target-subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"to send them without compression\")))));\n  }\n\n}\n\nFilesDropTarget.propTypes = {};\nexport default FilesDropTarget;","map":{"version":3,"sources":["/Users/yosuahalim/Documents/Projects/telegram-app/src/Components/ColumnMiddle/FilesDropTarget.js"],"names":["React","FileStore","ApplicationStore","TdLibController","FilesDropTarget","Component","constructor","props","onClientUpdateDragging","update","setState","dragging","getDragging","handleDragEnter","event","preventDefault","stopPropagation","handleDrop","setDragging","handleAttachDocumentComplete","dataTransfer","files","handleDragLeave","length","i","file","content","document","name","data","onSendInternal","result","uploadFile","id","callback","currentChatId","getChatId","invokeScheduledAction","send","chat_id","reply_to_message_id","input_message_content","message_ids","error","alert","JSON","stringify","state","componentDidMount","on","componentWillUnmount","removeListener","render","propTypes"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport FileStore from '../../Stores/FileStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './FilesDropTarget.css';\n\nclass FilesDropTarget extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: ApplicationStore.getDragging()\n        };\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateDragging', this.onClientUpdateDragging);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateDragging', this.onClientUpdateDragging);\n    }\n\n    onClientUpdateDragging = update => {\n        this.setState({ dragging: ApplicationStore.getDragging() });\n    };\n\n    handleDragEnter = event => {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleDrop = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        ApplicationStore.setDragging(false);\n\n        this.handleAttachDocumentComplete(event.dataTransfer.files);\n    };\n\n    handleDragLeave = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        ApplicationStore.setDragging(false);\n    };\n\n    handleAttachDocumentComplete = files => {\n        if (files.length === 0) return;\n\n        for (let i = 0; i < files.length; i++) {\n            let file = files[i];\n            const content = {\n                '@type': 'inputMessageDocument',\n                document: { '@type': 'inputFileBlob', name: file.name, data: file }\n            };\n\n            this.onSendInternal(content, result => FileStore.uploadFile(result.content.document.document.id, result));\n        }\n    };\n\n    onSendInternal = async (content, callback) => {\n        const currentChatId = ApplicationStore.getChatId();\n\n        if (!currentChatId) return;\n        if (!content) return;\n\n        try {\n            ApplicationStore.invokeScheduledAction(`clientUpdateClearHistory chatId=${currentChatId}`);\n\n            let result = await TdLibController.send({\n                '@type': 'sendMessage',\n                chat_id: currentChatId,\n                reply_to_message_id: 0,\n                input_message_content: content\n            });\n\n            //MessageStore.set(result);\n\n            TdLibController.send({\n                '@type': 'viewMessages',\n                chat_id: currentChatId,\n                message_ids: [result.id]\n            });\n\n            callback(result);\n        } catch (error) {\n            alert('sendMessage error ' + JSON.stringify(error));\n        }\n    };\n\n    render() {\n        const { dragging } = this.state;\n\n        return (\n            <>\n                {dragging && (\n                    <div\n                        className='files-drop-target'\n                        onDragEnter={this.handleDragEnter}\n                        onDragLeave={this.handleDragLeave}\n                        onDrop={this.handleDrop}>\n                        <div className='files-drop-target-wrapper'>\n                            <div className='files-drop-target-text'>\n                                <div className='files-drop-target-title'>Drop files here</div>\n                                <div className='files-drop-target-subtitle'>to send them without compression</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nFilesDropTarget.propTypes = {};\n\nexport default FilesDropTarget;\n"]},"metadata":{},"sourceType":"module"}