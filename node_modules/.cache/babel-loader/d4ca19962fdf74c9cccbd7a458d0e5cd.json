{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/ColumnRight/GroupsInCommon.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatControl from '../Tile/ChatControl';\nimport GroupsInCommonHeader from './GroupsInCommonHeader';\nimport { getChatUserId } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GroupsInCommon.css';\n\nclass GroupsInCommon extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelect = chatId => {\n      const popup = this.props.popup;\n      openChat(chatId);\n\n      if (popup) {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateDialogChatId',\n          chatId: 0\n        });\n      }\n    };\n\n    this.state = {\n      chatIds: []\n    };\n  }\n\n  componentDidMount() {\n    const chatId = this.props.chatId;\n    const userId = getChatUserId(chatId);\n    if (!userId) return;\n    TdLibController.send({\n      '@type': 'getGroupsInCommon',\n      user_id: userId,\n      offset_chat_id: 0,\n      limit: 100\n    }).then(result => {\n      const store = FileStore.getStore();\n      loadChatsContent(store, result.chat_ids);\n      this.setState({\n        chatIds: result.chat_ids\n      });\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          minHeight = _this$props.minHeight,\n          onClose = _this$props.onClose,\n          popup = _this$props.popup;\n    const chatIds = this.state.chatIds;\n    const chats = chatIds.map(x => React.createElement(ListItem, {\n      button: true,\n      key: x,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(ChatControl, {\n      chatId: x,\n      onSelect: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })));\n    const content = React.createElement(React.Fragment, null, React.createElement(GroupsInCommonHeader, {\n      onClose: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"groups-in-common-list\",\n      style: {\n        minHeight\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, chats));\n    return popup ? React.createElement(React.Fragment, null, content) : React.createElement(\"div\", {\n      className: \"groups-in-common\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nGroupsInCommon.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n  popup: PropTypes.bool,\n  minHeight: PropTypes.number\n};\nGroupsInCommon.defaultProps = {\n  popup: false,\n  minHeight: 0\n};\nexport default GroupsInCommon;","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/ColumnRight/GroupsInCommon.js"],"names":["React","PropTypes","ListItem","ChatControl","GroupsInCommonHeader","getChatUserId","loadChatsContent","openChat","FileStore","TdLibController","GroupsInCommon","Component","constructor","props","handleSelect","chatId","popup","clientUpdate","state","chatIds","componentDidMount","userId","send","user_id","offset_chat_id","limit","then","result","store","getStore","chat_ids","setState","render","minHeight","onClose","chats","map","x","content","propTypes","number","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ChatControl from '../Tile/ChatControl';\nimport GroupsInCommonHeader from './GroupsInCommonHeader';\nimport { getChatUserId } from '../../Utils/Chat';\nimport { loadChatsContent } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GroupsInCommon.css';\n\nclass GroupsInCommon extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatIds: []\n        };\n    }\n\n    componentDidMount() {\n        const { chatId } = this.props;\n\n        const userId = getChatUserId(chatId);\n        if (!userId) return;\n\n        TdLibController.send({\n            '@type': 'getGroupsInCommon',\n            user_id: userId,\n            offset_chat_id: 0,\n            limit: 100\n        }).then(result => {\n            const store = FileStore.getStore();\n            loadChatsContent(store, result.chat_ids);\n\n            this.setState({ chatIds: result.chat_ids });\n        });\n    }\n\n    handleSelect = chatId => {\n        const { popup } = this.props;\n\n        openChat(chatId);\n\n        if (popup) {\n            TdLibController.clientUpdate({\n                '@type': 'clientUpdateDialogChatId',\n                chatId: 0\n            });\n        }\n    };\n\n    render() {\n        const { minHeight, onClose, popup } = this.props;\n        const { chatIds } = this.state;\n\n        const chats = chatIds.map(x => (\n            <ListItem button key={x}>\n                <ChatControl chatId={x} onSelect={this.handleSelect} />\n            </ListItem>\n        ));\n\n        const content = (\n            <>\n                <GroupsInCommonHeader onClose={onClose} />\n                <div className='groups-in-common-list' style={{ minHeight }}>\n                    {chats}\n                </div>\n            </>\n        );\n\n        return popup ? <>{content}</> : <div className='groups-in-common'>{content}</div>;\n    }\n}\n\nGroupsInCommon.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    onClose: PropTypes.func.isRequired,\n    popup: PropTypes.bool,\n    minHeight: PropTypes.number\n};\n\nGroupsInCommon.defaultProps = {\n    popup: false,\n    minHeight: 0\n};\n\nexport default GroupsInCommon;\n"]},"metadata":{},"sourceType":"module"}