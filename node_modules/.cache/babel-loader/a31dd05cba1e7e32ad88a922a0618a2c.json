{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/Message/Media/AudioAction.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getDownloadedSize, getUploadedSize, getFileSize } from '../../../Utils/File';\nimport { getDurationString } from '../../../Utils/Common';\nimport FileStore from '../../../Stores/FileStore';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport './AudioAction.css';\n\nconst styles = theme => ({\n  audioAction: {\n    color: theme.palette.text.secondary\n  }\n});\n\nclass AudioAction extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateMediaEnd = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId,\n            duration = _this$props.duration;\n      const _this$state = this.state,\n            active = _this$state.active,\n            file = _this$state.file;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          active: false,\n          currentTime: 0,\n          timeString: this.getTimeString(0, duration, false, file)\n        });\n      }\n    };\n\n    this.onClientUpdateMediaTime = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId,\n            duration = _this$props2.duration;\n      const _this$state2 = this.state,\n            active = _this$state2.active,\n            file = _this$state2.file;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          currentTime: update.currentTime,\n          duration: update.duration || duration,\n          timeString: this.getTimeString(update.currentTime, update.duration || duration, active, file)\n        });\n      }\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId,\n            duration = _this$props3.duration;\n      const _this$state3 = this.state,\n            active = _this$state3.active,\n            currentTime = _this$state3.currentTime,\n            file = _this$state3.file;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          active: true,\n          currentTime: active ? currentTime : 0,\n          timeString: this.getTimeString(active ? currentTime : 0, duration, true, file)\n        });\n      } else if (active) {\n        this.setState({\n          active: false,\n          currentTime: 0,\n          timeString: this.getTimeString(0, duration, false, file)\n        });\n      }\n    };\n\n    this.onUpdateFile = update => {\n      const currentFile = this.state.file;\n      const nextFile = update.file;\n\n      if (currentFile && currentFile.id === nextFile.id) {\n        this.setState({\n          file: nextFile,\n          prevFile: currentFile\n        });\n      }\n    };\n\n    this.getTimeString = (currentTime, duration, active, file) => {\n      const isDownloadingCompleted = file.local && file.local.is_downloading_completed;\n      const isUploadingCompleted = file.remote && file.remote.is_uploading_completed;\n      const durationString = getDurationString(Math.floor(duration || 0));\n      const currentTimeString = getDurationString(Math.floor(currentTime || 0));\n      return active && isDownloadingCompleted ? \"\".concat(currentTimeString, \"/\").concat(durationString) : \"\".concat(durationString);\n    };\n\n    const message = PlayerStore.message,\n          time = PlayerStore.time;\n    const _this$props4 = this.props,\n          _chatId = _this$props4.chatId,\n          _messageId = _this$props4.messageId,\n          _duration = _this$props4.duration,\n          _file = _this$props4.file;\n\n    const _active = message && message.chat_id === _chatId && message.id === _messageId;\n\n    const _currentTime = _active && time ? time.currentTime : 0;\n\n    const audioDuration = _active && time && time.duration ? time.duration : _duration;\n\n    const _currentFile = FileStore.get(_file.id) || _file;\n\n    this.state = {\n      active: _active,\n      currentTime: _currentTime,\n      duration: audioDuration,\n      timeString: this.getTimeString(_currentTime, _duration, _active, _currentFile),\n      prevFile: null,\n      file: _currentFile\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const theme = this.props.theme;\n    const _this$state4 = this.state,\n          active = _this$state4.active,\n          timeString = _this$state4.timeString,\n          file = _this$state4.file,\n          prevFile = _this$state4.prevFile;\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    if (nextState.timeString !== timeString) {\n      return true;\n    }\n\n    if (nextState.active !== active) {\n      return true;\n    }\n\n    if (nextState.file !== file) {\n      return true;\n    }\n\n    if (nextState.prevFile !== prevFile) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    FileStore.on('updateFile', this.onUpdateFile);\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n    PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('updateFile', this.onUpdateFile);\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n    PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          classes = _this$props5.classes,\n          title = _this$props5.title;\n    const _this$state5 = this.state,\n          active = _this$state5.active,\n          file = _this$state5.file,\n          timeString = _this$state5.timeString;\n    if (!file) return null;\n    const isDownloadingActive = file.local && file.local.is_downloading_active;\n    const isUploadingActive = file.remote && file.remote.is_uploading_active;\n    const isDownloadingCompleted = file.local && file.local.is_downloading_completed;\n    const isUploadingCompleted = file.remote && file.remote.is_uploading_completed;\n    const size = getFileSize(file);\n    let progressSize = null;\n\n    if (isDownloadingActive) {\n      progressSize = getDownloadedSize(file);\n    } else if (isUploadingActive) {\n      progressSize = getUploadedSize(file);\n    }\n\n    const sizeString = progressSize ? \"\".concat(progressSize, \"/\").concat(size) : \"\".concat(size);\n    return React.createElement(\"div\", {\n      className: classNames('audio-action', classes.audioAction),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, !active && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, title), !isDownloadingCompleted && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"\".concat(sizeString, \", \")), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, timeString));\n  }\n\n}\n\nAudioAction.propTypes = {\n  chatId: PropTypes.number,\n  messageId: PropTypes.number,\n  duration: PropTypes.number.isRequired,\n  file: PropTypes.object.isRequired,\n  title: PropTypes.string\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(AudioAction);","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Message/Media/AudioAction.js"],"names":["React","PropTypes","classNames","withStyles","getDownloadedSize","getUploadedSize","getFileSize","getDurationString","FileStore","PlayerStore","styles","theme","audioAction","color","palette","text","secondary","AudioAction","Component","constructor","props","onClientUpdateMediaEnd","update","chatId","messageId","duration","state","active","file","setState","currentTime","timeString","getTimeString","onClientUpdateMediaTime","onClientUpdateMediaActive","onUpdateFile","currentFile","nextFile","id","prevFile","isDownloadingCompleted","local","is_downloading_completed","isUploadingCompleted","remote","is_uploading_completed","durationString","Math","floor","currentTimeString","message","time","chat_id","audioDuration","get","shouldComponentUpdate","nextProps","nextState","componentDidMount","on","componentWillUnmount","removeListener","render","classes","title","isDownloadingActive","is_downloading_active","isUploadingActive","is_uploading_active","size","progressSize","sizeString","propTypes","number","isRequired","object","string","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { getDownloadedSize, getUploadedSize, getFileSize } from '../../../Utils/File';\nimport { getDurationString } from '../../../Utils/Common';\nimport FileStore from '../../../Stores/FileStore';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport './AudioAction.css';\n\nconst styles = theme => ({\n    audioAction: {\n        color: theme.palette.text.secondary\n    }\n});\n\nclass AudioAction extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { message, time } = PlayerStore;\n        const { chatId, messageId, duration, file } = this.props;\n\n        const active = message && message.chat_id === chatId && message.id === messageId;\n        const currentTime = active && time ? time.currentTime : 0;\n        const audioDuration = active && time && time.duration ? time.duration : duration;\n        const currentFile = FileStore.get(file.id) || file;\n\n        this.state = {\n            active: active,\n            currentTime: currentTime,\n            duration: audioDuration,\n            timeString: this.getTimeString(currentTime, duration, active, currentFile),\n\n            prevFile: null,\n            file: currentFile\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { theme } = this.props;\n        const { active, timeString, file, prevFile } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextState.timeString !== timeString) {\n            return true;\n        }\n\n        if (nextState.active !== active) {\n            return true;\n        }\n\n        if (nextState.file !== file) {\n            return true;\n        }\n\n        if (nextState.prevFile !== prevFile) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        FileStore.on('updateFile', this.onUpdateFile);\n\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('updateFile', this.onUpdateFile);\n\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active, file } = this.state;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                active: false,\n                currentTime: 0,\n                timeString: this.getTimeString(0, duration, false, file)\n            });\n        }\n    };\n\n    onClientUpdateMediaTime = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active, file } = this.state;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                currentTime: update.currentTime,\n                duration: update.duration || duration,\n                timeString: this.getTimeString(update.currentTime, update.duration || duration, active, file)\n            });\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId, duration } = this.props;\n        const { active, currentTime, file } = this.state;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState({\n                active: true,\n                currentTime: active ? currentTime : 0,\n                timeString: this.getTimeString(active ? currentTime : 0, duration, true, file)\n            });\n        } else if (active) {\n            this.setState({\n                active: false,\n                currentTime: 0,\n                timeString: this.getTimeString(0, duration, false, file)\n            });\n        }\n    };\n\n    onUpdateFile = update => {\n        const currentFile = this.state.file;\n        const nextFile = update.file;\n\n        if (currentFile && currentFile.id === nextFile.id) {\n            this.setState({ file: nextFile, prevFile: currentFile });\n        }\n    };\n\n    getTimeString = (currentTime, duration, active, file) => {\n        const isDownloadingCompleted = file.local && file.local.is_downloading_completed;\n        const isUploadingCompleted = file.remote && file.remote.is_uploading_completed;\n\n        const durationString = getDurationString(Math.floor(duration || 0));\n        const currentTimeString = getDurationString(Math.floor(currentTime || 0));\n\n        return active && isDownloadingCompleted ? `${currentTimeString}/${durationString}` : `${durationString}`;\n    };\n\n    render() {\n        const { classes, title } = this.props;\n        const { active, file, timeString } = this.state;\n        if (!file) return null;\n\n        const isDownloadingActive = file.local && file.local.is_downloading_active;\n        const isUploadingActive = file.remote && file.remote.is_uploading_active;\n        const isDownloadingCompleted = file.local && file.local.is_downloading_completed;\n        const isUploadingCompleted = file.remote && file.remote.is_uploading_completed;\n\n        const size = getFileSize(file);\n        let progressSize = null;\n        if (isDownloadingActive) {\n            progressSize = getDownloadedSize(file);\n        } else if (isUploadingActive) {\n            progressSize = getUploadedSize(file);\n        }\n        const sizeString = progressSize ? `${progressSize}/${size}` : `${size}`;\n\n        return (\n            <div className={classNames('audio-action', classes.audioAction)}>\n                {!active && <span>{title}</span>}\n                {!isDownloadingCompleted && <span>{`${sizeString}, `}</span>}\n                <span>{timeString}</span>\n            </div>\n        );\n    }\n}\n\nAudioAction.propTypes = {\n    chatId: PropTypes.number,\n    messageId: PropTypes.number,\n    duration: PropTypes.number.isRequired,\n    file: PropTypes.object.isRequired,\n\n    title: PropTypes.string\n};\n\nexport default withStyles(styles, { withTheme: true })(AudioAction);\n"]},"metadata":{},"sourceType":"module"}