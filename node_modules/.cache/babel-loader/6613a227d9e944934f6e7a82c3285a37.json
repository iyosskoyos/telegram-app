{"ast":null,"code":"/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass MessageStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.reset = () => {\n      this.items = new Map();\n      this.selectedItems = new Map();\n    };\n\n    this.onUpdate = update => {\n      switch (update['@type']) {\n        case 'updateAuthorizationState':\n          {\n            const authorization_state = update.authorization_state;\n            if (!authorization_state) break;\n\n            switch (authorization_state['@type']) {\n              case 'authorizationStateClosed':\n                {\n                  this.reset();\n                  break;\n                }\n            }\n\n            break;\n          }\n\n        case 'updateNewMessage':\n          this.set(update.message);\n          this.emit('updateNewMessage', update);\n          break;\n\n        case 'updateDeleteMessages':\n          this.emit('updateDeleteMessages', update);\n          break;\n\n        case 'updateMessageEdited':\n          {\n            const chat = this.items.get(update.chat_id);\n\n            if (chat) {\n              const message = chat.get(update.message_id);\n\n              if (message) {\n                message.reply_markup = update.reply_markup;\n                message.edit_date = update.edit_date;\n              }\n            }\n\n            this.emit('updateMessageEdited', update);\n            break;\n          }\n\n        case 'updateMessageViews':\n          {\n            const chat = this.items.get(update.chat_id);\n\n            if (chat) {\n              const message = chat.get(update.message_id);\n\n              if (message && update.views > message.views) {\n                message.views = update.views;\n              }\n            }\n\n            this.emit('updateMessageViews', update);\n            break;\n          }\n\n        case 'updateMessageContent':\n          {\n            const chat = this.items.get(update.chat_id);\n\n            if (chat) {\n              const message = chat.get(update.message_id);\n\n              if (message) {\n                update.old_content = message.content;\n                message.content = update.new_content;\n              }\n            }\n\n            this.emit('updateMessageContent', update);\n            break;\n          }\n\n        case 'updateMessageContentOpened':\n          {\n            const chat_id = update.chat_id,\n                  message_id = update.message_id;\n            const message = this.get(chat_id, message_id);\n\n            if (message) {\n              const content = message.content;\n\n              switch (content['@type']) {\n                case 'messageVoiceNote':\n                  {\n                    message.content.is_listened = true;\n                    break;\n                  }\n\n                case 'messageVideoNote':\n                  {\n                    message.content.is_viewed = true;\n                    break;\n                  }\n              }\n            }\n\n            this.emit('updateMessageContentOpened', update);\n            break;\n          }\n\n        case 'updateMessageSendSucceeded':\n          {\n            const chat = this.items.get(update.message.chat_id);\n\n            if (chat) {\n              const message = chat.get(update.old_message_id);\n\n              if (message) {\n                message.sending_state = update.message.sending_state;\n              }\n\n              if (update.old_message_id !== update.message.id) {\n                this.set(update.message);\n              }\n            }\n\n            this.set(update.message);\n            this.emit('updateMessageSendSucceeded', update);\n            break;\n          }\n\n        case 'updateMessageSendFailed':\n          {\n            if (update.message.sending_state) {\n              update.message.sending_state.error_code = update.error_code;\n              update.message.sending_state.error_message = update.error_message;\n            }\n\n            const chat = this.items.get(update.message.chat_id);\n\n            if (chat) {\n              const message = chat.get(update.old_message_id);\n\n              if (message) {\n                message.sending_state = update.message.sending_state;\n\n                if (message.sending_state) {\n                  message.sending_state.error_code = update.error_code;\n                  message.sending_state.error_message = update.error_message;\n                }\n              }\n\n              if (update.old_message_id !== update.message.id) {\n                this.set(update.message);\n              }\n            }\n\n            this.emit('updateMessageSendFailed', update);\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onClientUpdate = update => {\n      switch (update['@type']) {\n        case 'clientUpdateChatId':\n          {\n            if (this.selectedItems.size > 0) {\n              this.selectedItems.clear();\n              this.emit('clientUpdateClearSelection', {\n                '@type': 'clientUpdateClearSelection'\n              });\n            }\n\n            break;\n          }\n\n        case 'clientUpdateClearSelection':\n          {\n            this.selectedItems.clear();\n            this.emit('clientUpdateClearSelection', update);\n            break;\n          }\n\n        case 'clientUpdateMessageHighlighted':\n          {\n            this.emit('clientUpdateMessageHighlighted', update);\n            break;\n          }\n\n        case 'clientUpdateMessageSelected':\n          {\n            if (update.selected) {\n              this.selectedItems.set(\"chatId=\".concat(update.chatId, \"_messageId=\").concat(update.messageId), {\n                chatId: update.chatId,\n                messageId: update.messageId\n              });\n            } else {\n              this.selectedItems.delete(\"chatId=\".concat(update.chatId, \"_messageId=\").concat(update.messageId));\n            }\n\n            this.emit('clientUpdateMessageSelected', update);\n            break;\n          }\n\n        case 'clientUpdateMessagesInView':\n          {\n            this.emit('clientUpdateMessagesInView', update);\n            break;\n          }\n\n        case 'clientUpdateOpenReply':\n          {\n            this.emit('clientUpdateOpenReply', update);\n            break;\n          }\n\n        case 'clientUpdateReply':\n          {\n            this.emit('clientUpdateReply', update);\n            break;\n          }\n      }\n    };\n\n    this.addTdLibListener = () => {\n      TdLibController.addListener('update', this.onUpdate);\n      TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.removeTdLibListener = () => {\n      TdLibController.removeListener('update', this.onUpdate);\n      TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    this.reset();\n    this.addTdLibListener();\n    this.setMaxListeners(Infinity);\n  }\n\n  load(chatId, messageId) {\n    TdLibController.send({\n      '@type': 'getMessage',\n      chat_id: chatId,\n      message_id: messageId\n    }).then(message => {\n      this.set(message);\n      this.emit('getMessageResult', message);\n    }).catch(error => {\n      const deletedMessage = {\n        '@type': 'deletedMessage',\n        chat_id: chatId,\n        id: messageId,\n        content: null\n      };\n      this.set(deletedMessage);\n      this.emit('getMessageResult', deletedMessage);\n    });\n  }\n\n  get(chatId, messageId) {\n    let chat = this.items.get(chatId);\n\n    if (!chat) {\n      //this.load(chatId, messageId);\n      return null;\n    }\n\n    let message = chat.get(messageId);\n\n    if (!message) {\n      //this.load(chatId, messageId);\n      return null;\n    }\n\n    return message;\n  }\n\n  set(message) {\n    let chat = this.items.get(message.chat_id);\n\n    if (!chat) {\n      chat = new Map();\n      this.items.set(message.chat_id, chat);\n    }\n\n    chat.set(message.id, message);\n  }\n\n  setItems(messages) {\n    for (let i = 0; i < messages.length; i++) {\n      this.set(messages[i]);\n    }\n  }\n\n}\n\nconst store = new MessageStore();\nwindow.message = store;\nexport default store;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Stores/MessageStore.js"],"names":["EventEmitter","TdLibController","MessageStore","constructor","reset","items","Map","selectedItems","onUpdate","update","authorization_state","set","message","emit","chat","get","chat_id","message_id","reply_markup","edit_date","views","old_content","content","new_content","is_listened","is_viewed","old_message_id","sending_state","id","error_code","error_message","onClientUpdate","size","clear","selected","chatId","messageId","delete","addTdLibListener","addListener","removeTdLibListener","removeListener","setMaxListeners","Infinity","load","send","then","catch","error","deletedMessage","setItems","messages","i","length","store","window"],"mappings":"AAAA;;;;;;AAOA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAEA,MAAMC,YAAN,SAA2BF,YAA3B,CAAwC;AACpCG,EAAAA,WAAW,GAAG;AACV;;AADU,SASdC,KATc,GASN,MAAM;AACV,WAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,WAAKC,aAAL,GAAqB,IAAID,GAAJ,EAArB;AACH,KAZa;;AAAA,SAcdE,QAdc,GAcHC,MAAM,IAAI;AACjB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,0BAAL;AAAiC;AAAA,kBACrBC,mBADqB,GACGD,MADH,CACrBC,mBADqB;AAE7B,gBAAI,CAACA,mBAAL,EAA0B;;AAE1B,oBAAQA,mBAAmB,CAAC,OAAD,CAA3B;AACI,mBAAK,0BAAL;AAAiC;AAC7B,uBAAKN,KAAL;AACA;AACH;AAJL;;AAOA;AACH;;AACD,aAAK,kBAAL;AACI,eAAKO,GAAL,CAASF,MAAM,CAACG,OAAhB;AACA,eAAKC,IAAL,CAAU,kBAAV,EAA8BJ,MAA9B;AACA;;AACJ,aAAK,sBAAL;AACI,eAAKI,IAAL,CAAU,sBAAV,EAAkCJ,MAAlC;AACA;;AACJ,aAAK,qBAAL;AAA4B;AACxB,kBAAMK,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeN,MAAM,CAACO,OAAtB,CAAb;;AACA,gBAAIF,IAAJ,EAAU;AACN,oBAAMF,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASN,MAAM,CAACQ,UAAhB,CAAhB;;AACA,kBAAIL,OAAJ,EAAa;AACTA,gBAAAA,OAAO,CAACM,YAAR,GAAuBT,MAAM,CAACS,YAA9B;AACAN,gBAAAA,OAAO,CAACO,SAAR,GAAoBV,MAAM,CAACU,SAA3B;AACH;AACJ;;AACD,iBAAKN,IAAL,CAAU,qBAAV,EAAiCJ,MAAjC;AACA;AACH;;AACD,aAAK,oBAAL;AAA2B;AACvB,kBAAMK,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeN,MAAM,CAACO,OAAtB,CAAb;;AACA,gBAAIF,IAAJ,EAAU;AACN,oBAAMF,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASN,MAAM,CAACQ,UAAhB,CAAhB;;AACA,kBAAIL,OAAO,IAAIH,MAAM,CAACW,KAAP,GAAeR,OAAO,CAACQ,KAAtC,EAA6C;AACzCR,gBAAAA,OAAO,CAACQ,KAAR,GAAgBX,MAAM,CAACW,KAAvB;AACH;AACJ;;AACD,iBAAKP,IAAL,CAAU,oBAAV,EAAgCJ,MAAhC;AACA;AACH;;AACD,aAAK,sBAAL;AAA6B;AACzB,kBAAMK,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeN,MAAM,CAACO,OAAtB,CAAb;;AACA,gBAAIF,IAAJ,EAAU;AACN,oBAAMF,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASN,MAAM,CAACQ,UAAhB,CAAhB;;AACA,kBAAIL,OAAJ,EAAa;AACTH,gBAAAA,MAAM,CAACY,WAAP,GAAqBT,OAAO,CAACU,OAA7B;AACAV,gBAAAA,OAAO,CAACU,OAAR,GAAkBb,MAAM,CAACc,WAAzB;AACH;AACJ;;AACD,iBAAKV,IAAL,CAAU,sBAAV,EAAkCJ,MAAlC;AACA;AACH;;AACD,aAAK,4BAAL;AAAmC;AAAA,kBACvBO,OADuB,GACCP,MADD,CACvBO,OADuB;AAAA,kBACdC,UADc,GACCR,MADD,CACdQ,UADc;AAG/B,kBAAML,OAAO,GAAG,KAAKG,GAAL,CAASC,OAAT,EAAkBC,UAAlB,CAAhB;;AACA,gBAAIL,OAAJ,EAAa;AAAA,oBACDU,OADC,GACWV,OADX,CACDU,OADC;;AAET,sBAAQA,OAAO,CAAC,OAAD,CAAf;AACI,qBAAK,kBAAL;AAAyB;AACrBV,oBAAAA,OAAO,CAACU,OAAR,CAAgBE,WAAhB,GAA8B,IAA9B;AACA;AACH;;AACD,qBAAK,kBAAL;AAAyB;AACrBZ,oBAAAA,OAAO,CAACU,OAAR,CAAgBG,SAAhB,GAA4B,IAA5B;AACA;AACH;AARL;AAUH;;AAED,iBAAKZ,IAAL,CAAU,4BAAV,EAAwCJ,MAAxC;AACA;AACH;;AACD,aAAK,4BAAL;AAAmC;AAC/B,kBAAMK,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeN,MAAM,CAACG,OAAP,CAAeI,OAA9B,CAAb;;AACA,gBAAIF,IAAJ,EAAU;AACN,oBAAMF,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASN,MAAM,CAACiB,cAAhB,CAAhB;;AACA,kBAAId,OAAJ,EAAa;AACTA,gBAAAA,OAAO,CAACe,aAAR,GAAwBlB,MAAM,CAACG,OAAP,CAAee,aAAvC;AACH;;AACD,kBAAIlB,MAAM,CAACiB,cAAP,KAA0BjB,MAAM,CAACG,OAAP,CAAegB,EAA7C,EAAiD;AAC7C,qBAAKjB,GAAL,CAASF,MAAM,CAACG,OAAhB;AACH;AACJ;;AAED,iBAAKD,GAAL,CAASF,MAAM,CAACG,OAAhB;AACA,iBAAKC,IAAL,CAAU,4BAAV,EAAwCJ,MAAxC;AACA;AACH;;AACD,aAAK,yBAAL;AAAgC;AAC5B,gBAAIA,MAAM,CAACG,OAAP,CAAee,aAAnB,EAAkC;AAC9BlB,cAAAA,MAAM,CAACG,OAAP,CAAee,aAAf,CAA6BE,UAA7B,GAA0CpB,MAAM,CAACoB,UAAjD;AACApB,cAAAA,MAAM,CAACG,OAAP,CAAee,aAAf,CAA6BG,aAA7B,GAA6CrB,MAAM,CAACqB,aAApD;AACH;;AAED,kBAAMhB,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeN,MAAM,CAACG,OAAP,CAAeI,OAA9B,CAAb;;AACA,gBAAIF,IAAJ,EAAU;AACN,oBAAMF,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASN,MAAM,CAACiB,cAAhB,CAAhB;;AACA,kBAAId,OAAJ,EAAa;AACTA,gBAAAA,OAAO,CAACe,aAAR,GAAwBlB,MAAM,CAACG,OAAP,CAAee,aAAvC;;AACA,oBAAIf,OAAO,CAACe,aAAZ,EAA2B;AACvBf,kBAAAA,OAAO,CAACe,aAAR,CAAsBE,UAAtB,GAAmCpB,MAAM,CAACoB,UAA1C;AACAjB,kBAAAA,OAAO,CAACe,aAAR,CAAsBG,aAAtB,GAAsCrB,MAAM,CAACqB,aAA7C;AACH;AACJ;;AACD,kBAAIrB,MAAM,CAACiB,cAAP,KAA0BjB,MAAM,CAACG,OAAP,CAAegB,EAA7C,EAAiD;AAC7C,qBAAKjB,GAAL,CAASF,MAAM,CAACG,OAAhB;AACH;AACJ;;AACD,iBAAKC,IAAL,CAAU,yBAAV,EAAqCJ,MAArC;AACA;AACH;;AACD;AACI;AArHR;AAuHH,KAtIa;;AAAA,SAwIdsB,cAxIc,GAwIGtB,MAAM,IAAI;AACvB,cAAQA,MAAM,CAAC,OAAD,CAAd;AACI,aAAK,oBAAL;AAA2B;AACvB,gBAAI,KAAKF,aAAL,CAAmByB,IAAnB,GAA0B,CAA9B,EAAiC;AAC7B,mBAAKzB,aAAL,CAAmB0B,KAAnB;AAEA,mBAAKpB,IAAL,CAAU,4BAAV,EAAwC;AAAE,yBAAS;AAAX,eAAxC;AACH;;AAED;AACH;;AACD,aAAK,4BAAL;AAAmC;AAC/B,iBAAKN,aAAL,CAAmB0B,KAAnB;AAEA,iBAAKpB,IAAL,CAAU,4BAAV,EAAwCJ,MAAxC;AACA;AACH;;AACD,aAAK,gCAAL;AAAuC;AACnC,iBAAKI,IAAL,CAAU,gCAAV,EAA4CJ,MAA5C;AACA;AACH;;AACD,aAAK,6BAAL;AAAoC;AAChC,gBAAIA,MAAM,CAACyB,QAAX,EAAqB;AACjB,mBAAK3B,aAAL,CAAmBI,GAAnB,kBAAiCF,MAAM,CAAC0B,MAAxC,wBAA4D1B,MAAM,CAAC2B,SAAnE,GAAgF;AAC5ED,gBAAAA,MAAM,EAAE1B,MAAM,CAAC0B,MAD6D;AAE5EC,gBAAAA,SAAS,EAAE3B,MAAM,CAAC2B;AAF0D,eAAhF;AAIH,aALD,MAKO;AACH,mBAAK7B,aAAL,CAAmB8B,MAAnB,kBAAoC5B,MAAM,CAAC0B,MAA3C,wBAA+D1B,MAAM,CAAC2B,SAAtE;AACH;;AAED,iBAAKvB,IAAL,CAAU,6BAAV,EAAyCJ,MAAzC;AACA;AACH;;AACD,aAAK,4BAAL;AAAmC;AAC/B,iBAAKI,IAAL,CAAU,4BAAV,EAAwCJ,MAAxC;AACA;AACH;;AACD,aAAK,uBAAL;AAA8B;AAC1B,iBAAKI,IAAL,CAAU,uBAAV,EAAmCJ,MAAnC;AACA;AACH;;AACD,aAAK,mBAAL;AAA0B;AACtB,iBAAKI,IAAL,CAAU,mBAAV,EAA+BJ,MAA/B;AACA;AACH;AA5CL;AA8CH,KAvLa;;AAAA,SAyLd6B,gBAzLc,GAyLK,MAAM;AACrBrC,MAAAA,eAAe,CAACsC,WAAhB,CAA4B,QAA5B,EAAsC,KAAK/B,QAA3C;AACAP,MAAAA,eAAe,CAACsC,WAAhB,CAA4B,cAA5B,EAA4C,KAAKR,cAAjD;AACH,KA5La;;AAAA,SA8LdS,mBA9Lc,GA8LQ,MAAM;AACxBvC,MAAAA,eAAe,CAACwC,cAAhB,CAA+B,QAA/B,EAAyC,KAAKjC,QAA9C;AACAP,MAAAA,eAAe,CAACwC,cAAhB,CAA+B,cAA/B,EAA+C,KAAKV,cAApD;AACH,KAjMa;;AAGV,SAAK3B,KAAL;AAEA,SAAKkC,gBAAL;AACA,SAAKI,eAAL,CAAqBC,QAArB;AACH;;AA4LDC,EAAAA,IAAI,CAACT,MAAD,EAASC,SAAT,EAAoB;AACpBnC,IAAAA,eAAe,CAAC4C,IAAhB,CAAqB;AACjB,eAAS,YADQ;AAEjB7B,MAAAA,OAAO,EAAEmB,MAFQ;AAGjBlB,MAAAA,UAAU,EAAEmB;AAHK,KAArB,EAKKU,IALL,CAKUlC,OAAO,IAAI;AACb,WAAKD,GAAL,CAASC,OAAT;AACA,WAAKC,IAAL,CAAU,kBAAV,EAA8BD,OAA9B;AACH,KARL,EASKmC,KATL,CASWC,KAAK,IAAI;AACZ,YAAMC,cAAc,GAAG;AACnB,iBAAS,gBADU;AAEnBjC,QAAAA,OAAO,EAAEmB,MAFU;AAGnBP,QAAAA,EAAE,EAAEQ,SAHe;AAInBd,QAAAA,OAAO,EAAE;AAJU,OAAvB;AAMA,WAAKX,GAAL,CAASsC,cAAT;AACA,WAAKpC,IAAL,CAAU,kBAAV,EAA8BoC,cAA9B;AACH,KAlBL;AAmBH;;AAEDlC,EAAAA,GAAG,CAACoB,MAAD,EAASC,SAAT,EAAoB;AACnB,QAAItB,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeoB,MAAf,CAAX;;AACA,QAAI,CAACrB,IAAL,EAAW;AACP;AACA,aAAO,IAAP;AACH;;AAED,QAAIF,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASqB,SAAT,CAAd;;AACA,QAAI,CAACxB,OAAL,EAAc;AACV;AACA,aAAO,IAAP;AACH;;AAED,WAAOA,OAAP;AACH;;AAEDD,EAAAA,GAAG,CAACC,OAAD,EAAU;AACT,QAAIE,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,CAAeH,OAAO,CAACI,OAAvB,CAAX;;AACA,QAAI,CAACF,IAAL,EAAW;AACPA,MAAAA,IAAI,GAAG,IAAIR,GAAJ,EAAP;AACA,WAAKD,KAAL,CAAWM,GAAX,CAAeC,OAAO,CAACI,OAAvB,EAAgCF,IAAhC;AACH;;AAEDA,IAAAA,IAAI,CAACH,GAAL,CAASC,OAAO,CAACgB,EAAjB,EAAqBhB,OAArB;AACH;;AAEDsC,EAAAA,QAAQ,CAACC,QAAD,EAAW;AACf,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,WAAKzC,GAAL,CAASwC,QAAQ,CAACC,CAAD,CAAjB;AACH;AACJ;;AAxPmC;;AA2PxC,MAAME,KAAK,GAAG,IAAIpD,YAAJ,EAAd;AACAqD,MAAM,CAAC3C,OAAP,GAAiB0C,KAAjB;AACA,eAAeA,KAAf","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { EventEmitter } from 'events';\nimport TdLibController from '../Controllers/TdLibController';\n\nclass MessageStore extends EventEmitter {\n    constructor() {\n        super();\n\n        this.reset();\n\n        this.addTdLibListener();\n        this.setMaxListeners(Infinity);\n    }\n\n    reset = () => {\n        this.items = new Map();\n        this.selectedItems = new Map();\n    };\n\n    onUpdate = update => {\n        switch (update['@type']) {\n            case 'updateAuthorizationState': {\n                const { authorization_state } = update;\n                if (!authorization_state) break;\n\n                switch (authorization_state['@type']) {\n                    case 'authorizationStateClosed': {\n                        this.reset();\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'updateNewMessage':\n                this.set(update.message);\n                this.emit('updateNewMessage', update);\n                break;\n            case 'updateDeleteMessages':\n                this.emit('updateDeleteMessages', update);\n                break;\n            case 'updateMessageEdited': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message) {\n                        message.reply_markup = update.reply_markup;\n                        message.edit_date = update.edit_date;\n                    }\n                }\n                this.emit('updateMessageEdited', update);\n                break;\n            }\n            case 'updateMessageViews': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message && update.views > message.views) {\n                        message.views = update.views;\n                    }\n                }\n                this.emit('updateMessageViews', update);\n                break;\n            }\n            case 'updateMessageContent': {\n                const chat = this.items.get(update.chat_id);\n                if (chat) {\n                    const message = chat.get(update.message_id);\n                    if (message) {\n                        update.old_content = message.content;\n                        message.content = update.new_content;\n                    }\n                }\n                this.emit('updateMessageContent', update);\n                break;\n            }\n            case 'updateMessageContentOpened': {\n                const { chat_id, message_id } = update;\n\n                const message = this.get(chat_id, message_id);\n                if (message) {\n                    const { content } = message;\n                    switch (content['@type']) {\n                        case 'messageVoiceNote': {\n                            message.content.is_listened = true;\n                            break;\n                        }\n                        case 'messageVideoNote': {\n                            message.content.is_viewed = true;\n                            break;\n                        }\n                    }\n                }\n\n                this.emit('updateMessageContentOpened', update);\n                break;\n            }\n            case 'updateMessageSendSucceeded': {\n                const chat = this.items.get(update.message.chat_id);\n                if (chat) {\n                    const message = chat.get(update.old_message_id);\n                    if (message) {\n                        message.sending_state = update.message.sending_state;\n                    }\n                    if (update.old_message_id !== update.message.id) {\n                        this.set(update.message);\n                    }\n                }\n\n                this.set(update.message);\n                this.emit('updateMessageSendSucceeded', update);\n                break;\n            }\n            case 'updateMessageSendFailed': {\n                if (update.message.sending_state) {\n                    update.message.sending_state.error_code = update.error_code;\n                    update.message.sending_state.error_message = update.error_message;\n                }\n\n                const chat = this.items.get(update.message.chat_id);\n                if (chat) {\n                    const message = chat.get(update.old_message_id);\n                    if (message) {\n                        message.sending_state = update.message.sending_state;\n                        if (message.sending_state) {\n                            message.sending_state.error_code = update.error_code;\n                            message.sending_state.error_message = update.error_message;\n                        }\n                    }\n                    if (update.old_message_id !== update.message.id) {\n                        this.set(update.message);\n                    }\n                }\n                this.emit('updateMessageSendFailed', update);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    onClientUpdate = update => {\n        switch (update['@type']) {\n            case 'clientUpdateChatId': {\n                if (this.selectedItems.size > 0) {\n                    this.selectedItems.clear();\n\n                    this.emit('clientUpdateClearSelection', { '@type': 'clientUpdateClearSelection' });\n                }\n\n                break;\n            }\n            case 'clientUpdateClearSelection': {\n                this.selectedItems.clear();\n\n                this.emit('clientUpdateClearSelection', update);\n                break;\n            }\n            case 'clientUpdateMessageHighlighted': {\n                this.emit('clientUpdateMessageHighlighted', update);\n                break;\n            }\n            case 'clientUpdateMessageSelected': {\n                if (update.selected) {\n                    this.selectedItems.set(`chatId=${update.chatId}_messageId=${update.messageId}`, {\n                        chatId: update.chatId,\n                        messageId: update.messageId\n                    });\n                } else {\n                    this.selectedItems.delete(`chatId=${update.chatId}_messageId=${update.messageId}`);\n                }\n\n                this.emit('clientUpdateMessageSelected', update);\n                break;\n            }\n            case 'clientUpdateMessagesInView': {\n                this.emit('clientUpdateMessagesInView', update);\n                break;\n            }\n            case 'clientUpdateOpenReply': {\n                this.emit('clientUpdateOpenReply', update);\n                break;\n            }\n            case 'clientUpdateReply': {\n                this.emit('clientUpdateReply', update);\n                break;\n            }\n        }\n    };\n\n    addTdLibListener = () => {\n        TdLibController.addListener('update', this.onUpdate);\n        TdLibController.addListener('clientUpdate', this.onClientUpdate);\n    };\n\n    removeTdLibListener = () => {\n        TdLibController.removeListener('update', this.onUpdate);\n        TdLibController.removeListener('clientUpdate', this.onClientUpdate);\n    };\n\n    load(chatId, messageId) {\n        TdLibController.send({\n            '@type': 'getMessage',\n            chat_id: chatId,\n            message_id: messageId\n        })\n            .then(message => {\n                this.set(message);\n                this.emit('getMessageResult', message);\n            })\n            .catch(error => {\n                const deletedMessage = {\n                    '@type': 'deletedMessage',\n                    chat_id: chatId,\n                    id: messageId,\n                    content: null\n                };\n                this.set(deletedMessage);\n                this.emit('getMessageResult', deletedMessage);\n            });\n    }\n\n    get(chatId, messageId) {\n        let chat = this.items.get(chatId);\n        if (!chat) {\n            //this.load(chatId, messageId);\n            return null;\n        }\n\n        let message = chat.get(messageId);\n        if (!message) {\n            //this.load(chatId, messageId);\n            return null;\n        }\n\n        return message;\n    }\n\n    set(message) {\n        let chat = this.items.get(message.chat_id);\n        if (!chat) {\n            chat = new Map();\n            this.items.set(message.chat_id, chat);\n        }\n\n        chat.set(message.id, message);\n    }\n\n    setItems(messages) {\n        for (let i = 0; i < messages.length; i++) {\n            this.set(messages[i]);\n        }\n    }\n}\n\nconst store = new MessageStore();\nwindow.message = store;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}