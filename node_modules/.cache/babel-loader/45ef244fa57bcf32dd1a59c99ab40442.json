{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnMiddle/DialogDetails.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport ChatInfoDialog from '../Popup/ChatInfoDialog';\nimport Footer from './Footer';\nimport Header from './Header';\nimport HeaderPlayer from '../Player/HeaderPlayer';\nimport MessagesList from './MessagesList';\nimport PinnedMessage from './PinnedMessage';\nimport StickerSetDialog from '../Popup/StickerSetDialog';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './DialogDetails.css';\n\nclass DialogDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdateChatDetailsVisibility = update => {\n      this.forceUpdate();\n    };\n\n    this.onClientUpdateChatId = update => {\n      this.setState({\n        chatId: update.nextChatId,\n        messageId: update.nextMessageId\n      });\n    };\n\n    this.scrollToBottom = () => {\n      this.messagesList.scrollToBottom();\n    };\n\n    this.scrollToStart = () => {\n      this.messagesList.scrollToStart();\n    };\n\n    this.scrollToMessage = () => {\n      this.messagesList.scrollToMessage();\n    };\n\n    this.state = {\n      chatId: ApplicationStore.getChatId(),\n      messageId: ApplicationStore.getMessageId(),\n      selectedCount: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.chatId !== this.state.chatId) {\n      return true;\n    }\n\n    if (nextState.messageId !== this.state.messageId) {\n      return true;\n    }\n\n    if (nextState.selectedCount !== this.state.selectedItems) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n    ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n    ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n  }\n\n  render() {\n    /*let groups = [];\n    if (this.props.history.length > 0){\n        let currentGroup = {\n            key: this.props.history[0].id,\n            date: this.props.history[0].date,\n            senderUserId: this.props.history[0].sender_user_id,\n            messages: [this.props.history[0]]\n        };\n         for (let i = 1; i < this.props.history.length; i++){\n            if (this.props.history[i].sender_user_id === currentGroup.senderUserId\n                && Math.abs(this.props.history[i].date - currentGroup.date) <= 10 * 60\n                && i % 20 !== 0){\n                currentGroup.key += '_' + this.props.history[i].id;\n                currentGroup.messages.push(this.props.history[i]);\n            }\n            else {\n                groups.push(currentGroup);\n                currentGroup = {\n                    key: this.props.history[i].id,\n                    date: this.props.history[i].date,\n                    senderUserId: this.props.history[i].sender_user_id,\n                    messages: [this.props.history[i]]\n                };\n            }\n        }\n        groups.push(currentGroup);\n    }\n     this.groups = groups.map(x => {\n        return (<MessageGroup key={x.key} senderUserId={x.senderUserId} messages={x.messages} onSelectChat={this.props.onSelectChat}/>);\n    });*/\n    const _this$state = this.state,\n          chatId = _this$state.chatId,\n          messageId = _this$state.messageId,\n          selectedCount = _this$state.selectedCount;\n    const isChatDetailsVisible = ApplicationStore.isChatDetailsVisible;\n    return React.createElement(\"div\", {\n      className: classNames('dialog-details', {\n        'dialog-details-third-column': isChatDetailsVisible\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(HeaderPlayer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Header, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(MessagesList, {\n      innerRef: ref => this.messagesList = ref,\n      chatId: chatId,\n      messageId: messageId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(StickerSetDialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(ChatInfoDialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DialogDetails;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/ColumnMiddle/DialogDetails.js"],"names":["React","Component","classNames","ChatInfoDialog","Footer","Header","HeaderPlayer","MessagesList","PinnedMessage","StickerSetDialog","ApplicationStore","DialogDetails","constructor","props","onUpdateChatDetailsVisibility","update","forceUpdate","onClientUpdateChatId","setState","chatId","nextChatId","messageId","nextMessageId","scrollToBottom","messagesList","scrollToStart","scrollToMessage","state","getChatId","getMessageId","selectedCount","shouldComponentUpdate","nextProps","nextState","selectedItems","componentDidMount","on","componentWillUnmount","removeListener","render","isChatDetailsVisible","ref"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport ChatInfoDialog from '../Popup/ChatInfoDialog';\nimport Footer from './Footer';\nimport Header from './Header';\nimport HeaderPlayer from '../Player/HeaderPlayer';\nimport MessagesList from './MessagesList';\nimport PinnedMessage from './PinnedMessage';\nimport StickerSetDialog from '../Popup/StickerSetDialog';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport './DialogDetails.css';\n\nclass DialogDetails extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatId: ApplicationStore.getChatId(),\n            messageId: ApplicationStore.getMessageId(),\n            selectedCount: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.chatId !== this.state.chatId) {\n            return true;\n        }\n        if (nextState.messageId !== this.state.messageId) {\n            return true;\n        }\n        if (nextState.selectedCount !== this.state.selectedItems) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatDetailsVisibility', this.onUpdateChatDetailsVisibility);\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onUpdateChatDetailsVisibility = update => {\n        this.forceUpdate();\n    };\n\n    onClientUpdateChatId = update => {\n        this.setState({\n            chatId: update.nextChatId,\n            messageId: update.nextMessageId\n        });\n    };\n\n    scrollToBottom = () => {\n        this.messagesList.scrollToBottom();\n    };\n\n    scrollToStart = () => {\n        this.messagesList.scrollToStart();\n    };\n\n    scrollToMessage = () => {\n        this.messagesList.scrollToMessage();\n    };\n\n    render() {\n        /*let groups = [];\n        if (this.props.history.length > 0){\n            let currentGroup = {\n                key: this.props.history[0].id,\n                date: this.props.history[0].date,\n                senderUserId: this.props.history[0].sender_user_id,\n                messages: [this.props.history[0]]\n            };\n\n            for (let i = 1; i < this.props.history.length; i++){\n                if (this.props.history[i].sender_user_id === currentGroup.senderUserId\n                    && Math.abs(this.props.history[i].date - currentGroup.date) <= 10 * 60\n                    && i % 20 !== 0){\n                    currentGroup.key += '_' + this.props.history[i].id;\n                    currentGroup.messages.push(this.props.history[i]);\n                }\n                else {\n                    groups.push(currentGroup);\n                    currentGroup = {\n                        key: this.props.history[i].id,\n                        date: this.props.history[i].date,\n                        senderUserId: this.props.history[i].sender_user_id,\n                        messages: [this.props.history[i]]\n                    };\n                }\n            }\n            groups.push(currentGroup);\n        }\n\n        this.groups = groups.map(x => {\n            return (<MessageGroup key={x.key} senderUserId={x.senderUserId} messages={x.messages} onSelectChat={this.props.onSelectChat}/>);\n        });*/\n        const { chatId, messageId, selectedCount } = this.state;\n        const { isChatDetailsVisible } = ApplicationStore;\n\n        return (\n            <div className={classNames('dialog-details', { 'dialog-details-third-column': isChatDetailsVisible })}>\n                <HeaderPlayer />\n                <Header chatId={chatId} />\n                <MessagesList innerRef={ref => (this.messagesList = ref)} chatId={chatId} messageId={messageId} />\n                <Footer chatId={chatId} />\n                <StickerSetDialog />\n                <ChatInfoDialog />\n            </div>\n        );\n    }\n}\n\nexport default DialogDetails;\n"]},"metadata":{},"sourceType":"module"}