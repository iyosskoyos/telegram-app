{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/ColumnLeft/ThemePicker.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport amber from '@material-ui/core/colors/amber';\nimport green from '@material-ui/core/colors/green';\nimport blue from '@material-ui/core/colors/blue';\nimport indigo from '@material-ui/core/colors/indigo';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport ApplicationStore from '../../Stores/ApplicationStore';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit * 3\n  },\n  group: {\n    margin: \"\".concat(theme.spacing.unit, \"px 0\")\n  },\n  redRoot: {\n    color: red[600],\n    '&$checked': {\n      color: red[500]\n    }\n  },\n  orangeRoot: {\n    color: orange[600],\n    '&$checked': {\n      color: orange[500]\n    }\n  },\n  amberRoot: {\n    color: amber[600],\n    '&$checked': {\n      color: amber[500]\n    }\n  },\n  greenRoot: {\n    color: green[600],\n    '&$checked': {\n      color: green[500]\n    }\n  },\n  blueRoot: {\n    color: blue[600],\n    '&$checked': {\n      color: blue[500]\n    }\n  },\n  indigoRoot: {\n    color: indigo[600],\n    '&$checked': {\n      color: indigo[500]\n    }\n  },\n  deepPurpleRoot: {\n    color: deepPurple[600],\n    '&$checked': {\n      color: deepPurple[500]\n    }\n  },\n  checked: {}\n});\n\nclass ThemePicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        type: event.target.value\n      });\n      ApplicationStore.emit('clientUpdateThemeChanging', {\n        type: event.target.value,\n        primary: this.getColor(this.state.color)\n      });\n    };\n\n    this.handleAccentChange = event => {\n      this.setState({\n        color: event.target.value\n      });\n      ApplicationStore.emit('clientUpdateThemeChanging', {\n        type: this.state.type,\n        primary: this.getColor(event.target.value)\n      });\n    };\n\n    this.getColorString = value => {\n      switch (value) {\n        case red['500']:\n          return 'red';\n\n        case orange['500']:\n          return 'orange';\n\n        case amber['500']:\n          return 'amber';\n\n        case green['500']:\n          return 'green';\n\n        case blue['500']:\n          return 'blue';\n\n        case indigo['500']:\n          return 'indigo';\n\n        case deepPurple['500']:\n          return 'deepPurple';\n      }\n\n      return null;\n    };\n\n    this.getColor = value => {\n      switch (value) {\n        case 'red':\n          return red;\n\n        case 'orange':\n          return orange;\n\n        case 'amber':\n          return amber;\n\n        case 'green':\n          return green;\n\n        case 'blue':\n          return blue;\n\n        case 'indigo':\n          return indigo;\n\n        case 'deepPurple':\n          return deepPurple;\n      }\n\n      return null;\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.open = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.state = {\n      open: false,\n      type: this.props.theme.palette.type,\n      color: this.getColorString(this.props.theme.palette.primary.main)\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          type = _this$state.type,\n          color = _this$state.color;\n    return React.createElement(Dialog, {\n      transitionDuration: 0,\n      open: this.state.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"alert-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Appearance\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      component: \"fieldset\",\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      focused: true,\n      component: \"legend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Theme\"), React.createElement(RadioGroup, {\n      \"aria-label\": \"theme\",\n      name: \"theme1\",\n      className: classes.group,\n      value: type,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      value: \"light\",\n      control: React.createElement(Radio, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }),\n      label: \"Light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"dark\",\n      control: React.createElement(Radio, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }),\n      label: \"Dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }))), React.createElement(FormControl, {\n      component: \"fieldset\",\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      focused: true,\n      component: \"legend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Accent\"), React.createElement(RadioGroup, {\n      \"aria-label\": \"accent\",\n      name: \"accent1\",\n      className: classes.group,\n      value: color,\n      onChange: this.handleAccentChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      value: \"red\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.redRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }),\n      label: \"Red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"orange\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.orangeRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }),\n      label: \"Orange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"amber\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.amberRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }),\n      label: \"Amber\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"green\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.greenRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }),\n      label: \"Green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"blue\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.blueRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }),\n      label: \"Blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"indigo\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.indigoRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }),\n      label: \"Indigo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      value: \"deepPurple\",\n      control: React.createElement(Radio, {\n        classes: {\n          root: classes.deepPurpleRoot,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }),\n      label: \"Deep Purple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nThemePicker.propTypes = {};\nexport default withStyles(styles, {\n  withTheme: true\n})(ThemePicker);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/ColumnLeft/ThemePicker.js"],"names":["React","PropTypes","Dialog","DialogContent","DialogTitle","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","withStyles","red","orange","amber","green","blue","indigo","deepPurple","ApplicationStore","styles","theme","formControl","margin","spacing","unit","group","redRoot","color","orangeRoot","amberRoot","greenRoot","blueRoot","indigoRoot","deepPurpleRoot","checked","ThemePicker","Component","constructor","props","handleChange","event","setState","type","target","value","emit","primary","getColor","state","handleAccentChange","getColorString","handleClose","open","palette","main","render","classes","root","propTypes","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport amber from '@material-ui/core/colors/amber';\nimport green from '@material-ui/core/colors/green';\nimport blue from '@material-ui/core/colors/blue';\nimport indigo from '@material-ui/core/colors/indigo';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport ApplicationStore from '../../Stores/ApplicationStore';\n\nconst styles = theme => ({\n    formControl: {\n        margin: theme.spacing.unit * 3\n    },\n    group: {\n        margin: `${theme.spacing.unit}px 0`\n    },\n    redRoot: {\n        color: red[600],\n        '&$checked': {\n            color: red[500]\n        }\n    },\n    orangeRoot: {\n        color: orange[600],\n        '&$checked': {\n            color: orange[500]\n        }\n    },\n    amberRoot: {\n        color: amber[600],\n        '&$checked': {\n            color: amber[500]\n        }\n    },\n    greenRoot: {\n        color: green[600],\n        '&$checked': {\n            color: green[500]\n        }\n    },\n    blueRoot: {\n        color: blue[600],\n        '&$checked': {\n            color: blue[500]\n        }\n    },\n    indigoRoot: {\n        color: indigo[600],\n        '&$checked': {\n            color: indigo[500]\n        }\n    },\n    deepPurpleRoot: {\n        color: deepPurple[600],\n        '&$checked': {\n            color: deepPurple[500]\n        }\n    },\n    checked: {}\n});\n\nclass ThemePicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            type: this.props.theme.palette.type,\n            color: this.getColorString(this.props.theme.palette.primary.main)\n        };\n    }\n\n    handleChange = event => {\n        this.setState({ type: event.target.value });\n\n        ApplicationStore.emit('clientUpdateThemeChanging', {\n            type: event.target.value,\n            primary: this.getColor(this.state.color)\n        });\n    };\n\n    handleAccentChange = event => {\n        this.setState({ color: event.target.value });\n\n        ApplicationStore.emit('clientUpdateThemeChanging', {\n            type: this.state.type,\n            primary: this.getColor(event.target.value)\n        });\n    };\n\n    getColorString = value => {\n        switch (value) {\n            case red['500']:\n                return 'red';\n            case orange['500']:\n                return 'orange';\n            case amber['500']:\n                return 'amber';\n            case green['500']:\n                return 'green';\n            case blue['500']:\n                return 'blue';\n            case indigo['500']:\n                return 'indigo';\n            case deepPurple['500']:\n                return 'deepPurple';\n        }\n\n        return null;\n    };\n\n    getColor = value => {\n        switch (value) {\n            case 'red':\n                return red;\n            case 'orange':\n                return orange;\n            case 'amber':\n                return amber;\n            case 'green':\n                return green;\n            case 'blue':\n                return blue;\n            case 'indigo':\n                return indigo;\n            case 'deepPurple':\n                return deepPurple;\n        }\n\n        return null;\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n    open = () => {\n        this.setState({ open: true });\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { type, color } = this.state;\n\n        return (\n            <Dialog\n                transitionDuration={0}\n                open={this.state.open}\n                onClose={this.handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'>\n                <DialogTitle id='alert-dialog-title'>Appearance</DialogTitle>\n                <DialogContent>\n                    <FormControl component='fieldset' className={classes.formControl}>\n                        <FormLabel focused component='legend'>\n                            Theme\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='theme'\n                            name='theme1'\n                            className={classes.group}\n                            value={type}\n                            onChange={this.handleChange}>\n                            <FormControlLabel value='light' control={<Radio color='primary' />} label='Light' />\n                            <FormControlLabel value='dark' control={<Radio color='primary' />} label='Dark' />\n                        </RadioGroup>\n                    </FormControl>\n                    <FormControl component='fieldset' className={classes.formControl}>\n                        <FormLabel focused component='legend'>\n                            Accent\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='accent'\n                            name='accent1'\n                            className={classes.group}\n                            value={color}\n                            onChange={this.handleAccentChange}>\n                            <FormControlLabel\n                                value='red'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.redRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Red'\n                            />\n                            <FormControlLabel\n                                value='orange'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.orangeRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Orange'\n                            />\n                            <FormControlLabel\n                                value='amber'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.amberRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Amber'\n                            />\n                            <FormControlLabel\n                                value='green'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.greenRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Green'\n                            />\n                            <FormControlLabel\n                                value='blue'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.blueRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Blue'\n                            />\n                            <FormControlLabel\n                                value='indigo'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.indigoRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Indigo'\n                            />\n                            <FormControlLabel\n                                value='deepPurple'\n                                control={\n                                    <Radio\n                                        classes={{\n                                            root: classes.deepPurpleRoot,\n                                            checked: classes.checked\n                                        }}\n                                    />\n                                }\n                                label='Deep Purple'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nThemePicker.propTypes = {};\n\nexport default withStyles(styles, { withTheme: true })(ThemePicker);\n"]},"metadata":{},"sourceType":"module"}