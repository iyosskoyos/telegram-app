{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/Message/Media/VideoNote.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FileProgress from '../../Viewer/FileProgress';\nimport MediaStatus from './MediaStatus';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { getDurationString } from '../../../Utils/Common';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport './VideoNote.css';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\nconst circleStyle = {\n  circle: 'video-note-progress-circle'\n};\n\nclass VideoNote extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.startStopPlayer = () => {\n      const player = this.videoRef.current;\n\n      if (player) {\n        if (this.inView && this.windowFocused && !this.openMediaViewer && !this.openProfileMediaViewer && !this.openIV) {\n          player.play();\n        } else {\n          if (this.state.active) {\n            return;\n          }\n\n          player.pause();\n        }\n      }\n    };\n\n    this.onClientUpdateInstantViewContent = update => {\n      this.openIV = Boolean(InstantViewStore.getCurrent());\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateProfileMediaViewerContent = update => {\n      this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateMediaViewerContent = update => {\n      this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateFocusWindow = update => {\n      this.windowFocused = update.focused;\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateMessagesInView = update => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            messageId = _this$props.messageId;\n      const key = \"\".concat(chatId, \"_\").concat(messageId);\n      this.inView = update.messages.has(key);\n      this.startStopPlayer();\n    };\n\n    this.onClientUpdateMediaCaptureStream = update => {\n      const _this$props2 = this.props,\n            chatId = _this$props2.chatId,\n            messageId = _this$props2.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        const player = this.videoRef.current;\n\n        if (player) {\n          this.setState({\n            srcObject: update.stream\n          }, () => {\n            this.updateVideoSrc();\n          });\n        }\n      }\n    };\n\n    this.onClientUpdateMediaTime = update => {\n      const _this$props3 = this.props,\n            chatId = _this$props3.chatId,\n            messageId = _this$props3.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        const player = this.videoRef.current;\n\n        if (player) {\n          this.setState({\n            currentTime: update.currentTime,\n            videoDuration: update.duration\n          });\n        }\n      }\n    };\n\n    this.onClientUpdateMediaEnd = update => {\n      const _this$props4 = this.props,\n            chatId = _this$props4.chatId,\n            messageId = _this$props4.messageId;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        this.setState({\n          active: false,\n          srcObject: null,\n          currentTime: 0\n        }, () => {\n          const player = this.videoRef.current;\n          if (!player) return;\n          this.updateVideoSrc();\n\n          if (!window.hasFocus) {\n            player.pause();\n          }\n        });\n      }\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const _this$props5 = this.props,\n            chatId = _this$props5.chatId,\n            messageId = _this$props5.messageId;\n      const video = this.props.videoNote.video;\n\n      if (chatId === update.chatId && messageId === update.messageId) {\n        if (this.state.active) {} else {\n          this.setState({\n            active: true,\n            currentTime: null\n          });\n        }\n      } else if (this.state.active) {\n        this.setState({\n          active: false,\n          srcObject: null,\n          currentTime: 0\n        }, () => {\n          const player = this.videoRef.current;\n          if (!player) return;\n          this.updateVideoSrc();\n\n          if (!window.hasFocus) {\n            player.pause();\n          }\n        });\n      }\n    };\n\n    this.onClientUpdateVideoNoteBlob = update => {\n      const video = this.props.videoNote.video;\n      const fileId = update.fileId;\n      if (!video) return;\n\n      if (video.id === fileId) {\n        this.setState({\n          src: getSrc(video)\n        }, () => {\n          this.updateVideoSrc();\n        });\n      }\n    };\n\n    this.onClientUpdateVideoNoteThumbnailBlob = update => {\n      const thumbnail = this.props.videoNote.thumbnail;\n      if (!thumbnail) return;\n      const fileId = update.fileId;\n\n      if (thumbnail.photo && thumbnail.photo.id === fileId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.handleCanPlay = () => {// const player = this.videoRef.current;\n      // if (player){\n      //     if (this.state.active){\n      //         player.muted = false;\n      //     }\n      //     else{\n      //         player.muted = true;\n      //     }\n      // }\n    };\n\n    this.videoRef = React.createRef();\n    const _chatId = props.chatId,\n          _messageId = props.messageId;\n    const _video = props.videoNote.video;\n    const time = PlayerStore.time,\n          message = PlayerStore.message,\n          videoStream = PlayerStore.videoStream;\n    const active = message && message.chat_id === _chatId && message.id === _messageId;\n    this.state = {\n      active: active,\n      srcObject: active ? videoStream : null,\n      src: getSrc(_video),\n      currentTime: active && time ? time.currentTime : 0.0,\n      videoDuration: active && time ? time.duration : 0.0\n    };\n    this.windowFocused = window.hasFocus;\n    this.inView = false;\n    this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n    this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n    this.openIV = Boolean(InstantViewStore.getCurrent());\n  }\n\n  updateVideoSrc() {\n    const _this$state = this.state,\n          srcObject = _this$state.srcObject,\n          src = _this$state.src;\n    const player = this.videoRef.current;\n    if (!player) return;\n\n    if (srcObject) {\n      //player.scr = null;\n      player.srcObject = srcObject;\n      return;\n    }\n\n    const stream = player.srcObject;\n\n    if (stream) {\n      //console.log('clientUpdate release srcObject');\n      const tracks = stream.getTracks();\n      tracks.forEach(track => {\n        //console.log('clientUpdate release track');\n        track.stop();\n      });\n    }\n\n    if (player.srcObject) {\n      //console.log('clientUpdate release video.srcObject');\n      player.srcObject = null;\n    }\n\n    if (player.src !== src) {\n      player.src = src;\n    }\n  }\n\n  componentDidMount() {\n    this.updateVideoSrc();\n    FileStore.on('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n    FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n    MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n    ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n    PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n    PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n    FileStore.removeListener('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n    MessageStore.removeListener('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n    ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n    ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    ApplicationStore.removeListener('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n    PlayerStore.removeListener('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n    PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n  }\n\n  render() {\n    const _this$props6 = this.props,\n          displaySize = _this$props6.displaySize,\n          chatId = _this$props6.chatId,\n          messageId = _this$props6.messageId,\n          openMedia = _this$props6.openMedia;\n    const _this$state2 = this.state,\n          active = _this$state2.active,\n          currentTime = _this$state2.currentTime,\n          videoDuration = _this$state2.videoDuration;\n    const _this$props$videoNote = this.props.videoNote,\n          thumbnail = _this$props$videoNote.thumbnail,\n          video = _this$props$videoNote.video,\n          duration = _this$props$videoNote.duration;\n    const message = MessageStore.get(chatId, messageId);\n    if (!message) return null;\n    const style = {\n      width: 200,\n      height: 200\n    };\n    if (!style) return null;\n    const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n    const src = getSrc(video);\n    const isBlurred = isBlurredThumbnail(thumbnail);\n    let progress = 0;\n\n    if (videoDuration && currentTime) {\n      const progressTime = currentTime + 0.25;\n      progress = progressTime / videoDuration * 100;\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames('video-note', {\n        'video-note-playing': active\n      }),\n      style: style,\n      onClick: openMedia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, src ? React.createElement(React.Fragment, null, React.createElement(\"video\", {\n      ref: this.videoRef,\n      className: classNames('media-viewer-content-image', 'video-note-round'),\n      poster: thumbnailSrc,\n      muted: true,\n      autoPlay: true,\n      loop: true,\n      playsInline: true,\n      width: style.width,\n      height: style.height,\n      onCanPlay: this.handleCanPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"video-note-player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"video-note-progress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      classes: circleStyle,\n      variant: \"static\",\n      value: progress,\n      size: 200,\n      thickness: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"animation-meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, getDurationString(active ? Math.floor(currentTime) : duration), React.createElement(MediaStatus, {\n      chatId: chatId,\n      messageId: messageId,\n      icon: '\\u00A0•',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"video-note-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(VolumeOffIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })))) : React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"video-note-round\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: classNames('animation-preview', {\n        'media-blurred': isBlurred\n      }),\n      style: style,\n      src: thumbnailSrc,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"animation-meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, getDurationString(duration) + ' ' + getFileSize(video), React.createElement(MediaStatus, {\n      chatId: chatId,\n      messageId: messageId,\n      icon: '\\u00A0•',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"video-note-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(VolumeOffIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }))), React.createElement(FileProgress, {\n      file: video,\n      download: true,\n      upload: true,\n      cancelButton: true,\n      icon: React.createElement(ArrowDownwardIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }));\n  }\n\n}\n\nVideoNote.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  messageId: PropTypes.number.isRequired,\n  videoNote: PropTypes.object.isRequired,\n  openMedia: PropTypes.func.isRequired,\n  size: PropTypes.number,\n  displaySize: PropTypes.number\n};\nVideoNote.defaultProps = {\n  size: PHOTO_SIZE,\n  displaySize: PHOTO_DISPLAY_SIZE\n};\nexport default VideoNote;","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Message/Media/VideoNote.js"],"names":["React","PropTypes","classNames","VolumeOffIcon","ArrowDownwardIcon","CircularProgress","FileProgress","MediaStatus","getFileSize","getSrc","isBlurredThumbnail","getDurationString","PHOTO_DISPLAY_SIZE","PHOTO_SIZE","PlayerStore","FileStore","MessageStore","ApplicationStore","InstantViewStore","circleStyle","circle","VideoNote","Component","constructor","props","startStopPlayer","player","videoRef","current","inView","windowFocused","openMediaViewer","openProfileMediaViewer","openIV","play","state","active","pause","onClientUpdateInstantViewContent","update","Boolean","getCurrent","onClientUpdateProfileMediaViewerContent","profileMediaViewerContent","onClientUpdateMediaViewerContent","mediaViewerContent","onClientUpdateFocusWindow","focused","onClientUpdateMessagesInView","chatId","messageId","key","messages","has","onClientUpdateMediaCaptureStream","setState","srcObject","stream","updateVideoSrc","onClientUpdateMediaTime","currentTime","videoDuration","duration","onClientUpdateMediaEnd","window","hasFocus","onClientUpdateMediaActive","video","videoNote","onClientUpdateVideoNoteBlob","fileId","id","src","onClientUpdateVideoNoteThumbnailBlob","thumbnail","photo","forceUpdate","handleCanPlay","createRef","time","message","videoStream","chat_id","tracks","getTracks","forEach","track","stop","componentDidMount","on","componentWillUnmount","removeListener","render","displaySize","openMedia","get","style","width","height","thumbnailSrc","isBlurred","progress","progressTime","Math","floor","propTypes","number","isRequired","object","func","size","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FileProgress from '../../Viewer/FileProgress';\nimport MediaStatus from './MediaStatus';\nimport { getFileSize, getSrc } from '../../../Utils/File';\nimport { isBlurredThumbnail } from '../../../Utils/Media';\nimport { getDurationString } from '../../../Utils/Common';\nimport { PHOTO_DISPLAY_SIZE, PHOTO_SIZE } from '../../../Constants';\nimport PlayerStore from '../../../Stores/PlayerStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport ApplicationStore from '../../../Stores/ApplicationStore';\nimport './VideoNote.css';\nimport InstantViewStore from '../../../Stores/InstantViewStore';\n\nconst circleStyle = {\n    circle: 'video-note-progress-circle'\n};\n\nclass VideoNote extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        const { chatId, messageId } = props;\n        const { video } = props.videoNote;\n\n        const { time, message, videoStream } = PlayerStore;\n        const active = message && message.chat_id === chatId && message.id === messageId;\n\n        this.state = {\n            active: active,\n            srcObject: active ? videoStream : null,\n            src: getSrc(video),\n            currentTime: active && time ? time.currentTime : 0.0,\n            videoDuration: active && time ? time.duration : 0.0\n        };\n\n        this.windowFocused = window.hasFocus;\n        this.inView = false;\n        this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n        this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n    }\n\n    updateVideoSrc() {\n        const { srcObject, src } = this.state;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        if (srcObject) {\n            //player.scr = null;\n            player.srcObject = srcObject;\n            return;\n        }\n\n        const stream = player.srcObject;\n        if (stream) {\n            //console.log('clientUpdate release srcObject');\n            const tracks = stream.getTracks();\n\n            tracks.forEach(track => {\n                //console.log('clientUpdate release track');\n                track.stop();\n            });\n        }\n\n        if (player.srcObject) {\n            //console.log('clientUpdate release video.srcObject');\n            player.srcObject = null;\n        }\n        if (player.src !== src) {\n            player.src = src;\n        }\n    }\n\n    componentDidMount() {\n        this.updateVideoSrc();\n\n        FileStore.on('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n        FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n\n        MessageStore.on('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n\n        ApplicationStore.on('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n        PlayerStore.on('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.on('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateVideoNoteThumbnailBlob', this.onClientUpdateVideoNoteThumbnailBlob);\n        FileStore.removeListener('clientUpdateVideoNoteBlob', this.onClientUpdateVideoNoteBlob);\n\n        MessageStore.removeListener('clientUpdateMessagesInView', this.onClientUpdateMessagesInView);\n\n        ApplicationStore.removeListener('clientUpdateFocusWindow', this.onClientUpdateFocusWindow);\n        ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.removeListener(\n            'clientUpdateProfileMediaViewerContent',\n            this.onClientUpdateProfileMediaViewerContent\n        );\n        InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaCaptureStream', this.onClientUpdateMediaCaptureStream);\n        PlayerStore.removeListener('clientUpdateMediaTime', this.onClientUpdateMediaTime);\n        PlayerStore.removeListener('clientUpdateMediaEnd', this.onClientUpdateMediaEnd);\n    }\n\n    startStopPlayer = () => {\n        const player = this.videoRef.current;\n        if (player) {\n            if (\n                this.inView &&\n                this.windowFocused &&\n                !this.openMediaViewer &&\n                !this.openProfileMediaViewer &&\n                !this.openIV\n            ) {\n                player.play();\n            } else {\n                if (this.state.active) {\n                    return;\n                }\n\n                player.pause();\n            }\n        }\n    };\n\n    onClientUpdateInstantViewContent = update => {\n        this.openIV = Boolean(InstantViewStore.getCurrent());\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateProfileMediaViewerContent = update => {\n        this.openProfileMediaViewer = Boolean(ApplicationStore.profileMediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.openMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateFocusWindow = update => {\n        this.windowFocused = update.focused;\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMessagesInView = update => {\n        const { chatId, messageId } = this.props;\n        const key = `${chatId}_${messageId}`;\n\n        this.inView = update.messages.has(key);\n\n        this.startStopPlayer();\n    };\n\n    onClientUpdateMediaCaptureStream = update => {\n        const { chatId, messageId } = this.props;\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const player = this.videoRef.current;\n            if (player) {\n                this.setState({ srcObject: update.stream }, () => {\n                    this.updateVideoSrc();\n                });\n            }\n        }\n    };\n\n    onClientUpdateMediaTime = update => {\n        const { chatId, messageId } = this.props;\n        if (chatId === update.chatId && messageId === update.messageId) {\n            const player = this.videoRef.current;\n            if (player) {\n                this.setState({\n                    currentTime: update.currentTime,\n                    videoDuration: update.duration\n                });\n            }\n        }\n    };\n\n    onClientUpdateMediaEnd = update => {\n        const { chatId, messageId } = this.props;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            this.setState(\n                {\n                    active: false,\n                    srcObject: null,\n                    currentTime: 0\n                },\n                () => {\n                    const player = this.videoRef.current;\n                    if (!player) return;\n\n                    this.updateVideoSrc();\n\n                    if (!window.hasFocus) {\n                        player.pause();\n                    }\n                }\n            );\n        }\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = this.props;\n        const { video } = this.props.videoNote;\n\n        if (chatId === update.chatId && messageId === update.messageId) {\n            if (this.state.active) {\n            } else {\n                this.setState({\n                    active: true,\n                    currentTime: null\n                });\n            }\n        } else if (this.state.active) {\n            this.setState(\n                {\n                    active: false,\n                    srcObject: null,\n                    currentTime: 0\n                },\n                () => {\n                    const player = this.videoRef.current;\n                    if (!player) return;\n\n                    this.updateVideoSrc();\n\n                    if (!window.hasFocus) {\n                        player.pause();\n                    }\n                }\n            );\n        }\n    };\n\n    onClientUpdateVideoNoteBlob = update => {\n        const { video } = this.props.videoNote;\n        const { fileId } = update;\n\n        if (!video) return;\n\n        if (video.id === fileId) {\n            this.setState(\n                {\n                    src: getSrc(video)\n                },\n                () => {\n                    this.updateVideoSrc();\n                }\n            );\n        }\n    };\n\n    onClientUpdateVideoNoteThumbnailBlob = update => {\n        const { thumbnail } = this.props.videoNote;\n        if (!thumbnail) return;\n\n        const { fileId } = update;\n\n        if (thumbnail.photo && thumbnail.photo.id === fileId) {\n            this.forceUpdate();\n        }\n    };\n\n    handleCanPlay = () => {\n        // const player = this.videoRef.current;\n        // if (player){\n        //     if (this.state.active){\n        //         player.muted = false;\n        //     }\n        //     else{\n        //         player.muted = true;\n        //     }\n        // }\n    };\n\n    render() {\n        const { displaySize, chatId, messageId, openMedia } = this.props;\n        const { active, currentTime, videoDuration } = this.state;\n        const { thumbnail, video, duration } = this.props.videoNote;\n\n        const message = MessageStore.get(chatId, messageId);\n        if (!message) return null;\n\n        const style = { width: 200, height: 200 };\n        if (!style) return null;\n\n        const thumbnailSrc = getSrc(thumbnail ? thumbnail.photo : null);\n        const src = getSrc(video);\n        const isBlurred = isBlurredThumbnail(thumbnail);\n\n        let progress = 0;\n        if (videoDuration && currentTime) {\n            const progressTime = currentTime + 0.25;\n            progress = (progressTime / videoDuration) * 100;\n        }\n\n        return (\n            <div\n                className={classNames('video-note', { 'video-note-playing': active })}\n                style={style}\n                onClick={openMedia}>\n                {src ? (\n                    <>\n                        <video\n                            ref={this.videoRef}\n                            className={classNames('media-viewer-content-image', 'video-note-round')}\n                            poster={thumbnailSrc}\n                            muted\n                            autoPlay\n                            loop\n                            playsInline\n                            width={style.width}\n                            height={style.height}\n                            onCanPlay={this.handleCanPlay}\n                        />\n                        <div className='video-note-player'>\n                            <div className='video-note-progress'>\n                                <CircularProgress\n                                    classes={circleStyle}\n                                    variant='static'\n                                    value={progress}\n                                    size={200}\n                                    thickness={1}\n                                />\n                            </div>\n                            <div className='animation-meta'>\n                                {getDurationString(active ? Math.floor(currentTime) : duration)}\n                                <MediaStatus chatId={chatId} messageId={messageId} icon={'\\u00A0•'} />\n                            </div>\n                            <div className='video-note-muted'>\n                                <VolumeOffIcon />\n                            </div>\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className='video-note-round'>\n                            <img\n                                className={classNames('animation-preview', { 'media-blurred': isBlurred })}\n                                style={style}\n                                src={thumbnailSrc}\n                                alt=''\n                            />\n                        </div>\n                        <div className='animation-meta'>\n                            {getDurationString(duration) + ' ' + getFileSize(video)}\n                            <MediaStatus chatId={chatId} messageId={messageId} icon={'\\u00A0•'} />\n                        </div>\n                        <div className='video-note-muted'>\n                            <VolumeOffIcon />\n                        </div>\n                    </>\n                )}\n                <FileProgress file={video} download upload cancelButton icon={<ArrowDownwardIcon />} />\n            </div>\n        );\n    }\n}\n\nVideoNote.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    messageId: PropTypes.number.isRequired,\n    videoNote: PropTypes.object.isRequired,\n    openMedia: PropTypes.func.isRequired,\n    size: PropTypes.number,\n    displaySize: PropTypes.number\n};\n\nVideoNote.defaultProps = {\n    size: PHOTO_SIZE,\n    displaySize: PHOTO_DISPLAY_SIZE\n};\n\nexport default VideoNote;\n"]},"metadata":{},"sourceType":"module"}