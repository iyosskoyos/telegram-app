{"ast":null,"code":"import _regeneratorRuntime from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/me-admin/Downloads/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */import{arrayBufferToBase64}from'./Utils/Common';import Cookies from'universal-cookie';import{OPTIMIZATIONS_FIRST_START}from'./Constants';import ApplicationStore from'./Stores/ApplicationStore';import TdLibController from'./Controllers/TdLibController';// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost=//false;\nBoolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export default function register(){return _register.apply(this,arguments);}function _register(){_register=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var cookies,publicUrl,serviceWorkerName,swUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log('[SW] Register');if(OPTIMIZATIONS_FIRST_START){cookies=new Cookies();cookies.set('register',true);}if(!('serviceWorker'in navigator)){_context.next=16;break;}// The URL constructor is available in all browsers that support SW.\npublicUrl=new URL(process.env.PUBLIC_URL,window.location);if(!(publicUrl.origin!==window.location.origin)){_context.next=6;break;}return _context.abrupt(\"return\");case 6:serviceWorkerName=process.env.NODE_ENV==='production'?'service-worker.js':'custom-service-worker.js';swUrl=\"\".concat(process.env.PUBLIC_URL,\"/\").concat(serviceWorkerName);console.log(\"[SW] Service worker url: \".concat(swUrl));if(isLocalhost){_context.next=14;break;}_context.next=12;return registerValidSW(swUrl);case 12:_context.next=16;break;case 14:_context.next=16;return checkValidServiceWorker(swUrl);case 16:case\"end\":return _context.stop();}}},_callee);}));return _register.apply(this,arguments);}function registerValidSW(_x){return _registerValidSW.apply(this,arguments);}function _registerValidSW(){_registerValidSW=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(swUrl){var registration;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log('[SW] RegisterValidSW');_context2.prev=1;_context2.next=4;return navigator.serviceWorker.register(swUrl);case 4:registration=_context2.sent;registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log('[SW] New content is available; please refresh.');ApplicationStore.emit('clientUpdateNewContentAvailable');}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('[SW] Content is cached for offline use.');}}};};_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](1);console.error('[SW] Error during service worker registration: ',_context2.t0);case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[1,8]]);}));return _registerValidSW.apply(this,arguments);}export function subscribeNotifications(){return _subscribeNotifications.apply(this,arguments);}function _subscribeNotifications(){_subscribeNotifications=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var registration,pushSubscription,_pushSubscription,endpoint,p256dh_base64url,auth_base64url,authorizationState;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return navigator.serviceWorker.ready;case 3:registration=_context3.sent;_context3.next=6;return registration.pushManager.getSubscription();case 6:pushSubscription=_context3.sent;if(!pushSubscription){_context3.next=10;break;}_context3.next=10;return pushSubscription.unsubscribe();case 10:_context3.next=12;return registration.pushManager.subscribe({userVisibleOnly:true});case 12:pushSubscription=_context3.sent;console.log('[SW] Received push subscription: ',JSON.stringify(pushSubscription));_pushSubscription=pushSubscription,endpoint=_pushSubscription.endpoint;p256dh_base64url=arrayBufferToBase64(pushSubscription.getKey('p256dh'));auth_base64url=arrayBufferToBase64(pushSubscription.getKey('auth'));if(!(endpoint&&p256dh_base64url&&auth_base64url)){_context3.next=22;break;}authorizationState=ApplicationStore.authorizationState;if(!(authorizationState&&authorizationState['@type']==='authorizationStateReady')){_context3.next=22;break;}_context3.next=22;return TdLibController.send({'@type':'registerDevice',device_token:{'@type':'deviceTokenWebPush',endpoint:endpoint,p256dh_base64url:p256dh_base64url,auth_base64url:auth_base64url},other_user_ids:[]});case 22:_context3.next=27;break;case 24:_context3.prev=24;_context3.t0=_context3[\"catch\"](0);console.error('[SW] Error during service worker push subscription: ',_context3.t0);case 27:case\"end\":return _context3.stop();}}},_callee3,null,[[0,24]]);}));return _subscribeNotifications.apply(this,arguments);}function checkValidServiceWorker(_x2){return _checkValidServiceWorker.apply(this,arguments);}function _checkValidServiceWorker(){_checkValidServiceWorker=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(swUrl){var response,registration;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log('[SW] CheckValidServiceWorker');// Check if the service worker can be found. If it can't reload the page.\n_context4.prev=1;_context4.next=4;return fetch(swUrl);case 4:response=_context4.sent;if(!(response.status===404||response.headers.get('content-type').indexOf('javascript')===-1)){_context4.next=14;break;}_context4.next=8;return navigator.serviceWorker.ready;case 8:registration=_context4.sent;_context4.next=11;return registration.unregister();case 11:window.location.reload();_context4.next=16;break;case 14:_context4.next=16;return registerValidSW(swUrl);case 16:_context4.next=21;break;case 18:_context4.prev=18;_context4.t0=_context4[\"catch\"](1);console.log('[SW] No internet connection found. App is running in offline mode.');case 21:case\"end\":return _context4.stop();}}},_callee4,null,[[1,18]]);}));return _checkValidServiceWorker.apply(this,arguments);}export function unregister(){return _unregister.apply(this,arguments);}function _unregister(){_unregister=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var registration;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!('serviceWorker'in navigator)){_context5.next=6;break;}_context5.next=3;return navigator.serviceWorker.ready;case 3:registration=_context5.sent;_context5.next=6;return registration.unregister();case 6:case\"end\":return _context5.stop();}}},_callee5);}));return _unregister.apply(this,arguments);}export function update(){return _update.apply(this,arguments);}function _update(){_update=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var registration;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(!('serviceWorker'in navigator)){_context6.next=6;break;}_context6.next=3;return navigator.serviceWorker.ready;case 3:registration=_context6.sent;_context6.next=6;return registration.update();case 6:case\"end\":return _context6.stop();}}},_callee6);}));return _update.apply(this,arguments);}","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/registerServiceWorker.js"],"names":["arrayBufferToBase64","Cookies","OPTIMIZATIONS_FIRST_START","ApplicationStore","TdLibController","isLocalhost","Boolean","window","location","hostname","match","register","console","log","cookies","set","navigator","publicUrl","URL","process","env","PUBLIC_URL","origin","serviceWorkerName","NODE_ENV","swUrl","registerValidSW","checkValidServiceWorker","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","emit","error","subscribeNotifications","ready","pushManager","getSubscription","pushSubscription","unsubscribe","subscribe","userVisibleOnly","JSON","stringify","endpoint","p256dh_base64url","getKey","auth_base64url","authorizationState","send","device_token","other_user_ids","fetch","response","status","headers","get","indexOf","unregister","reload","update"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { arrayBufferToBase64 } from './Utils/Common';\nimport Cookies from 'universal-cookie';\nimport { OPTIMIZATIONS_FIRST_START } from './Constants';\nimport ApplicationStore from './Stores/ApplicationStore';\nimport TdLibController from './Controllers/TdLibController';\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost =\n    //false;\n    Boolean(\n        window.location.hostname === 'localhost' ||\n            // [::1] is the IPv6 localhost address.\n            window.location.hostname === '[::1]' ||\n            // 127.0.0.1/8 is considered localhost for IPv4.\n            window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    );\n\nexport default async function register() {\n    console.log('[SW] Register');\n\n    if (OPTIMIZATIONS_FIRST_START) {\n        const cookies = new Cookies();\n        cookies.set('register', true);\n    }\n\n    if ('serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        const serviceWorkerName =\n            process.env.NODE_ENV === 'production' ? 'service-worker.js' : 'custom-service-worker.js';\n        const swUrl = `${process.env.PUBLIC_URL}/${serviceWorkerName}`;\n        console.log(`[SW] Service worker url: ${swUrl}`);\n\n        if (!isLocalhost) {\n            // Is not local host. Just register service worker\n            await registerValidSW(swUrl);\n        } else {\n            // This is running on localhost. Lets check if a service worker still exists or not.\n            await checkValidServiceWorker(swUrl);\n        }\n    }\n}\n\nasync function registerValidSW(swUrl) {\n    console.log('[SW] RegisterValidSW');\n    try {\n        const registration = await navigator.serviceWorker.register(swUrl);\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the old content will have been purged and\n                        // the fresh content will have been added to the cache.\n                        // It's the perfect time to display a \"New content is\n                        // available; please refresh.\" message in your web app.\n                        console.log('[SW] New content is available; please refresh.');\n\n                        ApplicationStore.emit('clientUpdateNewContentAvailable');\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('[SW] Content is cached for offline use.');\n                    }\n                }\n            };\n        };\n    } catch (error) {\n        console.error('[SW] Error during service worker registration: ', error);\n    }\n}\n\nexport async function subscribeNotifications() {\n    try {\n        const registration = await navigator.serviceWorker.ready;\n\n        let pushSubscription = await registration.pushManager.getSubscription();\n        if (pushSubscription) await pushSubscription.unsubscribe();\n\n        pushSubscription = await registration.pushManager.subscribe({ userVisibleOnly: true });\n        console.log('[SW] Received push subscription: ', JSON.stringify(pushSubscription));\n\n        const { endpoint } = pushSubscription;\n        const p256dh_base64url = arrayBufferToBase64(pushSubscription.getKey('p256dh'));\n        const auth_base64url = arrayBufferToBase64(pushSubscription.getKey('auth'));\n\n        if (endpoint && p256dh_base64url && auth_base64url) {\n            const { authorizationState } = ApplicationStore;\n            if (authorizationState && authorizationState['@type'] === 'authorizationStateReady') {\n                await TdLibController.send({\n                    '@type': 'registerDevice',\n                    device_token: {\n                        '@type': 'deviceTokenWebPush',\n                        endpoint: endpoint,\n                        p256dh_base64url: p256dh_base64url,\n                        auth_base64url: auth_base64url\n                    },\n                    other_user_ids: []\n                });\n            }\n        }\n    } catch (error) {\n        console.error('[SW] Error during service worker push subscription: ', error);\n    }\n}\n\nasync function checkValidServiceWorker(swUrl) {\n    console.log('[SW] CheckValidServiceWorker');\n    // Check if the service worker can be found. If it can't reload the page.\n    try {\n        const response = await fetch(swUrl);\n\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n            // No service worker found. Probably a different app. Reload the page.\n            const registration = await navigator.serviceWorker.ready;\n            await registration.unregister();\n\n            window.location.reload();\n        } else {\n            // Service worker found. Proceed as normal.\n            await registerValidSW(swUrl);\n        }\n    } catch (error) {\n        console.log('[SW] No internet connection found. App is running in offline mode.');\n    }\n}\n\nexport async function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registration = await navigator.serviceWorker.ready;\n\n        await registration.unregister();\n    }\n}\n\nexport async function update() {\n    if ('serviceWorker' in navigator) {\n        const registration = await navigator.serviceWorker.ready;\n\n        await registration.update();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}