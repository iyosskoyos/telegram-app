{"ast":null,"code":"import _slicedToArray from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Viewer/FileProgress.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { ANIMATION_DURATION_300MS } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './FileProgress.css';\nconst circleStyle = {\n  circle: 'file-progress-circle'\n};\n\nclass FileProgress extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdateFile = update => {\n      const currentFile = this.state.file;\n      const nextFile = update.file;\n\n      if (currentFile && currentFile.id === nextFile.id) {\n        this.setState({\n          file: nextFile,\n          prevFile: currentFile\n        });\n      }\n    };\n\n    this.isDownloading = (file, prevFile) => {\n      if (!this.props.download) return false;\n      const wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n      const isActive = file && file.local && file.local.is_downloading_active;\n      return wasActive || isActive;\n    };\n\n    this.isUploading = (file, prevFile) => {\n      if (!this.props.upload) return false;\n      const wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n      const isActive = file && file.remote && file.remote.is_uploading_active;\n      return wasActive || isActive;\n    };\n\n    this.getProgressParams = (file, prevFile) => {\n      const local = file.local,\n            remote = file.remote;\n      let wasActive = false;\n      let isActive = false;\n      let isCompleted = false;\n      let progressSize = 0;\n      let size = 0;\n\n      if (this.isDownloading(file, prevFile)) {\n        wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n        isActive = local.is_downloading_active;\n        isCompleted = local.is_downloading_completed;\n        progressSize = local.downloaded_size;\n        size = file.size; // console.log(\n        //     `FileProgress.getProgressParams isDownloading id=${\n        //         file.id\n        //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n        //     file,\n        //     prevFile\n        // );\n      } else if (this.isUploading(file, prevFile)) {\n        wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n        isActive = remote.is_uploading_active;\n        isCompleted = remote.is_uploading_completed;\n        progressSize = remote.uploaded_size;\n        size = file.size; // console.log(\n        //     `FileProgress.getProgressParams isUploading id=${\n        //         file.id\n        //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n        //     file,\n        //     prevFile\n        // );\n      } else {// console.log(\n          //     `FileProgress.getProgressParams none id=${file.id} download=${this.props.download} upload=${\n          //         this.props.upload\n          //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n          //     file,\n          //     prevFile\n          // );\n        }\n\n      return [wasActive, isActive, isCompleted, progressSize, size];\n    };\n\n    this.completeAnimation = false;\n    const _file = this.props.file;\n    this.state = {\n      prevPropsFile: _file,\n      prevFile: null,\n      file: FileStore.get(_file.id) || _file\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const file = props.file;\n    const prevPropsFile = state.prevPropsFile;\n\n    if (file && prevPropsFile && file.id !== prevPropsFile.id) {\n      return {\n        prevPropsFile: file,\n        prevFile: null,\n        file: FileStore.get(file.id) || file\n      };\n    }\n\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props = this.props,\n          download = _this$props.download,\n          upload = _this$props.upload,\n          icon = _this$props.icon,\n          thumbnailSrc = _this$props.thumbnailSrc;\n\n    if (nextProps.thumbnailSrc !== thumbnailSrc) {\n      return true;\n    }\n\n    if (nextProps.icon !== icon) {\n      return true;\n    }\n\n    if (this.isDownloading(nextState.file, nextState.prevFile) && !download) {\n      return false;\n    }\n\n    if (this.isUploading(nextState.file, nextState.prevFile) && !upload) {\n      return false;\n    }\n\n    const nextLocal = nextState.file ? nextState.file.local : null;\n    const nextIdbKey = nextState.file ? nextState.file.idb_key : null;\n    const prevLocal = this.state.prevFile ? this.state.prevFile.local : null;\n    const prevIdbKey = this.state.prevFile ? this.state.prevFile.idb_key : null;\n    const isDownloadingCompleted = prevLocal && nextLocal && !prevLocal.is_downloading_completed && nextLocal.is_downloading_completed;\n    const receiveIdbKey = nextIdbKey && !prevIdbKey;\n\n    if (nextState.file.id === this.state.file.id && isDownloadingCompleted && receiveIdbKey) {\n      return false;\n    }\n\n    if (nextState.file !== this.state.file) {\n      return true;\n    }\n\n    if (nextState.prevFile !== this.state.prevFile) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    this.mount = true;\n    FileStore.on('updateFile', this.onUpdateFile);\n  }\n\n  componentWillUnmount() {\n    this.mount = false;\n    FileStore.removeListener('updateFile', this.onUpdateFile);\n  }\n\n  render() {\n    let _this$props2 = this.props,\n        thumbnailSrc = _this$props2.thumbnailSrc,\n        cancelButton = _this$props2.cancelButton,\n        zIndex = _this$props2.zIndex,\n        icon = _this$props2.icon,\n        completeIcon = _this$props2.completeIcon;\n    const _this$state = this.state,\n          file = _this$state.file,\n          prevFile = _this$state.prevFile;\n    if (!file) return null;\n\n    const _this$getProgressPara = this.getProgressParams(file, prevFile),\n          _this$getProgressPara2 = _slicedToArray(_this$getProgressPara, 5),\n          wasActive = _this$getProgressPara2[0],\n          isActive = _this$getProgressPara2[1],\n          isCompleted = _this$getProgressPara2[2],\n          progressSize = _this$getProgressPara2[3],\n          size = _this$getProgressPara2[4];\n\n    let inProgress = isActive;\n    let progress = 0;\n\n    if (isActive) {\n      progress = progressSize && size ? 100 - (size - progressSize) / size * 100 : 1;\n    }\n\n    const startCompleteAnimation = wasActive && !isActive;\n\n    if (startCompleteAnimation) {\n      this.completeAnimation = true; // console.log('FileProgress.render animationComplete=true');\n\n      progress = isCompleted ? 100 : 0;\n      inProgress = true;\n      setTimeout(() => {\n        this.completeAnimation = false;\n        if (!this.mount) return; // console.log('FileProgress.render animationComplete=false');\n\n        this.setState({\n          prevFile: null\n        });\n      }, ANIMATION_DURATION_300MS);\n    }\n\n    const style = {\n      zIndex: zIndex,\n      background: !thumbnailSrc && typeof thumbnailSrc !== 'undefined' ? null : 'rgba(0, 0, 0, 0.25)'\n    };\n    const isDownloadingCompleted = file && file.local && (file.local.is_downloading_completed || file.idb_key || file.local.is_uploading_completed) && !this.completeAnimation && !isActive; // console.log(\n    //     `FileProgress.render \\\\\n    //     id=${file.id} showProgress=${inProgress} progress=${progress} \\\\\n    //     was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} \\\\\n    //     progress_size=${progressSize} size=${size} complete_animation=${this.completeAnimation} \\\\\n    //     is_downloading_completed=${isDownloadingCompleted}\n    //     completeIcon=${completeIcon}`,\n    //     file,\n    //     prevFile\n    // );\n    //cancelButton = true;\n    //inProgress = true;\n\n    if (isDownloadingCompleted) {\n      // console.log('FileProgress.render completeIcon');\n      if (completeIcon) {\n        return React.createElement(\"div\", {\n          className: \"file-progress\",\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"file-progress-icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, completeIcon));\n      }\n\n      return null;\n    }\n\n    if (inProgress || this.completeAnimation) {\n      // console.log('FileProgress.render inProgressIcon');\n      return React.createElement(\"div\", {\n        className: \"file-progress\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"file-progress-indicator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        classes: circleStyle,\n        variant: \"static\",\n        value: progress,\n        size: 42,\n        thickness: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      })), cancelButton && React.createElement(\"div\", {\n        className: \"file-progress-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      })));\n    }\n\n    if (icon) {\n      // console.log('FileProgress.render icon');\n      return React.createElement(\"div\", {\n        className: \"file-progress\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"file-progress-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, icon));\n    }\n\n    return null;\n  }\n\n}\n\nFileProgress.propTypes = {\n  file: PropTypes.object.isRequired,\n  thumbnailSrc: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  cancelButton: PropTypes.bool,\n  download: PropTypes.bool,\n  upload: PropTypes.bool,\n  zIndex: PropTypes.number,\n  icon: PropTypes.node,\n  completeIcon: PropTypes.node\n};\nFileProgress.defaultProps = {\n  cancelButton: false,\n  download: true,\n  upload: false\n};\nexport default FileProgress;","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Viewer/FileProgress.js"],"names":["React","PropTypes","CircularProgress","CloseIcon","ANIMATION_DURATION_300MS","FileStore","circleStyle","circle","FileProgress","Component","constructor","props","onUpdateFile","update","currentFile","state","file","nextFile","id","setState","prevFile","isDownloading","download","wasActive","local","is_downloading_active","isActive","isUploading","upload","remote","is_uploading_active","getProgressParams","isCompleted","progressSize","size","is_downloading_completed","downloaded_size","is_uploading_completed","uploaded_size","completeAnimation","prevPropsFile","get","getDerivedStateFromProps","shouldComponentUpdate","nextProps","nextState","icon","thumbnailSrc","nextLocal","nextIdbKey","idb_key","prevLocal","prevIdbKey","isDownloadingCompleted","receiveIdbKey","componentDidMount","mount","on","componentWillUnmount","removeListener","render","cancelButton","zIndex","completeIcon","inProgress","progress","startCompleteAnimation","setTimeout","style","background","propTypes","object","isRequired","oneOfType","string","bool","number","node","defaultProps"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { ANIMATION_DURATION_300MS } from '../../Constants';\nimport FileStore from '../../Stores/FileStore';\nimport './FileProgress.css';\n\nconst circleStyle = { circle: 'file-progress-circle' };\n\nclass FileProgress extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.completeAnimation = false;\n        const { file } = this.props;\n        this.state = {\n            prevPropsFile: file,\n            prevFile: null,\n            file: FileStore.get(file.id) || file\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { file } = props;\n        const { prevPropsFile } = state;\n\n        if (file && prevPropsFile && file.id !== prevPropsFile.id) {\n            return {\n                prevPropsFile: file,\n                prevFile: null,\n                file: FileStore.get(file.id) || file\n            };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const { download, upload, icon, thumbnailSrc } = this.props;\n\n        if (nextProps.thumbnailSrc !== thumbnailSrc) {\n            return true;\n        }\n\n        if (nextProps.icon !== icon) {\n            return true;\n        }\n\n        if (this.isDownloading(nextState.file, nextState.prevFile) && !download) {\n            return false;\n        }\n\n        if (this.isUploading(nextState.file, nextState.prevFile) && !upload) {\n            return false;\n        }\n\n        const nextLocal = nextState.file ? nextState.file.local : null;\n        const nextIdbKey = nextState.file ? nextState.file.idb_key : null;\n        const prevLocal = this.state.prevFile ? this.state.prevFile.local : null;\n        const prevIdbKey = this.state.prevFile ? this.state.prevFile.idb_key : null;\n        const isDownloadingCompleted =\n            prevLocal && nextLocal && !prevLocal.is_downloading_completed && nextLocal.is_downloading_completed;\n        const receiveIdbKey = nextIdbKey && !prevIdbKey;\n\n        if (nextState.file.id === this.state.file.id && isDownloadingCompleted && receiveIdbKey) {\n            return false;\n        }\n\n        if (nextState.file !== this.state.file) {\n            return true;\n        }\n\n        if (nextState.prevFile !== this.state.prevFile) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        this.mount = true;\n        FileStore.on('updateFile', this.onUpdateFile);\n    }\n\n    componentWillUnmount() {\n        this.mount = false;\n        FileStore.removeListener('updateFile', this.onUpdateFile);\n    }\n\n    onUpdateFile = update => {\n        const currentFile = this.state.file;\n        const nextFile = update.file;\n\n        if (currentFile && currentFile.id === nextFile.id) {\n            this.setState({ file: nextFile, prevFile: currentFile });\n        }\n    };\n\n    isDownloading = (file, prevFile) => {\n        if (!this.props.download) return false;\n\n        const wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n        const isActive = file && file.local && file.local.is_downloading_active;\n\n        return wasActive || isActive;\n    };\n\n    isUploading = (file, prevFile) => {\n        if (!this.props.upload) return false;\n\n        const wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n        const isActive = file && file.remote && file.remote.is_uploading_active;\n\n        return wasActive || isActive;\n    };\n\n    getProgressParams = (file, prevFile) => {\n        const { local, remote } = file;\n\n        let wasActive = false;\n        let isActive = false;\n        let isCompleted = false;\n        let progressSize = 0;\n        let size = 0;\n        if (this.isDownloading(file, prevFile)) {\n            wasActive = prevFile && prevFile.local && prevFile.local.is_downloading_active;\n            isActive = local.is_downloading_active;\n            isCompleted = local.is_downloading_completed;\n            progressSize = local.downloaded_size;\n            size = file.size;\n            // console.log(\n            //     `FileProgress.getProgressParams isDownloading id=${\n            //         file.id\n            //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n            //     file,\n            //     prevFile\n            // );\n        } else if (this.isUploading(file, prevFile)) {\n            wasActive = prevFile && prevFile.remote && prevFile.remote.is_uploading_active;\n            isActive = remote.is_uploading_active;\n            isCompleted = remote.is_uploading_completed;\n            progressSize = remote.uploaded_size;\n            size = file.size;\n            // console.log(\n            //     `FileProgress.getProgressParams isUploading id=${\n            //         file.id\n            //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n            //     file,\n            //     prevFile\n            // );\n        } else {\n            // console.log(\n            //     `FileProgress.getProgressParams none id=${file.id} download=${this.props.download} upload=${\n            //         this.props.upload\n            //     } was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} progress_size=${progressSize} size=${size}`,\n            //     file,\n            //     prevFile\n            // );\n        }\n\n        return [wasActive, isActive, isCompleted, progressSize, size];\n    };\n\n    render() {\n        let { thumbnailSrc, cancelButton, zIndex, icon, completeIcon } = this.props;\n        const { file, prevFile } = this.state;\n        if (!file) return null;\n\n        const [wasActive, isActive, isCompleted, progressSize, size] = this.getProgressParams(file, prevFile);\n\n        let inProgress = isActive;\n        let progress = 0;\n        if (isActive) {\n            progress = progressSize && size ? 100 - ((size - progressSize) / size) * 100 : 1;\n        }\n\n        const startCompleteAnimation = wasActive && !isActive;\n        if (startCompleteAnimation) {\n            this.completeAnimation = true;\n            // console.log('FileProgress.render animationComplete=true');\n            progress = isCompleted ? 100 : 0;\n            inProgress = true;\n            setTimeout(() => {\n                this.completeAnimation = false;\n                if (!this.mount) return;\n                // console.log('FileProgress.render animationComplete=false');\n\n                this.setState({ prevFile: null });\n            }, ANIMATION_DURATION_300MS);\n        }\n\n        const style = {\n            zIndex: zIndex,\n            background: !thumbnailSrc && typeof thumbnailSrc !== 'undefined' ? null : 'rgba(0, 0, 0, 0.25)'\n        };\n\n        const isDownloadingCompleted =\n            file &&\n            file.local &&\n            (file.local.is_downloading_completed || file.idb_key || file.local.is_uploading_completed) &&\n            !this.completeAnimation &&\n            !isActive;\n\n        // console.log(\n        //     `FileProgress.render \\\\\n        //     id=${file.id} showProgress=${inProgress} progress=${progress} \\\\\n        //     was_active=${wasActive} is_active=${isActive} is_completed=${isCompleted} \\\\\n        //     progress_size=${progressSize} size=${size} complete_animation=${this.completeAnimation} \\\\\n        //     is_downloading_completed=${isDownloadingCompleted}\n        //     completeIcon=${completeIcon}`,\n        //     file,\n        //     prevFile\n        // );\n        //cancelButton = true;\n        //inProgress = true;\n\n        if (isDownloadingCompleted) {\n            // console.log('FileProgress.render completeIcon');\n            if (completeIcon) {\n                return (\n                    <div className='file-progress' style={style}>\n                        <div className='file-progress-icon'>{completeIcon}</div>\n                    </div>\n                );\n            }\n\n            return null;\n        }\n\n        if (inProgress || this.completeAnimation) {\n            // console.log('FileProgress.render inProgressIcon');\n            return (\n                <div className='file-progress' style={style}>\n                    <div className='file-progress-indicator'>\n                        <CircularProgress\n                            classes={circleStyle}\n                            variant='static'\n                            value={progress}\n                            size={42}\n                            thickness={2}\n                        />\n                    </div>\n                    {cancelButton && (\n                        <div className='file-progress-icon'>\n                            <CloseIcon />\n                        </div>\n                    )}\n                </div>\n            );\n        }\n\n        if (icon) {\n            // console.log('FileProgress.render icon');\n            return (\n                <div className='file-progress' style={style}>\n                    <div className='file-progress-icon'>{icon}</div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n}\n\nFileProgress.propTypes = {\n    file: PropTypes.object.isRequired,\n    thumbnailSrc: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    cancelButton: PropTypes.bool,\n    download: PropTypes.bool,\n    upload: PropTypes.bool,\n    zIndex: PropTypes.number,\n\n    icon: PropTypes.node,\n    completeIcon: PropTypes.node\n};\n\nFileProgress.defaultProps = {\n    cancelButton: false,\n    download: true,\n    upload: false\n};\n\nexport default FileProgress;\n"]},"metadata":{},"sourceType":"module"}