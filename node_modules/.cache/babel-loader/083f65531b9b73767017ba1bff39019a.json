{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/Dialog.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Popover from '@material-ui/core/Popover';\nimport ChatTile from './ChatTile';\nimport DialogContent from './DialogContent';\nimport DialogBadge from './DialogBadge';\nimport DialogTitle from './DialogTitle';\nimport DialogMeta from './DialogMeta';\nimport { isChatMuted, isChatSecret, isChatUnread } from '../../Utils/Chat';\nimport { toggleChatIsMarkedAsUnread, toggleChatIsPinned, toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { openChat } from '../../Actions/Client';\nimport { viewMessages } from '../../Actions/Message';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Dialog.css';\n\nconst styles = theme => ({\n  menuListRoot: {\n    minWidth: 150\n  },\n  statusRoot: {\n    position: 'absolute',\n    right: 1,\n    bottom: 1,\n    zIndex: 1\n  },\n  statusIcon: {},\n  iconIndicator: {\n    background: '#80d066'\n  },\n  verifiedIcon: {\n    color: theme.palette.primary.main\n  },\n  unreadIcon: {\n    background: theme.palette.primary.light\n  },\n  dialogActive: {\n    color: '#fff',\n    //theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: 8,\n    cursor: 'pointer',\n    margin: '0 12px',\n    '& $verifiedIcon': {\n      color: '#fff'\n    },\n    '& $unreadIcon': {\n      background: '#ffffff77'\n    },\n    '& $statusRoot': {\n      background: theme.palette.primary.main\n    },\n    '& $iconIndicator': {\n      background: '#ffffff'\n    }\n  },\n  dialog: {\n    borderRadius: 8,\n    cursor: 'pointer',\n    margin: '0 12px',\n    '&:hover': {\n      backgroundColor: theme.palette.primary.main + '22',\n      '& $statusRoot': {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n      },\n      '& $statusIcon': {\n        background: theme.palette.primary.main + '22'\n      }\n    }\n  }\n});\n\nclass Dialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateChatId = update => {\n      const chatId = this.props.chatId;\n\n      if (chatId === update.previousChatId || chatId === update.nextChatId) {\n        this.forceUpdate();\n      }\n    };\n\n    this.handleSelect = event => {\n      if (event.button === 0) {\n        openChat(this.props.chatId);\n      }\n    };\n\n    this.handleContextMenu = async event => {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      const chatId = this.props.chatId;\n      const contextMenu = this.state.contextMenu;\n\n      if (contextMenu) {\n        this.setState({\n          contextMenu: false\n        });\n      } else {\n        const left = event.clientX;\n        const top = event.clientY;\n        const chat = ChatStore.get(chatId);\n        const is_pinned = chat.is_pinned;\n        const canTogglePin = (await this.canPinChats(chatId)) || is_pinned;\n        this.setState({\n          contextMenu: true,\n          canTogglePin,\n          left,\n          top\n        });\n      }\n    };\n\n    this.handleCloseContextMenu = event => {\n      if (event) {\n        event.stopPropagation();\n      }\n\n      this.setState({\n        contextMenu: false\n      });\n    };\n\n    this.handleMute = event => {\n      this.handleCloseContextMenu(event);\n      const chatId = this.props.chatId;\n      toggleChatNotificationSettings(chatId, !isChatMuted(chatId));\n    };\n\n    this.canPinChats = async chatId => {\n      const chat = ChatStore.get(chatId);\n      if (!chat) return false;\n      const pinnedSumMaxOption = OptionStore.get('pinned_chat_count_max');\n      if (!pinnedSumMaxOption) return false;\n      const isSecret = isChatSecret(chatId);\n      const chats = await TdLibController.send({\n        '@type': 'getChats',\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 15\n      });\n      const pinnedSum = chats.chat_ids.reduce((x, id) => {\n        if (isChatSecret(id) !== isSecret) return x;\n        const chat = ChatStore.get(id);\n        if (!chat) return x;\n        return x + (chat.is_pinned ? 1 : 0);\n      }, 0);\n      return pinnedSum < pinnedSumMaxOption.value;\n    };\n\n    this.handlePin = async event => {\n      this.handleCloseContextMenu(event);\n      const chatId = this.props.chatId;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return;\n      const is_pinned = chat.is_pinned;\n      if (!is_pinned && !this.canPinChats(chatId)) return;\n      toggleChatIsPinned(chatId, !is_pinned);\n    };\n\n    this.getViewInfoTitle = () => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            t = _this$props.t;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return;\n      const type = chat.type;\n\n      switch (type['@type']) {\n        case 'chatTypeBasicGroup':\n          {\n            return t('ViewGroupInfo');\n          }\n\n        case 'chatTypePrivate':\n        case 'chatTypeSecret':\n          {\n            return t('ViewProfile');\n          }\n\n        case 'chatTypeSupergroup':\n          {\n            if (type.is_channel) {\n              return t('ViewChannelInfo');\n            }\n\n            return t('ViewGroupInfo');\n          }\n      }\n    };\n\n    this.handleViewInfo = event => {\n      this.handleCloseContextMenu(event);\n      const chatId = this.props.chatId;\n      openChat(chatId, null, true);\n    };\n\n    this.handleRead = event => {\n      this.handleCloseContextMenu(event);\n      const chatId = this.props.chatId;\n      const isUnread = isChatUnread(chatId);\n\n      if (isUnread) {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        const is_marked_as_unread = chat.is_marked_as_unread,\n              last_message = chat.last_message,\n              unread_count = chat.unread_count;\n\n        if (unread_count > 0 && last_message) {\n          viewMessages(chatId, [last_message.id], true);\n        } else if (is_marked_as_unread) {\n          toggleChatIsMarkedAsUnread(chatId, false);\n        }\n      } else {\n        toggleChatIsMarkedAsUnread(chatId, true);\n      }\n    };\n\n    this.dialog = React.createRef();\n\n    const _chat = ChatStore.get(this.props.chatId);\n\n    this.state = {\n      chat: _chat,\n      contextMenu: false,\n      left: 0,\n      top: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.chatId !== this.props.chatId) {\n      return true;\n    }\n\n    if (nextProps.t !== this.props.t) {\n      return true;\n    }\n\n    if (nextProps.theme !== this.props.theme) {\n      return true;\n    }\n\n    if (nextProps.hidden !== this.props.hidden) {\n      return true;\n    }\n\n    if (nextState.contextMenu !== this.state.contextMenu) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n  }\n\n  componentWillUnmount() {\n    ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          classes = _this$props2.classes,\n          chatId = _this$props2.chatId,\n          showSavedMessages = _this$props2.showSavedMessages,\n          hidden = _this$props2.hidden,\n          t = _this$props2.t;\n    const _this$state = this.state,\n          contextMenu = _this$state.contextMenu,\n          left = _this$state.left,\n          top = _this$state.top,\n          canTogglePin = _this$state.canTogglePin;\n    if (hidden) return null;\n    const chat = ChatStore.get(chatId);\n    const is_pinned = chat.is_pinned;\n    const currentChatId = ApplicationStore.getChatId();\n    const isSelected = currentChatId === chatId;\n    const isMuted = isChatMuted(chatId);\n    const isUnread = isChatUnread(chatId);\n    return React.createElement(\"div\", {\n      ref: this.dialog,\n      className: classNames(isSelected ? classes.dialogActive : classes.dialog, isSelected ? 'dialog-active' : 'dialog'),\n      onMouseDown: this.handleSelect,\n      onContextMenu: this.handleContextMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dialog-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(ChatTile, {\n      chatId: chatId,\n      showSavedMessages: showSavedMessages,\n      showOnline: true,\n      classes: {\n        statusRoot: classes.statusRoot,\n        statusIcon: classes.statusIcon,\n        iconIndicator: classes.iconIndicator\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dialog-inner-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-first-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      chatId: chatId,\n      classes: {\n        verifiedIcon: classes.verifiedIcon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(DialogMeta, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"tile-second-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(DialogBadge, {\n      chatId: chatId,\n      classes: {\n        unreadIcon: classes.unreadIcon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })))), React.createElement(Popover, {\n      open: contextMenu,\n      onClose: this.handleCloseContextMenu,\n      anchorReference: \"anchorPosition\",\n      anchorPosition: {\n        top,\n        left\n      },\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n      },\n      onMouseDown: e => e.stopPropagation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(MenuList, {\n      classes: {\n        root: classes.menuListRoot\n      },\n      onClick: e => e.stopPropagation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, canTogglePin && React.createElement(MenuItem, {\n      onClick: this.handlePin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, is_pinned ? t('UnpinFromTop') : t('PinToTop')), React.createElement(MenuItem, {\n      onClick: this.handleViewInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, this.getViewInfoTitle()), React.createElement(MenuItem, {\n      onClick: this.handleMute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, isMuted ? t('Unmute') : t('Mute')), React.createElement(MenuItem, {\n      onClick: this.handleRead,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, isUnread ? t('MarkAsRead') : t('MarkAsUnread')))));\n  }\n\n}\n\nDialog.propTypes = {\n  chatId: PropTypes.number.isRequired,\n  hidden: PropTypes.bool,\n  showSavedMessages: PropTypes.bool\n};\nDialog.defaultProps = {\n  hidden: false,\n  showSavedMessages: true\n};\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(Dialog);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/Dialog.js"],"names":["React","Component","PropTypes","classNames","compose","withStyles","withTranslation","MenuItem","MenuList","Popover","ChatTile","DialogContent","DialogBadge","DialogTitle","DialogMeta","isChatMuted","isChatSecret","isChatUnread","toggleChatIsMarkedAsUnread","toggleChatIsPinned","toggleChatNotificationSettings","openChat","viewMessages","ApplicationStore","ChatStore","OptionStore","TdLibController","styles","theme","menuListRoot","minWidth","statusRoot","position","right","bottom","zIndex","statusIcon","iconIndicator","background","verifiedIcon","color","palette","primary","main","unreadIcon","light","dialogActive","backgroundColor","borderRadius","cursor","margin","dialog","type","default","Dialog","constructor","props","onClientUpdateChatId","update","chatId","previousChatId","nextChatId","forceUpdate","handleSelect","event","button","handleContextMenu","preventDefault","stopPropagation","contextMenu","state","setState","left","clientX","top","clientY","chat","get","is_pinned","canTogglePin","canPinChats","handleCloseContextMenu","handleMute","pinnedSumMaxOption","isSecret","chats","send","offset_order","offset_chat_id","limit","pinnedSum","chat_ids","reduce","x","id","value","handlePin","getViewInfoTitle","t","is_channel","handleViewInfo","handleRead","isUnread","is_marked_as_unread","last_message","unread_count","createRef","shouldComponentUpdate","nextProps","nextState","hidden","componentDidMount","on","componentWillUnmount","removeListener","render","classes","showSavedMessages","currentChatId","getChatId","isSelected","isMuted","vertical","horizontal","e","root","propTypes","number","isRequired","bool","defaultProps","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Popover from '@material-ui/core/Popover';\nimport ChatTile from './ChatTile';\nimport DialogContent from './DialogContent';\nimport DialogBadge from './DialogBadge';\nimport DialogTitle from './DialogTitle';\nimport DialogMeta from './DialogMeta';\nimport { isChatMuted, isChatSecret, isChatUnread } from '../../Utils/Chat';\nimport { toggleChatIsMarkedAsUnread, toggleChatIsPinned, toggleChatNotificationSettings } from '../../Actions/Chat';\nimport { openChat } from '../../Actions/Client';\nimport { viewMessages } from '../../Actions/Message';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport ChatStore from '../../Stores/ChatStore';\nimport OptionStore from '../../Stores/OptionStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './Dialog.css';\n\nconst styles = theme => ({\n    menuListRoot: {\n        minWidth: 150\n    },\n    statusRoot: {\n        position: 'absolute',\n        right: 1,\n        bottom: 1,\n        zIndex: 1\n    },\n    statusIcon: {},\n    iconIndicator: {\n        background: '#80d066'\n    },\n    verifiedIcon: {\n        color: theme.palette.primary.main\n    },\n    unreadIcon: {\n        background: theme.palette.primary.light\n    },\n    dialogActive: {\n        color: '#fff', //theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        borderRadius: 8,\n        cursor: 'pointer',\n        margin: '0 12px',\n        '& $verifiedIcon': {\n            color: '#fff'\n        },\n        '& $unreadIcon': {\n            background: '#ffffff77'\n        },\n        '& $statusRoot': {\n            background: theme.palette.primary.main\n        },\n        '& $iconIndicator': {\n            background: '#ffffff'\n        }\n    },\n    dialog: {\n        borderRadius: 8,\n        cursor: 'pointer',\n        margin: '0 12px',\n        '&:hover': {\n            backgroundColor: theme.palette.primary.main + '22',\n            '& $statusRoot': {\n                background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n            },\n            '& $statusIcon': {\n                background: theme.palette.primary.main + '22'\n            }\n        }\n    }\n});\n\nclass Dialog extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dialog = React.createRef();\n\n        const chat = ChatStore.get(this.props.chatId);\n        this.state = {\n            chat: chat,\n            contextMenu: false,\n            left: 0,\n            top: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.t !== this.props.t) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        if (nextProps.hidden !== this.props.hidden) {\n            return true;\n        }\n\n        if (nextState.contextMenu !== this.state.contextMenu) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateChatId', this.onClientUpdateChatId);\n    }\n\n    onClientUpdateChatId = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.previousChatId || chatId === update.nextChatId) {\n            this.forceUpdate();\n        }\n    };\n\n    handleSelect = event => {\n        if (event.button === 0) {\n            openChat(this.props.chatId);\n        }\n    };\n\n    handleContextMenu = async event => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        const { chatId } = this.props;\n        const { contextMenu } = this.state;\n\n        if (contextMenu) {\n            this.setState({ contextMenu: false });\n        } else {\n            const left = event.clientX;\n            const top = event.clientY;\n            const chat = ChatStore.get(chatId);\n            const { is_pinned } = chat;\n            const canTogglePin = (await this.canPinChats(chatId)) || is_pinned;\n\n            this.setState({\n                contextMenu: true,\n                canTogglePin,\n                left,\n                top\n            });\n        }\n    };\n\n    handleCloseContextMenu = event => {\n        if (event) {\n            event.stopPropagation();\n        }\n\n        this.setState({ contextMenu: false });\n    };\n\n    handleMute = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n\n        toggleChatNotificationSettings(chatId, !isChatMuted(chatId));\n    };\n\n    canPinChats = async chatId => {\n        const chat = ChatStore.get(chatId);\n        if (!chat) return false;\n\n        const pinnedSumMaxOption = OptionStore.get('pinned_chat_count_max');\n        if (!pinnedSumMaxOption) return false;\n\n        const isSecret = isChatSecret(chatId);\n        const chats = await TdLibController.send({\n            '@type': 'getChats',\n            offset_order: '9223372036854775807',\n            offset_chat_id: 0,\n            limit: 15\n        });\n\n        const pinnedSum = chats.chat_ids.reduce((x, id) => {\n            if (isChatSecret(id) !== isSecret) return x;\n\n            const chat = ChatStore.get(id);\n            if (!chat) return x;\n\n            return x + (chat.is_pinned ? 1 : 0);\n        }, 0);\n\n        return pinnedSum < pinnedSumMaxOption.value;\n    };\n\n    handlePin = async event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n        const { is_pinned } = chat;\n\n        if (!is_pinned && !this.canPinChats(chatId)) return;\n\n        toggleChatIsPinned(chatId, !is_pinned);\n    };\n\n    getViewInfoTitle = () => {\n        const { chatId, t } = this.props;\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        const { type } = chat;\n        switch (type['@type']) {\n            case 'chatTypeBasicGroup': {\n                return t('ViewGroupInfo');\n            }\n            case 'chatTypePrivate':\n            case 'chatTypeSecret': {\n                return t('ViewProfile');\n            }\n            case 'chatTypeSupergroup': {\n                if (type.is_channel) {\n                    return t('ViewChannelInfo');\n                }\n\n                return t('ViewGroupInfo');\n            }\n        }\n    };\n\n    handleViewInfo = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n\n        openChat(chatId, null, true);\n    };\n\n    handleRead = event => {\n        this.handleCloseContextMenu(event);\n\n        const { chatId } = this.props;\n\n        const isUnread = isChatUnread(chatId);\n        if (isUnread) {\n            const chat = ChatStore.get(chatId);\n            if (!chat) return;\n\n            const { is_marked_as_unread, last_message, unread_count } = chat;\n            if (unread_count > 0 && last_message) {\n                viewMessages(chatId, [last_message.id], true);\n            } else if (is_marked_as_unread) {\n                toggleChatIsMarkedAsUnread(chatId, false);\n            }\n        } else {\n            toggleChatIsMarkedAsUnread(chatId, true);\n        }\n    };\n\n    render() {\n        const { classes, chatId, showSavedMessages, hidden, t } = this.props;\n        const { contextMenu, left, top, canTogglePin } = this.state;\n\n        if (hidden) return null;\n\n        const chat = ChatStore.get(chatId);\n        const { is_pinned } = chat;\n        const currentChatId = ApplicationStore.getChatId();\n        const isSelected = currentChatId === chatId;\n        const isMuted = isChatMuted(chatId);\n        const isUnread = isChatUnread(chatId);\n        return (\n            <div\n                ref={this.dialog}\n                className={classNames(\n                    isSelected ? classes.dialogActive : classes.dialog,\n                    isSelected ? 'dialog-active' : 'dialog'\n                )}\n                onMouseDown={this.handleSelect}\n                onContextMenu={this.handleContextMenu}>\n                <div className='dialog-wrapper'>\n                    <ChatTile\n                        chatId={chatId}\n                        showSavedMessages={showSavedMessages}\n                        showOnline\n                        classes={{\n                            statusRoot: classes.statusRoot,\n                            statusIcon: classes.statusIcon,\n                            iconIndicator: classes.iconIndicator\n                        }}\n                    />\n                    <div className='dialog-inner-wrapper'>\n                        <div className='tile-first-row'>\n                            <DialogTitle chatId={chatId} classes={{ verifiedIcon: classes.verifiedIcon }} />\n                            <DialogMeta chatId={chatId} />\n                        </div>\n                        <div className='tile-second-row'>\n                            <DialogContent chatId={chatId} />\n                            <DialogBadge chatId={chatId} classes={{ unreadIcon: classes.unreadIcon }} />\n                        </div>\n                    </div>\n                </div>\n                <Popover\n                    open={contextMenu}\n                    onClose={this.handleCloseContextMenu}\n                    anchorReference='anchorPosition'\n                    anchorPosition={{ top, left }}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                    onMouseDown={e => e.stopPropagation()}>\n                    <MenuList classes={{ root: classes.menuListRoot }} onClick={e => e.stopPropagation()}>\n                        {canTogglePin && (\n                            <MenuItem onClick={this.handlePin}>\n                                {is_pinned ? t('UnpinFromTop') : t('PinToTop')}\n                            </MenuItem>\n                        )}\n                        <MenuItem onClick={this.handleViewInfo}>{this.getViewInfoTitle()}</MenuItem>\n                        <MenuItem onClick={this.handleMute}>{isMuted ? t('Unmute') : t('Mute')}</MenuItem>\n                        <MenuItem onClick={this.handleRead}>{isUnread ? t('MarkAsRead') : t('MarkAsUnread')}</MenuItem>\n                    </MenuList>\n                </Popover>\n            </div>\n        );\n    }\n}\n\nDialog.propTypes = {\n    chatId: PropTypes.number.isRequired,\n    hidden: PropTypes.bool,\n    showSavedMessages: PropTypes.bool\n};\n\nDialog.defaultProps = {\n    hidden: false,\n    showSavedMessages: true\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(Dialog);\n"]},"metadata":{},"sourceType":"module"}