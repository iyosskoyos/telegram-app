{"ast":null,"code":"var _jsxFileName = \"/home/me-admin/Downloads/my-app/src/Components/Tile/DialogBadge.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { isChatMuted, showChatUnreadCount, showChatUnreadMentionCount, showChatUnreadMessageIcon } from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\nimport './DialogBadge.css';\n\nconst styles = theme => ({\n  dialogBadge: {\n    background: theme.palette.primary.main\n  },\n  dialogBadgeMuted: {\n    background: theme.palette.type === 'dark' ? theme.palette.text.disabled : '#d8d8d8'\n  },\n  unreadIcon: {}\n});\n\nclass DialogBadge extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClientUpdateClearHistory = update => {\n      const chatId = this.props.chatId;\n\n      if (chatId === update.chatId) {\n        this.clearHistory = update.inProgress;\n        this.forceUpdate();\n      }\n    };\n\n    this.onFastUpdatingComplete = update => {\n      this.forceUpdate();\n    };\n\n    this.onUpdate = update => {\n      const chatId = this.props.chatId;\n      if (update.chat_id !== chatId) return;\n      this.forceUpdate();\n    };\n\n    this.onUpdateScopeNotificationSettings = update => {\n      const chatId = this.props.chatId;\n      const chat = ChatStore.get(chatId);\n      if (!chat) return;\n\n      switch (update.scope['@type']) {\n        case 'notificationSettingsScopeGroupChats':\n          {\n            if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n              this.forceUpdate();\n            }\n\n            break;\n          }\n\n        case 'notificationSettingsScopePrivateChats':\n          {\n            if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n              this.forceUpdate();\n            }\n\n            break;\n          }\n      }\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$props = this.props,\n          chatId = _this$props.chatId,\n          theme = _this$props.theme;\n\n    if (nextProps.chatId !== chatId) {\n      return true;\n    }\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ChatStore.on('updateChatDraftMessage', this.onUpdate);\n    ChatStore.on('updateChatIsMarkedAsUnread', this.onUpdate);\n    ChatStore.on('updateChatIsPinned', this.onUpdate);\n    ChatStore.on('updateChatNotificationSettings', this.onUpdate);\n    ChatStore.on('updateChatReadInbox', this.onUpdate);\n    ChatStore.on('updateChatLastMessage', this.onUpdate);\n    ChatStore.on('updateChatReadOutbox', this.onUpdate);\n    ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n    ChatStore.on('updateMessageMentionRead', this.onUpdate);\n    NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n    ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n    ChatStore.removeListener('updateChatIsMarkedAsUnread', this.onUpdate);\n    ChatStore.removeListener('updateChatIsPinned', this.onUpdate);\n    ChatStore.removeListener('updateChatNotificationSettings', this.onUpdate);\n    ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n    ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n    ChatStore.removeListener('updateChatReadOutbox', this.onUpdate);\n    ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n    ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n    NotificationStore.removeListener('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n  }\n\n  render() {\n    if (this.clearHistory) return null;\n    const _this$props2 = this.props,\n          chatId = _this$props2.chatId,\n          classes = _this$props2.classes;\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    const is_pinned = chat.is_pinned,\n          unread_count = chat.unread_count;\n    const showUnreadMessageIcon = showChatUnreadMessageIcon(chatId);\n    const showUnreadMentionCount = showChatUnreadMentionCount(chatId);\n    const showUnreadCount = showChatUnreadCount(chatId);\n    const isMuted = isChatMuted(chatId);\n    return React.createElement(React.Fragment, null, showUnreadMessageIcon && React.createElement(\"i\", {\n      className: classNames('dialog-badge-unread', classes.unreadIcon),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), showUnreadMentionCount && React.createElement(\"div\", {\n      className: classNames('dialog-badge', classes.dialogBadge),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dialog-badge-mention\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"@\")), showUnreadCount && React.createElement(\"div\", {\n      className: classNames({\n        [classes.dialogBadgeMuted]: isMuted\n      }, 'dialog-badge', classes.dialogBadge),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"dialog-badge-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, unread_count > 0 ? unread_count : '')), is_pinned && !showUnreadMessageIcon && !showUnreadCount && !showUnreadMentionCount && React.createElement(\"i\", {\n      className: \"dialog-badge-pinned\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(DialogBadge);","map":{"version":3,"sources":["/home/me-admin/Downloads/my-app/src/Components/Tile/DialogBadge.js"],"names":["React","classNames","withStyles","isChatMuted","showChatUnreadCount","showChatUnreadMentionCount","showChatUnreadMessageIcon","ChatStore","NotificationStore","styles","theme","dialogBadge","background","palette","primary","main","dialogBadgeMuted","type","text","disabled","unreadIcon","DialogBadge","Component","onClientUpdateClearHistory","update","chatId","props","clearHistory","inProgress","forceUpdate","onFastUpdatingComplete","onUpdate","chat_id","onUpdateScopeNotificationSettings","chat","get","scope","shouldComponentUpdate","nextProps","nextState","componentDidMount","on","componentWillUnmount","removeListener","render","classes","is_pinned","unread_count","showUnreadMessageIcon","showUnreadMentionCount","showUnreadCount","isMuted","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    isChatMuted,\n    showChatUnreadCount,\n    showChatUnreadMentionCount,\n    showChatUnreadMessageIcon\n} from '../../Utils/Chat';\nimport ChatStore from '../../Stores/ChatStore';\nimport NotificationStore from '../../Stores/NotificationStore';\nimport './DialogBadge.css';\n\nconst styles = theme => ({\n    dialogBadge: {\n        background: theme.palette.primary.main\n    },\n    dialogBadgeMuted: {\n        background: theme.palette.type === 'dark' ? theme.palette.text.disabled : '#d8d8d8'\n    },\n    unreadIcon: {}\n});\n\nclass DialogBadge extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { chatId, theme } = this.props;\n\n        if (nextProps.chatId !== chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.on('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.on('updateChatDraftMessage', this.onUpdate);\n        ChatStore.on('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.on('updateChatIsPinned', this.onUpdate);\n        ChatStore.on('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.on('updateChatReadInbox', this.onUpdate);\n        ChatStore.on('updateChatLastMessage', this.onUpdate);\n        ChatStore.on('updateChatReadOutbox', this.onUpdate);\n        ChatStore.on('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.on('updateMessageMentionRead', this.onUpdate);\n        NotificationStore.on('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        ChatStore.removeListener('clientUpdateClearHistory', this.onClientUpdateClearHistory);\n        ChatStore.removeListener('updateChatDraftMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatIsMarkedAsUnread', this.onUpdate);\n        ChatStore.removeListener('updateChatIsPinned', this.onUpdate);\n        ChatStore.removeListener('updateChatNotificationSettings', this.onUpdate);\n        ChatStore.removeListener('updateChatReadInbox', this.onUpdate);\n        ChatStore.removeListener('updateChatLastMessage', this.onUpdate);\n        ChatStore.removeListener('updateChatReadOutbox', this.onUpdate);\n        ChatStore.removeListener('updateChatUnreadMentionCount', this.onUpdate);\n        ChatStore.removeListener('updateMessageMentionRead', this.onUpdate);\n        NotificationStore.removeListener('updateScopeNotificationSettings', this.onUpdateScopeNotificationSettings);\n    }\n\n    onClientUpdateClearHistory = update => {\n        const { chatId } = this.props;\n\n        if (chatId === update.chatId) {\n            this.clearHistory = update.inProgress;\n            this.forceUpdate();\n        }\n    };\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onUpdate = update => {\n        const { chatId } = this.props;\n\n        if (update.chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    onUpdateScopeNotificationSettings = update => {\n        const { chatId } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return;\n\n        switch (update.scope['@type']) {\n            case 'notificationSettingsScopeGroupChats': {\n                if (chat.type['@type'] === 'chatTypeBasicGroup' || chat.type['@type'] === 'chatTypeSupergroup') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n            case 'notificationSettingsScopePrivateChats': {\n                if (chat.type['@type'] === 'chatTypePrivate' || chat.type['@type'] === 'chatTypeSecret') {\n                    this.forceUpdate();\n                }\n                break;\n            }\n        }\n    };\n\n    render() {\n        if (this.clearHistory) return null;\n\n        const { chatId, classes } = this.props;\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { is_pinned, unread_count } = chat;\n\n        const showUnreadMessageIcon = showChatUnreadMessageIcon(chatId);\n        const showUnreadMentionCount = showChatUnreadMentionCount(chatId);\n        const showUnreadCount = showChatUnreadCount(chatId);\n        const isMuted = isChatMuted(chatId);\n\n        return (\n            <>\n                {showUnreadMessageIcon && <i className={classNames('dialog-badge-unread', classes.unreadIcon)} />}\n                {showUnreadMentionCount && (\n                    <div className={classNames('dialog-badge', classes.dialogBadge)}>\n                        <div className='dialog-badge-mention'>@</div>\n                    </div>\n                )}\n                {showUnreadCount && (\n                    <div\n                        className={classNames(\n                            { [classes.dialogBadgeMuted]: isMuted },\n                            'dialog-badge',\n                            classes.dialogBadge\n                        )}>\n                        <span className='dialog-badge-text'>{unread_count > 0 ? unread_count : ''}</span>\n                    </div>\n                )}\n                {is_pinned && !showUnreadMessageIcon && !showUnreadCount && !showUnreadMentionCount && (\n                    <i className='dialog-badge-pinned' />\n                )}\n            </>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(DialogBadge);\n"]},"metadata":{},"sourceType":"module"}