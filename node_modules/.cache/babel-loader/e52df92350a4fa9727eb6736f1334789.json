{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/ChatTile.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ChatStatus from './ChatStatus';\nimport { getChatLetters, isMeChat, isPrivateChat } from '../../Utils/Chat';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './ChatTile.css';\nconst styles = {\n  statusRoot: {\n    position: 'absolute',\n    right: 1,\n    bottom: 1,\n    zIndex: 1\n  },\n  statusIcon: {},\n  iconIndicator: {}\n};\n\nclass ChatTile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFastUpdatingComplete = update => {\n      this.forceUpdate();\n    };\n\n    this.onClientUpdateChatBlob = update => {\n      const chatId = this.props.chatId;\n      if (chatId !== update.chatId) return;\n\n      if (this.state.loaded) {\n        this.setState({\n          loaded: false\n        });\n      } else {\n        this.forceUpdate();\n      }\n    };\n\n    this.onUpdateChatPhoto = update => {\n      const chatId = this.props.chatId;\n      const chat_id = update.chat_id,\n            photo = update.photo;\n      if (chat_id !== chatId) return;\n\n      if (this.state.loaded) {\n        this.setState({\n          loaded: false\n        });\n      } else {\n        this.forceUpdate();\n      }\n\n      if (photo) {\n        const store = FileStore.getStore();\n        loadChatContent(store, chatId);\n      }\n    };\n\n    this.onUpdateChatTitle = update => {\n      const chatId = this.props.chatId;\n      const chat_id = update.chat_id;\n      if (chat_id !== chatId) return;\n      this.forceUpdate();\n    };\n\n    this.handleSelect = event => {\n      const _this$props = this.props,\n            chatId = _this$props.chatId,\n            onSelect = _this$props.onSelect;\n      if (!onSelect) return;\n      event.stopPropagation();\n      onSelect(chatId);\n    };\n\n    this.handleLoad = () => {\n      this.setState({\n        loaded: true\n      });\n    };\n\n    this.state = {\n      loaded: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.chatId !== this.props.chatId) {\n      return true;\n    }\n\n    if (nextProps.theme !== this.props.theme) {\n      return true;\n    }\n\n    if (nextState.loaded !== this.state.loaded) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n    ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n  }\n\n  componentWillUnmount() {\n    ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n    FileStore.removeListener('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n    ChatStore.removeListener('updateChatPhoto', this.onUpdateChatPhoto);\n    ChatStore.removeListener('updateChatTitle', this.onUpdateChatTitle);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          classes = _this$props2.classes,\n          chatId = _this$props2.chatId,\n          showOnline = _this$props2.showOnline,\n          showSavedMessages = _this$props2.showSavedMessages,\n          onSelect = _this$props2.onSelect;\n    const loaded = this.state.loaded;\n\n    if (isMeChat(chatId) && showSavedMessages) {\n      const className = classNames('tile-photo', 'tile_color_4', {\n        pointer: onSelect\n      });\n      return React.createElement(\"div\", {\n        className: \"chat-tile\",\n        onClick: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tile-saved-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(BookmarkBorderIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))));\n    }\n\n    const chat = ChatStore.get(chatId);\n    if (!chat) return null;\n    const photo = chat.photo;\n    const letters = getChatLetters(chat);\n    const src = getSrc(photo ? photo.small : null);\n    const tileLoaded = src && loaded;\n    const tileColor = \"tile_color_\".concat(Math.abs(chatId) % 8 + 1);\n    const className = classNames('tile-photo', {\n      [tileColor]: !tileLoaded\n    }, {\n      pointer: onSelect\n    });\n    return React.createElement(\"div\", {\n      className: \"chat-tile\",\n      onClick: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, !tileLoaded && React.createElement(\"div\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tile-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, letters)), src && React.createElement(\"img\", {\n      className: className,\n      src: src,\n      onLoad: this.handleLoad,\n      draggable: false,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), showOnline && isPrivateChat(chatId) && React.createElement(ChatStatus, {\n      chatId: chatId,\n      classes: {\n        root: classes.statusRoot,\n        icon: classes.statusIcon,\n        iconIndicator: classes.iconIndicator\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }));\n  }\n\n}\n\nChatTile.propTypes = {\n  classes: PropTypes.object,\n  chatId: PropTypes.number.isRequired,\n  onSelect: PropTypes.func,\n  showSavedMessages: PropTypes.bool,\n  showOnline: PropTypes.bool\n};\nChatTile.defaultProps = {\n  showSavedMessages: true,\n  showOnline: false\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(ChatTile);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Tile/ChatTile.js"],"names":["React","Component","PropTypes","classNames","withStyles","BookmarkBorderIcon","ChatStatus","getChatLetters","isMeChat","isPrivateChat","getSrc","loadChatContent","ChatStore","FileStore","styles","statusRoot","position","right","bottom","zIndex","statusIcon","iconIndicator","ChatTile","constructor","props","onFastUpdatingComplete","update","forceUpdate","onClientUpdateChatBlob","chatId","state","loaded","setState","onUpdateChatPhoto","chat_id","photo","store","getStore","onUpdateChatTitle","handleSelect","event","onSelect","stopPropagation","handleLoad","shouldComponentUpdate","nextProps","nextState","theme","componentDidMount","on","componentWillUnmount","removeListener","render","classes","showOnline","showSavedMessages","className","pointer","chat","get","letters","src","small","tileLoaded","tileColor","Math","abs","root","icon","propTypes","object","number","isRequired","func","bool","defaultProps","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ChatStatus from './ChatStatus';\nimport { getChatLetters, isMeChat, isPrivateChat } from '../../Utils/Chat';\nimport { getSrc, loadChatContent } from '../../Utils/File';\nimport ChatStore from '../../Stores/ChatStore';\nimport FileStore from '../../Stores/FileStore';\nimport './ChatTile.css';\n\nconst styles = {\n    statusRoot: {\n        position: 'absolute',\n        right: 1,\n        bottom: 1,\n        zIndex: 1\n    },\n    statusIcon: {},\n    iconIndicator: {}\n};\n\nclass ChatTile extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.chatId !== this.props.chatId) {\n            return true;\n        }\n\n        if (nextProps.theme !== this.props.theme) {\n            return true;\n        }\n\n        if (nextState.loaded !== this.state.loaded) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        ChatStore.on('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        FileStore.on('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n        ChatStore.on('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.on('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    componentWillUnmount() {\n        ChatStore.removeListener('clientUpdateFastUpdatingComplete', this.onFastUpdatingComplete);\n        FileStore.removeListener('clientUpdateChatBlob', this.onClientUpdateChatBlob);\n        ChatStore.removeListener('updateChatPhoto', this.onUpdateChatPhoto);\n        ChatStore.removeListener('updateChatTitle', this.onUpdateChatTitle);\n    }\n\n    onFastUpdatingComplete = update => {\n        this.forceUpdate();\n    };\n\n    onClientUpdateChatBlob = update => {\n        const { chatId } = this.props;\n\n        if (chatId !== update.chatId) return;\n\n        if (this.state.loaded) {\n            this.setState({ loaded: false });\n        } else {\n            this.forceUpdate();\n        }\n    };\n\n    onUpdateChatPhoto = update => {\n        const { chatId } = this.props;\n        const { chat_id, photo } = update;\n\n        if (chat_id !== chatId) return;\n\n        if (this.state.loaded) {\n            this.setState({ loaded: false });\n        } else {\n            this.forceUpdate();\n        }\n\n        if (photo) {\n            const store = FileStore.getStore();\n            loadChatContent(store, chatId);\n        }\n    };\n\n    onUpdateChatTitle = update => {\n        const { chatId } = this.props;\n        const { chat_id } = update;\n\n        if (chat_id !== chatId) return;\n\n        this.forceUpdate();\n    };\n\n    handleSelect = event => {\n        const { chatId, onSelect } = this.props;\n        if (!onSelect) return;\n\n        event.stopPropagation();\n        onSelect(chatId);\n    };\n\n    handleLoad = () => {\n        this.setState({ loaded: true });\n    };\n\n    render() {\n        const { classes, chatId, showOnline, showSavedMessages, onSelect } = this.props;\n        const { loaded } = this.state;\n\n        if (isMeChat(chatId) && showSavedMessages) {\n            const className = classNames('tile-photo', 'tile_color_4', { pointer: onSelect });\n            return (\n                <div className='chat-tile' onClick={this.handleSelect}>\n                    <div className={className}>\n                        <div className='tile-saved-messages'>\n                            <BookmarkBorderIcon />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        const chat = ChatStore.get(chatId);\n        if (!chat) return null;\n\n        const { photo } = chat;\n\n        const letters = getChatLetters(chat);\n        const src = getSrc(photo ? photo.small : null);\n        const tileLoaded = src && loaded;\n\n        const tileColor = `tile_color_${(Math.abs(chatId) % 8) + 1}`;\n        const className = classNames('tile-photo', { [tileColor]: !tileLoaded }, { pointer: onSelect });\n\n        return (\n            <div className='chat-tile' onClick={this.handleSelect}>\n                {!tileLoaded && (\n                    <div className={className}>\n                        <span className='tile-text'>{letters}</span>\n                    </div>\n                )}\n                {src && <img className={className} src={src} onLoad={this.handleLoad} draggable={false} alt='' />}\n\n                {showOnline && isPrivateChat(chatId) && (\n                    <ChatStatus\n                        chatId={chatId}\n                        classes={{\n                            root: classes.statusRoot,\n                            icon: classes.statusIcon,\n                            iconIndicator: classes.iconIndicator\n                        }}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nChatTile.propTypes = {\n    classes: PropTypes.object,\n    chatId: PropTypes.number.isRequired,\n    onSelect: PropTypes.func,\n    showSavedMessages: PropTypes.bool,\n    showOnline: PropTypes.bool\n};\n\nChatTile.defaultProps = {\n    showSavedMessages: true,\n    showOnline: false\n};\n\nexport default withStyles(styles, { withTheme: true })(ChatTile);\n"]},"metadata":{},"sourceType":"module"}