{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/Player/HeaderPlayer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport VolumeButton from '../Player/VolumeButton';\nimport RepeatButton from '../Player/RepeatButton';\nimport ShuffleButton from '../Player/ShuffleButton';\nimport PlaybackRateButton from './PlaybackRateButton';\nimport Time from '../Player/Time';\nimport Playlist from '../Player/Playlist';\nimport { borderStyle } from '../Theme';\nimport { getSrc } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport { getDurationString } from '../../Utils/Common';\nimport { getDate, getDateHint, getMediaTitle, hasAudio } from '../../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_FAST, PLAYER_PLAYBACKRATE_NORMAL, PLAYER_STARTTIME } from '../../Constants';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport FileStore from '../../Stores/FileStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './HeaderPlayer.css';\n\nconst styles = theme => _objectSpread({\n  iconButton: {\n    padding: 4\n  }\n}, borderStyle(theme));\n\nclass HeaderPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateMediaPlaybackRate = update => {\n      const playbackRate = update.playbackRate;\n      const player = this.videoRef.current;\n      if (!player) return;\n      player.playbackRate = playbackRate;\n    };\n\n    this.onClientUpdateMediaVolume = update => {\n      const volume = update.volume;\n      const player = this.videoRef.current;\n      if (!player) return;\n      player.volume = volume;\n    };\n\n    this.onClientUpdateMediaViewerContent = update => {\n      this.playingMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n    };\n\n    this.onClientUpdateMediaViewerEnded = update => {\n      this.playingMediaViewer = false;\n    };\n\n    this.onClientUpdateMediaViewerPause = update => {\n      this.playingMediaViewer = false;\n    };\n\n    this.onClientUpdateMediaViewerPlay = update => {\n      this.playingMediaViewer = true;\n      const player = this.videoRef.current;\n      if (!player) return;\n      player.pause();\n    };\n\n    this.startPlayingFile = (file, message) => {\n      const chat_id = message.chat_id,\n            id = message.id;\n      this.setState({\n        src: this.getMediaSrc(message)\n      }, () => {\n        const player = this.videoRef.current;\n\n        if (player) {\n          if (this.playingMediaViewer) {\n            player.pause();\n            TdLibController.clientUpdate({\n              '@type': 'clientUpdateMediaPause',\n              chatId: chat_id,\n              messageId: id\n            });\n          }\n        }\n      });\n    };\n\n    this.onClientUpdateMediaBlob = update => {\n      const chatId = update.chatId,\n            messageId = update.messageId;\n      const message = this.state.message;\n      if (!message) return;\n      const chat_id = message.chat_id,\n            id = message.id,\n            content = message.content;\n      if (!content) return;\n      if (chatId !== chat_id || messageId !== id) return;\n\n      switch (content['@type']) {\n        case 'messageText':\n          {\n            const web_page = content.web_page;\n\n            if (web_page) {\n              const audio = web_page.audio,\n                    voice_note = web_page.voice_note,\n                    video_note = web_page.video_note;\n\n              if (audio) {\n                const file = audio.audio;\n\n                if (file) {\n                  this.startPlayingFile(file, message);\n                }\n              }\n\n              if (voice_note) {\n                const voice = voice_note.voice;\n\n                if (voice) {\n                  this.startPlayingFile(voice, message);\n                }\n              }\n\n              if (video_note) {\n                const video = video_note.video;\n\n                if (video) {\n                  this.startPlayingFile(video, message);\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 'messageAudio':\n          {\n            const audio = content.audio;\n\n            if (audio) {\n              const file = audio.audio;\n\n              if (file) {\n                this.startPlayingFile(file, message);\n              }\n            }\n\n            break;\n          }\n\n        case 'messageVoiceNote':\n          {\n            const voice_note = content.voice_note;\n\n            if (voice_note) {\n              const voice = voice_note.voice;\n\n              if (voice) {\n                this.startPlayingFile(voice, message);\n              }\n            }\n\n            break;\n          }\n\n        case 'messageVideoNote':\n          {\n            const video_note = content.video_note;\n\n            if (video_note) {\n              const video = video_note.video;\n\n              if (video) {\n                this.startPlayingFile(video, message);\n              }\n            }\n\n            break;\n          }\n      }\n    };\n\n    this.onClientUpdateMediaPlaylist = update => {\n      const playlist = update.playlist;\n      const chatId = playlist.chatId,\n            messageId = playlist.messageId;\n      const message = this.state.message;\n\n      if (message && message.chat_id === chatId && message.id === messageId) {\n        this.setState({\n          playlist: playlist\n        });\n      }\n    };\n\n    this.onClientUpdateMediaClose = update => {\n      this.setState({\n        message: null,\n        playlist: null,\n        playing: false,\n        src: null\n      });\n    };\n\n    this.onClientUpdateMediaActive = update => {\n      const chatId = update.chatId,\n            messageId = update.messageId;\n      const _this$state = this.state,\n            message = _this$state.message,\n            src = _this$state.src;\n\n      if (message && message.chat_id === chatId && message.id === messageId) {\n        if (src) {\n          const player = this.videoRef.current;\n\n          if (player) {\n            if (player.paused) {\n              player.play();\n            } else {\n              player.pause();\n            }\n          }\n        }\n      } else {\n        const src = this.getMediaSrc(PlayerStore.message);\n        const playing = Boolean(src);\n        const playlist = PlayerStore.playlist;\n        this.setState({\n          message: PlayerStore.message,\n          playlist: PlayerStore.playlist,\n          playing: playing,\n          src: src\n        }, () => {\n          const player = this.videoRef.current;\n\n          if (player) {\n            player.currentTime = this.startTime;\n\n            if (this.playingMediaViewer) {\n              player.pause(); //this.handleVideoPause();\n            } else if (player.paused) {\n              player.play();\n            }\n          }\n        });\n      }\n    };\n\n    this.handlePrev = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPrev'\n      });\n    };\n\n    this.handlePlay = () => {\n      const message = this.state.message;\n      if (!message) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaActive',\n        chatId: message.chat_id,\n        messageId: message.id\n      });\n    };\n\n    this.handleNext = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaNext'\n      });\n    };\n\n    this.getMediaSrc = message => {\n      if (message) {\n        const content = message.content;\n\n        if (content) {\n          const audio = content.audio,\n                voice_note = content.voice_note,\n                video_note = content.video_note,\n                web_page = content.web_page;\n\n          if (audio) {\n            const file = audio.audio;\n\n            if (file) {\n              return getSrc(file);\n            }\n          }\n\n          if (voice_note) {\n            const voice = voice_note.voice;\n\n            if (voice) {\n              return getSrc(voice);\n            }\n          }\n\n          if (video_note) {\n            const video = video_note.video;\n\n            if (video) {\n              return getSrc(video);\n            }\n          }\n\n          if (web_page) {\n            if (web_page.audio) {\n              const file = web_page.audio.audio;\n\n              if (file) {\n                return getSrc(file);\n              }\n            }\n\n            if (web_page.voice_note) {\n              const voice = web_page.voice_note.voice;\n\n              if (voice) {\n                return getSrc(voice);\n              }\n            }\n\n            if (web_page.video_note) {\n              const video = web_page.video_note.video;\n\n              if (video) {\n                return getSrc(video);\n              }\n            }\n          }\n        }\n      }\n\n      return '';\n    };\n\n    this.handleEnded = (moveNext = true) => {\n      const message = this.state.message;\n      if (!message) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaEnding',\n        chatId: message.chat_id,\n        messageId: message.id,\n        moveNext: moveNext\n      });\n      this.setState({//playing: false,\n        //message: null,\n        //src: null\n      }, () => {\n        TdLibController.clientUpdate({\n          '@type': 'clientUpdateMediaEnd',\n          chatId: message.chat_id,\n          messageId: message.id,\n          moveNext: moveNext\n        });\n      });\n    };\n\n    this.handleVideoEnded = () => {\n      this.handleEnded(true);\n    };\n\n    this.handleClose = () => {\n      const player = this.videoRef.current;\n\n      if (player) {\n        player.pause();\n      }\n\n      this.handleEnded(false);\n    };\n\n    this.handleTimeUpdate = () => {\n      const message = this.state.message;\n      if (!message) return;\n      const player = this.videoRef.current;\n      if (!player) return;\n      this.setState({\n        currentTime: player.currentTime,\n        currentTimeString: getDurationString(Math.floor(player.currentTime || 0))\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaTime',\n        chatId: message.chat_id,\n        messageId: message.id,\n        duration: player.duration,\n        currentTime: player.currentTime,\n        timestamp: Date.now()\n      });\n    };\n\n    this.handleCanPlay = () => {\n      const message = this.state.message;\n      if (!message) return;\n      const player = this.videoRef.current;\n      if (!player) return;\n      const playbackRate = PlayerStore.playbackRate,\n            volume = PlayerStore.volume;\n      const chat_id = message.chat_id,\n            id = message.id;\n      const audio = hasAudio(chat_id, id);\n      player.playbackRate = audio ? PLAYER_PLAYBACKRATE_NORMAL : playbackRate;\n      player.volume = volume;\n      player.muted = false;\n\n      if (audio) {\n        return;\n      }\n\n      let stream = null;\n\n      if ('captureStream' in player) {\n        stream = player.captureStream();\n      } else if ('mozCaptureStream' in player) {\n        stream = player.mozCaptureStream();\n      }\n\n      if (!stream) {\n        return;\n      }\n\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaCaptureStream',\n        chatId: message.chat_id,\n        messageId: message.id,\n        stream: stream\n      });\n    };\n\n    this.handleVideoPlay = () => {\n      const message = this.state.message;\n      if (!message) return;\n      this.setState({\n        playing: true\n      });\n      const player = this.videoRef.current;\n      if (!player) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPlay',\n        chatId: message.chat_id,\n        messageId: message.id,\n        currentTime: player.currentTime,\n        duration: player.duration,\n        timestamp: Date.now()\n      });\n    };\n\n    this.handleVideoPause = () => {\n      const message = this.state.message;\n      if (!message) return;\n      this.setState({\n        playing: false\n      });\n      const player = this.videoRef.current;\n      if (!player) return;\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPause',\n        chatId: message.chat_id,\n        messageId: message.id\n      });\n    };\n\n    this.handlePlaybackRate = () => {\n      const playbackRate = this.state.playbackRate;\n      const nextPlaybackRate = playbackRate === PLAYER_PLAYBACKRATE_NORMAL ? PLAYER_PLAYBACKRATE_FAST : PLAYER_PLAYBACKRATE_NORMAL;\n      this.setState({\n        playbackRate: nextPlaybackRate\n      }, () => {\n        const player = this.videoRef.current;\n        if (!player) return;\n        player.playbackRate = nextPlaybackRate;\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaPlaybackRate',\n        playbackRate: nextPlaybackRate\n      });\n    };\n\n    this.hasPrev = (message, playlist) => {\n      if (!message) return false;\n      if (!playlist || !playlist.messages.length) return false;\n      const chat_id = message.chat_id,\n            id = message.id;\n      const index = playlist.messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n      if (index === -1) return false;\n      return index + 1 < playlist.messages.length;\n    };\n\n    this.hasNext = (message, playlist) => {\n      if (!message) return false;\n      if (!playlist || !playlist.messages.length) return false;\n      const chat_id = message.chat_id,\n            id = message.id;\n      const index = playlist.messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n      if (index === -1) return false;\n      return index - 1 >= 0;\n    };\n\n    this.handleTitleMouseEnter = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaTitleMouseOver',\n        over: true\n      });\n    };\n\n    this.handleTitleMouseLeave = () => {\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdateMediaTitleMouseOver',\n        over: false\n      });\n    };\n\n    this.handleTitleClick = () => {\n      const message = this.state.message;\n      if (!message) return;\n      openChat(message.chat_id, message.id);\n    };\n\n    this.videoRef = React.createRef();\n    const _message = PlayerStore.message,\n          _playlist = PlayerStore.playlist;\n    this.startTime = PLAYER_STARTTIME;\n    this.state = {\n      currentTime: 0,\n      currentTimeString: getDurationString(0),\n      message: _message,\n      playlist: _playlist,\n      playing: false,\n      src: this.getMediaSrc(_message)\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    const theme = this.props.theme;\n    const _this$state2 = this.state,\n          message = _this$state2.message,\n          playlist = _this$state2.playlist,\n          src = _this$state2.src,\n          playing = _this$state2.playing;\n\n    if (nextProps.theme !== theme) {\n      return true;\n    }\n\n    if (nextState.message !== message) {\n      return true;\n    }\n\n    if (nextState.playlist !== playlist) {\n      return true;\n    }\n\n    if (nextState.src !== src) {\n      return true;\n    }\n\n    if (nextState.playing !== playing) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    FileStore.on('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n    FileStore.on('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n    PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.on('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n    PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n    PlayerStore.on('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n    PlayerStore.on('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n    PlayerStore.on('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n    PlayerStore.on('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n    PlayerStore.on('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n    ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n  }\n\n  componentWillUnmount() {\n    FileStore.removeListener('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n    FileStore.removeListener('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n    PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n    PlayerStore.removeListener('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n    PlayerStore.removeListener('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n    PlayerStore.removeListener('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n    PlayerStore.removeListener('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n    PlayerStore.removeListener('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n    PlayerStore.removeListener('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n    PlayerStore.removeListener('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n    ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state3 = this.state,\n          playing = _this$state3.playing,\n          message = _this$state3.message,\n          playlist = _this$state3.playlist,\n          src = _this$state3.src;\n    let audio = false;\n\n    if (message) {\n      const chat_id = message.chat_id,\n            id = message.id;\n      audio = hasAudio(chat_id, id);\n    }\n\n    const date = message ? message.date : null;\n    const title = getMediaTitle(message);\n    const dateHintStr = getDateHint(date);\n    const dateStr = getDate(date);\n    const showDate = !audio;\n    const showPlaybackRate = !audio;\n    const showRepeat = audio;\n    const showShuffle = audio;\n    const hasPrev = this.hasPrev(message, playlist);\n    const hasNext = this.hasNext(message, playlist);\n    return React.createElement(React.Fragment, null, React.createElement(\"video\", {\n      className: \"header-player-video\",\n      ref: this.videoRef,\n      src: src,\n      autoPlay: true,\n      controls: false,\n      width: 44,\n      height: 44,\n      onCanPlay: this.handleCanPlay,\n      onPlay: this.handleVideoPlay,\n      onPause: this.handleVideoPause,\n      onTimeUpdate: this.handleTimeUpdate,\n      onEnded: this.handleVideoEnded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }), message && React.createElement(\"div\", {\n      className: classNames(classes.borderColor, 'header-player'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      disabled: !hasPrev,\n      className: classes.iconButton,\n      color: \"primary\",\n      onClick: this.handlePrev,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, React.createElement(SkipPreviousIcon, {\n      fontSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      className: classes.iconButton,\n      color: \"primary\",\n      disabled: !src,\n      onClick: this.handlePlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, playing ? React.createElement(PauseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }) : React.createElement(PlayArrowIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      disabled: !hasNext,\n      className: classes.iconButton,\n      color: \"primary\",\n      onClick: this.handleNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(SkipNextIcon, {\n      fontSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    })), React.createElement(Playlist, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header-player-content\",\n      onMouseEnter: this.handleTitleMouseEnter,\n      onMouseLeave: this.handleTitleMouseLeave,\n      onClick: this.handleTitleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-player-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, title, showDate && React.createElement(\"span\", {\n      title: dateHintStr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"\\xA0\", dateStr)), \"\\xA0\", React.createElement(Time, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    })), React.createElement(VolumeButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), showPlaybackRate && React.createElement(PlaybackRateButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }), showRepeat && React.createElement(RepeatButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }), showShuffle && React.createElement(ShuffleButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      className: classes.iconButton,\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      fontSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst enhance = compose(withTranslation(), withStyles(styles, {\n  withTheme: true\n}));\nexport default enhance(HeaderPlayer);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/Player/HeaderPlayer.js"],"names":["React","classNames","compose","withTranslation","withStyles","PlayArrowIcon","PauseIcon","SkipNextIcon","SkipPreviousIcon","CloseIcon","IconButton","VolumeButton","RepeatButton","ShuffleButton","PlaybackRateButton","Time","Playlist","borderStyle","getSrc","openChat","getDurationString","getDate","getDateHint","getMediaTitle","hasAudio","PLAYER_PLAYBACKRATE_FAST","PLAYER_PLAYBACKRATE_NORMAL","PLAYER_STARTTIME","PlayerStore","FileStore","ApplicationStore","TdLibController","styles","theme","iconButton","padding","HeaderPlayer","Component","constructor","props","onClientUpdateMediaPlaybackRate","update","playbackRate","player","videoRef","current","onClientUpdateMediaVolume","volume","onClientUpdateMediaViewerContent","playingMediaViewer","Boolean","mediaViewerContent","onClientUpdateMediaViewerEnded","onClientUpdateMediaViewerPause","onClientUpdateMediaViewerPlay","pause","startPlayingFile","file","message","chat_id","id","setState","src","getMediaSrc","clientUpdate","chatId","messageId","onClientUpdateMediaBlob","state","content","web_page","audio","voice_note","video_note","voice","video","onClientUpdateMediaPlaylist","playlist","onClientUpdateMediaClose","playing","onClientUpdateMediaActive","paused","play","currentTime","startTime","handlePrev","handlePlay","handleNext","handleEnded","moveNext","handleVideoEnded","handleClose","handleTimeUpdate","currentTimeString","Math","floor","duration","timestamp","Date","now","handleCanPlay","muted","stream","captureStream","mozCaptureStream","handleVideoPlay","handleVideoPause","handlePlaybackRate","nextPlaybackRate","hasPrev","messages","length","index","findIndex","x","hasNext","handleTitleMouseEnter","over","handleTitleMouseLeave","handleTitleClick","createRef","shouldComponentUpdate","nextProps","nextState","nextContext","componentDidMount","on","componentWillUnmount","removeListener","render","classes","date","title","dateHintStr","dateStr","showDate","showPlaybackRate","showRepeat","showShuffle","borderColor","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport VolumeButton from '../Player/VolumeButton';\nimport RepeatButton from '../Player/RepeatButton';\nimport ShuffleButton from '../Player/ShuffleButton';\nimport PlaybackRateButton from './PlaybackRateButton';\nimport Time from '../Player/Time';\nimport Playlist from '../Player/Playlist';\nimport { borderStyle } from '../Theme';\nimport { getSrc } from '../../Utils/File';\nimport { openChat } from '../../Actions/Client';\nimport { getDurationString } from '../../Utils/Common';\nimport { getDate, getDateHint, getMediaTitle, hasAudio } from '../../Utils/Message';\nimport { PLAYER_PLAYBACKRATE_FAST, PLAYER_PLAYBACKRATE_NORMAL, PLAYER_STARTTIME } from '../../Constants';\nimport PlayerStore from '../../Stores/PlayerStore';\nimport FileStore from '../../Stores/FileStore';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './HeaderPlayer.css';\n\nconst styles = theme => ({\n    iconButton: {\n        padding: 4\n    },\n    ...borderStyle(theme)\n});\n\nclass HeaderPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n\n        const { message, playlist } = PlayerStore;\n\n        this.startTime = PLAYER_STARTTIME;\n\n        this.state = {\n            currentTime: 0,\n            currentTimeString: getDurationString(0),\n            message: message,\n            playlist: playlist,\n            playing: false,\n            src: this.getMediaSrc(message)\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { theme } = this.props;\n        const { message, playlist, src, playing } = this.state;\n\n        if (nextProps.theme !== theme) {\n            return true;\n        }\n\n        if (nextState.message !== message) {\n            return true;\n        }\n\n        if (nextState.playlist !== playlist) {\n            return true;\n        }\n\n        if (nextState.src !== src) {\n            return true;\n        }\n\n        if (nextState.playing !== playing) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        FileStore.on('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.on('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n        PlayerStore.on('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.on('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n        PlayerStore.on('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.on('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n        PlayerStore.on('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n        PlayerStore.on('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n        PlayerStore.on('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n        PlayerStore.on('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n\n        ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n\n    componentWillUnmount() {\n        FileStore.removeListener('clientUpdateVoiceNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateVideoNoteBlob', this.onClientUpdateMediaBlob);\n        FileStore.removeListener('clientUpdateAudioBlob', this.onClientUpdateMediaBlob);\n        PlayerStore.removeListener('clientUpdateMediaActive', this.onClientUpdateMediaActive);\n        PlayerStore.removeListener('clientUpdateMediaClose', this.onClientUpdateMediaClose);\n        PlayerStore.removeListener('clientUpdateMediaPlaylist', this.onClientUpdateMediaPlaylist);\n        PlayerStore.removeListener('clientUpdateMediaViewerPlay', this.onClientUpdateMediaViewerPlay);\n        PlayerStore.removeListener('clientUpdateMediaViewerPause', this.onClientUpdateMediaViewerPause);\n        PlayerStore.removeListener('clientUpdateMediaViewerEnded', this.onClientUpdateMediaViewerEnded);\n        PlayerStore.removeListener('clientUpdateMediaVolume', this.onClientUpdateMediaVolume);\n        PlayerStore.removeListener('clientUpdateMediaPlaybackRate', this.onClientUpdateMediaPlaybackRate);\n\n        ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    }\n\n    onClientUpdateMediaPlaybackRate = update => {\n        const { playbackRate } = update;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        player.playbackRate = playbackRate;\n    };\n\n    onClientUpdateMediaVolume = update => {\n        const { volume } = update;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        player.volume = volume;\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.playingMediaViewer = Boolean(ApplicationStore.mediaViewerContent);\n    };\n\n    onClientUpdateMediaViewerEnded = update => {\n        this.playingMediaViewer = false;\n    };\n\n    onClientUpdateMediaViewerPause = update => {\n        this.playingMediaViewer = false;\n    };\n\n    onClientUpdateMediaViewerPlay = update => {\n        this.playingMediaViewer = true;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        player.pause();\n    };\n\n    startPlayingFile = (file, message) => {\n        const { chat_id, id } = message;\n\n        this.setState(\n            {\n                src: this.getMediaSrc(message)\n            },\n            () => {\n                const player = this.videoRef.current;\n                if (player) {\n                    if (this.playingMediaViewer) {\n                        player.pause();\n\n                        TdLibController.clientUpdate({\n                            '@type': 'clientUpdateMediaPause',\n                            chatId: chat_id,\n                            messageId: id\n                        });\n                    }\n                }\n            }\n        );\n    };\n\n    onClientUpdateMediaBlob = update => {\n        const { chatId, messageId } = update;\n        const { message } = this.state;\n\n        if (!message) return;\n\n        const { chat_id, id, content } = message;\n        if (!content) return;\n        if (chatId !== chat_id || messageId !== id) return;\n\n        switch (content['@type']) {\n            case 'messageText': {\n                const { web_page } = content;\n                if (web_page) {\n                    const { audio, voice_note, video_note } = web_page;\n\n                    if (audio) {\n                        const file = audio.audio;\n                        if (file) {\n                            this.startPlayingFile(file, message);\n                        }\n                    }\n\n                    if (voice_note) {\n                        const { voice } = voice_note;\n                        if (voice) {\n                            this.startPlayingFile(voice, message);\n                        }\n                    }\n\n                    if (video_note) {\n                        const { video } = video_note;\n                        if (video) {\n                            this.startPlayingFile(video, message);\n                        }\n                    }\n                }\n\n                break;\n            }\n            case 'messageAudio': {\n                const { audio } = content;\n                if (audio) {\n                    const file = audio.audio;\n                    if (file) {\n                        this.startPlayingFile(file, message);\n                    }\n                }\n\n                break;\n            }\n            case 'messageVoiceNote': {\n                const { voice_note } = content;\n                if (voice_note) {\n                    const { voice } = voice_note;\n                    if (voice) {\n                        this.startPlayingFile(voice, message);\n                    }\n                }\n\n                break;\n            }\n            case 'messageVideoNote': {\n                const { video_note } = content;\n                if (video_note) {\n                    const { video } = video_note;\n                    if (video) {\n                        this.startPlayingFile(video, message);\n                    }\n                }\n\n                break;\n            }\n        }\n    };\n\n    onClientUpdateMediaPlaylist = update => {\n        const { playlist } = update;\n        const { chatId, messageId } = playlist;\n        const { message } = this.state;\n\n        if (message && message.chat_id === chatId && message.id === messageId) {\n            this.setState({ playlist: playlist });\n        }\n    };\n\n    onClientUpdateMediaClose = update => {\n        this.setState({\n            message: null,\n            playlist: null,\n            playing: false,\n            src: null\n        });\n    };\n\n    onClientUpdateMediaActive = update => {\n        const { chatId, messageId } = update;\n        const { message, src } = this.state;\n\n        if (message && message.chat_id === chatId && message.id === messageId) {\n            if (src) {\n                const player = this.videoRef.current;\n                if (player) {\n                    if (player.paused) {\n                        player.play();\n                    } else {\n                        player.pause();\n                    }\n                }\n            }\n        } else {\n            const src = this.getMediaSrc(PlayerStore.message);\n            const playing = Boolean(src);\n            const playlist = PlayerStore.playlist;\n            this.setState(\n                {\n                    message: PlayerStore.message,\n                    playlist: PlayerStore.playlist,\n                    playing: playing,\n                    src: src\n                },\n                () => {\n                    const player = this.videoRef.current;\n                    if (player) {\n                        player.currentTime = this.startTime;\n                        if (this.playingMediaViewer) {\n                            player.pause();\n\n                            //this.handleVideoPause();\n                        } else if (player.paused) {\n                            player.play();\n                        }\n                    }\n                }\n            );\n        }\n    };\n\n    handlePrev = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPrev'\n        });\n    };\n\n    handlePlay = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaActive',\n            chatId: message.chat_id,\n            messageId: message.id\n        });\n    };\n\n    handleNext = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaNext'\n        });\n    };\n\n    getMediaSrc = message => {\n        if (message) {\n            const { content } = message;\n            if (content) {\n                const { audio, voice_note, video_note, web_page } = content;\n\n                if (audio) {\n                    const file = audio.audio;\n                    if (file) {\n                        return getSrc(file);\n                    }\n                }\n\n                if (voice_note) {\n                    const { voice } = voice_note;\n                    if (voice) {\n                        return getSrc(voice);\n                    }\n                }\n\n                if (video_note) {\n                    const { video } = video_note;\n                    if (video) {\n                        return getSrc(video);\n                    }\n                }\n\n                if (web_page) {\n                    if (web_page.audio) {\n                        const file = web_page.audio.audio;\n                        if (file) {\n                            return getSrc(file);\n                        }\n                    }\n\n                    if (web_page.voice_note) {\n                        const { voice } = web_page.voice_note;\n                        if (voice) {\n                            return getSrc(voice);\n                        }\n                    }\n\n                    if (web_page.video_note) {\n                        const { video } = web_page.video_note;\n                        if (video) {\n                            return getSrc(video);\n                        }\n                    }\n                }\n            }\n        }\n\n        return '';\n    };\n\n    handleEnded = (moveNext = true) => {\n        const { message } = this.state;\n        if (!message) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaEnding',\n            chatId: message.chat_id,\n            messageId: message.id,\n            moveNext: moveNext\n        });\n\n        this.setState(\n            {\n                //playing: false,\n                //message: null,\n                //src: null\n            },\n            () => {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateMediaEnd',\n                    chatId: message.chat_id,\n                    messageId: message.id,\n                    moveNext: moveNext\n                });\n            }\n        );\n    };\n\n    handleVideoEnded = () => {\n        this.handleEnded(true);\n    };\n\n    handleClose = () => {\n        const player = this.videoRef.current;\n        if (player) {\n            player.pause();\n        }\n\n        this.handleEnded(false);\n    };\n\n    handleTimeUpdate = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        this.setState({\n            currentTime: player.currentTime,\n            currentTimeString: getDurationString(Math.floor(player.currentTime || 0))\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaTime',\n            chatId: message.chat_id,\n            messageId: message.id,\n            duration: player.duration,\n            currentTime: player.currentTime,\n            timestamp: Date.now()\n        });\n    };\n\n    handleCanPlay = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        const { playbackRate, volume } = PlayerStore;\n\n        const { chat_id, id } = message;\n        const audio = hasAudio(chat_id, id);\n\n        player.playbackRate = audio ? PLAYER_PLAYBACKRATE_NORMAL : playbackRate;\n        player.volume = volume;\n        player.muted = false;\n\n        if (audio) {\n            return;\n        }\n\n        let stream = null;\n        if ('captureStream' in player) {\n            stream = player.captureStream();\n        } else if ('mozCaptureStream' in player) {\n            stream = player.mozCaptureStream();\n        }\n\n        if (!stream) {\n            return;\n        }\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaCaptureStream',\n            chatId: message.chat_id,\n            messageId: message.id,\n            stream: stream\n        });\n    };\n\n    handleVideoPlay = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        this.setState({\n            playing: true\n        });\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlay',\n            chatId: message.chat_id,\n            messageId: message.id,\n            currentTime: player.currentTime,\n            duration: player.duration,\n            timestamp: Date.now()\n        });\n    };\n\n    handleVideoPause = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        this.setState({\n            playing: false\n        });\n\n        const player = this.videoRef.current;\n        if (!player) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPause',\n            chatId: message.chat_id,\n            messageId: message.id\n        });\n    };\n\n    handlePlaybackRate = () => {\n        const { playbackRate } = this.state;\n\n        const nextPlaybackRate =\n            playbackRate === PLAYER_PLAYBACKRATE_NORMAL ? PLAYER_PLAYBACKRATE_FAST : PLAYER_PLAYBACKRATE_NORMAL;\n\n        this.setState(\n            {\n                playbackRate: nextPlaybackRate\n            },\n            () => {\n                const player = this.videoRef.current;\n                if (!player) return;\n\n                player.playbackRate = nextPlaybackRate;\n            }\n        );\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaPlaybackRate',\n            playbackRate: nextPlaybackRate\n        });\n    };\n\n    hasPrev = (message, playlist) => {\n        if (!message) return false;\n        if (!playlist || !playlist.messages.length) return false;\n\n        const { chat_id, id } = message;\n\n        const index = playlist.messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return false;\n\n        return index + 1 < playlist.messages.length;\n    };\n\n    hasNext = (message, playlist) => {\n        if (!message) return false;\n        if (!playlist || !playlist.messages.length) return false;\n\n        const { chat_id, id } = message;\n\n        const index = playlist.messages.findIndex(x => x.chat_id === chat_id && x.id === id);\n        if (index === -1) return false;\n\n        return index - 1 >= 0;\n    };\n\n    handleTitleMouseEnter = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaTitleMouseOver',\n            over: true\n        });\n    };\n\n    handleTitleMouseLeave = () => {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateMediaTitleMouseOver',\n            over: false\n        });\n    };\n\n    handleTitleClick = () => {\n        const { message } = this.state;\n        if (!message) return;\n\n        openChat(message.chat_id, message.id);\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { playing, message, playlist, src } = this.state;\n\n        let audio = false;\n        if (message) {\n            const { chat_id, id } = message;\n            audio = hasAudio(chat_id, id);\n        }\n\n        const date = message ? message.date : null;\n\n        const title = getMediaTitle(message);\n        const dateHintStr = getDateHint(date);\n        const dateStr = getDate(date);\n        const showDate = !audio;\n        const showPlaybackRate = !audio;\n        const showRepeat = audio;\n        const showShuffle = audio;\n        const hasPrev = this.hasPrev(message, playlist);\n        const hasNext = this.hasNext(message, playlist);\n\n        return (\n            <>\n                <video\n                    className='header-player-video'\n                    ref={this.videoRef}\n                    src={src}\n                    autoPlay={true}\n                    controls={false}\n                    width={44}\n                    height={44}\n                    onCanPlay={this.handleCanPlay}\n                    onPlay={this.handleVideoPlay}\n                    onPause={this.handleVideoPause}\n                    onTimeUpdate={this.handleTimeUpdate}\n                    onEnded={this.handleVideoEnded}\n                />\n                {message && (\n                    <div className={classNames(classes.borderColor, 'header-player')}>\n                        <IconButton\n                            disabled={!hasPrev}\n                            className={classes.iconButton}\n                            color='primary'\n                            onClick={this.handlePrev}>\n                            <SkipPreviousIcon fontSize='small' />\n                        </IconButton>\n                        <IconButton\n                            className={classes.iconButton}\n                            color='primary'\n                            disabled={!src}\n                            onClick={this.handlePlay}>\n                            {playing ? <PauseIcon /> : <PlayArrowIcon />}\n                        </IconButton>\n                        <IconButton\n                            disabled={!hasNext}\n                            className={classes.iconButton}\n                            color='primary'\n                            onClick={this.handleNext}>\n                            <SkipNextIcon fontSize='small' />\n                        </IconButton>\n                        <Playlist />\n                        <div\n                            className='header-player-content'\n                            onMouseEnter={this.handleTitleMouseEnter}\n                            onMouseLeave={this.handleTitleMouseLeave}\n                            onClick={this.handleTitleClick}>\n                            <div className='header-player-title'>\n                                {title}\n                                {showDate && (\n                                    <span title={dateHintStr}>\n                                        &nbsp;\n                                        {dateStr}\n                                    </span>\n                                )}\n                            </div>\n                            &nbsp;\n                            <Time />\n                        </div>\n                        <VolumeButton />\n                        {showPlaybackRate && <PlaybackRateButton />}\n                        {showRepeat && <RepeatButton />}\n                        {showShuffle && <ShuffleButton />}\n                        <IconButton className={classes.iconButton} onClick={this.handleClose}>\n                            <CloseIcon fontSize='small' />\n                        </IconButton>\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withStyles(styles, { withTheme: true })\n);\n\nexport default enhance(HeaderPlayer);\n"]},"metadata":{},"sourceType":"module"}