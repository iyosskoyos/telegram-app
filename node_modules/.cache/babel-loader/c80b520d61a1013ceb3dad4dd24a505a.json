{"ast":null,"code":"import _defineProperty from \"/home/chilly/Projects/Capacitor/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/Popup/CreatePollOption.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/es/Typography/Typography';\nimport { focusNode } from '../../Utils/Component';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { utils } from '../../Utils/Key';\nimport { borderStyle } from '../Theme';\nimport { POLL_OPTION_HINT_LENGTH, POLL_OPTION_LENGTH, POLL_OPTION_MAX_LENGTH } from '../../Constants';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './CreatePollOption.css';\n\nconst styles = theme => _objectSpread({\n  iconButton: {\n    padding: 4\n  },\n  counterRoot: {\n    position: 'absolute',\n    right: 24,\n    bottom: 6,\n    minWidth: 28,\n    userSelect: 'none'\n  }\n}, borderStyle(theme));\n\nclass CreatePollOption extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getText = () => {\n      return this.optionTextRef.current.innerText;\n    };\n\n    this.focus = (toEnd = false) => {\n      const node = this.optionTextRef.current;\n      focusNode(node, toEnd);\n    };\n\n    this.handleDelete = () => {\n      const _this$props = this.props,\n            option = _this$props.option,\n            onDelete = _this$props.onDelete;\n      if (!option) return;\n      if (!onDelete) return;\n      onDelete(option.id);\n    };\n\n    this.handleInput = event => {\n      const option = this.props.option;\n      event.preventDefault();\n      const node = this.optionTextRef.current;\n      const length = node.dataset.length;\n      const maxLength = node.dataset.maxLength;\n      const text = this.getText();\n      this.setState({\n        remainLength: length - text.length\n      });\n      TdLibController.clientUpdate({\n        '@type': 'clientUpdatePollOption',\n        id: option.id,\n        text\n      });\n    };\n\n    this.handleKeyDown = event => {\n      const node = this.optionTextRef.current;\n      const maxLength = node.dataset.maxLength;\n      const innerText = this.getText();\n      const length = innerText.length;\n      let hasSelection = false;\n      const selection = window.getSelection();\n      const isSpecial = utils.isSpecial(event);\n      const isNavigational = utils.isNavigational(event);\n\n      if (selection) {\n        hasSelection = !!selection.toString();\n      }\n\n      switch (event.key) {\n        case 'Backspace':\n          {\n            const text = this.getText();\n\n            if (!text) {\n              const _this$props2 = this.props,\n                    option = _this$props2.option,\n                    onDelete = _this$props2.onDelete;\n\n              if (onDelete) {\n                onDelete(option.id, true);\n              }\n\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n\n        case 'Enter':\n          {\n            const _this$props3 = this.props,\n                  option = _this$props3.option,\n                  onFocusNext = _this$props3.onFocusNext;\n\n            if (option && onFocusNext) {\n              onFocusNext(option.id);\n            }\n\n            event.preventDefault();\n            return false;\n          }\n\n        case 'ArrowUp':\n          {\n            const selection = window.getSelection();\n            if (!selection) break;\n            if (!selection.isCollapsed) break;\n            const firstChild = node.childNodes && node.childNodes.length > 0 ? node.childNodes[0] : null;\n\n            if (!firstChild || selection.anchorNode === firstChild && !selection.anchorOffset) {\n              const _this$props4 = this.props,\n                    option = _this$props4.option,\n                    onFocusPrev = _this$props4.onFocusPrev;\n\n              if (onFocusPrev) {\n                onFocusPrev(option.id);\n              }\n\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n\n        case 'ArrowDown':\n          {\n            const selection = window.getSelection();\n            if (!selection) break;\n            if (!selection.isCollapsed) break;\n            const lastChild = node.childNodes && node.childNodes.length > 0 ? node.childNodes[node.childNodes.length - 1] : null;\n\n            if (!lastChild || selection.anchorNode === lastChild && selection.anchorOffset === lastChild.length) {\n              const _this$props5 = this.props,\n                    option = _this$props5.option,\n                    onFocusNext = _this$props5.onFocusNext;\n\n              if (onFocusNext) {\n                onFocusNext(option.id);\n              }\n\n              event.preventDefault();\n              return false;\n            }\n\n            break;\n          }\n      }\n\n      if (isSpecial || isNavigational) {\n        return true;\n      }\n\n      if (length >= maxLength && !hasSelection) {\n        event.preventDefault();\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handlePaste = event => {\n      event.preventDefault();\n      const node = this.optionTextRef.current;\n      const maxLength = node.dataset.maxLength;\n      const selection = window.getSelection();\n      const selectionString = selection ? selection.toString() : '';\n      const innerText = this.getText();\n      if (innerText.length - selection.length >= maxLength) return;\n      let pasteText = event.clipboardData.getData('text/plain');\n      if (!pasteText) return;\n      pasteText = pasteText.replace('\\r\\n', '\\n').replace('\\n', ' ');\n\n      if (innerText.length - selectionString.length + pasteText.length > maxLength) {\n        pasteText = pasteText.substr(0, maxLength - innerText.length + selectionString.length);\n      }\n\n      document.execCommand('insertHTML', false, pasteText);\n    };\n\n    this.optionTextRef = React.createRef();\n    this.state = {\n      remainLength: POLL_OPTION_MAX_LENGTH\n    };\n  }\n\n  render() {\n    const _this$props6 = this.props,\n          classes = _this$props6.classes,\n          t = _this$props6.t;\n    const remainLength = this.state.remainLength;\n    return React.createElement(\"div\", {\n      className: \"create-poll-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.optionTextRef,\n      id: \"create-poll-option-text\",\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      placeholder: t('Option'),\n      \"data-length\": POLL_OPTION_LENGTH,\n      \"data-max-length\": POLL_OPTION_MAX_LENGTH,\n      onInput: this.handleInput,\n      onKeyDown: this.handleKeyDown,\n      onPaste: this.handlePaste,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"create-poll-option-delete-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: classes.iconButton,\n      onClick: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      fontSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: classNames('create-poll-option-bottom-border', {\n        [classes.borderColor]: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), remainLength <= POLL_OPTION_LENGTH - POLL_OPTION_HINT_LENGTH && React.createElement(Typography, {\n      align: \"center\",\n      className: classes.counterRoot,\n      color: remainLength >= 0 ? 'textSecondary' : 'error',\n      variant: \"subtitle1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, remainLength));\n  }\n\n}\n\nCreatePollOption.propTypes = {\n  option: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onFocusPrev: PropTypes.func.isRequired,\n  onFocusNext: PropTypes.func.isRequired\n};\nconst enhance = compose(withSaveRef(), withStyles(styles), withTranslation(), withRestoreRef());\nexport default enhance(CreatePollOption);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/Popup/CreatePollOption.js"],"names":["React","PropTypes","classNames","compose","withStyles","withTranslation","CloseIcon","IconButton","Typography","focusNode","withRestoreRef","withSaveRef","utils","borderStyle","POLL_OPTION_HINT_LENGTH","POLL_OPTION_LENGTH","POLL_OPTION_MAX_LENGTH","TdLibController","styles","theme","iconButton","padding","counterRoot","position","right","bottom","minWidth","userSelect","CreatePollOption","Component","constructor","props","getText","optionTextRef","current","innerText","focus","toEnd","node","handleDelete","option","onDelete","id","handleInput","event","preventDefault","length","dataset","maxLength","text","setState","remainLength","clientUpdate","handleKeyDown","hasSelection","selection","window","getSelection","isSpecial","isNavigational","toString","key","onFocusNext","isCollapsed","firstChild","childNodes","anchorNode","anchorOffset","onFocusPrev","lastChild","handlePaste","selectionString","pasteText","clipboardData","getData","replace","substr","document","execCommand","createRef","state","render","classes","t","borderColor","propTypes","object","isRequired","func","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/es/Typography/Typography';\nimport { focusNode } from '../../Utils/Component';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { utils } from '../../Utils/Key';\nimport { borderStyle } from '../Theme';\nimport { POLL_OPTION_HINT_LENGTH, POLL_OPTION_LENGTH, POLL_OPTION_MAX_LENGTH } from '../../Constants';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './CreatePollOption.css';\n\nconst styles = theme => ({\n    iconButton: {\n        padding: 4\n    },\n    counterRoot: {\n        position: 'absolute',\n        right: 24,\n        bottom: 6,\n        minWidth: 28,\n        userSelect: 'none'\n    },\n    ...borderStyle(theme)\n});\n\nclass CreatePollOption extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.optionTextRef = React.createRef();\n\n        this.state = {\n            remainLength: POLL_OPTION_MAX_LENGTH\n        };\n    }\n\n    getText = () => {\n        return this.optionTextRef.current.innerText;\n    };\n\n    focus = (toEnd = false) => {\n        const node = this.optionTextRef.current;\n\n        focusNode(node, toEnd);\n    };\n\n    handleDelete = () => {\n        const { option, onDelete } = this.props;\n        if (!option) return;\n        if (!onDelete) return;\n\n        onDelete(option.id);\n    };\n\n    handleInput = event => {\n        const { option } = this.props;\n\n        event.preventDefault();\n\n        const node = this.optionTextRef.current;\n        const length = node.dataset.length;\n        const maxLength = node.dataset.maxLength;\n        const text = this.getText();\n\n        this.setState({\n            remainLength: length - text.length\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdatePollOption',\n            id: option.id,\n            text\n        });\n    };\n\n    handleKeyDown = event => {\n        const node = this.optionTextRef.current;\n        const maxLength = node.dataset.maxLength;\n        const innerText = this.getText();\n        const length = innerText.length;\n\n        let hasSelection = false;\n        const selection = window.getSelection();\n        const isSpecial = utils.isSpecial(event);\n        const isNavigational = utils.isNavigational(event);\n\n        if (selection) {\n            hasSelection = !!selection.toString();\n        }\n\n        switch (event.key) {\n            case 'Backspace': {\n                const text = this.getText();\n                if (!text) {\n                    const { option, onDelete } = this.props;\n                    if (onDelete) {\n                        onDelete(option.id, true);\n                    }\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n            case 'Enter': {\n                const { option, onFocusNext } = this.props;\n                if (option && onFocusNext) {\n                    onFocusNext(option.id);\n                }\n\n                event.preventDefault();\n                return false;\n            }\n            case 'ArrowUp': {\n                const selection = window.getSelection();\n                if (!selection) break;\n                if (!selection.isCollapsed) break;\n\n                const firstChild = node.childNodes && node.childNodes.length > 0 ? node.childNodes[0] : null;\n\n                if (!firstChild || (selection.anchorNode === firstChild && !selection.anchorOffset)) {\n                    const { option, onFocusPrev } = this.props;\n                    if (onFocusPrev) {\n                        onFocusPrev(option.id);\n                    }\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n            case 'ArrowDown': {\n                const selection = window.getSelection();\n                if (!selection) break;\n                if (!selection.isCollapsed) break;\n\n                const lastChild =\n                    node.childNodes && node.childNodes.length > 0 ? node.childNodes[node.childNodes.length - 1] : null;\n\n                if (!lastChild || (selection.anchorNode === lastChild && selection.anchorOffset === lastChild.length)) {\n                    const { option, onFocusNext } = this.props;\n                    if (onFocusNext) {\n                        onFocusNext(option.id);\n                    }\n\n                    event.preventDefault();\n                    return false;\n                }\n\n                break;\n            }\n        }\n\n        if (isSpecial || isNavigational) {\n            return true;\n        }\n\n        if (length >= maxLength && !hasSelection) {\n            event.preventDefault();\n            return false;\n        }\n\n        return true;\n    };\n\n    handlePaste = event => {\n        event.preventDefault();\n\n        const node = this.optionTextRef.current;\n        const maxLength = node.dataset.maxLength;\n\n        const selection = window.getSelection();\n        const selectionString = selection ? selection.toString() : '';\n\n        const innerText = this.getText();\n        if (innerText.length - selection.length >= maxLength) return;\n\n        let pasteText = event.clipboardData.getData('text/plain');\n        if (!pasteText) return;\n\n        pasteText = pasteText.replace('\\r\\n', '\\n').replace('\\n', ' ');\n\n        if (innerText.length - selectionString.length + pasteText.length > maxLength) {\n            pasteText = pasteText.substr(0, maxLength - innerText.length + selectionString.length);\n        }\n        document.execCommand('insertHTML', false, pasteText);\n    };\n\n    render() {\n        const { classes, t } = this.props;\n        const { remainLength } = this.state;\n\n        return (\n            <div className='create-poll-option'>\n                <div\n                    ref={this.optionTextRef}\n                    id='create-poll-option-text'\n                    contentEditable\n                    suppressContentEditableWarning\n                    placeholder={t('Option')}\n                    data-length={POLL_OPTION_LENGTH}\n                    data-max-length={POLL_OPTION_MAX_LENGTH}\n                    onInput={this.handleInput}\n                    onKeyDown={this.handleKeyDown}\n                    onPaste={this.handlePaste}\n                />\n                <div className='create-poll-option-delete-button'>\n                    <IconButton className={classes.iconButton} onClick={this.handleDelete}>\n                        <CloseIcon fontSize='small' />\n                    </IconButton>\n                </div>\n                <div className={classNames('create-poll-option-bottom-border', { [classes.borderColor]: true })} />\n                {remainLength <= POLL_OPTION_LENGTH - POLL_OPTION_HINT_LENGTH && (\n                    <Typography\n                        align='center'\n                        className={classes.counterRoot}\n                        color={remainLength >= 0 ? 'textSecondary' : 'error'}\n                        variant='subtitle1'>\n                        {remainLength}\n                    </Typography>\n                )}\n            </div>\n        );\n    }\n}\n\nCreatePollOption.propTypes = {\n    option: PropTypes.object.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onFocusPrev: PropTypes.func.isRequired,\n    onFocusNext: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withStyles(styles),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(CreatePollOption);\n"]},"metadata":{},"sourceType":"module"}