{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _iframeResizer = require('iframe-resizer');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *\n * inject script to facilitate iframe resizing\n * https://github.com/davidjbradshaw/iframe-resizer\n *\n */\n\n\nvar IframeResizer = function (_React$Component) {\n  (0, _inherits3.default)(IframeResizer, _React$Component);\n\n  function IframeResizer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, IframeResizer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IframeResizer.__proto__ || (0, _getPrototypeOf2.default)(IframeResizer)).call.apply(_ref, [this].concat(args))), _this), _this.updateIframe = function (props) {\n      // has src - no injected content\n      if (props.src) return; // do we have content to inject (content or children)\n\n      var content = props.content || props.children;\n      if (!content) return; // get frame to inject into\n\n      var frame = _this.refs.frame;\n      if (!frame) return; // verify frame document access\n      // Due to browser security, this will fail with the following error\n      //   Uncaught DOMException: Failed to read the 'contentDocument' property from 'HTMLIFrameElement':\n      //   Blocked a frame with origin \"http://<hostname>\" from accessing a cross-origin frame.\n      // resolve this by loading documents from the same domain name,\n      // or injecting HTML `content` vs. loading via `src`\n\n      var doc = frame.contentDocument;\n      if (!doc) return; // replace iframe document content\n\n      if (typeof content === 'string') {\n        // assume this is a HTML block\n        //   we could send this in via REACT dangerously set HTML\n        //   but we are in an iframe anyway, already a red-headed step-child.\n        doc.open();\n        doc.write(content);\n        doc.close();\n      } else {\n        // assume this is a REACT component\n        doc.open();\n        doc.write('<div id=\"iframe-root\"></div>');\n        doc.close();\n\n        _reactDom2.default.render(content, doc.getElementById('iframe-root'));\n      }\n    }, _this.injectIframeResizerUrl = function () {\n      if (!_this.props.iframeResizerUrl) return;\n      var frame = _this.refs.frame;\n      if (!frame) return; // verify frame document access\n      // Due to browser security, this will fail with the following error\n      //   Uncaught DOMException: Failed to read the 'contentDocument' property from 'HTMLIFrameElement':\n      //   Blocked a frame with origin \"http://<hostname>\" from accessing a cross-origin frame.\n      // resolve this by loading documents from the same domain name,\n      // or injecting HTML `content` vs. loading via `src`\n\n      var doc = frame.contentDocument;\n      if (!doc) return; // where can we insert into? (fail into whatever we can find)\n\n      var injectTarget = null;\n      ['head', 'HEAD', 'body', 'BODY', 'div', 'DIV'].forEach(function (tagName) {\n        if (injectTarget) return;\n        var found = doc.getElementsByTagName(tagName);\n        if (!(found && found.length)) return;\n        injectTarget = found[0];\n      });\n\n      if (!injectTarget) {\n        console.error('Unable to inject iframe resizer script');\n        return;\n      }\n\n      var resizerScriptElement = document.createElement('script');\n      resizerScriptElement.type = 'text/javascript';\n      resizerScriptElement.src = _this.props.iframeResizerUrl;\n      injectTarget.appendChild(resizerScriptElement);\n    }, _this.onLoad = function () {\n      _this.injectIframeResizerUrl(); // DISABLED because it's causing a loading loop :(\n      // if (this.props.onIframeLoaded) this.props.onIframeLoaded();\n\n    }, _this.resizeIframe = function (props) {\n      var frame = _this.refs.frame;\n      if (!frame) return;\n\n      if (props.iframeResizerEnable) {\n        (0, _iframeResizer.iframeResizer)(props.iframeResizerOptions, frame);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(IframeResizer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // can't update until we have a mounted iframe\n      this.updateIframe(this.props);\n      this.resizeIframe(this.props);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // React will remove the iframe, however we need to manually\n      // call iframe-resizer to stop its listeners\n      var iframeResizer = this.refs.frame.iFrameResizer;\n      iframeResizer && iframeResizer.removeListeners();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      // can replace content if we got new props\n      this.updateIframe(nextProps);\n      this.resizeIframe(nextProps);\n    } // inject the iframe resizer \"content window\" script\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          src = _props.src,\n          id = _props.id,\n          frameBorder = _props.frameBorder,\n          className = _props.className,\n          style = _props.style;\n      return _react2.default.createElement('iframe', {\n        ref: 'frame',\n        src: src,\n        id: id,\n        frameBorder: frameBorder,\n        className: className,\n        style: style,\n        onLoad: this.onLoad\n      });\n    }\n  }]);\n  return IframeResizer;\n}(_react2.default.Component);\n\nIframeResizer.propTypes = {\n  // iframe content/document\n  // option 1. content of HTML to load in the iframe\n  content: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),\n  // option 2. src to a URL to load in the iframe\n  src: _propTypes2.default.string,\n  // iframe-resizer controls and helpers\n  iframeResizerEnable: _propTypes2.default.bool,\n  iframeResizerOptions: _propTypes2.default.object,\n  iframeResizerUrl: _propTypes2.default.oneOfType([_propTypes2.default.string, // URL to inject\n  _propTypes2.default.bool] // false = disable inject\n  ),\n  // misc props to pass through to iframe\n  id: _propTypes2.default.string,\n  frameBorder: _propTypes2.default.number,\n  className: _propTypes2.default.string,\n  style: _propTypes2.default.object // optional extra callback when iframe is loaded\n  // onIframeLoaded: PropTypes.func,\n\n};\nIframeResizer.defaultProps = {\n  // resize iframe\n  iframeResizerEnable: true,\n  iframeResizerOptions: {// log: true,\n    // autoResize: true,\n    // checkOrigin: false,\n    // resizeFrom: 'parent',\n    // heightCalculationMethod: 'max',\n    // initCallback: () => { console.log('ready!'); },\n    // resizedCallback: () => { console.log('resized!'); },\n  },\n  iframeResizerUrl: 'https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.8/iframeResizer.contentWindow.min.js',\n  // misc props to pass through to iframe\n  frameBorder: 0,\n  style: {\n    width: '100%',\n    minHeight: 20\n  }\n};\nexports.default = IframeResizer;","map":null,"metadata":{},"sourceType":"script"}