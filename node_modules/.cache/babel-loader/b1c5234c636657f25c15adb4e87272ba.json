{"ast":null,"code":"import _defineProperty from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/me-admin/Downloads/telegram-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/me-admin/Downloads/telegram-app/src/Components/ColumnLeft/Search/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChatControl from '../../Tile/ChatControl';\nimport TopChat from '../../Tile/TopChat';\nimport RecentlyFoundChat from '../../Tile/RecentlyFoundChat';\nimport FoundPublicChat from '../../Tile/FoundPublicChat';\nimport FoundMessage from '../../Tile/FoundMessage';\nimport SearchCaption from './SearchCaption';\nimport { loadChatsContent, loadUsersContent } from '../../../Utils/File';\nimport { filterDuplicateMessages } from '../../../Utils/Message';\nimport { getCyrillicInput, getLatinInput } from '../../../Utils/Language';\nimport { orderCompare } from '../../../Utils/Common';\nimport { USERNAME_LENGTH_MIN } from '../../../Constants';\nimport ChatStore from '../../../Stores/ChatStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport UserStore from '../../../Stores/UserStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './Search.css';\n\nconst styles = theme => ({\n  closeSearchIconButton: {\n    margin: '8px 12px 8px 0'\n  },\n  listItem: {\n    padding: 0\n  },\n  search: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n  }\n});\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.concatSearchResults = results => {\n      const arr = [];\n      const map = new Map();\n\n      for (let i = 0; i < results.length; i++) {\n        let result = results[i] && results[i].chat_ids;\n\n        if (result) {\n          for (let j = 0; j < result.length; j++) {\n            if (!map.has(result[j])) {\n              map.set(result[j], result[j]);\n              arr.push(result[j]);\n            }\n          }\n        }\n      }\n\n      arr.sort((a, b) => {\n        return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n      });\n      return arr;\n    };\n\n    this.searchText = async text => {\n      this.sessionId = new Date();\n      this.text = text;\n      const sessionId = this.sessionId;\n      let store = null;\n      const chatId = this.props.chatId;\n      const savedMessages = this.state.savedMessages;\n\n      if (!chatId) {\n        const promises = [];\n        const localPromise = TdLibController.send({\n          '@type': 'searchChats',\n          query: text,\n          limit: 100\n        });\n        promises.push(localPromise);\n        const latinText = getLatinInput(text);\n\n        if (latinText && latinText !== text) {\n          const latinLocalPromise = TdLibController.send({\n            '@type': 'searchChats',\n            query: latinText,\n            limit: 100\n          });\n          promises.push(latinLocalPromise);\n        }\n\n        const cyrillicText = getCyrillicInput(text);\n\n        if (cyrillicText && cyrillicText !== text) {\n          const cyrillicLocalPromise = TdLibController.send({\n            '@type': 'searchChats',\n            query: cyrillicText,\n            limit: 100\n          });\n          promises.push(cyrillicLocalPromise);\n        }\n\n        const results = await Promise.all(promises.map(x => x.catch(e => null)));\n        const local = this.concatSearchResults(results);\n\n        if (sessionId !== this.sessionId) {\n          return;\n        }\n\n        if (savedMessages) {\n          const t = this.props.t;\n          const searchText = text.toUpperCase();\n          const savedMessagesStrings = ['SAVED MESSAGES', t('SavedMessages').toUpperCase()];\n\n          if (savedMessagesStrings.some(el => el.includes(searchText)) || latinText && savedMessagesStrings.some(el => el.includes(latinText.toUpperCase()))) {\n            local.splice(0, 0, savedMessages.id);\n          }\n        }\n\n        this.setState({\n          top: null,\n          recentlyFound: null,\n          local: local\n        });\n        store = FileStore.getStore();\n        loadChatsContent(store, local);\n        let trimmedText = text.trim();\n        trimmedText = trimmedText.startsWith('@') ? trimmedText.substr(1) : trimmedText;\n\n        if (trimmedText.length >= USERNAME_LENGTH_MIN) {\n          const globalPromises = [];\n          const globalPromise = TdLibController.send({\n            '@type': 'searchPublicChats',\n            query: trimmedText\n          });\n          globalPromises.push(globalPromise);\n\n          if (latinText) {\n            let latinTrimmedText = latinText.trim();\n            latinTrimmedText = latinTrimmedText.startsWith('@') ? latinTrimmedText.substr(1) : latinTrimmedText;\n\n            if (latinTrimmedText.length >= USERNAME_LENGTH_MIN && latinTrimmedText !== trimmedText) {\n              const globalLatinPromise = TdLibController.send({\n                '@type': 'searchPublicChats',\n                query: latinTrimmedText\n              });\n              globalPromises.push(globalLatinPromise);\n            }\n          }\n\n          const globalResults = await Promise.all(globalPromises.map(x => x.catch(e => null)));\n          const global = this.concatSearchResults(globalResults);\n\n          if (sessionId !== this.sessionId) {\n            return;\n          }\n\n          this.setState({\n            global\n          });\n          store = FileStore.getStore();\n          loadChatsContent(store, global);\n        } else {\n          this.setState({\n            global: null\n          });\n        }\n      }\n\n      let messages = [];\n\n      if (chatId) {\n        messages = await TdLibController.send({\n          '@type': 'searchChatMessages',\n          chat_id: chatId,\n          query: text,\n          sender_user_id: 0,\n          from_message_id: 0,\n          offset: 0,\n          limit: 50,\n          filter: null\n        });\n      } else {\n        messages = await TdLibController.send({\n          '@type': 'searchMessages',\n          query: text,\n          offset_date: 0,\n          offset_chat_id: 0,\n          offset_message_id: 0,\n          limit: 50\n        });\n      }\n\n      MessageStore.setItems(messages.messages);\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      this.setState({\n        messages\n      });\n      const chats = new Map();\n      const users = new Map();\n\n      for (let i = 0; i < messages.messages.length; i++) {\n        chats.set(messages.messages[i].chat_id, messages.messages[i].chat_id);\n\n        if (messages.messages[i].sender_user_id) {\n          users.set(messages.messages[i].sender_user_id, messages.messages[i].sender_user_id);\n        }\n      }\n\n      store = FileStore.getStore();\n      loadChatsContent(store, [...chats.keys()]);\n      loadUsersContent(store, [...users.keys()]);\n    };\n\n    this.loadContent = async () => {\n      const chatId = this.props.chatId;\n\n      if (chatId) {\n        this.setState({\n          top: null,\n          recentlyFound: null,\n          local: null,\n          global: null,\n          messages: null\n        });\n        return;\n      }\n\n      const topPromise = TdLibController.send({\n        '@type': 'getTopChats',\n        category: {\n          '@type': 'topChatCategoryUsers'\n        },\n        limit: 30\n      }).catch(() => {\n        return {\n          '@type': 'chats',\n          chat_ids: []\n        };\n      });\n      const recentlyFoundPromise = TdLibController.send({\n        '@type': 'searchChats',\n        query: '',\n        limit: 100\n      }).catch(() => {\n        return {\n          '@type': 'chats',\n          chat_ids: []\n        };\n      });\n      const savedMessagesPromise = TdLibController.send({\n        '@type': 'createPrivateChat',\n        user_id: UserStore.getMyId(),\n        force: true\n      }).catch(error => {});\n\n      const _ref = await Promise.all([topPromise, recentlyFoundPromise, savedMessagesPromise]),\n            _ref2 = _slicedToArray(_ref, 3),\n            top = _ref2[0],\n            recentlyFound = _ref2[1],\n            savedMessages = _ref2[2];\n\n      this.setState({\n        top,\n        recentlyFound,\n        savedMessages,\n        local: null,\n        global: null,\n        messages: null\n      });\n      const store = FileStore.getStore();\n      loadChatsContent(store, top.chat_ids);\n      loadChatsContent(store, recentlyFound.chat_ids);\n    };\n\n    this.handleRecentlyFound = async () => {\n      const chats = await TdLibController.send({\n        '@type': 'getChats',\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 20\n      });\n\n      for (let i = chats.chat_ids.length - 1; i >= 0; i--) {\n        TdLibController.send({\n          '@type': 'addRecentlyFoundChat',\n          chat_id: chats.chat_ids[i]\n        });\n      }\n    };\n\n    this.handleClearRecentlyFound = event => {\n      event.stopPropagation();\n      TdLibController.send({\n        '@type': 'clearRecentlyFoundChats'\n      });\n      this.setState({\n        recentlyFound: null\n      });\n    };\n\n    this.handleSelectMessage = (chatId, messageId, addToRecent, keepOpen) => {\n      const onSelectMessage = this.props.onSelectMessage;\n\n      if (addToRecent) {\n        TdLibController.send({\n          '@type': 'addRecentlyFoundChat',\n          chat_id: chatId\n        });\n      }\n\n      onSelectMessage(chatId, messageId, keepOpen);\n    };\n\n    this.handleScroll = () => {\n      const list = this.listRef.current;\n\n      if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n        this.onLoadPrevious();\n      }\n    };\n\n    this.getOffset = messages => {\n      const length = messages ? messages.messages.length : 0;\n      const offsetDate = length > 0 ? messages.messages[length - 1].date : 0;\n      const offsetChatId = length > 0 ? messages.messages[length - 1].chat_id : 0;\n      const offsetMessageId = length > 0 ? messages.messages[length - 1].id : 0;\n      return {\n        offset_date: offsetDate,\n        offset_chat_id: offsetChatId,\n        offset_message_id: offsetMessageId\n      };\n    };\n\n    this.concatMessages = (messages, result) => {\n      if (!result) return messages;\n      if (!result.messages.length) return messages;\n      if (!messages) return result;\n      if (!messages.messages.length) return result;\n      return {\n        total_count: result.total_count,\n        messages: messages.messages.concat(result.messages)\n      };\n    };\n\n    this.onLoadPrevious = async () => {\n      if (this.loading) return;\n      const chatId = this.props.chatId;\n      const sessionId = this.sessionId;\n      const messages = this.state.messages;\n      const offset = this.getOffset(messages);\n      this.loading = true;\n      let result = [];\n\n      if (chatId) {\n        result = await TdLibController.send({\n          '@type': 'searchChatMessages',\n          chat_id: chatId,\n          query: this.text,\n          sender_user_id: 0,\n          from_message_id: offset.offset_message_id,\n          limit: 50,\n          filter: null\n        });\n      } else {\n        result = await TdLibController.send(_objectSpread({\n          '@type': 'searchMessages',\n          query: this.text\n        }, offset, {\n          limit: 50\n        }));\n      }\n\n      this.loading = false;\n      filterDuplicateMessages(result, messages ? messages.messages : []);\n      MessageStore.setItems(result.messages);\n\n      if (sessionId !== this.sessionId) {\n        return;\n      }\n\n      this.setState({\n        messages: this.concatMessages(messages, result)\n      });\n      const chats = new Map();\n      const users = new Map();\n\n      for (let i = 0; i < result.messages.length; i++) {\n        chats.set(result.messages[i].chat_id, result.messages[i].chat_id);\n\n        if (result.messages[i].sender_user_id) {\n          users.set(result.messages[i].sender_user_id, result.messages[i].sender_user_id);\n        }\n      }\n\n      const store = FileStore.getStore();\n      loadChatsContent(store, [...chats.keys()]);\n      loadUsersContent(store, [...users.keys()]);\n    };\n\n    this.handleTopChatsScroll = event => {\n      event.stopPropagation();\n    };\n\n    this.handleClose = () => {\n      const onClose = this.props.onClose;\n      onClose();\n    };\n\n    this.listRef = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const text = this.props.text;\n    this.searchOrLoadContent(text);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const text = this.props.text;\n\n    if (prevProps.text !== text) {\n      this.searchOrLoadContent(text);\n    }\n  }\n\n  searchOrLoadContent(text) {\n    const trimmedText = text ? text.trim() : '';\n\n    if (!trimmedText) {\n      this.loadContent();\n    } else {\n      this.searchText(trimmedText);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          chatId = _this$props.chatId;\n    const _this$state = this.state,\n          top = _this$state.top,\n          recentlyFound = _this$state.recentlyFound,\n          local = _this$state.local,\n          global = _this$state.global,\n          messages = _this$state.messages;\n    const chat = ChatStore.get(chatId);\n    const topChats = top && top.chat_ids ? top.chat_ids.map(x => React.createElement(TopChat, {\n      key: x,\n      chatId: x,\n      onSelect: () => this.handleSelectMessage(x, null, false, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    })) : [];\n    const recentlyFoundChats = recentlyFound && recentlyFound.chat_ids ? recentlyFound.chat_ids.map(x => React.createElement(RecentlyFoundChat, {\n      key: x,\n      chatId: x,\n      onClick: () => this.handleSelectMessage(x, null, true, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    })) : [];\n    const localChats = local ? local.map(x => React.createElement(RecentlyFoundChat, {\n      key: x,\n      chatId: x,\n      onClick: () => this.handleSelectMessage(x, null, true, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    })) : [];\n    const globalChats = global ? global.map(x => React.createElement(FoundPublicChat, {\n      key: x,\n      chatId: x,\n      onClick: () => this.handleSelectMessage(x, null, true, true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    })) : [];\n    const globalMessages = messages && messages.messages ? messages.messages.map(x => React.createElement(FoundMessage, {\n      key: \"\".concat(x.chat_id, \"_\").concat(x.id),\n      chatId: x.chat_id,\n      messageId: x.id,\n      chatSearch: Boolean(chatId),\n      onClick: () => this.handleSelectMessage(x.chat_id, x.id, false, true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    })) : [];\n    let messagesCaption = 'No messages found';\n\n    if (messages && messages.total_count) {\n      messagesCaption = messages.total_count === 1 ? 'Found 1 message' : \"Found \".concat(messages.total_count, \" messages\");\n    }\n\n    return React.createElement(\"div\", {\n      ref: this.listRef,\n      className: classNames(classes.search, 'search'),\n      onScroll: this.handleScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, chat && React.createElement(\"div\", {\n      className: \"search-chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(SearchCaption, {\n      caption: \"Search messages in\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search-chat-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"search-chat-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(ChatControl, {\n      chatId: chatId,\n      showStatus: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      className: classes.closeSearchIconButton,\n      \"aria-label\": \"Search\",\n      onMouseDown: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    })))), topChats.length > 0 && React.createElement(\"div\", {\n      className: \"search-top-chats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(SearchCaption, {\n      caption: \"People\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search-top-chats-list\",\n      onScroll: this.handleTopChatsScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"search-top-chats-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), topChats, React.createElement(\"div\", {\n      className: \"search-top-chats-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }))), recentlyFoundChats.length > 0 && React.createElement(\"div\", {\n      className: \"search-recently-found-chats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(SearchCaption, {\n      caption: \"Recent\",\n      command: \"Clear\",\n      onClick: this.handleClearRecentlyFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }), recentlyFoundChats), localChats.length > 0 && React.createElement(\"div\", {\n      className: \"search-local-chats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, React.createElement(SearchCaption, {\n      caption: \"Chats and contacts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }), localChats), globalChats.length > 0 && React.createElement(\"div\", {\n      className: \"search-global-chats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(SearchCaption, {\n      caption: \"Global search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }), globalChats), messages && React.createElement(\"div\", {\n      className: \"search-global-chats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(SearchCaption, {\n      caption: messagesCaption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), globalMessages));\n  }\n\n}\n\nSearch.propTypes = {\n  chatId: PropTypes.number,\n  text: PropTypes.string,\n  onSelectMessage: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};\nconst enhance = compose(withStyles(styles, {\n  withTheme: true\n}), withTranslation());\nexport default enhance(Search);","map":{"version":3,"sources":["/home/me-admin/Downloads/telegram-app/src/Components/ColumnLeft/Search/Search.js"],"names":["React","PropTypes","classNames","compose","withTranslation","withStyles","CloseIcon","IconButton","ChatControl","TopChat","RecentlyFoundChat","FoundPublicChat","FoundMessage","SearchCaption","loadChatsContent","loadUsersContent","filterDuplicateMessages","getCyrillicInput","getLatinInput","orderCompare","USERNAME_LENGTH_MIN","ChatStore","FileStore","MessageStore","UserStore","TdLibController","styles","theme","closeSearchIconButton","margin","listItem","padding","search","background","palette","type","default","Search","Component","constructor","props","concatSearchResults","results","arr","map","Map","i","length","result","chat_ids","j","has","set","push","sort","a","b","get","order","searchText","text","sessionId","Date","store","chatId","savedMessages","state","promises","localPromise","send","query","limit","latinText","latinLocalPromise","cyrillicText","cyrillicLocalPromise","Promise","all","x","catch","e","local","t","toUpperCase","savedMessagesStrings","some","el","includes","splice","id","setState","top","recentlyFound","getStore","trimmedText","trim","startsWith","substr","globalPromises","globalPromise","latinTrimmedText","globalLatinPromise","globalResults","global","messages","chat_id","sender_user_id","from_message_id","offset","filter","offset_date","offset_chat_id","offset_message_id","setItems","chats","users","keys","loadContent","topPromise","category","recentlyFoundPromise","savedMessagesPromise","user_id","getMyId","force","error","handleRecentlyFound","offset_order","handleClearRecentlyFound","event","stopPropagation","handleSelectMessage","messageId","addToRecent","keepOpen","onSelectMessage","handleScroll","list","listRef","current","scrollTop","offsetHeight","scrollHeight","onLoadPrevious","getOffset","offsetDate","date","offsetChatId","offsetMessageId","concatMessages","total_count","concat","loading","handleTopChatsScroll","handleClose","onClose","createRef","componentDidMount","searchOrLoadContent","componentDidUpdate","prevProps","prevState","snapshot","render","classes","chat","topChats","recentlyFoundChats","localChats","globalChats","globalMessages","Boolean","messagesCaption","propTypes","number","string","func","isRequired","enhance","withTheme"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport { withTranslation } from 'react-i18next';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChatControl from '../../Tile/ChatControl';\nimport TopChat from '../../Tile/TopChat';\nimport RecentlyFoundChat from '../../Tile/RecentlyFoundChat';\nimport FoundPublicChat from '../../Tile/FoundPublicChat';\nimport FoundMessage from '../../Tile/FoundMessage';\nimport SearchCaption from './SearchCaption';\nimport { loadChatsContent, loadUsersContent } from '../../../Utils/File';\nimport { filterDuplicateMessages } from '../../../Utils/Message';\nimport { getCyrillicInput, getLatinInput } from '../../../Utils/Language';\nimport { orderCompare } from '../../../Utils/Common';\nimport { USERNAME_LENGTH_MIN } from '../../../Constants';\nimport ChatStore from '../../../Stores/ChatStore';\nimport FileStore from '../../../Stores/FileStore';\nimport MessageStore from '../../../Stores/MessageStore';\nimport UserStore from '../../../Stores/UserStore';\nimport TdLibController from '../../../Controllers/TdLibController';\nimport './Search.css';\n\nconst styles = theme => ({\n    closeSearchIconButton: {\n        margin: '8px 12px 8px 0'\n    },\n    listItem: {\n        padding: 0\n    },\n    search: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF'\n    }\n});\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.listRef = React.createRef();\n        this.state = {};\n    }\n\n    componentDidMount() {\n        const { text } = this.props;\n\n        this.searchOrLoadContent(text);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { text } = this.props;\n\n        if (prevProps.text !== text) {\n            this.searchOrLoadContent(text);\n        }\n    }\n\n    searchOrLoadContent(text) {\n        const trimmedText = text ? text.trim() : '';\n\n        if (!trimmedText) {\n            this.loadContent();\n        } else {\n            this.searchText(trimmedText);\n        }\n    }\n\n    concatSearchResults = results => {\n        const arr = [];\n        const map = new Map();\n\n        for (let i = 0; i < results.length; i++) {\n            let result = results[i] && results[i].chat_ids;\n            if (result) {\n                for (let j = 0; j < result.length; j++) {\n                    if (!map.has(result[j])) {\n                        map.set(result[j], result[j]);\n                        arr.push(result[j]);\n                    }\n                }\n            }\n        }\n\n        arr.sort((a, b) => {\n            return orderCompare(ChatStore.get(b).order, ChatStore.get(a).order);\n        });\n\n        return arr;\n    };\n\n    searchText = async text => {\n        this.sessionId = new Date();\n        this.text = text;\n        const sessionId = this.sessionId;\n        let store = null;\n\n        const { chatId } = this.props;\n        const { savedMessages } = this.state;\n\n        if (!chatId) {\n            const promises = [];\n            const localPromise = TdLibController.send({\n                '@type': 'searchChats',\n                query: text,\n                limit: 100\n            });\n            promises.push(localPromise);\n\n            const latinText = getLatinInput(text);\n            if (latinText && latinText !== text) {\n                const latinLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: latinText,\n                    limit: 100\n                });\n                promises.push(latinLocalPromise);\n            }\n\n            const cyrillicText = getCyrillicInput(text);\n            if (cyrillicText && cyrillicText !== text) {\n                const cyrillicLocalPromise = TdLibController.send({\n                    '@type': 'searchChats',\n                    query: cyrillicText,\n                    limit: 100\n                });\n                promises.push(cyrillicLocalPromise);\n            }\n\n            const results = await Promise.all(promises.map(x => x.catch(e => null)));\n            const local = this.concatSearchResults(results);\n\n            if (sessionId !== this.sessionId) {\n                return;\n            }\n\n            if (savedMessages) {\n                const { t } = this.props;\n\n                const searchText = text.toUpperCase();\n                const savedMessagesStrings = ['SAVED MESSAGES', t('SavedMessages').toUpperCase()];\n\n                if (\n                    savedMessagesStrings.some(el => el.includes(searchText)) ||\n                    (latinText && savedMessagesStrings.some(el => el.includes(latinText.toUpperCase())))\n                ) {\n                    local.splice(0, 0, savedMessages.id);\n                }\n            }\n\n            this.setState({\n                top: null,\n                recentlyFound: null,\n                local: local\n            });\n\n            store = FileStore.getStore();\n            loadChatsContent(store, local);\n\n            let trimmedText = text.trim();\n            trimmedText = trimmedText.startsWith('@') ? trimmedText.substr(1) : trimmedText;\n            if (trimmedText.length >= USERNAME_LENGTH_MIN) {\n                const globalPromises = [];\n\n                const globalPromise = TdLibController.send({\n                    '@type': 'searchPublicChats',\n                    query: trimmedText\n                });\n                globalPromises.push(globalPromise);\n\n                if (latinText) {\n                    let latinTrimmedText = latinText.trim();\n                    latinTrimmedText = latinTrimmedText.startsWith('@') ? latinTrimmedText.substr(1) : latinTrimmedText;\n                    if (latinTrimmedText.length >= USERNAME_LENGTH_MIN && latinTrimmedText !== trimmedText) {\n                        const globalLatinPromise = TdLibController.send({\n                            '@type': 'searchPublicChats',\n                            query: latinTrimmedText\n                        });\n                        globalPromises.push(globalLatinPromise);\n                    }\n                }\n\n                const globalResults = await Promise.all(globalPromises.map(x => x.catch(e => null)));\n                const global = this.concatSearchResults(globalResults);\n\n                if (sessionId !== this.sessionId) {\n                    return;\n                }\n\n                this.setState({\n                    global\n                });\n\n                store = FileStore.getStore();\n                loadChatsContent(store, global);\n            } else {\n                this.setState({\n                    global: null\n                });\n            }\n        }\n\n        let messages = [];\n        if (chatId) {\n            messages = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: text,\n                sender_user_id: 0,\n                from_message_id: 0,\n                offset: 0,\n                limit: 50,\n                filter: null\n            });\n        } else {\n            messages = await TdLibController.send({\n                '@type': 'searchMessages',\n                query: text,\n                offset_date: 0,\n                offset_chat_id: 0,\n                offset_message_id: 0,\n                limit: 50\n            });\n        }\n\n        MessageStore.setItems(messages.messages);\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        this.setState({\n            messages\n        });\n\n        const chats = new Map();\n        const users = new Map();\n        for (let i = 0; i < messages.messages.length; i++) {\n            chats.set(messages.messages[i].chat_id, messages.messages[i].chat_id);\n            if (messages.messages[i].sender_user_id) {\n                users.set(messages.messages[i].sender_user_id, messages.messages[i].sender_user_id);\n            }\n        }\n\n        store = FileStore.getStore();\n        loadChatsContent(store, [...chats.keys()]);\n        loadUsersContent(store, [...users.keys()]);\n    };\n\n    loadContent = async () => {\n        const { chatId } = this.props;\n        if (chatId) {\n            this.setState({\n                top: null,\n                recentlyFound: null,\n                local: null,\n                global: null,\n                messages: null\n            });\n\n            return;\n        }\n\n        const topPromise = TdLibController.send({\n            '@type': 'getTopChats',\n            category: { '@type': 'topChatCategoryUsers' },\n            limit: 30\n        }).catch(() => {\n            return { '@type': 'chats', chat_ids: [] };\n        });\n\n        const recentlyFoundPromise = TdLibController.send({\n            '@type': 'searchChats',\n            query: '',\n            limit: 100\n        }).catch(() => {\n            return { '@type': 'chats', chat_ids: [] };\n        });\n\n        const savedMessagesPromise = TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: UserStore.getMyId(),\n            force: true\n        }).catch(error => {});\n\n        const [top, recentlyFound, savedMessages] = await Promise.all([\n            topPromise,\n            recentlyFoundPromise,\n            savedMessagesPromise\n        ]);\n\n        this.setState({\n            top,\n            recentlyFound,\n            savedMessages,\n            local: null,\n            global: null,\n            messages: null\n        });\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, top.chat_ids);\n        loadChatsContent(store, recentlyFound.chat_ids);\n    };\n\n    handleRecentlyFound = async () => {\n        const chats = await TdLibController.send({\n            '@type': 'getChats',\n            offset_order: '9223372036854775807',\n            offset_chat_id: 0,\n            limit: 20\n        });\n\n        for (let i = chats.chat_ids.length - 1; i >= 0; i--) {\n            TdLibController.send({\n                '@type': 'addRecentlyFoundChat',\n                chat_id: chats.chat_ids[i]\n            });\n        }\n    };\n\n    handleClearRecentlyFound = event => {\n        event.stopPropagation();\n\n        TdLibController.send({\n            '@type': 'clearRecentlyFoundChats'\n        });\n\n        this.setState({ recentlyFound: null });\n    };\n\n    handleSelectMessage = (chatId, messageId, addToRecent, keepOpen) => {\n        const { onSelectMessage } = this.props;\n\n        if (addToRecent) {\n            TdLibController.send({\n                '@type': 'addRecentlyFoundChat',\n                chat_id: chatId\n            });\n        }\n\n        onSelectMessage(chatId, messageId, keepOpen);\n    };\n\n    handleScroll = () => {\n        const list = this.listRef.current;\n\n        if (list.scrollTop + list.offsetHeight === list.scrollHeight) {\n            this.onLoadPrevious();\n        }\n    };\n\n    getOffset = messages => {\n        const length = messages ? messages.messages.length : 0;\n\n        const offsetDate = length > 0 ? messages.messages[length - 1].date : 0;\n        const offsetChatId = length > 0 ? messages.messages[length - 1].chat_id : 0;\n        const offsetMessageId = length > 0 ? messages.messages[length - 1].id : 0;\n\n        return {\n            offset_date: offsetDate,\n            offset_chat_id: offsetChatId,\n            offset_message_id: offsetMessageId\n        };\n    };\n\n    concatMessages = (messages, result) => {\n        if (!result) return messages;\n        if (!result.messages.length) return messages;\n\n        if (!messages) return result;\n        if (!messages.messages.length) return result;\n\n        return {\n            total_count: result.total_count,\n            messages: messages.messages.concat(result.messages)\n        };\n    };\n\n    onLoadPrevious = async () => {\n        if (this.loading) return;\n\n        const { chatId } = this.props;\n\n        const sessionId = this.sessionId;\n\n        const { messages } = this.state;\n\n        const offset = this.getOffset(messages);\n\n        this.loading = true;\n        let result = [];\n        if (chatId) {\n            result = await TdLibController.send({\n                '@type': 'searchChatMessages',\n                chat_id: chatId,\n                query: this.text,\n                sender_user_id: 0,\n                from_message_id: offset.offset_message_id,\n                limit: 50,\n                filter: null\n            });\n        } else {\n            result = await TdLibController.send({\n                '@type': 'searchMessages',\n                query: this.text,\n                ...offset,\n                limit: 50\n            });\n        }\n        this.loading = false;\n\n        filterDuplicateMessages(result, messages ? messages.messages : []);\n        MessageStore.setItems(result.messages);\n\n        if (sessionId !== this.sessionId) {\n            return;\n        }\n\n        this.setState({\n            messages: this.concatMessages(messages, result)\n        });\n\n        const chats = new Map();\n        const users = new Map();\n        for (let i = 0; i < result.messages.length; i++) {\n            chats.set(result.messages[i].chat_id, result.messages[i].chat_id);\n            if (result.messages[i].sender_user_id) {\n                users.set(result.messages[i].sender_user_id, result.messages[i].sender_user_id);\n            }\n        }\n\n        const store = FileStore.getStore();\n        loadChatsContent(store, [...chats.keys()]);\n        loadUsersContent(store, [...users.keys()]);\n    };\n\n    handleTopChatsScroll = event => {\n        event.stopPropagation();\n    };\n\n    handleClose = () => {\n        const { onClose } = this.props;\n\n        onClose();\n    };\n\n    render() {\n        const { classes, chatId } = this.props;\n        const { top, recentlyFound, local, global, messages } = this.state;\n\n        const chat = ChatStore.get(chatId);\n\n        const topChats =\n            top && top.chat_ids\n                ? top.chat_ids.map(x => (\n                      <TopChat key={x} chatId={x} onSelect={() => this.handleSelectMessage(x, null, false, false)} />\n                  ))\n                : [];\n\n        const recentlyFoundChats =\n            recentlyFound && recentlyFound.chat_ids\n                ? recentlyFound.chat_ids.map(x => (\n                      <RecentlyFoundChat\n                          key={x}\n                          chatId={x}\n                          onClick={() => this.handleSelectMessage(x, null, true, false)}\n                      />\n                  ))\n                : [];\n\n        const localChats = local\n            ? local.map(x => (\n                  <RecentlyFoundChat\n                      key={x}\n                      chatId={x}\n                      onClick={() => this.handleSelectMessage(x, null, true, false)}\n                  />\n              ))\n            : [];\n\n        const globalChats = global\n            ? global.map(x => (\n                  <FoundPublicChat key={x} chatId={x} onClick={() => this.handleSelectMessage(x, null, true, true)} />\n              ))\n            : [];\n\n        const globalMessages =\n            messages && messages.messages\n                ? messages.messages.map(x => (\n                      <FoundMessage\n                          key={`${x.chat_id}_${x.id}`}\n                          chatId={x.chat_id}\n                          messageId={x.id}\n                          chatSearch={Boolean(chatId)}\n                          onClick={() => this.handleSelectMessage(x.chat_id, x.id, false, true)}\n                      />\n                  ))\n                : [];\n\n        let messagesCaption = 'No messages found';\n        if (messages && messages.total_count) {\n            messagesCaption = messages.total_count === 1 ? 'Found 1 message' : `Found ${messages.total_count} messages`;\n        }\n\n        return (\n            <div ref={this.listRef} className={classNames(classes.search, 'search')} onScroll={this.handleScroll}>\n                {chat && (\n                    <div className='search-chat'>\n                        <SearchCaption caption='Search messages in' />\n                        <div className='search-chat-wrapper'>\n                            <div className='search-chat-control'>\n                                <ChatControl chatId={chatId} showStatus={false} />\n                            </div>\n                            <IconButton\n                                className={classes.closeSearchIconButton}\n                                aria-label='Search'\n                                onMouseDown={this.handleClose}>\n                                <CloseIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                )}\n                {topChats.length > 0 && (\n                    <div className='search-top-chats'>\n                        <SearchCaption caption='People' />\n                        <div className='search-top-chats-list' onScroll={this.handleTopChatsScroll}>\n                            <div className='search-top-chats-placeholder' />\n                            {topChats}\n                            <div className='search-top-chats-placeholder' />\n                        </div>\n                    </div>\n                )}\n                {recentlyFoundChats.length > 0 && (\n                    <div className='search-recently-found-chats'>\n                        <SearchCaption caption='Recent' command='Clear' onClick={this.handleClearRecentlyFound} />\n                        {recentlyFoundChats}\n                    </div>\n                )}\n                {localChats.length > 0 && (\n                    <div className='search-local-chats'>\n                        <SearchCaption caption='Chats and contacts' />\n                        {localChats}\n                    </div>\n                )}\n                {globalChats.length > 0 && (\n                    <div className='search-global-chats'>\n                        <SearchCaption caption='Global search' />\n                        {globalChats}\n                    </div>\n                )}\n                {messages && (\n                    <div className='search-global-chats'>\n                        <SearchCaption caption={messagesCaption} />\n                        {globalMessages}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nSearch.propTypes = {\n    chatId: PropTypes.number,\n    text: PropTypes.string,\n    onSelectMessage: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(Search);\n"]},"metadata":{},"sourceType":"module"}