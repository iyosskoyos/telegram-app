{"ast":null,"code":"var _jsxFileName = \"/home/chilly/Projects/Capacitor/telegram-app/src/Components/MainPage.js\";\n\n/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport withLanguage from '../Language';\nimport withTheme from '../Theme';\nimport withSnackbarNotifications from '../Notifications';\nimport ForwardDialog from './Popup/ForwardDialog';\nimport ChatInfo from './ColumnRight/ChatInfo';\nimport Dialogs from './ColumnLeft/Dialogs';\nimport DialogDetails from './ColumnMiddle/DialogDetails';\nimport Footer from './Footer';\nimport InstantViewer from './InstantView/InstantViewer';\nimport MediaViewer from './Viewer/MediaViewer';\nimport ProfileMediaViewer from './Viewer/ProfileMediaViewer';\nimport { highlightMessage } from '../Actions/Client';\nimport ApplicationStore from '../Stores/ApplicationStore';\nimport ChatStore from '../Stores/ChatStore';\nimport InstantViewStore from '../Stores/InstantViewStore';\nimport UserStore from '../Stores/UserStore';\nimport TdLibController from '../Controllers/TdLibController';\nimport '../TelegramApp.css';\n\nconst styles = theme => ({\n  page: {\n    background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n    color: theme.palette.text.primary\n  }\n});\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClientUpdateInstantViewContent = update => {\n      const content = update.content;\n      this.setState({\n        instantViewContent: content\n      });\n    };\n\n    this.onClientUpdateOpenChat = update => {\n      const chatId = update.chatId,\n            messageId = update.messageId,\n            popup = update.popup;\n      this.handleSelectChat(chatId, messageId, popup);\n    };\n\n    this.onClientUpdateOpenUser = update => {\n      const userId = update.userId,\n            popup = update.popup;\n      this.handleSelectUser(userId, popup);\n    };\n\n    this.onClientUpdateChatDetailsVisibility = update => {\n      this.setState({\n        isChatDetailsVisible: ApplicationStore.isChatDetailsVisible\n      });\n    };\n\n    this.onClientUpdateMediaViewerContent = update => {\n      this.setState({\n        mediaViewerContent: ApplicationStore.mediaViewerContent\n      });\n    };\n\n    this.onClientUpdateProfileMediaViewerContent = update => {\n      this.setState({\n        profileMediaViewerContent: ApplicationStore.profileMediaViewerContent\n      });\n    };\n\n    this.onClientUpdateForward = update => {\n      const info = update.info;\n      this.setState({\n        forwardInfo: info\n      });\n    };\n\n    this.handleSelectChat = (chatId, messageId = null, popup = false) => {\n      const currentChatId = ApplicationStore.getChatId();\n      const currentDialogChatId = ApplicationStore.dialogChatId;\n      const currentMessageId = ApplicationStore.getMessageId();\n\n      if (popup) {\n        if (currentDialogChatId !== chatId) {\n          TdLibController.clientUpdate({\n            '@type': 'clientUpdateDialogChatId',\n            chatId\n          });\n        }\n\n        return;\n      }\n\n      if (currentChatId === chatId && messageId && currentMessageId === messageId) {\n        this.dialogDetailsRef.current.scrollToMessage();\n\n        if (messageId) {\n          highlightMessage(chatId, messageId);\n        }\n      } else if (currentChatId === chatId && !messageId) {\n        this.dialogDetailsRef.current.scrollToStart();\n      } else {\n        TdLibController.setChatId(chatId, messageId);\n      }\n    };\n\n    this.handleSelectUser = async (userId, popup) => {\n      if (!userId) return;\n      const chat = await TdLibController.send({\n        '@type': 'createPrivateChat',\n        user_id: userId,\n        force: true\n      });\n      this.handleSelectChat(chat.id, null, popup);\n    };\n\n    this.dialogDetailsRef = React.createRef();\n    this.state = {\n      isChatDetailsVisible: ApplicationStore.isChatDetailsVisible,\n      mediaViewerContent: ApplicationStore.mediaViewerContent,\n      profileMediaViewerContent: ApplicationStore.profileMediaViewerContent,\n      forwardInfo: null,\n      instantViewContent: null\n    };\n    /*this.store = localForage.createInstance({\n                name: 'tdlib'\n            });*/\n    //this.initDB();\n  }\n\n  componentDidMount() {\n    UserStore.on('clientUpdateOpenUser', this.onClientUpdateOpenUser);\n    ChatStore.on('clientUpdateOpenChat', this.onClientUpdateOpenChat);\n    ApplicationStore.on('clientUpdateChatDetailsVisibility', this.onClientUpdateChatDetailsVisibility);\n    ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    ApplicationStore.on('clientUpdateForward', this.onClientUpdateForward);\n    InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n  }\n\n  componentWillUnmount() {\n    UserStore.removeListener('clientUpdateOpenUser', this.onClientUpdateOpenUser);\n    ChatStore.removeListener('clientUpdateOpenChat', this.onClientUpdateOpenChat);\n    ApplicationStore.removeListener('clientUpdateChatDetailsVisibility', this.onClientUpdateChatDetailsVisibility);\n    ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n    ApplicationStore.removeListener('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n    ApplicationStore.removeListener('clientUpdateForward', this.onClientUpdateForward);\n    InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          instantViewContent = _this$state.instantViewContent,\n          isChatDetailsVisible = _this$state.isChatDetailsVisible,\n          mediaViewerContent = _this$state.mediaViewerContent,\n          profileMediaViewerContent = _this$state.profileMediaViewerContent,\n          forwardInfo = _this$state.forwardInfo;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classNames(classes.page, 'page', {\n        'page-third-column': isChatDetailsVisible\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Dialogs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(DialogDetails, {\n      ref: this.dialogDetailsRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), isChatDetailsVisible && React.createElement(ChatInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), instantViewContent && React.createElement(InstantViewer, Object.assign({}, instantViewContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })), mediaViewerContent && React.createElement(MediaViewer, Object.assign({}, mediaViewerContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), profileMediaViewerContent && React.createElement(ProfileMediaViewer, Object.assign({}, profileMediaViewerContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), forwardInfo && React.createElement(ForwardDialog, Object.assign({}, forwardInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })));\n  }\n\n}\n\nMainPage.propTypes = {};\nconst enhance = compose(withLanguage, withTheme, withStyles(styles), withSnackbarNotifications);\nexport default enhance(MainPage);","map":{"version":3,"sources":["/home/chilly/Projects/Capacitor/telegram-app/src/Components/MainPage.js"],"names":["React","classNames","compose","withStyles","withLanguage","withTheme","withSnackbarNotifications","ForwardDialog","ChatInfo","Dialogs","DialogDetails","Footer","InstantViewer","MediaViewer","ProfileMediaViewer","highlightMessage","ApplicationStore","ChatStore","InstantViewStore","UserStore","TdLibController","styles","theme","page","background","palette","type","default","color","text","primary","MainPage","Component","constructor","props","onClientUpdateInstantViewContent","update","content","setState","instantViewContent","onClientUpdateOpenChat","chatId","messageId","popup","handleSelectChat","onClientUpdateOpenUser","userId","handleSelectUser","onClientUpdateChatDetailsVisibility","isChatDetailsVisible","onClientUpdateMediaViewerContent","mediaViewerContent","onClientUpdateProfileMediaViewerContent","profileMediaViewerContent","onClientUpdateForward","info","forwardInfo","currentChatId","getChatId","currentDialogChatId","dialogChatId","currentMessageId","getMessageId","clientUpdate","dialogDetailsRef","current","scrollToMessage","scrollToStart","setChatId","chat","send","user_id","force","id","createRef","state","componentDidMount","on","componentWillUnmount","removeListener","render","classes","propTypes","enhance"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport withLanguage from '../Language';\nimport withTheme from '../Theme';\nimport withSnackbarNotifications from '../Notifications';\nimport ForwardDialog from './Popup/ForwardDialog';\nimport ChatInfo from './ColumnRight/ChatInfo';\nimport Dialogs from './ColumnLeft/Dialogs';\nimport DialogDetails from './ColumnMiddle/DialogDetails';\nimport Footer from './Footer';\nimport InstantViewer from './InstantView/InstantViewer';\nimport MediaViewer from './Viewer/MediaViewer';\nimport ProfileMediaViewer from './Viewer/ProfileMediaViewer';\nimport { highlightMessage } from '../Actions/Client';\nimport ApplicationStore from '../Stores/ApplicationStore';\nimport ChatStore from '../Stores/ChatStore';\nimport InstantViewStore from '../Stores/InstantViewStore';\nimport UserStore from '../Stores/UserStore';\nimport TdLibController from '../Controllers/TdLibController';\nimport '../TelegramApp.css';\n\nconst styles = theme => ({\n    page: {\n        background: theme.palette.type === 'dark' ? theme.palette.background.default : '#FFFFFF',\n        color: theme.palette.text.primary\n    }\n});\n\nclass MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.dialogDetailsRef = React.createRef();\n\n        this.state = {\n            isChatDetailsVisible: ApplicationStore.isChatDetailsVisible,\n            mediaViewerContent: ApplicationStore.mediaViewerContent,\n            profileMediaViewerContent: ApplicationStore.profileMediaViewerContent,\n            forwardInfo: null,\n            instantViewContent: null\n        };\n\n        /*this.store = localForage.createInstance({\n                    name: 'tdlib'\n                });*/\n\n        //this.initDB();\n    }\n\n    componentDidMount() {\n        UserStore.on('clientUpdateOpenUser', this.onClientUpdateOpenUser);\n        ChatStore.on('clientUpdateOpenChat', this.onClientUpdateOpenChat);\n\n        ApplicationStore.on('clientUpdateChatDetailsVisibility', this.onClientUpdateChatDetailsVisibility);\n        ApplicationStore.on('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.on('clientUpdateProfileMediaViewerContent', this.onClientUpdateProfileMediaViewerContent);\n        ApplicationStore.on('clientUpdateForward', this.onClientUpdateForward);\n        InstantViewStore.on('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener('clientUpdateOpenUser', this.onClientUpdateOpenUser);\n        ChatStore.removeListener('clientUpdateOpenChat', this.onClientUpdateOpenChat);\n\n        ApplicationStore.removeListener('clientUpdateChatDetailsVisibility', this.onClientUpdateChatDetailsVisibility);\n        ApplicationStore.removeListener('clientUpdateMediaViewerContent', this.onClientUpdateMediaViewerContent);\n        ApplicationStore.removeListener(\n            'clientUpdateProfileMediaViewerContent',\n            this.onClientUpdateProfileMediaViewerContent\n        );\n        ApplicationStore.removeListener('clientUpdateForward', this.onClientUpdateForward);\n        InstantViewStore.removeListener('clientUpdateInstantViewContent', this.onClientUpdateInstantViewContent);\n    }\n\n    onClientUpdateInstantViewContent = update => {\n        const { content } = update;\n\n        this.setState({\n            instantViewContent: content\n        });\n    };\n\n    onClientUpdateOpenChat = update => {\n        const { chatId, messageId, popup } = update;\n\n        this.handleSelectChat(chatId, messageId, popup);\n    };\n\n    onClientUpdateOpenUser = update => {\n        const { userId, popup } = update;\n\n        this.handleSelectUser(userId, popup);\n    };\n\n    onClientUpdateChatDetailsVisibility = update => {\n        this.setState({\n            isChatDetailsVisible: ApplicationStore.isChatDetailsVisible\n        });\n    };\n\n    onClientUpdateMediaViewerContent = update => {\n        this.setState({ mediaViewerContent: ApplicationStore.mediaViewerContent });\n    };\n\n    onClientUpdateProfileMediaViewerContent = update => {\n        this.setState({\n            profileMediaViewerContent: ApplicationStore.profileMediaViewerContent\n        });\n    };\n\n    onClientUpdateForward = update => {\n        const { info } = update;\n\n        this.setState({ forwardInfo: info });\n    };\n\n    handleSelectChat = (chatId, messageId = null, popup = false) => {\n        const currentChatId = ApplicationStore.getChatId();\n        const currentDialogChatId = ApplicationStore.dialogChatId;\n        const currentMessageId = ApplicationStore.getMessageId();\n\n        if (popup) {\n            if (currentDialogChatId !== chatId) {\n                TdLibController.clientUpdate({\n                    '@type': 'clientUpdateDialogChatId',\n                    chatId\n                });\n            }\n\n            return;\n        }\n\n        if (currentChatId === chatId && messageId && currentMessageId === messageId) {\n            this.dialogDetailsRef.current.scrollToMessage();\n            if (messageId) {\n                highlightMessage(chatId, messageId);\n            }\n        } else if (currentChatId === chatId && !messageId) {\n            this.dialogDetailsRef.current.scrollToStart();\n        } else {\n            TdLibController.setChatId(chatId, messageId);\n        }\n    };\n\n    handleSelectUser = async (userId, popup) => {\n        if (!userId) return;\n\n        const chat = await TdLibController.send({\n            '@type': 'createPrivateChat',\n            user_id: userId,\n            force: true\n        });\n\n        this.handleSelectChat(chat.id, null, popup);\n    };\n\n    render() {\n        const { classes } = this.props;\n        const {\n            instantViewContent,\n            isChatDetailsVisible,\n            mediaViewerContent,\n            profileMediaViewerContent,\n            forwardInfo\n        } = this.state;\n\n        return (\n            <>\n                <div className={classNames(classes.page, 'page', { 'page-third-column': isChatDetailsVisible })}>\n                    <Dialogs />\n                    <DialogDetails ref={this.dialogDetailsRef} />\n                    {isChatDetailsVisible && <ChatInfo />}\n                </div>\n                <Footer />\n                {instantViewContent && <InstantViewer {...instantViewContent} />}\n                {mediaViewerContent && <MediaViewer {...mediaViewerContent} />}\n                {profileMediaViewerContent && <ProfileMediaViewer {...profileMediaViewerContent} />}\n                {forwardInfo && <ForwardDialog {...forwardInfo} />}\n            </>\n        );\n    }\n}\n\nMainPage.propTypes = {};\n\nconst enhance = compose(\n    withLanguage,\n    withTheme,\n    withStyles(styles),\n    withSnackbarNotifications\n);\n\nexport default enhance(MainPage);\n"]},"metadata":{},"sourceType":"module"}